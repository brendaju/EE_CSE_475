
CapTouch.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b5dc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000184  0800b764  0800b764  0001b764  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b8e8  0800b8e8  00020098  2**0
                  CONTENTS
  4 .ARM          00000008  0800b8e8  0800b8e8  0001b8e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b8f0  0800b8f0  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b8f0  0800b8f0  0001b8f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b8f4  0800b8f4  0001b8f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  0800b8f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020098  2**0
                  CONTENTS
 10 .bss          00000cd8  20000098  20000098  00020098  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000d70  20000d70  00020098  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   000261ec  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004ae6  00000000  00000000  000462b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000019f8  00000000  00000000  0004ada0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001868  00000000  00000000  0004c798  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026105  00000000  00000000  0004e000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002265a  00000000  00000000  00074105  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d6d3d  00000000  00000000  0009675f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0016d49c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000071a8  00000000  00000000  0016d4f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000098 	.word	0x20000098
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800b74c 	.word	0x0800b74c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000009c 	.word	0x2000009c
 80001c4:	0800b74c 	.word	0x0800b74c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <Wheel>:
#define Red(c) ((uint8_t)((c >> 16) & 0xFF))
#define Green(c) ((uint8_t)((c >> 8) & 0xFF))
#define Blue(c) ((uint8_t)(c & 0xFF))


uint32_t Wheel(uint8_t WheelPos) {
 80004c0:	b480      	push	{r7}
 80004c2:	b083      	sub	sp, #12
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	4603      	mov	r3, r0
 80004c8:	71fb      	strb	r3, [r7, #7]
  WheelPos = 255 - WheelPos;
 80004ca:	79fb      	ldrb	r3, [r7, #7]
 80004cc:	43db      	mvns	r3, r3
 80004ce:	71fb      	strb	r3, [r7, #7]
  if(WheelPos < 85) {
 80004d0:	79fb      	ldrb	r3, [r7, #7]
 80004d2:	2b54      	cmp	r3, #84	; 0x54
 80004d4:	d80b      	bhi.n	80004ee <Wheel+0x2e>
    return newColor(255 - WheelPos * 3, 0, WheelPos * 3);
 80004d6:	79fb      	ldrb	r3, [r7, #7]
 80004d8:	461a      	mov	r2, r3
 80004da:	009b      	lsls	r3, r3, #2
 80004dc:	1ad3      	subs	r3, r2, r3
 80004de:	33ff      	adds	r3, #255	; 0xff
 80004e0:	0419      	lsls	r1, r3, #16
 80004e2:	79fa      	ldrb	r2, [r7, #7]
 80004e4:	4613      	mov	r3, r2
 80004e6:	005b      	lsls	r3, r3, #1
 80004e8:	4413      	add	r3, r2
 80004ea:	430b      	orrs	r3, r1
 80004ec:	e020      	b.n	8000530 <Wheel+0x70>
  }
  if(WheelPos < 170) {
 80004ee:	79fb      	ldrb	r3, [r7, #7]
 80004f0:	2ba9      	cmp	r3, #169	; 0xa9
 80004f2:	d80e      	bhi.n	8000512 <Wheel+0x52>
    WheelPos -= 85;
 80004f4:	79fb      	ldrb	r3, [r7, #7]
 80004f6:	3b55      	subs	r3, #85	; 0x55
 80004f8:	71fb      	strb	r3, [r7, #7]
    return newColor(0, WheelPos * 3, 255 - WheelPos * 3);
 80004fa:	79fa      	ldrb	r2, [r7, #7]
 80004fc:	4613      	mov	r3, r2
 80004fe:	005b      	lsls	r3, r3, #1
 8000500:	4413      	add	r3, r2
 8000502:	021a      	lsls	r2, r3, #8
 8000504:	79fb      	ldrb	r3, [r7, #7]
 8000506:	4619      	mov	r1, r3
 8000508:	009b      	lsls	r3, r3, #2
 800050a:	1acb      	subs	r3, r1, r3
 800050c:	33ff      	adds	r3, #255	; 0xff
 800050e:	4313      	orrs	r3, r2
 8000510:	e00e      	b.n	8000530 <Wheel+0x70>
  }
  WheelPos -= 170;
 8000512:	79fb      	ldrb	r3, [r7, #7]
 8000514:	3356      	adds	r3, #86	; 0x56
 8000516:	71fb      	strb	r3, [r7, #7]
  return newColor(WheelPos * 3, 255 - WheelPos * 3, 0);
 8000518:	79fa      	ldrb	r2, [r7, #7]
 800051a:	4613      	mov	r3, r2
 800051c:	005b      	lsls	r3, r3, #1
 800051e:	4413      	add	r3, r2
 8000520:	041a      	lsls	r2, r3, #16
 8000522:	79fb      	ldrb	r3, [r7, #7]
 8000524:	4619      	mov	r1, r3
 8000526:	009b      	lsls	r3, r3, #2
 8000528:	1acb      	subs	r3, r1, r3
 800052a:	33ff      	adds	r3, #255	; 0xff
 800052c:	021b      	lsls	r3, r3, #8
 800052e:	4313      	orrs	r3, r2
}
 8000530:	4618      	mov	r0, r3
 8000532:	370c      	adds	r7, #12
 8000534:	46bd      	mov	sp, r7
 8000536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053a:	4770      	bx	lr

0800053c <visRainbow>:




void visRainbow(uint8_t *frameBuffer, uint32_t frameBufferSize, uint32_t effectLength)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b086      	sub	sp, #24
 8000540:	af00      	add	r7, sp, #0
 8000542:	60f8      	str	r0, [r7, #12]
 8000544:	60b9      	str	r1, [r7, #8]
 8000546:	607a      	str	r2, [r7, #4]
	uint32_t i;
	static uint8_t x = 0;

	x += 1;
 8000548:	4b22      	ldr	r3, [pc, #136]	; (80005d4 <visRainbow+0x98>)
 800054a:	781b      	ldrb	r3, [r3, #0]
 800054c:	3301      	adds	r3, #1
 800054e:	b2da      	uxtb	r2, r3
 8000550:	4b20      	ldr	r3, [pc, #128]	; (80005d4 <visRainbow+0x98>)
 8000552:	701a      	strb	r2, [r3, #0]

	if(x == 256*5)
		x = 0;

	for( i = 0; i < frameBufferSize / 3; i++)
 8000554:	2300      	movs	r3, #0
 8000556:	617b      	str	r3, [r7, #20]
 8000558:	e02f      	b.n	80005ba <visRainbow+0x7e>
	{
		uint32_t color = Wheel(((i * 256) / effectLength + x) & 0xFF);
 800055a:	697b      	ldr	r3, [r7, #20]
 800055c:	021a      	lsls	r2, r3, #8
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	fbb2 f3f3 	udiv	r3, r2, r3
 8000564:	b2da      	uxtb	r2, r3
 8000566:	4b1b      	ldr	r3, [pc, #108]	; (80005d4 <visRainbow+0x98>)
 8000568:	781b      	ldrb	r3, [r3, #0]
 800056a:	4413      	add	r3, r2
 800056c:	b2db      	uxtb	r3, r3
 800056e:	4618      	mov	r0, r3
 8000570:	f7ff ffa6 	bl	80004c0 <Wheel>
 8000574:	6138      	str	r0, [r7, #16]

		frameBuffer[i*3 + 0] = color & 0xFF;
 8000576:	697a      	ldr	r2, [r7, #20]
 8000578:	4613      	mov	r3, r2
 800057a:	005b      	lsls	r3, r3, #1
 800057c:	4413      	add	r3, r2
 800057e:	68fa      	ldr	r2, [r7, #12]
 8000580:	4413      	add	r3, r2
 8000582:	693a      	ldr	r2, [r7, #16]
 8000584:	b2d2      	uxtb	r2, r2
 8000586:	701a      	strb	r2, [r3, #0]
		frameBuffer[i*3 + 1] = color >> 8 & 0xFF;
 8000588:	693b      	ldr	r3, [r7, #16]
 800058a:	0a19      	lsrs	r1, r3, #8
 800058c:	697a      	ldr	r2, [r7, #20]
 800058e:	4613      	mov	r3, r2
 8000590:	005b      	lsls	r3, r3, #1
 8000592:	4413      	add	r3, r2
 8000594:	3301      	adds	r3, #1
 8000596:	68fa      	ldr	r2, [r7, #12]
 8000598:	4413      	add	r3, r2
 800059a:	b2ca      	uxtb	r2, r1
 800059c:	701a      	strb	r2, [r3, #0]
		frameBuffer[i*3 + 2] = color >> 16 & 0xFF;
 800059e:	693b      	ldr	r3, [r7, #16]
 80005a0:	0c19      	lsrs	r1, r3, #16
 80005a2:	697a      	ldr	r2, [r7, #20]
 80005a4:	4613      	mov	r3, r2
 80005a6:	005b      	lsls	r3, r3, #1
 80005a8:	4413      	add	r3, r2
 80005aa:	3302      	adds	r3, #2
 80005ac:	68fa      	ldr	r2, [r7, #12]
 80005ae:	4413      	add	r3, r2
 80005b0:	b2ca      	uxtb	r2, r1
 80005b2:	701a      	strb	r2, [r3, #0]
	for( i = 0; i < frameBufferSize / 3; i++)
 80005b4:	697b      	ldr	r3, [r7, #20]
 80005b6:	3301      	adds	r3, #1
 80005b8:	617b      	str	r3, [r7, #20]
 80005ba:	68bb      	ldr	r3, [r7, #8]
 80005bc:	4a06      	ldr	r2, [pc, #24]	; (80005d8 <visRainbow+0x9c>)
 80005be:	fba2 2303 	umull	r2, r3, r2, r3
 80005c2:	085b      	lsrs	r3, r3, #1
 80005c4:	697a      	ldr	r2, [r7, #20]
 80005c6:	429a      	cmp	r2, r3
 80005c8:	d3c7      	bcc.n	800055a <visRainbow+0x1e>
	}
}
 80005ca:	bf00      	nop
 80005cc:	bf00      	nop
 80005ce:	3718      	adds	r7, #24
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	200000ba 	.word	0x200000ba
 80005d8:	aaaaaaab 	.word	0xaaaaaaab

080005dc <visInit>:




void visInit()
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0

	// 4 parallel output LED strips needs 18% overhead during TX
	// 8 parallel output LED strips overhead is 8us of 30us period which is 28% - see the debug output PD15/13

	// If you need more parallel LED strips, increase the WS2812_BUFFER_COUNT value
	for( i = 0; i < WS2812_BUFFER_COUNT; i++)
 80005e2:	2300      	movs	r3, #0
 80005e4:	71fb      	strb	r3, [r7, #7]
 80005e6:	e02b      	b.n	8000640 <visInit+0x64>
	{

		// Set output channel/pin, GPIO_PIN_0 = 0, for GPIO_PIN_5 = 5 - this has to correspond to WS2812B_PINS
		ws2812b.item[i].channel = 1;
 80005e8:	79fb      	ldrb	r3, [r7, #7]
 80005ea:	4a1a      	ldr	r2, [pc, #104]	; (8000654 <visInit+0x78>)
 80005ec:	011b      	lsls	r3, r3, #4
 80005ee:	4413      	add	r3, r2
 80005f0:	330c      	adds	r3, #12
 80005f2:	2201      	movs	r2, #1
 80005f4:	701a      	strb	r2, [r3, #0]

		// Every even output line has second frameBuffer2 with different effect
		if(i % 2 == 0)
 80005f6:	79fb      	ldrb	r3, [r7, #7]
 80005f8:	f003 0301 	and.w	r3, r3, #1
 80005fc:	b2db      	uxtb	r3, r3
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d10e      	bne.n	8000620 <visInit+0x44>
		{
			// Your RGB framebuffer
			ws2812b.item[i].frameBufferPointer = frameBuffer;
 8000602:	79fb      	ldrb	r3, [r7, #7]
 8000604:	4a13      	ldr	r2, [pc, #76]	; (8000654 <visInit+0x78>)
 8000606:	011b      	lsls	r3, r3, #4
 8000608:	4413      	add	r3, r2
 800060a:	4a13      	ldr	r2, [pc, #76]	; (8000658 <visInit+0x7c>)
 800060c:	601a      	str	r2, [r3, #0]
			// RAW size of framebuffer
			ws2812b.item[i].frameBufferSize = sizeof(frameBuffer);
 800060e:	79fb      	ldrb	r3, [r7, #7]
 8000610:	4a10      	ldr	r2, [pc, #64]	; (8000654 <visInit+0x78>)
 8000612:	011b      	lsls	r3, r3, #4
 8000614:	4413      	add	r3, r2
 8000616:	3304      	adds	r3, #4
 8000618:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800061c:	601a      	str	r2, [r3, #0]
 800061e:	e00c      	b.n	800063a <visInit+0x5e>
		} else {
			ws2812b.item[i].frameBufferPointer = frameBuffer2;
 8000620:	79fb      	ldrb	r3, [r7, #7]
 8000622:	4a0c      	ldr	r2, [pc, #48]	; (8000654 <visInit+0x78>)
 8000624:	011b      	lsls	r3, r3, #4
 8000626:	4413      	add	r3, r2
 8000628:	4a0c      	ldr	r2, [pc, #48]	; (800065c <visInit+0x80>)
 800062a:	601a      	str	r2, [r3, #0]
			ws2812b.item[i].frameBufferSize = sizeof(frameBuffer2);
 800062c:	79fb      	ldrb	r3, [r7, #7]
 800062e:	4a09      	ldr	r2, [pc, #36]	; (8000654 <visInit+0x78>)
 8000630:	011b      	lsls	r3, r3, #4
 8000632:	4413      	add	r3, r2
 8000634:	3304      	adds	r3, #4
 8000636:	223c      	movs	r2, #60	; 0x3c
 8000638:	601a      	str	r2, [r3, #0]
	for( i = 0; i < WS2812_BUFFER_COUNT; i++)
 800063a:	79fb      	ldrb	r3, [r7, #7]
 800063c:	3301      	adds	r3, #1
 800063e:	71fb      	strb	r3, [r7, #7]
 8000640:	79fb      	ldrb	r3, [r7, #7]
 8000642:	2b00      	cmp	r3, #0
 8000644:	d0d0      	beq.n	80005e8 <visInit+0xc>
		}

	}


	ws2812b_init();
 8000646:	f001 fd23 	bl	8002090 <ws2812b_init>
}
 800064a:	bf00      	nop
 800064c:	3708      	adds	r7, #8
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	20000110 	.word	0x20000110
 8000658:	2000012c 	.word	0x2000012c
 800065c:	200000d4 	.word	0x200000d4

08000660 <visHandle2>:
uint16_t red = 0;
uint16_t green = 0;

// Animate effects
void visHandle2(uint16_t *input)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b084      	sub	sp, #16
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
	static uint32_t timestamp;
	static uint32_t currentTime;
	currentTime = HAL_GetTick();
 8000668:	f001 fdc2 	bl	80021f0 <HAL_GetTick>
 800066c:	4603      	mov	r3, r0
 800066e:	4a39      	ldr	r2, [pc, #228]	; (8000754 <visHandle2+0xf4>)
 8000670:	6013      	str	r3, [r2, #0]
	if(currentTime - timestamp > 10)
 8000672:	4b38      	ldr	r3, [pc, #224]	; (8000754 <visHandle2+0xf4>)
 8000674:	681a      	ldr	r2, [r3, #0]
 8000676:	4b38      	ldr	r3, [pc, #224]	; (8000758 <visHandle2+0xf8>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	1ad3      	subs	r3, r2, r3
 800067c:	2b0a      	cmp	r3, #10
 800067e:	d964      	bls.n	800074a <visHandle2+0xea>
	{
		uint32_t color = 0;
 8000680:	2300      	movs	r3, #0
 8000682:	60bb      	str	r3, [r7, #8]
		timestamp = HAL_GetTick();
 8000684:	f001 fdb4 	bl	80021f0 <HAL_GetTick>
 8000688:	4603      	mov	r3, r0
 800068a:	4a33      	ldr	r2, [pc, #204]	; (8000758 <visHandle2+0xf8>)
 800068c:	6013      	str	r3, [r2, #0]



		if (input[0] != 0) {
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	881b      	ldrh	r3, [r3, #0]
 8000692:	2b00      	cmp	r3, #0
 8000694:	d003      	beq.n	800069e <visHandle2+0x3e>
			blue = input[0];
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	881a      	ldrh	r2, [r3, #0]
 800069a:	4b30      	ldr	r3, [pc, #192]	; (800075c <visHandle2+0xfc>)
 800069c:	801a      	strh	r2, [r3, #0]
		}
		if (input[1] != 0) {
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	3302      	adds	r3, #2
 80006a2:	881b      	ldrh	r3, [r3, #0]
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d003      	beq.n	80006b0 <visHandle2+0x50>
			red = input[1];
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	885a      	ldrh	r2, [r3, #2]
 80006ac:	4b2c      	ldr	r3, [pc, #176]	; (8000760 <visHandle2+0x100>)
 80006ae:	801a      	strh	r2, [r3, #0]
				}
		if (input[2] != 0) {
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	3304      	adds	r3, #4
 80006b4:	881b      	ldrh	r3, [r3, #0]
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d003      	beq.n	80006c2 <visHandle2+0x62>
			green = input[2];
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	889a      	ldrh	r2, [r3, #4]
 80006be:	4b29      	ldr	r3, [pc, #164]	; (8000764 <visHandle2+0x104>)
 80006c0:	801a      	strh	r2, [r3, #0]
		}

		if (blue != red || blue != green) {
 80006c2:	4b26      	ldr	r3, [pc, #152]	; (800075c <visHandle2+0xfc>)
 80006c4:	881a      	ldrh	r2, [r3, #0]
 80006c6:	4b26      	ldr	r3, [pc, #152]	; (8000760 <visHandle2+0x100>)
 80006c8:	881b      	ldrh	r3, [r3, #0]
 80006ca:	429a      	cmp	r2, r3
 80006cc:	d105      	bne.n	80006da <visHandle2+0x7a>
 80006ce:	4b23      	ldr	r3, [pc, #140]	; (800075c <visHandle2+0xfc>)
 80006d0:	881a      	ldrh	r2, [r3, #0]
 80006d2:	4b24      	ldr	r3, [pc, #144]	; (8000764 <visHandle2+0x104>)
 80006d4:	881b      	ldrh	r3, [r3, #0]
 80006d6:	429a      	cmp	r2, r3
 80006d8:	d030      	beq.n	800073c <visHandle2+0xdc>
			color = newColor(blue, red, green);
 80006da:	4b20      	ldr	r3, [pc, #128]	; (800075c <visHandle2+0xfc>)
 80006dc:	881b      	ldrh	r3, [r3, #0]
 80006de:	041a      	lsls	r2, r3, #16
 80006e0:	4b1f      	ldr	r3, [pc, #124]	; (8000760 <visHandle2+0x100>)
 80006e2:	881b      	ldrh	r3, [r3, #0]
 80006e4:	021b      	lsls	r3, r3, #8
 80006e6:	4313      	orrs	r3, r2
 80006e8:	4a1e      	ldr	r2, [pc, #120]	; (8000764 <visHandle2+0x104>)
 80006ea:	8812      	ldrh	r2, [r2, #0]
 80006ec:	4313      	orrs	r3, r2
 80006ee:	60bb      	str	r3, [r7, #8]
			for(uint32_t i = 0; i < sizeof(frameBuffer) / 3; i++) {
 80006f0:	2300      	movs	r3, #0
 80006f2:	60fb      	str	r3, [r7, #12]
 80006f4:	e01e      	b.n	8000734 <visHandle2+0xd4>
				frameBuffer[i*3 + 0] = color & 0xFF;
 80006f6:	68fa      	ldr	r2, [r7, #12]
 80006f8:	4613      	mov	r3, r2
 80006fa:	005b      	lsls	r3, r3, #1
 80006fc:	4413      	add	r3, r2
 80006fe:	68ba      	ldr	r2, [r7, #8]
 8000700:	b2d1      	uxtb	r1, r2
 8000702:	4a19      	ldr	r2, [pc, #100]	; (8000768 <visHandle2+0x108>)
 8000704:	54d1      	strb	r1, [r2, r3]
				frameBuffer[i*3 + 1] = color >> 8 & 0xFF;
 8000706:	68bb      	ldr	r3, [r7, #8]
 8000708:	0a19      	lsrs	r1, r3, #8
 800070a:	68fa      	ldr	r2, [r7, #12]
 800070c:	4613      	mov	r3, r2
 800070e:	005b      	lsls	r3, r3, #1
 8000710:	4413      	add	r3, r2
 8000712:	3301      	adds	r3, #1
 8000714:	b2c9      	uxtb	r1, r1
 8000716:	4a14      	ldr	r2, [pc, #80]	; (8000768 <visHandle2+0x108>)
 8000718:	54d1      	strb	r1, [r2, r3]
				frameBuffer[i*3 + 2] = color >> 16 & 0xFF;
 800071a:	68bb      	ldr	r3, [r7, #8]
 800071c:	0c19      	lsrs	r1, r3, #16
 800071e:	68fa      	ldr	r2, [r7, #12]
 8000720:	4613      	mov	r3, r2
 8000722:	005b      	lsls	r3, r3, #1
 8000724:	4413      	add	r3, r2
 8000726:	3302      	adds	r3, #2
 8000728:	b2c9      	uxtb	r1, r1
 800072a:	4a0f      	ldr	r2, [pc, #60]	; (8000768 <visHandle2+0x108>)
 800072c:	54d1      	strb	r1, [r2, r3]
			for(uint32_t i = 0; i < sizeof(frameBuffer) / 3; i++) {
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	3301      	adds	r3, #1
 8000732:	60fb      	str	r3, [r7, #12]
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	2b77      	cmp	r3, #119	; 0x77
 8000738:	d9dd      	bls.n	80006f6 <visHandle2+0x96>
 800073a:	e006      	b.n	800074a <visHandle2+0xea>
			}
		} else {
			visRainbow(frameBuffer, sizeof(frameBuffer), 15);
 800073c:	220f      	movs	r2, #15
 800073e:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8000742:	4809      	ldr	r0, [pc, #36]	; (8000768 <visHandle2+0x108>)
 8000744:	f7ff fefa 	bl	800053c <visRainbow>
		}
		// Animate next frame, each effect into each output RGB framebuffer
		//visRainbow(frameBuffer, sizeof(frameBuffer), 15);
		//visDots(frameBuffer2, sizeof(frameBuffer2), 50, 40);
	}
}
 8000748:	e7ff      	b.n	800074a <visHandle2+0xea>
 800074a:	bf00      	nop
 800074c:	3710      	adds	r7, #16
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	200000bc 	.word	0x200000bc
 8000758:	200000c0 	.word	0x200000c0
 800075c:	200000b4 	.word	0x200000b4
 8000760:	200000b6 	.word	0x200000b6
 8000764:	200000b8 	.word	0x200000b8
 8000768:	2000012c 	.word	0x2000012c

0800076c <visHandle>:


void visHandle(uint16_t *input)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]

	if(ws2812b.transferComplete)
 8000774:	4b07      	ldr	r3, [pc, #28]	; (8000794 <visHandle+0x28>)
 8000776:	7c1b      	ldrb	r3, [r3, #16]
 8000778:	2b00      	cmp	r3, #0
 800077a:	d007      	beq.n	800078c <visHandle+0x20>
	{
		// Update your framebuffer here or swap buffers
		visHandle2(input);
 800077c:	6878      	ldr	r0, [r7, #4]
 800077e:	f7ff ff6f 	bl	8000660 <visHandle2>

		// Signal that buffer is changed and transfer new data
		ws2812b.startTransfer = 1;
 8000782:	4b04      	ldr	r3, [pc, #16]	; (8000794 <visHandle+0x28>)
 8000784:	2201      	movs	r2, #1
 8000786:	745a      	strb	r2, [r3, #17]
		ws2812b_handle();
 8000788:	f001 fc92 	bl	80020b0 <ws2812b_handle>
	}
}
 800078c:	bf00      	nop
 800078e:	3708      	adds	r7, #8
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	20000110 	.word	0x20000110

08000798 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b08a      	sub	sp, #40	; 0x28
 800079c:	af04      	add	r7, sp, #16
	uint8_t bufTouch0[2];
	uint8_t bufTouch1[2];
	uint8_t bufTouch2[2];
	uint16_t capTouch[3];
	//float val0;
	uint8_t X = 0;
 800079e:	2300      	movs	r3, #0
 80007a0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007a2:	f001 fcbf 	bl	8002124 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007a6:	f000 f86b 	bl	8000880 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007aa:	f000 fa41 	bl	8000c30 <MX_GPIO_Init>
  MX_I2C1_Init();
 80007ae:	f000 f8d1 	bl	8000954 <MX_I2C1_Init>
  MX_I2S3_Init();
 80007b2:	f000 f8fd 	bl	80009b0 <MX_I2S3_Init>
  MX_SPI1_Init();
 80007b6:	f000 f92b 	bl	8000a10 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80007ba:	f00a fbb5 	bl	800af28 <MX_USB_HOST_Init>
  MX_USART2_UART_Init();
 80007be:	f000 f9ed 	bl	8000b9c <MX_USART2_UART_Init>
  MX_DMA_Init();
 80007c2:	f000 fa15 	bl	8000bf0 <MX_DMA_Init>
  MX_TIM1_Init();
 80007c6:	f000 f959 	bl	8000a7c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  visInit();
 80007ca:	f7ff ff07 	bl	80005dc <visInit>
  MPR121_init(MPR121_ADDR0);
 80007ce:	23b4      	movs	r3, #180	; 0xb4
 80007d0:	4618      	mov	r0, r3
 80007d2:	f000 fb4d 	bl	8000e70 <MPR121_init>
  MPR121_init(MPR121_ADDR1);
 80007d6:	23b8      	movs	r3, #184	; 0xb8
 80007d8:	4618      	mov	r0, r3
 80007da:	f000 fb49 	bl	8000e70 <MPR121_init>
  MPR121_init(MPR121_ADDR2);
 80007de:	23ba      	movs	r3, #186	; 0xba
 80007e0:	4618      	mov	r0, r3
 80007e2:	f000 fb45 	bl	8000e70 <MPR121_init>
  while (1)
  {

	//bufTouch0[0] = REG_TOUCH0;
	//ret0 = HAL_I2C_Master_Transmit(&hi2c1, MPR121_ADDR0, bufTouch0, 1, HAL_MAX_DELAY);
	ret0 = HAL_I2C_Mem_Read(&hi2c1, MPR121_ADDR0, REG_TOUCH0, I2C_MEMADD_SIZE_8BIT, bufTouch0, 2, HAL_MAX_DELAY);
 80007e6:	23b4      	movs	r3, #180	; 0xb4
 80007e8:	b299      	uxth	r1, r3
 80007ea:	2300      	movs	r3, #0
 80007ec:	b29a      	uxth	r2, r3
 80007ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80007f2:	9302      	str	r3, [sp, #8]
 80007f4:	2302      	movs	r3, #2
 80007f6:	9301      	str	r3, [sp, #4]
 80007f8:	f107 0314 	add.w	r3, r7, #20
 80007fc:	9300      	str	r3, [sp, #0]
 80007fe:	2301      	movs	r3, #1
 8000800:	481e      	ldr	r0, [pc, #120]	; (800087c <main+0xe4>)
 8000802:	f004 fba5 	bl	8004f50 <HAL_I2C_Mem_Read>
 8000806:	4603      	mov	r3, r0
 8000808:	75bb      	strb	r3, [r7, #22]
	ret0 = HAL_I2C_Mem_Read(&hi2c1, MPR121_ADDR1, REG_TOUCH0, I2C_MEMADD_SIZE_8BIT, bufTouch1, 2, HAL_MAX_DELAY);
 800080a:	23b8      	movs	r3, #184	; 0xb8
 800080c:	b299      	uxth	r1, r3
 800080e:	2300      	movs	r3, #0
 8000810:	b29a      	uxth	r2, r3
 8000812:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000816:	9302      	str	r3, [sp, #8]
 8000818:	2302      	movs	r3, #2
 800081a:	9301      	str	r3, [sp, #4]
 800081c:	f107 0310 	add.w	r3, r7, #16
 8000820:	9300      	str	r3, [sp, #0]
 8000822:	2301      	movs	r3, #1
 8000824:	4815      	ldr	r0, [pc, #84]	; (800087c <main+0xe4>)
 8000826:	f004 fb93 	bl	8004f50 <HAL_I2C_Mem_Read>
 800082a:	4603      	mov	r3, r0
 800082c:	75bb      	strb	r3, [r7, #22]
	ret0 = HAL_I2C_Mem_Read(&hi2c1, MPR121_ADDR2, REG_TOUCH0, I2C_MEMADD_SIZE_8BIT, bufTouch2, 2, HAL_MAX_DELAY);
 800082e:	23ba      	movs	r3, #186	; 0xba
 8000830:	b299      	uxth	r1, r3
 8000832:	2300      	movs	r3, #0
 8000834:	b29a      	uxth	r2, r3
 8000836:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800083a:	9302      	str	r3, [sp, #8]
 800083c:	2302      	movs	r3, #2
 800083e:	9301      	str	r3, [sp, #4]
 8000840:	f107 030c 	add.w	r3, r7, #12
 8000844:	9300      	str	r3, [sp, #0]
 8000846:	2301      	movs	r3, #1
 8000848:	480c      	ldr	r0, [pc, #48]	; (800087c <main+0xe4>)
 800084a:	f004 fb81 	bl	8004f50 <HAL_I2C_Mem_Read>
 800084e:	4603      	mov	r3, r0
 8000850:	75bb      	strb	r3, [r7, #22]
 8000852:	8abb      	ldrh	r3, [r7, #20]
	memcpy(capTouch, bufTouch0, 2*sizeof(uint8_t));
 8000854:	80bb      	strh	r3, [r7, #4]
	memcpy(capTouch+1, bufTouch1, 2*sizeof(uint8_t));
 8000856:	1d3b      	adds	r3, r7, #4
 8000858:	3302      	adds	r3, #2
 800085a:	8a3a      	ldrh	r2, [r7, #16]
 800085c:	801a      	strh	r2, [r3, #0]
	memcpy(capTouch+2, bufTouch2, 2*sizeof(uint8_t));
 800085e:	1d3b      	adds	r3, r7, #4
 8000860:	3304      	adds	r3, #4
 8000862:	89ba      	ldrh	r2, [r7, #12]
 8000864:	801a      	strh	r2, [r3, #0]
	} else {

		//sprintf((char*)bufTouch0, "%u\r\n", (unsigned int)val0);
	}

	visHandle(capTouch);
 8000866:	1d3b      	adds	r3, r7, #4
 8000868:	4618      	mov	r0, r3
 800086a:	f7ff ff7f 	bl	800076c <visHandle>
	HAL_Delay(50);
 800086e:	2032      	movs	r0, #50	; 0x32
 8000870:	f001 fcca 	bl	8002208 <HAL_Delay>
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000874:	f00a fb7e 	bl	800af74 <MX_USB_HOST_Process>
	ret0 = HAL_I2C_Mem_Read(&hi2c1, MPR121_ADDR0, REG_TOUCH0, I2C_MEMADD_SIZE_8BIT, bufTouch0, 2, HAL_MAX_DELAY);
 8000878:	e7b5      	b.n	80007e6 <main+0x4e>
 800087a:	bf00      	nop
 800087c:	20000294 	.word	0x20000294

08000880 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b094      	sub	sp, #80	; 0x50
 8000884:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000886:	f107 0320 	add.w	r3, r7, #32
 800088a:	2230      	movs	r2, #48	; 0x30
 800088c:	2100      	movs	r1, #0
 800088e:	4618      	mov	r0, r3
 8000890:	f00a fe8c 	bl	800b5ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000894:	f107 030c 	add.w	r3, r7, #12
 8000898:	2200      	movs	r2, #0
 800089a:	601a      	str	r2, [r3, #0]
 800089c:	605a      	str	r2, [r3, #4]
 800089e:	609a      	str	r2, [r3, #8]
 80008a0:	60da      	str	r2, [r3, #12]
 80008a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008a4:	2300      	movs	r3, #0
 80008a6:	60bb      	str	r3, [r7, #8]
 80008a8:	4b28      	ldr	r3, [pc, #160]	; (800094c <SystemClock_Config+0xcc>)
 80008aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ac:	4a27      	ldr	r2, [pc, #156]	; (800094c <SystemClock_Config+0xcc>)
 80008ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008b2:	6413      	str	r3, [r2, #64]	; 0x40
 80008b4:	4b25      	ldr	r3, [pc, #148]	; (800094c <SystemClock_Config+0xcc>)
 80008b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008bc:	60bb      	str	r3, [r7, #8]
 80008be:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008c0:	2300      	movs	r3, #0
 80008c2:	607b      	str	r3, [r7, #4]
 80008c4:	4b22      	ldr	r3, [pc, #136]	; (8000950 <SystemClock_Config+0xd0>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	4a21      	ldr	r2, [pc, #132]	; (8000950 <SystemClock_Config+0xd0>)
 80008ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008ce:	6013      	str	r3, [r2, #0]
 80008d0:	4b1f      	ldr	r3, [pc, #124]	; (8000950 <SystemClock_Config+0xd0>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008d8:	607b      	str	r3, [r7, #4]
 80008da:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008dc:	2301      	movs	r3, #1
 80008de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008e4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008e6:	2302      	movs	r3, #2
 80008e8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008ea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80008ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80008f0:	2308      	movs	r3, #8
 80008f2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80008f4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80008f8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008fa:	2302      	movs	r3, #2
 80008fc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80008fe:	2307      	movs	r3, #7
 8000900:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000902:	f107 0320 	add.w	r3, r7, #32
 8000906:	4618      	mov	r0, r3
 8000908:	f005 fd44 	bl	8006394 <HAL_RCC_OscConfig>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000912:	f000 fbc4 	bl	800109e <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000916:	230f      	movs	r3, #15
 8000918:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800091a:	2302      	movs	r3, #2
 800091c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800091e:	2300      	movs	r3, #0
 8000920:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000922:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000926:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000928:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800092c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800092e:	f107 030c 	add.w	r3, r7, #12
 8000932:	2105      	movs	r1, #5
 8000934:	4618      	mov	r0, r3
 8000936:	f005 ffa5 	bl	8006884 <HAL_RCC_ClockConfig>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000940:	f000 fbad 	bl	800109e <Error_Handler>
  }
}
 8000944:	bf00      	nop
 8000946:	3750      	adds	r7, #80	; 0x50
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	40023800 	.word	0x40023800
 8000950:	40007000 	.word	0x40007000

08000954 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000958:	4b12      	ldr	r3, [pc, #72]	; (80009a4 <MX_I2C1_Init+0x50>)
 800095a:	4a13      	ldr	r2, [pc, #76]	; (80009a8 <MX_I2C1_Init+0x54>)
 800095c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800095e:	4b11      	ldr	r3, [pc, #68]	; (80009a4 <MX_I2C1_Init+0x50>)
 8000960:	4a12      	ldr	r2, [pc, #72]	; (80009ac <MX_I2C1_Init+0x58>)
 8000962:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000964:	4b0f      	ldr	r3, [pc, #60]	; (80009a4 <MX_I2C1_Init+0x50>)
 8000966:	2200      	movs	r2, #0
 8000968:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800096a:	4b0e      	ldr	r3, [pc, #56]	; (80009a4 <MX_I2C1_Init+0x50>)
 800096c:	2200      	movs	r2, #0
 800096e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000970:	4b0c      	ldr	r3, [pc, #48]	; (80009a4 <MX_I2C1_Init+0x50>)
 8000972:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000976:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000978:	4b0a      	ldr	r3, [pc, #40]	; (80009a4 <MX_I2C1_Init+0x50>)
 800097a:	2200      	movs	r2, #0
 800097c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800097e:	4b09      	ldr	r3, [pc, #36]	; (80009a4 <MX_I2C1_Init+0x50>)
 8000980:	2200      	movs	r2, #0
 8000982:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000984:	4b07      	ldr	r3, [pc, #28]	; (80009a4 <MX_I2C1_Init+0x50>)
 8000986:	2200      	movs	r2, #0
 8000988:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800098a:	4b06      	ldr	r3, [pc, #24]	; (80009a4 <MX_I2C1_Init+0x50>)
 800098c:	2200      	movs	r2, #0
 800098e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000990:	4804      	ldr	r0, [pc, #16]	; (80009a4 <MX_I2C1_Init+0x50>)
 8000992:	f004 f89f 	bl	8004ad4 <HAL_I2C_Init>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800099c:	f000 fb7f 	bl	800109e <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80009a0:	bf00      	nop
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	20000294 	.word	0x20000294
 80009a8:	40005400 	.word	0x40005400
 80009ac:	000186a0 	.word	0x000186a0

080009b0 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80009b4:	4b13      	ldr	r3, [pc, #76]	; (8000a04 <MX_I2S3_Init+0x54>)
 80009b6:	4a14      	ldr	r2, [pc, #80]	; (8000a08 <MX_I2S3_Init+0x58>)
 80009b8:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80009ba:	4b12      	ldr	r3, [pc, #72]	; (8000a04 <MX_I2S3_Init+0x54>)
 80009bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009c0:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80009c2:	4b10      	ldr	r3, [pc, #64]	; (8000a04 <MX_I2S3_Init+0x54>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80009c8:	4b0e      	ldr	r3, [pc, #56]	; (8000a04 <MX_I2S3_Init+0x54>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80009ce:	4b0d      	ldr	r3, [pc, #52]	; (8000a04 <MX_I2S3_Init+0x54>)
 80009d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009d4:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80009d6:	4b0b      	ldr	r3, [pc, #44]	; (8000a04 <MX_I2S3_Init+0x54>)
 80009d8:	4a0c      	ldr	r2, [pc, #48]	; (8000a0c <MX_I2S3_Init+0x5c>)
 80009da:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80009dc:	4b09      	ldr	r3, [pc, #36]	; (8000a04 <MX_I2S3_Init+0x54>)
 80009de:	2200      	movs	r2, #0
 80009e0:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80009e2:	4b08      	ldr	r3, [pc, #32]	; (8000a04 <MX_I2S3_Init+0x54>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80009e8:	4b06      	ldr	r3, [pc, #24]	; (8000a04 <MX_I2S3_Init+0x54>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80009ee:	4805      	ldr	r0, [pc, #20]	; (8000a04 <MX_I2S3_Init+0x54>)
 80009f0:	f005 f830 	bl	8005a54 <HAL_I2S_Init>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80009fa:	f000 fb50 	bl	800109e <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80009fe:	bf00      	nop
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	2000042c 	.word	0x2000042c
 8000a08:	40003c00 	.word	0x40003c00
 8000a0c:	00017700 	.word	0x00017700

08000a10 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000a14:	4b17      	ldr	r3, [pc, #92]	; (8000a74 <MX_SPI1_Init+0x64>)
 8000a16:	4a18      	ldr	r2, [pc, #96]	; (8000a78 <MX_SPI1_Init+0x68>)
 8000a18:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a1a:	4b16      	ldr	r3, [pc, #88]	; (8000a74 <MX_SPI1_Init+0x64>)
 8000a1c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a20:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a22:	4b14      	ldr	r3, [pc, #80]	; (8000a74 <MX_SPI1_Init+0x64>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a28:	4b12      	ldr	r3, [pc, #72]	; (8000a74 <MX_SPI1_Init+0x64>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a2e:	4b11      	ldr	r3, [pc, #68]	; (8000a74 <MX_SPI1_Init+0x64>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a34:	4b0f      	ldr	r3, [pc, #60]	; (8000a74 <MX_SPI1_Init+0x64>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a3a:	4b0e      	ldr	r3, [pc, #56]	; (8000a74 <MX_SPI1_Init+0x64>)
 8000a3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a40:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a42:	4b0c      	ldr	r3, [pc, #48]	; (8000a74 <MX_SPI1_Init+0x64>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a48:	4b0a      	ldr	r3, [pc, #40]	; (8000a74 <MX_SPI1_Init+0x64>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a4e:	4b09      	ldr	r3, [pc, #36]	; (8000a74 <MX_SPI1_Init+0x64>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a54:	4b07      	ldr	r3, [pc, #28]	; (8000a74 <MX_SPI1_Init+0x64>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000a5a:	4b06      	ldr	r3, [pc, #24]	; (8000a74 <MX_SPI1_Init+0x64>)
 8000a5c:	220a      	movs	r2, #10
 8000a5e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a60:	4804      	ldr	r0, [pc, #16]	; (8000a74 <MX_SPI1_Init+0x64>)
 8000a62:	f006 fa4b 	bl	8006efc <HAL_SPI_Init>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000a6c:	f000 fb17 	bl	800109e <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a70:	bf00      	nop
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	20000390 	.word	0x20000390
 8000a78:	40013000 	.word	0x40013000

08000a7c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b092      	sub	sp, #72	; 0x48
 8000a80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a82:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000a86:	2200      	movs	r2, #0
 8000a88:	601a      	str	r2, [r3, #0]
 8000a8a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a90:	2200      	movs	r2, #0
 8000a92:	601a      	str	r2, [r3, #0]
 8000a94:	605a      	str	r2, [r3, #4]
 8000a96:	609a      	str	r2, [r3, #8]
 8000a98:	60da      	str	r2, [r3, #12]
 8000a9a:	611a      	str	r2, [r3, #16]
 8000a9c:	615a      	str	r2, [r3, #20]
 8000a9e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000aa0:	1d3b      	adds	r3, r7, #4
 8000aa2:	2220      	movs	r2, #32
 8000aa4:	2100      	movs	r1, #0
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f00a fd80 	bl	800b5ac <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000aac:	4b39      	ldr	r3, [pc, #228]	; (8000b94 <MX_TIM1_Init+0x118>)
 8000aae:	4a3a      	ldr	r2, [pc, #232]	; (8000b98 <MX_TIM1_Init+0x11c>)
 8000ab0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000ab2:	4b38      	ldr	r3, [pc, #224]	; (8000b94 <MX_TIM1_Init+0x118>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ab8:	4b36      	ldr	r3, [pc, #216]	; (8000b94 <MX_TIM1_Init+0x118>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000abe:	4b35      	ldr	r3, [pc, #212]	; (8000b94 <MX_TIM1_Init+0x118>)
 8000ac0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ac4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ac6:	4b33      	ldr	r3, [pc, #204]	; (8000b94 <MX_TIM1_Init+0x118>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000acc:	4b31      	ldr	r3, [pc, #196]	; (8000b94 <MX_TIM1_Init+0x118>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ad2:	4b30      	ldr	r3, [pc, #192]	; (8000b94 <MX_TIM1_Init+0x118>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000ad8:	482e      	ldr	r0, [pc, #184]	; (8000b94 <MX_TIM1_Init+0x118>)
 8000ada:	f006 fb01 	bl	80070e0 <HAL_TIM_PWM_Init>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d001      	beq.n	8000ae8 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8000ae4:	f000 fadb 	bl	800109e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000aec:	2300      	movs	r3, #0
 8000aee:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000af0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000af4:	4619      	mov	r1, r3
 8000af6:	4827      	ldr	r0, [pc, #156]	; (8000b94 <MX_TIM1_Init+0x118>)
 8000af8:	f007 f872 	bl	8007be0 <HAL_TIMEx_MasterConfigSynchronization>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8000b02:	f000 facc 	bl	800109e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b06:	2360      	movs	r3, #96	; 0x60
 8000b08:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b12:	2300      	movs	r3, #0
 8000b14:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b16:	2300      	movs	r3, #0
 8000b18:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b26:	2200      	movs	r2, #0
 8000b28:	4619      	mov	r1, r3
 8000b2a:	481a      	ldr	r0, [pc, #104]	; (8000b94 <MX_TIM1_Init+0x118>)
 8000b2c:	f006 fcf8 	bl	8007520 <HAL_TIM_PWM_ConfigChannel>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8000b36:	f000 fab2 	bl	800109e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000b3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b3e:	2204      	movs	r2, #4
 8000b40:	4619      	mov	r1, r3
 8000b42:	4814      	ldr	r0, [pc, #80]	; (8000b94 <MX_TIM1_Init+0x118>)
 8000b44:	f006 fcec 	bl	8007520 <HAL_TIM_PWM_ConfigChannel>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8000b4e:	f000 faa6 	bl	800109e <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b52:	2300      	movs	r3, #0
 8000b54:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b56:	2300      	movs	r3, #0
 8000b58:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b62:	2300      	movs	r3, #0
 8000b64:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b66:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b6a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000b70:	1d3b      	adds	r3, r7, #4
 8000b72:	4619      	mov	r1, r3
 8000b74:	4807      	ldr	r0, [pc, #28]	; (8000b94 <MX_TIM1_Init+0x118>)
 8000b76:	f007 f8af 	bl	8007cd8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d001      	beq.n	8000b84 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8000b80:	f000 fa8d 	bl	800109e <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000b84:	4803      	ldr	r0, [pc, #12]	; (8000b94 <MX_TIM1_Init+0x118>)
 8000b86:	f000 fc25 	bl	80013d4 <HAL_TIM_MspPostInit>

}
 8000b8a:	bf00      	nop
 8000b8c:	3748      	adds	r7, #72	; 0x48
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	20000348 	.word	0x20000348
 8000b98:	40010000 	.word	0x40010000

08000b9c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ba0:	4b11      	ldr	r3, [pc, #68]	; (8000be8 <MX_USART2_UART_Init+0x4c>)
 8000ba2:	4a12      	ldr	r2, [pc, #72]	; (8000bec <MX_USART2_UART_Init+0x50>)
 8000ba4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ba6:	4b10      	ldr	r3, [pc, #64]	; (8000be8 <MX_USART2_UART_Init+0x4c>)
 8000ba8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000bae:	4b0e      	ldr	r3, [pc, #56]	; (8000be8 <MX_USART2_UART_Init+0x4c>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000bb4:	4b0c      	ldr	r3, [pc, #48]	; (8000be8 <MX_USART2_UART_Init+0x4c>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000bba:	4b0b      	ldr	r3, [pc, #44]	; (8000be8 <MX_USART2_UART_Init+0x4c>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000bc0:	4b09      	ldr	r3, [pc, #36]	; (8000be8 <MX_USART2_UART_Init+0x4c>)
 8000bc2:	220c      	movs	r2, #12
 8000bc4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bc6:	4b08      	ldr	r3, [pc, #32]	; (8000be8 <MX_USART2_UART_Init+0x4c>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bcc:	4b06      	ldr	r3, [pc, #24]	; (8000be8 <MX_USART2_UART_Init+0x4c>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bd2:	4805      	ldr	r0, [pc, #20]	; (8000be8 <MX_USART2_UART_Init+0x4c>)
 8000bd4:	f007 f8e6 	bl	8007da4 <HAL_UART_Init>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000bde:	f000 fa5e 	bl	800109e <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000be2:	bf00      	nop
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	200003e8 	.word	0x200003e8
 8000bec:	40004400 	.word	0x40004400

08000bf0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	607b      	str	r3, [r7, #4]
 8000bfa:	4b0c      	ldr	r3, [pc, #48]	; (8000c2c <MX_DMA_Init+0x3c>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfe:	4a0b      	ldr	r2, [pc, #44]	; (8000c2c <MX_DMA_Init+0x3c>)
 8000c00:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c04:	6313      	str	r3, [r2, #48]	; 0x30
 8000c06:	4b09      	ldr	r3, [pc, #36]	; (8000c2c <MX_DMA_Init+0x3c>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c0e:	607b      	str	r3, [r7, #4]
 8000c10:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8000c12:	2200      	movs	r2, #0
 8000c14:	2100      	movs	r1, #0
 8000c16:	2045      	movs	r0, #69	; 0x45
 8000c18:	f001 fbf5 	bl	8002406 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000c1c:	2045      	movs	r0, #69	; 0x45
 8000c1e:	f001 fc0e 	bl	800243e <HAL_NVIC_EnableIRQ>

}
 8000c22:	bf00      	nop
 8000c24:	3708      	adds	r7, #8
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	40023800 	.word	0x40023800

08000c30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b08c      	sub	sp, #48	; 0x30
 8000c34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c36:	f107 031c 	add.w	r3, r7, #28
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	601a      	str	r2, [r3, #0]
 8000c3e:	605a      	str	r2, [r3, #4]
 8000c40:	609a      	str	r2, [r3, #8]
 8000c42:	60da      	str	r2, [r3, #12]
 8000c44:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c46:	2300      	movs	r3, #0
 8000c48:	61bb      	str	r3, [r7, #24]
 8000c4a:	4b74      	ldr	r3, [pc, #464]	; (8000e1c <MX_GPIO_Init+0x1ec>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4e:	4a73      	ldr	r2, [pc, #460]	; (8000e1c <MX_GPIO_Init+0x1ec>)
 8000c50:	f043 0310 	orr.w	r3, r3, #16
 8000c54:	6313      	str	r3, [r2, #48]	; 0x30
 8000c56:	4b71      	ldr	r3, [pc, #452]	; (8000e1c <MX_GPIO_Init+0x1ec>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5a:	f003 0310 	and.w	r3, r3, #16
 8000c5e:	61bb      	str	r3, [r7, #24]
 8000c60:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c62:	2300      	movs	r3, #0
 8000c64:	617b      	str	r3, [r7, #20]
 8000c66:	4b6d      	ldr	r3, [pc, #436]	; (8000e1c <MX_GPIO_Init+0x1ec>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6a:	4a6c      	ldr	r2, [pc, #432]	; (8000e1c <MX_GPIO_Init+0x1ec>)
 8000c6c:	f043 0304 	orr.w	r3, r3, #4
 8000c70:	6313      	str	r3, [r2, #48]	; 0x30
 8000c72:	4b6a      	ldr	r3, [pc, #424]	; (8000e1c <MX_GPIO_Init+0x1ec>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c76:	f003 0304 	and.w	r3, r3, #4
 8000c7a:	617b      	str	r3, [r7, #20]
 8000c7c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c7e:	2300      	movs	r3, #0
 8000c80:	613b      	str	r3, [r7, #16]
 8000c82:	4b66      	ldr	r3, [pc, #408]	; (8000e1c <MX_GPIO_Init+0x1ec>)
 8000c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c86:	4a65      	ldr	r2, [pc, #404]	; (8000e1c <MX_GPIO_Init+0x1ec>)
 8000c88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c8e:	4b63      	ldr	r3, [pc, #396]	; (8000e1c <MX_GPIO_Init+0x1ec>)
 8000c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c96:	613b      	str	r3, [r7, #16]
 8000c98:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	60fb      	str	r3, [r7, #12]
 8000c9e:	4b5f      	ldr	r3, [pc, #380]	; (8000e1c <MX_GPIO_Init+0x1ec>)
 8000ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca2:	4a5e      	ldr	r2, [pc, #376]	; (8000e1c <MX_GPIO_Init+0x1ec>)
 8000ca4:	f043 0301 	orr.w	r3, r3, #1
 8000ca8:	6313      	str	r3, [r2, #48]	; 0x30
 8000caa:	4b5c      	ldr	r3, [pc, #368]	; (8000e1c <MX_GPIO_Init+0x1ec>)
 8000cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cae:	f003 0301 	and.w	r3, r3, #1
 8000cb2:	60fb      	str	r3, [r7, #12]
 8000cb4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	60bb      	str	r3, [r7, #8]
 8000cba:	4b58      	ldr	r3, [pc, #352]	; (8000e1c <MX_GPIO_Init+0x1ec>)
 8000cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cbe:	4a57      	ldr	r2, [pc, #348]	; (8000e1c <MX_GPIO_Init+0x1ec>)
 8000cc0:	f043 0302 	orr.w	r3, r3, #2
 8000cc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cc6:	4b55      	ldr	r3, [pc, #340]	; (8000e1c <MX_GPIO_Init+0x1ec>)
 8000cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cca:	f003 0302 	and.w	r3, r3, #2
 8000cce:	60bb      	str	r3, [r7, #8]
 8000cd0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	607b      	str	r3, [r7, #4]
 8000cd6:	4b51      	ldr	r3, [pc, #324]	; (8000e1c <MX_GPIO_Init+0x1ec>)
 8000cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cda:	4a50      	ldr	r2, [pc, #320]	; (8000e1c <MX_GPIO_Init+0x1ec>)
 8000cdc:	f043 0308 	orr.w	r3, r3, #8
 8000ce0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ce2:	4b4e      	ldr	r3, [pc, #312]	; (8000e1c <MX_GPIO_Init+0x1ec>)
 8000ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce6:	f003 0308 	and.w	r3, r3, #8
 8000cea:	607b      	str	r3, [r7, #4]
 8000cec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000cee:	2200      	movs	r2, #0
 8000cf0:	2108      	movs	r1, #8
 8000cf2:	484b      	ldr	r0, [pc, #300]	; (8000e20 <MX_GPIO_Init+0x1f0>)
 8000cf4:	f002 f964 	bl	8002fc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	2101      	movs	r1, #1
 8000cfc:	4849      	ldr	r0, [pc, #292]	; (8000e24 <MX_GPIO_Init+0x1f4>)
 8000cfe:	f002 f95f 	bl	8002fc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8000d02:	2200      	movs	r2, #0
 8000d04:	2102      	movs	r1, #2
 8000d06:	4847      	ldr	r0, [pc, #284]	; (8000e24 <MX_GPIO_Init+0x1f4>)
 8000d08:	f002 f95a 	bl	8002fc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000d12:	4845      	ldr	r0, [pc, #276]	; (8000e28 <MX_GPIO_Init+0x1f8>)
 8000d14:	f002 f954 	bl	8002fc0 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000d18:	2308      	movs	r3, #8
 8000d1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d20:	2300      	movs	r3, #0
 8000d22:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d24:	2300      	movs	r3, #0
 8000d26:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000d28:	f107 031c 	add.w	r3, r7, #28
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	483c      	ldr	r0, [pc, #240]	; (8000e20 <MX_GPIO_Init+0x1f0>)
 8000d30:	f001 ffaa 	bl	8002c88 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin PC1 */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|GPIO_PIN_1;
 8000d34:	2303      	movs	r3, #3
 8000d36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d38:	2301      	movs	r3, #1
 8000d3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d40:	2300      	movs	r3, #0
 8000d42:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d44:	f107 031c 	add.w	r3, r7, #28
 8000d48:	4619      	mov	r1, r3
 8000d4a:	4836      	ldr	r0, [pc, #216]	; (8000e24 <MX_GPIO_Init+0x1f4>)
 8000d4c:	f001 ff9c 	bl	8002c88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000d50:	2308      	movs	r3, #8
 8000d52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d54:	2302      	movs	r3, #2
 8000d56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d60:	2305      	movs	r3, #5
 8000d62:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000d64:	f107 031c 	add.w	r3, r7, #28
 8000d68:	4619      	mov	r1, r3
 8000d6a:	482e      	ldr	r0, [pc, #184]	; (8000e24 <MX_GPIO_Init+0x1f4>)
 8000d6c:	f001 ff8c 	bl	8002c88 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d70:	2301      	movs	r3, #1
 8000d72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000d74:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000d78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d7e:	f107 031c 	add.w	r3, r7, #28
 8000d82:	4619      	mov	r1, r3
 8000d84:	4829      	ldr	r0, [pc, #164]	; (8000e2c <MX_GPIO_Init+0x1fc>)
 8000d86:	f001 ff7f 	bl	8002c88 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000d8a:	2304      	movs	r3, #4
 8000d8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d92:	2300      	movs	r3, #0
 8000d94:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000d96:	f107 031c 	add.w	r3, r7, #28
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	4824      	ldr	r0, [pc, #144]	; (8000e30 <MX_GPIO_Init+0x200>)
 8000d9e:	f001 ff73 	bl	8002c88 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000da2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000da6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da8:	2302      	movs	r3, #2
 8000daa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dac:	2300      	movs	r3, #0
 8000dae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db0:	2300      	movs	r3, #0
 8000db2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000db4:	2305      	movs	r3, #5
 8000db6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000db8:	f107 031c 	add.w	r3, r7, #28
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	481c      	ldr	r0, [pc, #112]	; (8000e30 <MX_GPIO_Init+0x200>)
 8000dc0:	f001 ff62 	bl	8002c88 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000dc4:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000dc8:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dca:	2301      	movs	r3, #1
 8000dcc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dd6:	f107 031c 	add.w	r3, r7, #28
 8000dda:	4619      	mov	r1, r3
 8000ddc:	4812      	ldr	r0, [pc, #72]	; (8000e28 <MX_GPIO_Init+0x1f8>)
 8000dde:	f001 ff53 	bl	8002c88 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000de2:	2320      	movs	r3, #32
 8000de4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000de6:	2300      	movs	r3, #0
 8000de8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dea:	2300      	movs	r3, #0
 8000dec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000dee:	f107 031c 	add.w	r3, r7, #28
 8000df2:	4619      	mov	r1, r3
 8000df4:	480c      	ldr	r0, [pc, #48]	; (8000e28 <MX_GPIO_Init+0x1f8>)
 8000df6:	f001 ff47 	bl	8002c88 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000dfa:	2302      	movs	r3, #2
 8000dfc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000dfe:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000e02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e04:	2300      	movs	r3, #0
 8000e06:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000e08:	f107 031c 	add.w	r3, r7, #28
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	4804      	ldr	r0, [pc, #16]	; (8000e20 <MX_GPIO_Init+0x1f0>)
 8000e10:	f001 ff3a 	bl	8002c88 <HAL_GPIO_Init>

}
 8000e14:	bf00      	nop
 8000e16:	3730      	adds	r7, #48	; 0x30
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	40023800 	.word	0x40023800
 8000e20:	40021000 	.word	0x40021000
 8000e24:	40020800 	.word	0x40020800
 8000e28:	40020c00 	.word	0x40020c00
 8000e2c:	40020000 	.word	0x40020000
 8000e30:	40020400 	.word	0x40020400

08000e34 <IIC_ByteWrite>:

/* USER CODE BEGIN 4 */

void IIC_ByteWrite(uint8_t dev_addr, uint8_t reg_addr, uint8_t data) {
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b086      	sub	sp, #24
 8000e38:	af04      	add	r7, sp, #16
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	71fb      	strb	r3, [r7, #7]
 8000e3e:	460b      	mov	r3, r1
 8000e40:	71bb      	strb	r3, [r7, #6]
 8000e42:	4613      	mov	r3, r2
 8000e44:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Write(&hi2c1, dev_addr, reg_addr, I2C_MEMADD_SIZE_8BIT, (uint8_t*)(&data), 1, HAL_MAX_DELAY);
 8000e46:	79fb      	ldrb	r3, [r7, #7]
 8000e48:	b299      	uxth	r1, r3
 8000e4a:	79bb      	ldrb	r3, [r7, #6]
 8000e4c:	b29a      	uxth	r2, r3
 8000e4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e52:	9302      	str	r3, [sp, #8]
 8000e54:	2301      	movs	r3, #1
 8000e56:	9301      	str	r3, [sp, #4]
 8000e58:	1d7b      	adds	r3, r7, #5
 8000e5a:	9300      	str	r3, [sp, #0]
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	4803      	ldr	r0, [pc, #12]	; (8000e6c <IIC_ByteWrite+0x38>)
 8000e60:	f003 ff7c 	bl	8004d5c <HAL_I2C_Mem_Write>
}
 8000e64:	bf00      	nop
 8000e66:	3708      	adds	r7, #8
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	20000294 	.word	0x20000294

08000e70 <MPR121_init>:

void MPR121_init(uint8_t addr) {
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	4603      	mov	r3, r0
 8000e78:	71fb      	strb	r3, [r7, #7]
  //Reset MPR121 if not reset correctly

	IIC_ByteWrite(addr ,0x80,0x63);  //Soft reset
 8000e7a:	79fb      	ldrb	r3, [r7, #7]
 8000e7c:	2263      	movs	r2, #99	; 0x63
 8000e7e:	2180      	movs	r1, #128	; 0x80
 8000e80:	4618      	mov	r0, r3
 8000e82:	f7ff ffd7 	bl	8000e34 <IIC_ByteWrite>
	IIC_ByteWrite(addr ,0x5E,0x00);  //Stop mode
 8000e86:	79fb      	ldrb	r3, [r7, #7]
 8000e88:	2200      	movs	r2, #0
 8000e8a:	215e      	movs	r1, #94	; 0x5e
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f7ff ffd1 	bl	8000e34 <IIC_ByteWrite>

	  //touch pad baseline filter
	  //rising
	IIC_ByteWrite(addr ,0x2B,0x01); // MAX HALF DELTA Rising
 8000e92:	79fb      	ldrb	r3, [r7, #7]
 8000e94:	2201      	movs	r2, #1
 8000e96:	212b      	movs	r1, #43	; 0x2b
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f7ff ffcb 	bl	8000e34 <IIC_ByteWrite>
	IIC_ByteWrite(addr ,0x2C,0x01); // NOISE HALF DELTA Rising
 8000e9e:	79fb      	ldrb	r3, [r7, #7]
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	212c      	movs	r1, #44	; 0x2c
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f7ff ffc5 	bl	8000e34 <IIC_ByteWrite>
	IIC_ByteWrite(addr ,0x2D,0x0E); // NOISE COUNT LIMIT Rising
 8000eaa:	79fb      	ldrb	r3, [r7, #7]
 8000eac:	220e      	movs	r2, #14
 8000eae:	212d      	movs	r1, #45	; 0x2d
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f7ff ffbf 	bl	8000e34 <IIC_ByteWrite>
	IIC_ByteWrite(addr ,0x2E,0x00); // DELAY LIMIT Rising
 8000eb6:	79fb      	ldrb	r3, [r7, #7]
 8000eb8:	2200      	movs	r2, #0
 8000eba:	212e      	movs	r1, #46	; 0x2e
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f7ff ffb9 	bl	8000e34 <IIC_ByteWrite>

	  //falling
	IIC_ByteWrite(addr ,0x2F,0x01); // MAX HALF DELTA Falling
 8000ec2:	79fb      	ldrb	r3, [r7, #7]
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	212f      	movs	r1, #47	; 0x2f
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f7ff ffb3 	bl	8000e34 <IIC_ByteWrite>
	IIC_ByteWrite(addr ,0x30,0x05); // NOISE HALF DELTA Falling
 8000ece:	79fb      	ldrb	r3, [r7, #7]
 8000ed0:	2205      	movs	r2, #5
 8000ed2:	2130      	movs	r1, #48	; 0x30
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f7ff ffad 	bl	8000e34 <IIC_ByteWrite>
	IIC_ByteWrite(addr ,0x31,0x01); // NOISE COUNT LIMIT Falling
 8000eda:	79fb      	ldrb	r3, [r7, #7]
 8000edc:	2201      	movs	r2, #1
 8000ede:	2131      	movs	r1, #49	; 0x31
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f7ff ffa7 	bl	8000e34 <IIC_ByteWrite>
	IIC_ByteWrite(addr ,0x32,0x00); // DELAY LIMIT Falling
 8000ee6:	79fb      	ldrb	r3, [r7, #7]
 8000ee8:	2200      	movs	r2, #0
 8000eea:	2132      	movs	r1, #50	; 0x32
 8000eec:	4618      	mov	r0, r3
 8000eee:	f7ff ffa1 	bl	8000e34 <IIC_ByteWrite>

	  //touched
	IIC_ByteWrite(addr ,0x33,0x00); // Noise half delta touched
 8000ef2:	79fb      	ldrb	r3, [r7, #7]
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	2133      	movs	r1, #51	; 0x33
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f7ff ff9b 	bl	8000e34 <IIC_ByteWrite>
	IIC_ByteWrite(addr ,0x34,0x00); // Noise counts touched
 8000efe:	79fb      	ldrb	r3, [r7, #7]
 8000f00:	2200      	movs	r2, #0
 8000f02:	2134      	movs	r1, #52	; 0x34
 8000f04:	4618      	mov	r0, r3
 8000f06:	f7ff ff95 	bl	8000e34 <IIC_ByteWrite>
	IIC_ByteWrite(addr ,0x35,0x00); // Filter delay touched
 8000f0a:	79fb      	ldrb	r3, [r7, #7]
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	2135      	movs	r1, #53	; 0x35
 8000f10:	4618      	mov	r0, r3
 8000f12:	f7ff ff8f 	bl	8000e34 <IIC_ByteWrite>

	  //Touch pad threshold
	IIC_ByteWrite(addr ,0x41,TouchThre); // ELE0 TOUCH THRESHOLD
 8000f16:	79fb      	ldrb	r3, [r7, #7]
 8000f18:	220a      	movs	r2, #10
 8000f1a:	2141      	movs	r1, #65	; 0x41
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f7ff ff89 	bl	8000e34 <IIC_ByteWrite>
	IIC_ByteWrite(addr ,0x42,ReleaThre); // ELE0 RELEASE THRESHOLD
 8000f22:	79fb      	ldrb	r3, [r7, #7]
 8000f24:	2206      	movs	r2, #6
 8000f26:	2142      	movs	r1, #66	; 0x42
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f7ff ff83 	bl	8000e34 <IIC_ByteWrite>
	IIC_ByteWrite(addr ,0x43,TouchThre); // ELE1 TOUCH THRESHOLD
 8000f2e:	79fb      	ldrb	r3, [r7, #7]
 8000f30:	220a      	movs	r2, #10
 8000f32:	2143      	movs	r1, #67	; 0x43
 8000f34:	4618      	mov	r0, r3
 8000f36:	f7ff ff7d 	bl	8000e34 <IIC_ByteWrite>
	IIC_ByteWrite(addr ,0x44,ReleaThre); // ELE1 RELEASE THRESHOLD
 8000f3a:	79fb      	ldrb	r3, [r7, #7]
 8000f3c:	2206      	movs	r2, #6
 8000f3e:	2144      	movs	r1, #68	; 0x44
 8000f40:	4618      	mov	r0, r3
 8000f42:	f7ff ff77 	bl	8000e34 <IIC_ByteWrite>
	IIC_ByteWrite(addr ,0x45,TouchThre); // ELE2 TOUCH THRESHOLD
 8000f46:	79fb      	ldrb	r3, [r7, #7]
 8000f48:	220a      	movs	r2, #10
 8000f4a:	2145      	movs	r1, #69	; 0x45
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f7ff ff71 	bl	8000e34 <IIC_ByteWrite>
	IIC_ByteWrite(addr ,0x46,ReleaThre); // ELE2 RELEASE THRESHOLD
 8000f52:	79fb      	ldrb	r3, [r7, #7]
 8000f54:	2206      	movs	r2, #6
 8000f56:	2146      	movs	r1, #70	; 0x46
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f7ff ff6b 	bl	8000e34 <IIC_ByteWrite>
	IIC_ByteWrite(addr ,0x47,TouchThre); // ELE3 TOUCH THRESHOLD
 8000f5e:	79fb      	ldrb	r3, [r7, #7]
 8000f60:	220a      	movs	r2, #10
 8000f62:	2147      	movs	r1, #71	; 0x47
 8000f64:	4618      	mov	r0, r3
 8000f66:	f7ff ff65 	bl	8000e34 <IIC_ByteWrite>
	IIC_ByteWrite(addr ,0x48,ReleaThre); // ELE3 RELEASE THRESHOLD
 8000f6a:	79fb      	ldrb	r3, [r7, #7]
 8000f6c:	2206      	movs	r2, #6
 8000f6e:	2148      	movs	r1, #72	; 0x48
 8000f70:	4618      	mov	r0, r3
 8000f72:	f7ff ff5f 	bl	8000e34 <IIC_ByteWrite>
	IIC_ByteWrite(addr ,0x49,TouchThre); // ELE4 TOUCH THRESHOLD
 8000f76:	79fb      	ldrb	r3, [r7, #7]
 8000f78:	220a      	movs	r2, #10
 8000f7a:	2149      	movs	r1, #73	; 0x49
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f7ff ff59 	bl	8000e34 <IIC_ByteWrite>
	IIC_ByteWrite(addr ,0x4A,ReleaThre); // ELE4 RELEASE THRESHOLD
 8000f82:	79fb      	ldrb	r3, [r7, #7]
 8000f84:	2206      	movs	r2, #6
 8000f86:	214a      	movs	r1, #74	; 0x4a
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f7ff ff53 	bl	8000e34 <IIC_ByteWrite>
	IIC_ByteWrite(addr ,0x4B,TouchThre); // ELE5 TOUCH THRESHOLD
 8000f8e:	79fb      	ldrb	r3, [r7, #7]
 8000f90:	220a      	movs	r2, #10
 8000f92:	214b      	movs	r1, #75	; 0x4b
 8000f94:	4618      	mov	r0, r3
 8000f96:	f7ff ff4d 	bl	8000e34 <IIC_ByteWrite>
	IIC_ByteWrite(addr ,0x4C,ReleaThre); // ELE5 RELEASE THRESHOLD
 8000f9a:	79fb      	ldrb	r3, [r7, #7]
 8000f9c:	2206      	movs	r2, #6
 8000f9e:	214c      	movs	r1, #76	; 0x4c
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f7ff ff47 	bl	8000e34 <IIC_ByteWrite>
	IIC_ByteWrite(addr ,0x4D,TouchThre); // ELE6 TOUCH THRESHOLD
 8000fa6:	79fb      	ldrb	r3, [r7, #7]
 8000fa8:	220a      	movs	r2, #10
 8000faa:	214d      	movs	r1, #77	; 0x4d
 8000fac:	4618      	mov	r0, r3
 8000fae:	f7ff ff41 	bl	8000e34 <IIC_ByteWrite>
	IIC_ByteWrite(addr ,0x4E,ReleaThre); // ELE6 RELEASE THRESHOLD
 8000fb2:	79fb      	ldrb	r3, [r7, #7]
 8000fb4:	2206      	movs	r2, #6
 8000fb6:	214e      	movs	r1, #78	; 0x4e
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f7ff ff3b 	bl	8000e34 <IIC_ByteWrite>
	IIC_ByteWrite(addr ,0x4F,TouchThre); // ELE7 TOUCH THRESHOLD
 8000fbe:	79fb      	ldrb	r3, [r7, #7]
 8000fc0:	220a      	movs	r2, #10
 8000fc2:	214f      	movs	r1, #79	; 0x4f
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f7ff ff35 	bl	8000e34 <IIC_ByteWrite>
	IIC_ByteWrite(addr ,0x50,ReleaThre); // ELE7 RELEASE THRESHOLD
 8000fca:	79fb      	ldrb	r3, [r7, #7]
 8000fcc:	2206      	movs	r2, #6
 8000fce:	2150      	movs	r1, #80	; 0x50
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f7ff ff2f 	bl	8000e34 <IIC_ByteWrite>
	IIC_ByteWrite(addr ,0x51,TouchThre); // ELE8 TOUCH THRESHOLD
 8000fd6:	79fb      	ldrb	r3, [r7, #7]
 8000fd8:	220a      	movs	r2, #10
 8000fda:	2151      	movs	r1, #81	; 0x51
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f7ff ff29 	bl	8000e34 <IIC_ByteWrite>
	IIC_ByteWrite(addr ,0x52,ReleaThre); // ELE8 RELEASE THRESHOLD
 8000fe2:	79fb      	ldrb	r3, [r7, #7]
 8000fe4:	2206      	movs	r2, #6
 8000fe6:	2152      	movs	r1, #82	; 0x52
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f7ff ff23 	bl	8000e34 <IIC_ByteWrite>
	IIC_ByteWrite(addr ,0x53,TouchThre); // ELE9 TOUCH THRESHOLD
 8000fee:	79fb      	ldrb	r3, [r7, #7]
 8000ff0:	220a      	movs	r2, #10
 8000ff2:	2153      	movs	r1, #83	; 0x53
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f7ff ff1d 	bl	8000e34 <IIC_ByteWrite>
	IIC_ByteWrite(addr ,0x54,ReleaThre); // ELE9 RELEASE THRESHOLD
 8000ffa:	79fb      	ldrb	r3, [r7, #7]
 8000ffc:	2206      	movs	r2, #6
 8000ffe:	2154      	movs	r1, #84	; 0x54
 8001000:	4618      	mov	r0, r3
 8001002:	f7ff ff17 	bl	8000e34 <IIC_ByteWrite>
	IIC_ByteWrite(addr ,0x55,TouchThre); // ELE10 TOUCH THRESHOLD
 8001006:	79fb      	ldrb	r3, [r7, #7]
 8001008:	220a      	movs	r2, #10
 800100a:	2155      	movs	r1, #85	; 0x55
 800100c:	4618      	mov	r0, r3
 800100e:	f7ff ff11 	bl	8000e34 <IIC_ByteWrite>
	IIC_ByteWrite(addr ,0x56,ReleaThre); // ELE10 RELEASE THRESHOLD
 8001012:	79fb      	ldrb	r3, [r7, #7]
 8001014:	2206      	movs	r2, #6
 8001016:	2156      	movs	r1, #86	; 0x56
 8001018:	4618      	mov	r0, r3
 800101a:	f7ff ff0b 	bl	8000e34 <IIC_ByteWrite>
	IIC_ByteWrite(addr ,0x57,TouchThre); // ELE11 TOUCH THRESHOLD
 800101e:	79fb      	ldrb	r3, [r7, #7]
 8001020:	220a      	movs	r2, #10
 8001022:	2157      	movs	r1, #87	; 0x57
 8001024:	4618      	mov	r0, r3
 8001026:	f7ff ff05 	bl	8000e34 <IIC_ByteWrite>
	IIC_ByteWrite(addr ,0x58,ReleaThre); // ELE11 RELEASE THRESHOLD
 800102a:	79fb      	ldrb	r3, [r7, #7]
 800102c:	2206      	movs	r2, #6
 800102e:	2158      	movs	r1, #88	; 0x58
 8001030:	4618      	mov	r0, r3
 8001032:	f7ff feff 	bl	8000e34 <IIC_ByteWrite>

	  //touch /release debounce

	IIC_ByteWrite(addr ,0x5B,0x00);
 8001036:	79fb      	ldrb	r3, [r7, #7]
 8001038:	2200      	movs	r2, #0
 800103a:	215b      	movs	r1, #91	; 0x5b
 800103c:	4618      	mov	r0, r3
 800103e:	f7ff fef9 	bl	8000e34 <IIC_ByteWrite>

	  // response time = SFI(10) X ESI(8ms) = 80ms

	IIC_ByteWrite(addr ,0x5D,0x13);
 8001042:	79fb      	ldrb	r3, [r7, #7]
 8001044:	2213      	movs	r2, #19
 8001046:	215d      	movs	r1, #93	; 0x5d
 8001048:	4618      	mov	r0, r3
 800104a:	f7ff fef3 	bl	8000e34 <IIC_ByteWrite>

	  //FFI=18

	IIC_ByteWrite(addr ,0x5C,0x80);
 800104e:	79fb      	ldrb	r3, [r7, #7]
 8001050:	2280      	movs	r2, #128	; 0x80
 8001052:	215c      	movs	r1, #92	; 0x5c
 8001054:	4618      	mov	r0, r3
 8001056:	f7ff feed 	bl	8000e34 <IIC_ByteWrite>

	  //Auto configuration

	IIC_ByteWrite(addr ,0x7B,0x8F);
 800105a:	79fb      	ldrb	r3, [r7, #7]
 800105c:	228f      	movs	r2, #143	; 0x8f
 800105e:	217b      	movs	r1, #123	; 0x7b
 8001060:	4618      	mov	r0, r3
 8001062:	f7ff fee7 	bl	8000e34 <IIC_ByteWrite>

	  // charge to 70% of Vdd , high sensitivity

	IIC_ByteWrite(addr ,0x7D,0xE4);
 8001066:	79fb      	ldrb	r3, [r7, #7]
 8001068:	22e4      	movs	r2, #228	; 0xe4
 800106a:	217d      	movs	r1, #125	; 0x7d
 800106c:	4618      	mov	r0, r3
 800106e:	f7ff fee1 	bl	8000e34 <IIC_ByteWrite>
	IIC_ByteWrite(addr ,0x7E,0x94);
 8001072:	79fb      	ldrb	r3, [r7, #7]
 8001074:	2294      	movs	r2, #148	; 0x94
 8001076:	217e      	movs	r1, #126	; 0x7e
 8001078:	4618      	mov	r0, r3
 800107a:	f7ff fedb 	bl	8000e34 <IIC_ByteWrite>
	IIC_ByteWrite(addr ,0x7F,0xCD);
 800107e:	79fb      	ldrb	r3, [r7, #7]
 8001080:	22cd      	movs	r2, #205	; 0xcd
 8001082:	217f      	movs	r1, #127	; 0x7f
 8001084:	4618      	mov	r0, r3
 8001086:	f7ff fed5 	bl	8000e34 <IIC_ByteWrite>

	  // 12 electrodes enabled

	IIC_ByteWrite(addr ,0x5E,0xCC);
 800108a:	79fb      	ldrb	r3, [r7, #7]
 800108c:	22cc      	movs	r2, #204	; 0xcc
 800108e:	215e      	movs	r1, #94	; 0x5e
 8001090:	4618      	mov	r0, r3
 8001092:	f7ff fecf 	bl	8000e34 <IIC_ByteWrite>

}
 8001096:	bf00      	nop
 8001098:	3708      	adds	r7, #8
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}

0800109e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800109e:	b480      	push	{r7}
 80010a0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010a2:	b672      	cpsid	i
}
 80010a4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010a6:	e7fe      	b.n	80010a6 <Error_Handler+0x8>

080010a8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ae:	2300      	movs	r3, #0
 80010b0:	607b      	str	r3, [r7, #4]
 80010b2:	4b10      	ldr	r3, [pc, #64]	; (80010f4 <HAL_MspInit+0x4c>)
 80010b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010b6:	4a0f      	ldr	r2, [pc, #60]	; (80010f4 <HAL_MspInit+0x4c>)
 80010b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010bc:	6453      	str	r3, [r2, #68]	; 0x44
 80010be:	4b0d      	ldr	r3, [pc, #52]	; (80010f4 <HAL_MspInit+0x4c>)
 80010c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010c6:	607b      	str	r3, [r7, #4]
 80010c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010ca:	2300      	movs	r3, #0
 80010cc:	603b      	str	r3, [r7, #0]
 80010ce:	4b09      	ldr	r3, [pc, #36]	; (80010f4 <HAL_MspInit+0x4c>)
 80010d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d2:	4a08      	ldr	r2, [pc, #32]	; (80010f4 <HAL_MspInit+0x4c>)
 80010d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010d8:	6413      	str	r3, [r2, #64]	; 0x40
 80010da:	4b06      	ldr	r3, [pc, #24]	; (80010f4 <HAL_MspInit+0x4c>)
 80010dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010e2:	603b      	str	r3, [r7, #0]
 80010e4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80010e6:	2007      	movs	r0, #7
 80010e8:	f001 f982 	bl	80023f0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010ec:	bf00      	nop
 80010ee:	3708      	adds	r7, #8
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	40023800 	.word	0x40023800

080010f8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b08a      	sub	sp, #40	; 0x28
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001100:	f107 0314 	add.w	r3, r7, #20
 8001104:	2200      	movs	r2, #0
 8001106:	601a      	str	r2, [r3, #0]
 8001108:	605a      	str	r2, [r3, #4]
 800110a:	609a      	str	r2, [r3, #8]
 800110c:	60da      	str	r2, [r3, #12]
 800110e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a19      	ldr	r2, [pc, #100]	; (800117c <HAL_I2C_MspInit+0x84>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d12c      	bne.n	8001174 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800111a:	2300      	movs	r3, #0
 800111c:	613b      	str	r3, [r7, #16]
 800111e:	4b18      	ldr	r3, [pc, #96]	; (8001180 <HAL_I2C_MspInit+0x88>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001122:	4a17      	ldr	r2, [pc, #92]	; (8001180 <HAL_I2C_MspInit+0x88>)
 8001124:	f043 0302 	orr.w	r3, r3, #2
 8001128:	6313      	str	r3, [r2, #48]	; 0x30
 800112a:	4b15      	ldr	r3, [pc, #84]	; (8001180 <HAL_I2C_MspInit+0x88>)
 800112c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112e:	f003 0302 	and.w	r3, r3, #2
 8001132:	613b      	str	r3, [r7, #16]
 8001134:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001136:	f44f 7340 	mov.w	r3, #768	; 0x300
 800113a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800113c:	2312      	movs	r3, #18
 800113e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001140:	2301      	movs	r3, #1
 8001142:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001144:	2300      	movs	r3, #0
 8001146:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001148:	2304      	movs	r3, #4
 800114a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800114c:	f107 0314 	add.w	r3, r7, #20
 8001150:	4619      	mov	r1, r3
 8001152:	480c      	ldr	r0, [pc, #48]	; (8001184 <HAL_I2C_MspInit+0x8c>)
 8001154:	f001 fd98 	bl	8002c88 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001158:	2300      	movs	r3, #0
 800115a:	60fb      	str	r3, [r7, #12]
 800115c:	4b08      	ldr	r3, [pc, #32]	; (8001180 <HAL_I2C_MspInit+0x88>)
 800115e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001160:	4a07      	ldr	r2, [pc, #28]	; (8001180 <HAL_I2C_MspInit+0x88>)
 8001162:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001166:	6413      	str	r3, [r2, #64]	; 0x40
 8001168:	4b05      	ldr	r3, [pc, #20]	; (8001180 <HAL_I2C_MspInit+0x88>)
 800116a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800116c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001170:	60fb      	str	r3, [r7, #12]
 8001172:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001174:	bf00      	nop
 8001176:	3728      	adds	r7, #40	; 0x28
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	40005400 	.word	0x40005400
 8001180:	40023800 	.word	0x40023800
 8001184:	40020400 	.word	0x40020400

08001188 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b08e      	sub	sp, #56	; 0x38
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001190:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001194:	2200      	movs	r2, #0
 8001196:	601a      	str	r2, [r3, #0]
 8001198:	605a      	str	r2, [r3, #4]
 800119a:	609a      	str	r2, [r3, #8]
 800119c:	60da      	str	r2, [r3, #12]
 800119e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011a0:	f107 0314 	add.w	r3, r7, #20
 80011a4:	2200      	movs	r2, #0
 80011a6:	601a      	str	r2, [r3, #0]
 80011a8:	605a      	str	r2, [r3, #4]
 80011aa:	609a      	str	r2, [r3, #8]
 80011ac:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4a31      	ldr	r2, [pc, #196]	; (8001278 <HAL_I2S_MspInit+0xf0>)
 80011b4:	4293      	cmp	r3, r2
 80011b6:	d15a      	bne.n	800126e <HAL_I2S_MspInit+0xe6>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80011b8:	2301      	movs	r3, #1
 80011ba:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80011bc:	23c0      	movs	r3, #192	; 0xc0
 80011be:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80011c0:	2302      	movs	r3, #2
 80011c2:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011c4:	f107 0314 	add.w	r3, r7, #20
 80011c8:	4618      	mov	r0, r3
 80011ca:	f005 fd57 	bl	8006c7c <HAL_RCCEx_PeriphCLKConfig>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 80011d4:	f7ff ff63 	bl	800109e <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80011d8:	2300      	movs	r3, #0
 80011da:	613b      	str	r3, [r7, #16]
 80011dc:	4b27      	ldr	r3, [pc, #156]	; (800127c <HAL_I2S_MspInit+0xf4>)
 80011de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e0:	4a26      	ldr	r2, [pc, #152]	; (800127c <HAL_I2S_MspInit+0xf4>)
 80011e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80011e6:	6413      	str	r3, [r2, #64]	; 0x40
 80011e8:	4b24      	ldr	r3, [pc, #144]	; (800127c <HAL_I2S_MspInit+0xf4>)
 80011ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80011f0:	613b      	str	r3, [r7, #16]
 80011f2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011f4:	2300      	movs	r3, #0
 80011f6:	60fb      	str	r3, [r7, #12]
 80011f8:	4b20      	ldr	r3, [pc, #128]	; (800127c <HAL_I2S_MspInit+0xf4>)
 80011fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fc:	4a1f      	ldr	r2, [pc, #124]	; (800127c <HAL_I2S_MspInit+0xf4>)
 80011fe:	f043 0301 	orr.w	r3, r3, #1
 8001202:	6313      	str	r3, [r2, #48]	; 0x30
 8001204:	4b1d      	ldr	r3, [pc, #116]	; (800127c <HAL_I2S_MspInit+0xf4>)
 8001206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001208:	f003 0301 	and.w	r3, r3, #1
 800120c:	60fb      	str	r3, [r7, #12]
 800120e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001210:	2300      	movs	r3, #0
 8001212:	60bb      	str	r3, [r7, #8]
 8001214:	4b19      	ldr	r3, [pc, #100]	; (800127c <HAL_I2S_MspInit+0xf4>)
 8001216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001218:	4a18      	ldr	r2, [pc, #96]	; (800127c <HAL_I2S_MspInit+0xf4>)
 800121a:	f043 0304 	orr.w	r3, r3, #4
 800121e:	6313      	str	r3, [r2, #48]	; 0x30
 8001220:	4b16      	ldr	r3, [pc, #88]	; (800127c <HAL_I2S_MspInit+0xf4>)
 8001222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001224:	f003 0304 	and.w	r3, r3, #4
 8001228:	60bb      	str	r3, [r7, #8]
 800122a:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800122c:	2310      	movs	r3, #16
 800122e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001230:	2302      	movs	r3, #2
 8001232:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001234:	2300      	movs	r3, #0
 8001236:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001238:	2300      	movs	r3, #0
 800123a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800123c:	2306      	movs	r3, #6
 800123e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001240:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001244:	4619      	mov	r1, r3
 8001246:	480e      	ldr	r0, [pc, #56]	; (8001280 <HAL_I2S_MspInit+0xf8>)
 8001248:	f001 fd1e 	bl	8002c88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800124c:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001250:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001252:	2302      	movs	r3, #2
 8001254:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001256:	2300      	movs	r3, #0
 8001258:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800125a:	2300      	movs	r3, #0
 800125c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800125e:	2306      	movs	r3, #6
 8001260:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001262:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001266:	4619      	mov	r1, r3
 8001268:	4806      	ldr	r0, [pc, #24]	; (8001284 <HAL_I2S_MspInit+0xfc>)
 800126a:	f001 fd0d 	bl	8002c88 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800126e:	bf00      	nop
 8001270:	3738      	adds	r7, #56	; 0x38
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	40003c00 	.word	0x40003c00
 800127c:	40023800 	.word	0x40023800
 8001280:	40020000 	.word	0x40020000
 8001284:	40020800 	.word	0x40020800

08001288 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b08a      	sub	sp, #40	; 0x28
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001290:	f107 0314 	add.w	r3, r7, #20
 8001294:	2200      	movs	r2, #0
 8001296:	601a      	str	r2, [r3, #0]
 8001298:	605a      	str	r2, [r3, #4]
 800129a:	609a      	str	r2, [r3, #8]
 800129c:	60da      	str	r2, [r3, #12]
 800129e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a19      	ldr	r2, [pc, #100]	; (800130c <HAL_SPI_MspInit+0x84>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d12b      	bne.n	8001302 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80012aa:	2300      	movs	r3, #0
 80012ac:	613b      	str	r3, [r7, #16]
 80012ae:	4b18      	ldr	r3, [pc, #96]	; (8001310 <HAL_SPI_MspInit+0x88>)
 80012b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012b2:	4a17      	ldr	r2, [pc, #92]	; (8001310 <HAL_SPI_MspInit+0x88>)
 80012b4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80012b8:	6453      	str	r3, [r2, #68]	; 0x44
 80012ba:	4b15      	ldr	r3, [pc, #84]	; (8001310 <HAL_SPI_MspInit+0x88>)
 80012bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012c2:	613b      	str	r3, [r7, #16]
 80012c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012c6:	2300      	movs	r3, #0
 80012c8:	60fb      	str	r3, [r7, #12]
 80012ca:	4b11      	ldr	r3, [pc, #68]	; (8001310 <HAL_SPI_MspInit+0x88>)
 80012cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ce:	4a10      	ldr	r2, [pc, #64]	; (8001310 <HAL_SPI_MspInit+0x88>)
 80012d0:	f043 0301 	orr.w	r3, r3, #1
 80012d4:	6313      	str	r3, [r2, #48]	; 0x30
 80012d6:	4b0e      	ldr	r3, [pc, #56]	; (8001310 <HAL_SPI_MspInit+0x88>)
 80012d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012da:	f003 0301 	and.w	r3, r3, #1
 80012de:	60fb      	str	r3, [r7, #12]
 80012e0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80012e2:	23e0      	movs	r3, #224	; 0xe0
 80012e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e6:	2302      	movs	r3, #2
 80012e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ea:	2300      	movs	r3, #0
 80012ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ee:	2300      	movs	r3, #0
 80012f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80012f2:	2305      	movs	r3, #5
 80012f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012f6:	f107 0314 	add.w	r3, r7, #20
 80012fa:	4619      	mov	r1, r3
 80012fc:	4805      	ldr	r0, [pc, #20]	; (8001314 <HAL_SPI_MspInit+0x8c>)
 80012fe:	f001 fcc3 	bl	8002c88 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001302:	bf00      	nop
 8001304:	3728      	adds	r7, #40	; 0x28
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	40013000 	.word	0x40013000
 8001310:	40023800 	.word	0x40023800
 8001314:	40020000 	.word	0x40020000

08001318 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b084      	sub	sp, #16
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a27      	ldr	r2, [pc, #156]	; (80013c4 <HAL_TIM_PWM_MspInit+0xac>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d148      	bne.n	80013bc <HAL_TIM_PWM_MspInit+0xa4>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800132a:	2300      	movs	r3, #0
 800132c:	60fb      	str	r3, [r7, #12]
 800132e:	4b26      	ldr	r3, [pc, #152]	; (80013c8 <HAL_TIM_PWM_MspInit+0xb0>)
 8001330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001332:	4a25      	ldr	r2, [pc, #148]	; (80013c8 <HAL_TIM_PWM_MspInit+0xb0>)
 8001334:	f043 0301 	orr.w	r3, r3, #1
 8001338:	6453      	str	r3, [r2, #68]	; 0x44
 800133a:	4b23      	ldr	r3, [pc, #140]	; (80013c8 <HAL_TIM_PWM_MspInit+0xb0>)
 800133c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800133e:	f003 0301 	and.w	r3, r3, #1
 8001342:	60fb      	str	r3, [r7, #12]
 8001344:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1_CH2_CH3 Init */
    hdma_tim1_ch1_ch2_ch3.Instance = DMA2_Stream6;
 8001346:	4b21      	ldr	r3, [pc, #132]	; (80013cc <HAL_TIM_PWM_MspInit+0xb4>)
 8001348:	4a21      	ldr	r2, [pc, #132]	; (80013d0 <HAL_TIM_PWM_MspInit+0xb8>)
 800134a:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1_ch2_ch3.Init.Channel = DMA_CHANNEL_0;
 800134c:	4b1f      	ldr	r3, [pc, #124]	; (80013cc <HAL_TIM_PWM_MspInit+0xb4>)
 800134e:	2200      	movs	r2, #0
 8001350:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1_ch2_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001352:	4b1e      	ldr	r3, [pc, #120]	; (80013cc <HAL_TIM_PWM_MspInit+0xb4>)
 8001354:	2240      	movs	r2, #64	; 0x40
 8001356:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1_ch2_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001358:	4b1c      	ldr	r3, [pc, #112]	; (80013cc <HAL_TIM_PWM_MspInit+0xb4>)
 800135a:	2200      	movs	r2, #0
 800135c:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1_ch2_ch3.Init.MemInc = DMA_MINC_ENABLE;
 800135e:	4b1b      	ldr	r3, [pc, #108]	; (80013cc <HAL_TIM_PWM_MspInit+0xb4>)
 8001360:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001364:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1_ch2_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001366:	4b19      	ldr	r3, [pc, #100]	; (80013cc <HAL_TIM_PWM_MspInit+0xb4>)
 8001368:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800136c:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1_ch2_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800136e:	4b17      	ldr	r3, [pc, #92]	; (80013cc <HAL_TIM_PWM_MspInit+0xb4>)
 8001370:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001374:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1_ch2_ch3.Init.Mode = DMA_NORMAL;
 8001376:	4b15      	ldr	r3, [pc, #84]	; (80013cc <HAL_TIM_PWM_MspInit+0xb4>)
 8001378:	2200      	movs	r2, #0
 800137a:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1_ch2_ch3.Init.Priority = DMA_PRIORITY_LOW;
 800137c:	4b13      	ldr	r3, [pc, #76]	; (80013cc <HAL_TIM_PWM_MspInit+0xb4>)
 800137e:	2200      	movs	r2, #0
 8001380:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1_ch2_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001382:	4b12      	ldr	r3, [pc, #72]	; (80013cc <HAL_TIM_PWM_MspInit+0xb4>)
 8001384:	2200      	movs	r2, #0
 8001386:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1_ch2_ch3) != HAL_OK)
 8001388:	4810      	ldr	r0, [pc, #64]	; (80013cc <HAL_TIM_PWM_MspInit+0xb4>)
 800138a:	f001 f873 	bl	8002474 <HAL_DMA_Init>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <HAL_TIM_PWM_MspInit+0x80>
    {
      Error_Handler();
 8001394:	f7ff fe83 	bl	800109e <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1_ch2_ch3);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	4a0c      	ldr	r2, [pc, #48]	; (80013cc <HAL_TIM_PWM_MspInit+0xb4>)
 800139c:	625a      	str	r2, [r3, #36]	; 0x24
 800139e:	4a0b      	ldr	r2, [pc, #44]	; (80013cc <HAL_TIM_PWM_MspInit+0xb4>)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC2],hdma_tim1_ch1_ch2_ch3);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	4a09      	ldr	r2, [pc, #36]	; (80013cc <HAL_TIM_PWM_MspInit+0xb4>)
 80013a8:	629a      	str	r2, [r3, #40]	; 0x28
 80013aa:	4a08      	ldr	r2, [pc, #32]	; (80013cc <HAL_TIM_PWM_MspInit+0xb4>)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim1_ch1_ch2_ch3);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	4a06      	ldr	r2, [pc, #24]	; (80013cc <HAL_TIM_PWM_MspInit+0xb4>)
 80013b4:	62da      	str	r2, [r3, #44]	; 0x2c
 80013b6:	4a05      	ldr	r2, [pc, #20]	; (80013cc <HAL_TIM_PWM_MspInit+0xb4>)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80013bc:	bf00      	nop
 80013be:	3710      	adds	r7, #16
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	40010000 	.word	0x40010000
 80013c8:	40023800 	.word	0x40023800
 80013cc:	200002e8 	.word	0x200002e8
 80013d0:	400264a0 	.word	0x400264a0

080013d4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b088      	sub	sp, #32
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013dc:	f107 030c 	add.w	r3, r7, #12
 80013e0:	2200      	movs	r2, #0
 80013e2:	601a      	str	r2, [r3, #0]
 80013e4:	605a      	str	r2, [r3, #4]
 80013e6:	609a      	str	r2, [r3, #8]
 80013e8:	60da      	str	r2, [r3, #12]
 80013ea:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a12      	ldr	r2, [pc, #72]	; (800143c <HAL_TIM_MspPostInit+0x68>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d11e      	bne.n	8001434 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80013f6:	2300      	movs	r3, #0
 80013f8:	60bb      	str	r3, [r7, #8]
 80013fa:	4b11      	ldr	r3, [pc, #68]	; (8001440 <HAL_TIM_MspPostInit+0x6c>)
 80013fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fe:	4a10      	ldr	r2, [pc, #64]	; (8001440 <HAL_TIM_MspPostInit+0x6c>)
 8001400:	f043 0310 	orr.w	r3, r3, #16
 8001404:	6313      	str	r3, [r2, #48]	; 0x30
 8001406:	4b0e      	ldr	r3, [pc, #56]	; (8001440 <HAL_TIM_MspPostInit+0x6c>)
 8001408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140a:	f003 0310 	and.w	r3, r3, #16
 800140e:	60bb      	str	r3, [r7, #8]
 8001410:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8001412:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8001416:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001418:	2302      	movs	r3, #2
 800141a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141c:	2300      	movs	r3, #0
 800141e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001420:	2300      	movs	r3, #0
 8001422:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001424:	2301      	movs	r3, #1
 8001426:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001428:	f107 030c 	add.w	r3, r7, #12
 800142c:	4619      	mov	r1, r3
 800142e:	4805      	ldr	r0, [pc, #20]	; (8001444 <HAL_TIM_MspPostInit+0x70>)
 8001430:	f001 fc2a 	bl	8002c88 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001434:	bf00      	nop
 8001436:	3720      	adds	r7, #32
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	40010000 	.word	0x40010000
 8001440:	40023800 	.word	0x40023800
 8001444:	40021000 	.word	0x40021000

08001448 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b08a      	sub	sp, #40	; 0x28
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001450:	f107 0314 	add.w	r3, r7, #20
 8001454:	2200      	movs	r2, #0
 8001456:	601a      	str	r2, [r3, #0]
 8001458:	605a      	str	r2, [r3, #4]
 800145a:	609a      	str	r2, [r3, #8]
 800145c:	60da      	str	r2, [r3, #12]
 800145e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a19      	ldr	r2, [pc, #100]	; (80014cc <HAL_UART_MspInit+0x84>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d12b      	bne.n	80014c2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800146a:	2300      	movs	r3, #0
 800146c:	613b      	str	r3, [r7, #16]
 800146e:	4b18      	ldr	r3, [pc, #96]	; (80014d0 <HAL_UART_MspInit+0x88>)
 8001470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001472:	4a17      	ldr	r2, [pc, #92]	; (80014d0 <HAL_UART_MspInit+0x88>)
 8001474:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001478:	6413      	str	r3, [r2, #64]	; 0x40
 800147a:	4b15      	ldr	r3, [pc, #84]	; (80014d0 <HAL_UART_MspInit+0x88>)
 800147c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001482:	613b      	str	r3, [r7, #16]
 8001484:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001486:	2300      	movs	r3, #0
 8001488:	60fb      	str	r3, [r7, #12]
 800148a:	4b11      	ldr	r3, [pc, #68]	; (80014d0 <HAL_UART_MspInit+0x88>)
 800148c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148e:	4a10      	ldr	r2, [pc, #64]	; (80014d0 <HAL_UART_MspInit+0x88>)
 8001490:	f043 0301 	orr.w	r3, r3, #1
 8001494:	6313      	str	r3, [r2, #48]	; 0x30
 8001496:	4b0e      	ldr	r3, [pc, #56]	; (80014d0 <HAL_UART_MspInit+0x88>)
 8001498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149a:	f003 0301 	and.w	r3, r3, #1
 800149e:	60fb      	str	r3, [r7, #12]
 80014a0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80014a2:	230c      	movs	r3, #12
 80014a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a6:	2302      	movs	r3, #2
 80014a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014aa:	2300      	movs	r3, #0
 80014ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ae:	2303      	movs	r3, #3
 80014b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80014b2:	2307      	movs	r3, #7
 80014b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014b6:	f107 0314 	add.w	r3, r7, #20
 80014ba:	4619      	mov	r1, r3
 80014bc:	4805      	ldr	r0, [pc, #20]	; (80014d4 <HAL_UART_MspInit+0x8c>)
 80014be:	f001 fbe3 	bl	8002c88 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80014c2:	bf00      	nop
 80014c4:	3728      	adds	r7, #40	; 0x28
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	40004400 	.word	0x40004400
 80014d0:	40023800 	.word	0x40023800
 80014d4:	40020000 	.word	0x40020000

080014d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014dc:	e7fe      	b.n	80014dc <NMI_Handler+0x4>

080014de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014de:	b480      	push	{r7}
 80014e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014e2:	e7fe      	b.n	80014e2 <HardFault_Handler+0x4>

080014e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014e8:	e7fe      	b.n	80014e8 <MemManage_Handler+0x4>

080014ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014ea:	b480      	push	{r7}
 80014ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014ee:	e7fe      	b.n	80014ee <BusFault_Handler+0x4>

080014f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014f4:	e7fe      	b.n	80014f4 <UsageFault_Handler+0x4>

080014f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014f6:	b480      	push	{r7}
 80014f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014fa:	bf00      	nop
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr

08001504 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001508:	bf00      	nop
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr

08001512 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001512:	b480      	push	{r7}
 8001514:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001516:	bf00      	nop
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr

08001520 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001524:	f000 fe50 	bl	80021c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001528:	bf00      	nop
 800152a:	bd80      	pop	{r7, pc}

0800152c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001530:	4802      	ldr	r0, [pc, #8]	; (800153c <OTG_FS_IRQHandler+0x10>)
 8001532:	f001 ffc9 	bl	80034c8 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001536:	bf00      	nop
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	20000a5c 	.word	0x20000a5c

08001540 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1_ch2_ch3);
 8001544:	4802      	ldr	r0, [pc, #8]	; (8001550 <DMA2_Stream6_IRQHandler+0x10>)
 8001546:	f001 f935 	bl	80027b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800154a:	bf00      	nop
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	200002e8 	.word	0x200002e8

08001554 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b086      	sub	sp, #24
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800155c:	4a14      	ldr	r2, [pc, #80]	; (80015b0 <_sbrk+0x5c>)
 800155e:	4b15      	ldr	r3, [pc, #84]	; (80015b4 <_sbrk+0x60>)
 8001560:	1ad3      	subs	r3, r2, r3
 8001562:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001568:	4b13      	ldr	r3, [pc, #76]	; (80015b8 <_sbrk+0x64>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d102      	bne.n	8001576 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001570:	4b11      	ldr	r3, [pc, #68]	; (80015b8 <_sbrk+0x64>)
 8001572:	4a12      	ldr	r2, [pc, #72]	; (80015bc <_sbrk+0x68>)
 8001574:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001576:	4b10      	ldr	r3, [pc, #64]	; (80015b8 <_sbrk+0x64>)
 8001578:	681a      	ldr	r2, [r3, #0]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	4413      	add	r3, r2
 800157e:	693a      	ldr	r2, [r7, #16]
 8001580:	429a      	cmp	r2, r3
 8001582:	d207      	bcs.n	8001594 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001584:	f009 ffd8 	bl	800b538 <__errno>
 8001588:	4603      	mov	r3, r0
 800158a:	220c      	movs	r2, #12
 800158c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800158e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001592:	e009      	b.n	80015a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001594:	4b08      	ldr	r3, [pc, #32]	; (80015b8 <_sbrk+0x64>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800159a:	4b07      	ldr	r3, [pc, #28]	; (80015b8 <_sbrk+0x64>)
 800159c:	681a      	ldr	r2, [r3, #0]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	4413      	add	r3, r2
 80015a2:	4a05      	ldr	r2, [pc, #20]	; (80015b8 <_sbrk+0x64>)
 80015a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015a6:	68fb      	ldr	r3, [r7, #12]
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	3718      	adds	r7, #24
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	20020000 	.word	0x20020000
 80015b4:	00000400 	.word	0x00000400
 80015b8:	200000c4 	.word	0x200000c4
 80015bc:	20000d70 	.word	0x20000d70

080015c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015c4:	4b06      	ldr	r3, [pc, #24]	; (80015e0 <SystemInit+0x20>)
 80015c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015ca:	4a05      	ldr	r2, [pc, #20]	; (80015e0 <SystemInit+0x20>)
 80015cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015d4:	bf00      	nop
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr
 80015de:	bf00      	nop
 80015e0:	e000ed00 	.word	0xe000ed00

080015e4 <ws2812b_gpio_init>:
  144,146,148,150,152,154,156,158,160,162,164,167,169,171,173,175,
  177,180,182,184,186,189,191,193,196,198,200,203,205,208,210,213,
  215,218,220,223,225,228,231,233,236,239,241,244,247,249,252,255 };

static void ws2812b_gpio_init(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b088      	sub	sp, #32
 80015e8:	af00      	add	r7, sp, #0
	// WS2812B outputs
	WS2812B_GPIO_CLK_ENABLE();
 80015ea:	2300      	movs	r3, #0
 80015ec:	60bb      	str	r3, [r7, #8]
 80015ee:	4b22      	ldr	r3, [pc, #136]	; (8001678 <ws2812b_gpio_init+0x94>)
 80015f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f2:	4a21      	ldr	r2, [pc, #132]	; (8001678 <ws2812b_gpio_init+0x94>)
 80015f4:	f043 0304 	orr.w	r3, r3, #4
 80015f8:	6313      	str	r3, [r2, #48]	; 0x30
 80015fa:	4b1f      	ldr	r3, [pc, #124]	; (8001678 <ws2812b_gpio_init+0x94>)
 80015fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fe:	f003 0304 	and.w	r3, r3, #4
 8001602:	60bb      	str	r3, [r7, #8]
 8001604:	68bb      	ldr	r3, [r7, #8]
	GPIO_InitTypeDef  GPIO_InitStruct;
	GPIO_InitStruct.Pin       = WS2812B_PINS;
 8001606:	230f      	movs	r3, #15
 8001608:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode      = GPIO_MODE_OUTPUT_PP;
 800160a:	2301      	movs	r3, #1
 800160c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull      = GPIO_NOPULL;
 800160e:	2300      	movs	r3, #0
 8001610:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_LOW;
 8001612:	2300      	movs	r3, #0
 8001614:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(WS2812B_PORT, &GPIO_InitStruct);
 8001616:	f107 030c 	add.w	r3, r7, #12
 800161a:	4619      	mov	r1, r3
 800161c:	4817      	ldr	r0, [pc, #92]	; (800167c <ws2812b_gpio_init+0x98>)
 800161e:	f001 fb33 	bl	8002c88 <HAL_GPIO_Init>

	// Enable output pins for debuging to see DMA Full and Half transfer interrupts
	#if defined(LED_BLUE_PORT) && defined(LED_ORANGE_PORT)
		__HAL_RCC_GPIOD_CLK_ENABLE();
 8001622:	2300      	movs	r3, #0
 8001624:	607b      	str	r3, [r7, #4]
 8001626:	4b14      	ldr	r3, [pc, #80]	; (8001678 <ws2812b_gpio_init+0x94>)
 8001628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162a:	4a13      	ldr	r2, [pc, #76]	; (8001678 <ws2812b_gpio_init+0x94>)
 800162c:	f043 0308 	orr.w	r3, r3, #8
 8001630:	6313      	str	r3, [r2, #48]	; 0x30
 8001632:	4b11      	ldr	r3, [pc, #68]	; (8001678 <ws2812b_gpio_init+0x94>)
 8001634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001636:	f003 0308 	and.w	r3, r3, #8
 800163a:	607b      	str	r3, [r7, #4]
 800163c:	687b      	ldr	r3, [r7, #4]

		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800163e:	2301      	movs	r3, #1
 8001640:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001642:	2300      	movs	r3, #0
 8001644:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001646:	2302      	movs	r3, #2
 8001648:	61bb      	str	r3, [r7, #24]

		GPIO_InitStruct.Pin = LED_BLUE_PIN;
 800164a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800164e:	60fb      	str	r3, [r7, #12]
		HAL_GPIO_Init(LED_BLUE_PORT, &GPIO_InitStruct);
 8001650:	f107 030c 	add.w	r3, r7, #12
 8001654:	4619      	mov	r1, r3
 8001656:	480a      	ldr	r0, [pc, #40]	; (8001680 <ws2812b_gpio_init+0x9c>)
 8001658:	f001 fb16 	bl	8002c88 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = LED_ORANGE_PIN;
 800165c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001660:	60fb      	str	r3, [r7, #12]
		HAL_GPIO_Init(LED_ORANGE_PORT, &GPIO_InitStruct);
 8001662:	f107 030c 	add.w	r3, r7, #12
 8001666:	4619      	mov	r1, r3
 8001668:	4805      	ldr	r0, [pc, #20]	; (8001680 <ws2812b_gpio_init+0x9c>)
 800166a:	f001 fb0d 	bl	8002c88 <HAL_GPIO_Init>
	#endif
}
 800166e:	bf00      	nop
 8001670:	3720      	adds	r7, #32
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	40023800 	.word	0x40023800
 800167c:	40020800 	.word	0x40020800
 8001680:	40020c00 	.word	0x40020c00

08001684 <TIM1_init>:

uint32_t tim_period;
uint32_t timer_reset_pulse_period;

static void TIM1_init(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b084      	sub	sp, #16
 8001688:	af00      	add	r7, sp, #0
	// TIM2 Periph clock enable
	__HAL_RCC_TIM1_CLK_ENABLE();
 800168a:	2300      	movs	r3, #0
 800168c:	607b      	str	r3, [r7, #4]
 800168e:	4b52      	ldr	r3, [pc, #328]	; (80017d8 <TIM1_init+0x154>)
 8001690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001692:	4a51      	ldr	r2, [pc, #324]	; (80017d8 <TIM1_init+0x154>)
 8001694:	f043 0301 	orr.w	r3, r3, #1
 8001698:	6453      	str	r3, [r2, #68]	; 0x44
 800169a:	4b4f      	ldr	r3, [pc, #316]	; (80017d8 <TIM1_init+0x154>)
 800169c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800169e:	f003 0301 	and.w	r3, r3, #1
 80016a2:	607b      	str	r3, [r7, #4]
 80016a4:	687b      	ldr	r3, [r7, #4]

	// This computation of pulse length should work ok,
	// at some slower core speeds it needs some tuning.
	tim_period =  SystemCoreClock / 800000; // 0,125us period (10 times lower the 1,25us period to have fixed math below)
 80016a6:	4b4d      	ldr	r3, [pc, #308]	; (80017dc <TIM1_init+0x158>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	0a1b      	lsrs	r3, r3, #8
 80016ac:	4a4c      	ldr	r2, [pc, #304]	; (80017e0 <TIM1_init+0x15c>)
 80016ae:	fba2 2303 	umull	r2, r3, r2, r3
 80016b2:	091b      	lsrs	r3, r3, #4
 80016b4:	4a4b      	ldr	r2, [pc, #300]	; (80017e4 <TIM1_init+0x160>)
 80016b6:	6013      	str	r3, [r2, #0]
	timer_reset_pulse_period = (SystemCoreClock / (320 * 60)); // 60us just to be sure
 80016b8:	4b48      	ldr	r3, [pc, #288]	; (80017dc <TIM1_init+0x158>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a4a      	ldr	r2, [pc, #296]	; (80017e8 <TIM1_init+0x164>)
 80016be:	fba2 2303 	umull	r2, r3, r2, r3
 80016c2:	0adb      	lsrs	r3, r3, #11
 80016c4:	4a49      	ldr	r2, [pc, #292]	; (80017ec <TIM1_init+0x168>)
 80016c6:	6013      	str	r3, [r2, #0]

	uint32_t cc1 = (10 * tim_period) / 36;
 80016c8:	4b46      	ldr	r3, [pc, #280]	; (80017e4 <TIM1_init+0x160>)
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	4613      	mov	r3, r2
 80016ce:	009b      	lsls	r3, r3, #2
 80016d0:	4413      	add	r3, r2
 80016d2:	005b      	lsls	r3, r3, #1
 80016d4:	461a      	mov	r2, r3
 80016d6:	4b46      	ldr	r3, [pc, #280]	; (80017f0 <TIM1_init+0x16c>)
 80016d8:	fba3 2302 	umull	r2, r3, r3, r2
 80016dc:	08db      	lsrs	r3, r3, #3
 80016de:	60fb      	str	r3, [r7, #12]
	uint32_t cc2 = (10 * tim_period) / 15;
 80016e0:	4b40      	ldr	r3, [pc, #256]	; (80017e4 <TIM1_init+0x160>)
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	4613      	mov	r3, r2
 80016e6:	009b      	lsls	r3, r3, #2
 80016e8:	4413      	add	r3, r2
 80016ea:	005b      	lsls	r3, r3, #1
 80016ec:	461a      	mov	r2, r3
 80016ee:	4b41      	ldr	r3, [pc, #260]	; (80017f4 <TIM1_init+0x170>)
 80016f0:	fba3 2302 	umull	r2, r3, r3, r2
 80016f4:	08db      	lsrs	r3, r3, #3
 80016f6:	60bb      	str	r3, [r7, #8]

	TIM1_handle.Instance = TIM1;
 80016f8:	4b3f      	ldr	r3, [pc, #252]	; (80017f8 <TIM1_init+0x174>)
 80016fa:	4a40      	ldr	r2, [pc, #256]	; (80017fc <TIM1_init+0x178>)
 80016fc:	601a      	str	r2, [r3, #0]

	TIM1_handle.Init.Period            = tim_period;
 80016fe:	4b39      	ldr	r3, [pc, #228]	; (80017e4 <TIM1_init+0x160>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a3d      	ldr	r2, [pc, #244]	; (80017f8 <TIM1_init+0x174>)
 8001704:	60d3      	str	r3, [r2, #12]
	TIM1_handle.Init.RepetitionCounter = 0;
 8001706:	4b3c      	ldr	r3, [pc, #240]	; (80017f8 <TIM1_init+0x174>)
 8001708:	2200      	movs	r2, #0
 800170a:	615a      	str	r2, [r3, #20]
	TIM1_handle.Init.Prescaler         = 0;
 800170c:	4b3a      	ldr	r3, [pc, #232]	; (80017f8 <TIM1_init+0x174>)
 800170e:	2200      	movs	r2, #0
 8001710:	605a      	str	r2, [r3, #4]
	TIM1_handle.Init.ClockDivision     = TIM_CLOCKDIVISION_DIV1;
 8001712:	4b39      	ldr	r3, [pc, #228]	; (80017f8 <TIM1_init+0x174>)
 8001714:	2200      	movs	r2, #0
 8001716:	611a      	str	r2, [r3, #16]
	TIM1_handle.Init.CounterMode       = TIM_COUNTERMODE_UP;
 8001718:	4b37      	ldr	r3, [pc, #220]	; (80017f8 <TIM1_init+0x174>)
 800171a:	2200      	movs	r2, #0
 800171c:	609a      	str	r2, [r3, #8]
	HAL_TIM_PWM_Init(&TIM1_handle);
 800171e:	4836      	ldr	r0, [pc, #216]	; (80017f8 <TIM1_init+0x174>)
 8001720:	f005 fcde 	bl	80070e0 <HAL_TIM_PWM_Init>

	HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001724:	2200      	movs	r2, #0
 8001726:	2100      	movs	r1, #0
 8001728:	2019      	movs	r0, #25
 800172a:	f000 fe6c 	bl	8002406 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800172e:	2019      	movs	r0, #25
 8001730:	f000 fe85 	bl	800243e <HAL_NVIC_EnableIRQ>

	tim2OC1.OCMode       = TIM_OCMODE_PWM1;
 8001734:	4b32      	ldr	r3, [pc, #200]	; (8001800 <TIM1_init+0x17c>)
 8001736:	2260      	movs	r2, #96	; 0x60
 8001738:	601a      	str	r2, [r3, #0]
	tim2OC1.OCPolarity   = TIM_OCPOLARITY_HIGH;
 800173a:	4b31      	ldr	r3, [pc, #196]	; (8001800 <TIM1_init+0x17c>)
 800173c:	2200      	movs	r2, #0
 800173e:	609a      	str	r2, [r3, #8]
	tim2OC1.Pulse        = cc1;
 8001740:	4a2f      	ldr	r2, [pc, #188]	; (8001800 <TIM1_init+0x17c>)
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	6053      	str	r3, [r2, #4]
	tim2OC1.OCNPolarity  = TIM_OCNPOLARITY_HIGH;
 8001746:	4b2e      	ldr	r3, [pc, #184]	; (8001800 <TIM1_init+0x17c>)
 8001748:	2200      	movs	r2, #0
 800174a:	60da      	str	r2, [r3, #12]
	tim2OC1.OCFastMode   = TIM_OCFAST_DISABLE;
 800174c:	4b2c      	ldr	r3, [pc, #176]	; (8001800 <TIM1_init+0x17c>)
 800174e:	2200      	movs	r2, #0
 8001750:	611a      	str	r2, [r3, #16]
	HAL_TIM_PWM_ConfigChannel(&TIM1_handle, &tim2OC1, TIM_CHANNEL_1);
 8001752:	2200      	movs	r2, #0
 8001754:	492a      	ldr	r1, [pc, #168]	; (8001800 <TIM1_init+0x17c>)
 8001756:	4828      	ldr	r0, [pc, #160]	; (80017f8 <TIM1_init+0x174>)
 8001758:	f005 fee2 	bl	8007520 <HAL_TIM_PWM_ConfigChannel>

	tim2OC2.OCMode       = TIM_OCMODE_PWM1;
 800175c:	4b29      	ldr	r3, [pc, #164]	; (8001804 <TIM1_init+0x180>)
 800175e:	2260      	movs	r2, #96	; 0x60
 8001760:	601a      	str	r2, [r3, #0]
	tim2OC2.OCPolarity   = TIM_OCPOLARITY_HIGH;
 8001762:	4b28      	ldr	r3, [pc, #160]	; (8001804 <TIM1_init+0x180>)
 8001764:	2200      	movs	r2, #0
 8001766:	609a      	str	r2, [r3, #8]
	tim2OC2.Pulse        = cc2;
 8001768:	4a26      	ldr	r2, [pc, #152]	; (8001804 <TIM1_init+0x180>)
 800176a:	68bb      	ldr	r3, [r7, #8]
 800176c:	6053      	str	r3, [r2, #4]
	tim2OC2.OCNPolarity  = TIM_OCNPOLARITY_HIGH;
 800176e:	4b25      	ldr	r3, [pc, #148]	; (8001804 <TIM1_init+0x180>)
 8001770:	2200      	movs	r2, #0
 8001772:	60da      	str	r2, [r3, #12]
	tim2OC2.OCFastMode   = TIM_OCFAST_DISABLE;
 8001774:	4b23      	ldr	r3, [pc, #140]	; (8001804 <TIM1_init+0x180>)
 8001776:	2200      	movs	r2, #0
 8001778:	611a      	str	r2, [r3, #16]
	tim2OC2.OCIdleState  = TIM_OCIDLESTATE_RESET;
 800177a:	4b22      	ldr	r3, [pc, #136]	; (8001804 <TIM1_init+0x180>)
 800177c:	2200      	movs	r2, #0
 800177e:	615a      	str	r2, [r3, #20]
	tim2OC2.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001780:	4b20      	ldr	r3, [pc, #128]	; (8001804 <TIM1_init+0x180>)
 8001782:	2200      	movs	r2, #0
 8001784:	619a      	str	r2, [r3, #24]
	HAL_TIM_PWM_ConfigChannel(&TIM1_handle, &tim2OC2, TIM_CHANNEL_2);
 8001786:	2204      	movs	r2, #4
 8001788:	491e      	ldr	r1, [pc, #120]	; (8001804 <TIM1_init+0x180>)
 800178a:	481b      	ldr	r0, [pc, #108]	; (80017f8 <TIM1_init+0x174>)
 800178c:	f005 fec8 	bl	8007520 <HAL_TIM_PWM_ConfigChannel>


	HAL_TIM_Base_Start(&TIM1_handle);
 8001790:	4819      	ldr	r0, [pc, #100]	; (80017f8 <TIM1_init+0x174>)
 8001792:	f005 fc3d 	bl	8007010 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&TIM1_handle, TIM_CHANNEL_1);
 8001796:	2100      	movs	r1, #0
 8001798:	4817      	ldr	r0, [pc, #92]	; (80017f8 <TIM1_init+0x174>)
 800179a:	f005 fcf1 	bl	8007180 <HAL_TIM_PWM_Start>

	__HAL_TIM_DISABLE(&TIM1_handle);
 800179e:	4b16      	ldr	r3, [pc, #88]	; (80017f8 <TIM1_init+0x174>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	6a1a      	ldr	r2, [r3, #32]
 80017a4:	f241 1311 	movw	r3, #4369	; 0x1111
 80017a8:	4013      	ands	r3, r2
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d10f      	bne.n	80017ce <TIM1_init+0x14a>
 80017ae:	4b12      	ldr	r3, [pc, #72]	; (80017f8 <TIM1_init+0x174>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	6a1a      	ldr	r2, [r3, #32]
 80017b4:	f240 4344 	movw	r3, #1092	; 0x444
 80017b8:	4013      	ands	r3, r2
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d107      	bne.n	80017ce <TIM1_init+0x14a>
 80017be:	4b0e      	ldr	r3, [pc, #56]	; (80017f8 <TIM1_init+0x174>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	4b0c      	ldr	r3, [pc, #48]	; (80017f8 <TIM1_init+0x174>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f022 0201 	bic.w	r2, r2, #1
 80017cc:	601a      	str	r2, [r3, #0]

}
 80017ce:	bf00      	nop
 80017d0:	3710      	adds	r7, #16
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	40023800 	.word	0x40023800
 80017dc:	20000000 	.word	0x20000000
 80017e0:	014f8b59 	.word	0x014f8b59
 80017e4:	20000558 	.word	0x20000558
 80017e8:	1b4e81b5 	.word	0x1b4e81b5
 80017ec:	20000490 	.word	0x20000490
 80017f0:	38e38e39 	.word	0x38e38e39
 80017f4:	88888889 	.word	0x88888889
 80017f8:	20000510 	.word	0x20000510
 80017fc:	40010000 	.word	0x40010000
 8001800:	200004f4 	.word	0x200004f4
 8001804:	20000474 	.word	0x20000474

08001808 <DMA2_init>:

uint32_t dummy;


static void DMA2_init(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0

	// TIM2 Update event
	__HAL_RCC_DMA2_CLK_ENABLE();
 800180e:	2300      	movs	r3, #0
 8001810:	607b      	str	r3, [r7, #4]
 8001812:	4b65      	ldr	r3, [pc, #404]	; (80019a8 <DMA2_init+0x1a0>)
 8001814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001816:	4a64      	ldr	r2, [pc, #400]	; (80019a8 <DMA2_init+0x1a0>)
 8001818:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800181c:	6313      	str	r3, [r2, #48]	; 0x30
 800181e:	4b62      	ldr	r3, [pc, #392]	; (80019a8 <DMA2_init+0x1a0>)
 8001820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001822:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001826:	607b      	str	r3, [r7, #4]
 8001828:	687b      	ldr	r3, [r7, #4]

	dmaUpdate.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800182a:	4b60      	ldr	r3, [pc, #384]	; (80019ac <DMA2_init+0x1a4>)
 800182c:	2240      	movs	r2, #64	; 0x40
 800182e:	609a      	str	r2, [r3, #8]
	dmaUpdate.Init.PeriphInc = DMA_PINC_DISABLE;
 8001830:	4b5e      	ldr	r3, [pc, #376]	; (80019ac <DMA2_init+0x1a4>)
 8001832:	2200      	movs	r2, #0
 8001834:	60da      	str	r2, [r3, #12]
	dmaUpdate.Init.MemInc = DMA_MINC_DISABLE;
 8001836:	4b5d      	ldr	r3, [pc, #372]	; (80019ac <DMA2_init+0x1a4>)
 8001838:	2200      	movs	r2, #0
 800183a:	611a      	str	r2, [r3, #16]
	dmaUpdate.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800183c:	4b5b      	ldr	r3, [pc, #364]	; (80019ac <DMA2_init+0x1a4>)
 800183e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001842:	615a      	str	r2, [r3, #20]
	dmaUpdate.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001844:	4b59      	ldr	r3, [pc, #356]	; (80019ac <DMA2_init+0x1a4>)
 8001846:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800184a:	619a      	str	r2, [r3, #24]
	dmaUpdate.Init.Mode = DMA_CIRCULAR;
 800184c:	4b57      	ldr	r3, [pc, #348]	; (80019ac <DMA2_init+0x1a4>)
 800184e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001852:	61da      	str	r2, [r3, #28]
	dmaUpdate.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001854:	4b55      	ldr	r3, [pc, #340]	; (80019ac <DMA2_init+0x1a4>)
 8001856:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800185a:	621a      	str	r2, [r3, #32]
	dmaUpdate.Init.Channel = DMA_CHANNEL_6;
 800185c:	4b53      	ldr	r3, [pc, #332]	; (80019ac <DMA2_init+0x1a4>)
 800185e:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8001862:	605a      	str	r2, [r3, #4]

	dmaUpdate.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001864:	4b51      	ldr	r3, [pc, #324]	; (80019ac <DMA2_init+0x1a4>)
 8001866:	2200      	movs	r2, #0
 8001868:	625a      	str	r2, [r3, #36]	; 0x24
	dmaUpdate.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800186a:	4b50      	ldr	r3, [pc, #320]	; (80019ac <DMA2_init+0x1a4>)
 800186c:	2203      	movs	r2, #3
 800186e:	629a      	str	r2, [r3, #40]	; 0x28
	dmaUpdate.Init.MemBurst = DMA_MBURST_SINGLE;
 8001870:	4b4e      	ldr	r3, [pc, #312]	; (80019ac <DMA2_init+0x1a4>)
 8001872:	2200      	movs	r2, #0
 8001874:	62da      	str	r2, [r3, #44]	; 0x2c
	dmaUpdate.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001876:	4b4d      	ldr	r3, [pc, #308]	; (80019ac <DMA2_init+0x1a4>)
 8001878:	2200      	movs	r2, #0
 800187a:	631a      	str	r2, [r3, #48]	; 0x30

	dmaUpdate.Instance = DMA2_Stream5;
 800187c:	4b4b      	ldr	r3, [pc, #300]	; (80019ac <DMA2_init+0x1a4>)
 800187e:	4a4c      	ldr	r2, [pc, #304]	; (80019b0 <DMA2_init+0x1a8>)
 8001880:	601a      	str	r2, [r3, #0]
	//dmaUpdate.XferCpltCallback  = TransferComplete;
	//dmaUpdate.XferErrorCallback = TransferError;

	HAL_DMA_DeInit(&dmaUpdate);
 8001882:	484a      	ldr	r0, [pc, #296]	; (80019ac <DMA2_init+0x1a4>)
 8001884:	f000 fea4 	bl	80025d0 <HAL_DMA_DeInit>
	HAL_DMA_Init(&dmaUpdate);
 8001888:	4848      	ldr	r0, [pc, #288]	; (80019ac <DMA2_init+0x1a4>)
 800188a:	f000 fdf3 	bl	8002474 <HAL_DMA_Init>
	//HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
	//HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
	HAL_DMA_Start(&dmaUpdate, (uint32_t)WS2812_IO_High, (uint32_t)(&WS2812B_PORT->BSRR), BUFFER_SIZE);
 800188e:	4949      	ldr	r1, [pc, #292]	; (80019b4 <DMA2_init+0x1ac>)
 8001890:	2330      	movs	r3, #48	; 0x30
 8001892:	4a49      	ldr	r2, [pc, #292]	; (80019b8 <DMA2_init+0x1b0>)
 8001894:	4845      	ldr	r0, [pc, #276]	; (80019ac <DMA2_init+0x1a4>)
 8001896:	f000 fef9 	bl	800268c <HAL_DMA_Start>
	//HAL_DMA_Start(&dmaUpdate, (uint32_t)WS2812_IO_High, (uint32_t)&dummy, BUFFER_SIZE);


	// TIM2 CC1 event
	dmaCC1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800189a:	4b48      	ldr	r3, [pc, #288]	; (80019bc <DMA2_init+0x1b4>)
 800189c:	2240      	movs	r2, #64	; 0x40
 800189e:	609a      	str	r2, [r3, #8]
	dmaCC1.Init.PeriphInc = DMA_PINC_DISABLE;
 80018a0:	4b46      	ldr	r3, [pc, #280]	; (80019bc <DMA2_init+0x1b4>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	60da      	str	r2, [r3, #12]
	dmaCC1.Init.MemInc = DMA_MINC_ENABLE;
 80018a6:	4b45      	ldr	r3, [pc, #276]	; (80019bc <DMA2_init+0x1b4>)
 80018a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018ac:	611a      	str	r2, [r3, #16]
	dmaCC1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80018ae:	4b43      	ldr	r3, [pc, #268]	; (80019bc <DMA2_init+0x1b4>)
 80018b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80018b4:	615a      	str	r2, [r3, #20]
	dmaCC1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80018b6:	4b41      	ldr	r3, [pc, #260]	; (80019bc <DMA2_init+0x1b4>)
 80018b8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80018bc:	619a      	str	r2, [r3, #24]
	dmaCC1.Init.Mode = DMA_CIRCULAR;
 80018be:	4b3f      	ldr	r3, [pc, #252]	; (80019bc <DMA2_init+0x1b4>)
 80018c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018c4:	61da      	str	r2, [r3, #28]
	dmaCC1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80018c6:	4b3d      	ldr	r3, [pc, #244]	; (80019bc <DMA2_init+0x1b4>)
 80018c8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80018cc:	621a      	str	r2, [r3, #32]
	dmaCC1.Init.Channel = DMA_CHANNEL_6;
 80018ce:	4b3b      	ldr	r3, [pc, #236]	; (80019bc <DMA2_init+0x1b4>)
 80018d0:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 80018d4:	605a      	str	r2, [r3, #4]

	dmaCC1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80018d6:	4b39      	ldr	r3, [pc, #228]	; (80019bc <DMA2_init+0x1b4>)
 80018d8:	2200      	movs	r2, #0
 80018da:	625a      	str	r2, [r3, #36]	; 0x24
	dmaCC1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80018dc:	4b37      	ldr	r3, [pc, #220]	; (80019bc <DMA2_init+0x1b4>)
 80018de:	2203      	movs	r2, #3
 80018e0:	629a      	str	r2, [r3, #40]	; 0x28
	dmaCC1.Init.MemBurst = DMA_MBURST_SINGLE;
 80018e2:	4b36      	ldr	r3, [pc, #216]	; (80019bc <DMA2_init+0x1b4>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	62da      	str	r2, [r3, #44]	; 0x2c
	dmaCC1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80018e8:	4b34      	ldr	r3, [pc, #208]	; (80019bc <DMA2_init+0x1b4>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	631a      	str	r2, [r3, #48]	; 0x30

	dmaCC1.Instance = DMA2_Stream1;
 80018ee:	4b33      	ldr	r3, [pc, #204]	; (80019bc <DMA2_init+0x1b4>)
 80018f0:	4a33      	ldr	r2, [pc, #204]	; (80019c0 <DMA2_init+0x1b8>)
 80018f2:	601a      	str	r2, [r3, #0]
	//dmaUpdate.XferCpltCallback  = TransferComplete;
	//dmaUpdate.XferErrorCallback = TransferError;
	//dmaUpdate.XferHalfCpltCallback = TransferHalf;
	//HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
	//HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
	HAL_DMA_DeInit(&dmaCC1);
 80018f4:	4831      	ldr	r0, [pc, #196]	; (80019bc <DMA2_init+0x1b4>)
 80018f6:	f000 fe6b 	bl	80025d0 <HAL_DMA_DeInit>
	HAL_DMA_Init(&dmaCC1);
 80018fa:	4830      	ldr	r0, [pc, #192]	; (80019bc <DMA2_init+0x1b4>)
 80018fc:	f000 fdba 	bl	8002474 <HAL_DMA_Init>
	HAL_DMA_Start(&dmaCC1, (uint32_t)ws2812bDmaBitBuffer, (uint32_t)(&WS2812B_PORT->BSRR) + 2, BUFFER_SIZE); //BRR
 8001900:	4930      	ldr	r1, [pc, #192]	; (80019c4 <DMA2_init+0x1bc>)
 8001902:	2330      	movs	r3, #48	; 0x30
 8001904:	4a30      	ldr	r2, [pc, #192]	; (80019c8 <DMA2_init+0x1c0>)
 8001906:	482d      	ldr	r0, [pc, #180]	; (80019bc <DMA2_init+0x1b4>)
 8001908:	f000 fec0 	bl	800268c <HAL_DMA_Start>
	//HAL_DMA_Start(&dmaCC1, (uint32_t)ws2812bDmaBitBuffer, (uint32_t)&dummy, BUFFER_SIZE); //BRR


	// TIM2 CC2 event
	dmaCC2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800190c:	4b2f      	ldr	r3, [pc, #188]	; (80019cc <DMA2_init+0x1c4>)
 800190e:	2240      	movs	r2, #64	; 0x40
 8001910:	609a      	str	r2, [r3, #8]
	dmaCC2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001912:	4b2e      	ldr	r3, [pc, #184]	; (80019cc <DMA2_init+0x1c4>)
 8001914:	2200      	movs	r2, #0
 8001916:	60da      	str	r2, [r3, #12]
	dmaCC2.Init.MemInc = DMA_MINC_DISABLE;
 8001918:	4b2c      	ldr	r3, [pc, #176]	; (80019cc <DMA2_init+0x1c4>)
 800191a:	2200      	movs	r2, #0
 800191c:	611a      	str	r2, [r3, #16]
	dmaCC2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800191e:	4b2b      	ldr	r3, [pc, #172]	; (80019cc <DMA2_init+0x1c4>)
 8001920:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001924:	615a      	str	r2, [r3, #20]
	dmaCC2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001926:	4b29      	ldr	r3, [pc, #164]	; (80019cc <DMA2_init+0x1c4>)
 8001928:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800192c:	619a      	str	r2, [r3, #24]
	dmaCC2.Init.Mode = DMA_CIRCULAR;
 800192e:	4b27      	ldr	r3, [pc, #156]	; (80019cc <DMA2_init+0x1c4>)
 8001930:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001934:	61da      	str	r2, [r3, #28]
	dmaCC2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001936:	4b25      	ldr	r3, [pc, #148]	; (80019cc <DMA2_init+0x1c4>)
 8001938:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800193c:	621a      	str	r2, [r3, #32]
	dmaCC2.Init.Channel = DMA_CHANNEL_6;
 800193e:	4b23      	ldr	r3, [pc, #140]	; (80019cc <DMA2_init+0x1c4>)
 8001940:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8001944:	605a      	str	r2, [r3, #4]

	dmaCC2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001946:	4b21      	ldr	r3, [pc, #132]	; (80019cc <DMA2_init+0x1c4>)
 8001948:	2200      	movs	r2, #0
 800194a:	625a      	str	r2, [r3, #36]	; 0x24
	dmaCC2.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800194c:	4b1f      	ldr	r3, [pc, #124]	; (80019cc <DMA2_init+0x1c4>)
 800194e:	2203      	movs	r2, #3
 8001950:	629a      	str	r2, [r3, #40]	; 0x28
	dmaCC2.Init.MemBurst = DMA_MBURST_SINGLE;
 8001952:	4b1e      	ldr	r3, [pc, #120]	; (80019cc <DMA2_init+0x1c4>)
 8001954:	2200      	movs	r2, #0
 8001956:	62da      	str	r2, [r3, #44]	; 0x2c
	dmaCC2.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001958:	4b1c      	ldr	r3, [pc, #112]	; (80019cc <DMA2_init+0x1c4>)
 800195a:	2200      	movs	r2, #0
 800195c:	631a      	str	r2, [r3, #48]	; 0x30

	dmaCC2.Instance = DMA2_Stream2;
 800195e:	4b1b      	ldr	r3, [pc, #108]	; (80019cc <DMA2_init+0x1c4>)
 8001960:	4a1b      	ldr	r2, [pc, #108]	; (80019d0 <DMA2_init+0x1c8>)
 8001962:	601a      	str	r2, [r3, #0]

	HAL_DMA_DeInit(&dmaCC2);
 8001964:	4819      	ldr	r0, [pc, #100]	; (80019cc <DMA2_init+0x1c4>)
 8001966:	f000 fe33 	bl	80025d0 <HAL_DMA_DeInit>

	dmaCC2.XferCpltCallback  = DMA_TransferCompleteHandler;
 800196a:	4b18      	ldr	r3, [pc, #96]	; (80019cc <DMA2_init+0x1c4>)
 800196c:	4a19      	ldr	r2, [pc, #100]	; (80019d4 <DMA2_init+0x1cc>)
 800196e:	63da      	str	r2, [r3, #60]	; 0x3c
	dmaCC2.XferHalfCpltCallback = DMA_TransferHalfHandler;
 8001970:	4b16      	ldr	r3, [pc, #88]	; (80019cc <DMA2_init+0x1c4>)
 8001972:	4a19      	ldr	r2, [pc, #100]	; (80019d8 <DMA2_init+0x1d0>)
 8001974:	641a      	str	r2, [r3, #64]	; 0x40
	dmaCC2.XferErrorCallback = DMA_TransferError;
 8001976:	4b15      	ldr	r3, [pc, #84]	; (80019cc <DMA2_init+0x1c4>)
 8001978:	4a18      	ldr	r2, [pc, #96]	; (80019dc <DMA2_init+0x1d4>)
 800197a:	64da      	str	r2, [r3, #76]	; 0x4c

	HAL_DMA_Init(&dmaCC2);
 800197c:	4813      	ldr	r0, [pc, #76]	; (80019cc <DMA2_init+0x1c4>)
 800197e:	f000 fd79 	bl	8002474 <HAL_DMA_Init>
	HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8001982:	2200      	movs	r2, #0
 8001984:	2100      	movs	r1, #0
 8001986:	203a      	movs	r0, #58	; 0x3a
 8001988:	f000 fd3d 	bl	8002406 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800198c:	203a      	movs	r0, #58	; 0x3a
 800198e:	f000 fd56 	bl	800243e <HAL_NVIC_EnableIRQ>
	HAL_DMA_Start_IT(&dmaCC2, (uint32_t)WS2812_IO_Low, (uint32_t)&WS2812B_PORT->BSRR, BUFFER_SIZE);
 8001992:	4913      	ldr	r1, [pc, #76]	; (80019e0 <DMA2_init+0x1d8>)
 8001994:	2330      	movs	r3, #48	; 0x30
 8001996:	4a08      	ldr	r2, [pc, #32]	; (80019b8 <DMA2_init+0x1b0>)
 8001998:	480c      	ldr	r0, [pc, #48]	; (80019cc <DMA2_init+0x1c4>)
 800199a:	f000 feb2 	bl	8002702 <HAL_DMA_Start_IT>
	//HAL_DMA_Start_IT(&dmaCC2, (uint32_t)WS2812_IO_Low, (uint32_t)&dummy, BUFFER_SIZE);

	//__HAL_LINKDMA(&Tim2Handle, hdma,  &dmaCC2);

}
 800199e:	bf00      	nop
 80019a0:	3708      	adds	r7, #8
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	40023800 	.word	0x40023800
 80019ac:	20000620 	.word	0x20000620
 80019b0:	40026488 	.word	0x40026488
 80019b4:	20000004 	.word	0x20000004
 80019b8:	40020818 	.word	0x40020818
 80019bc:	2000055c 	.word	0x2000055c
 80019c0:	40026428 	.word	0x40026428
 80019c4:	200005c0 	.word	0x200005c0
 80019c8:	4002081a 	.word	0x4002081a
 80019cc:	20000494 	.word	0x20000494
 80019d0:	40026440 	.word	0x40026440
 80019d4:	08001cdd 	.word	0x08001cdd
 80019d8:	08001c81 	.word	0x08001c81
 80019dc:	08001c61 	.word	0x08001c61
 80019e0:	20000008 	.word	0x20000008

080019e4 <loadNextFramebufferData>:




static void loadNextFramebufferData(WS2812_BufferItem *bItem, uint32_t row)
{
 80019e4:	b590      	push	{r4, r7, lr}
 80019e6:	b089      	sub	sp, #36	; 0x24
 80019e8:	af02      	add	r7, sp, #8
 80019ea:	6078      	str	r0, [r7, #4]
 80019ec:	6039      	str	r1, [r7, #0]

	uint32_t r = bItem->frameBufferPointer[bItem->frameBufferCounter++];
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	689b      	ldr	r3, [r3, #8]
 80019f6:	1c58      	adds	r0, r3, #1
 80019f8:	6879      	ldr	r1, [r7, #4]
 80019fa:	6088      	str	r0, [r1, #8]
 80019fc:	4413      	add	r3, r2
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	617b      	str	r3, [r7, #20]
	uint32_t g = bItem->frameBufferPointer[bItem->frameBufferCounter++];
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681a      	ldr	r2, [r3, #0]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	689b      	ldr	r3, [r3, #8]
 8001a0a:	1c58      	adds	r0, r3, #1
 8001a0c:	6879      	ldr	r1, [r7, #4]
 8001a0e:	6088      	str	r0, [r1, #8]
 8001a10:	4413      	add	r3, r2
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	613b      	str	r3, [r7, #16]
	uint32_t b = bItem->frameBufferPointer[bItem->frameBufferCounter++];
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	1c58      	adds	r0, r3, #1
 8001a20:	6879      	ldr	r1, [r7, #4]
 8001a22:	6088      	str	r0, [r1, #8]
 8001a24:	4413      	add	r3, r2
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	60fb      	str	r3, [r7, #12]

	if(bItem->frameBufferCounter == bItem->frameBufferSize)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	689a      	ldr	r2, [r3, #8]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	429a      	cmp	r2, r3
 8001a34:	d102      	bne.n	8001a3c <loadNextFramebufferData+0x58>
		bItem->frameBufferCounter = 0;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2200      	movs	r2, #0
 8001a3a:	609a      	str	r2, [r3, #8]

	ws2812b_set_pixel(bItem->channel, row, r, g, b);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	7b18      	ldrb	r0, [r3, #12]
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	b299      	uxth	r1, r3
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	b2da      	uxtb	r2, r3
 8001a48:	693b      	ldr	r3, [r7, #16]
 8001a4a:	b2dc      	uxtb	r4, r3
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	b2db      	uxtb	r3, r3
 8001a50:	9300      	str	r3, [sp, #0]
 8001a52:	4623      	mov	r3, r4
 8001a54:	f000 fa34 	bl	8001ec0 <ws2812b_set_pixel>
}
 8001a58:	bf00      	nop
 8001a5a:	371c      	adds	r7, #28
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd90      	pop	{r4, r7, pc}

08001a60 <WS2812_sendbuf>:


// Transmit the framebuffer
static void WS2812_sendbuf()
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
	// transmission complete flag
	ws2812b.transferComplete = 0;
 8001a66:	4b72      	ldr	r3, [pc, #456]	; (8001c30 <WS2812_sendbuf+0x1d0>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	741a      	strb	r2, [r3, #16]

	uint32_t i;

	for( i = 0; i < WS2812_BUFFER_COUNT; i++ )
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	607b      	str	r3, [r7, #4]
 8001a70:	e019      	b.n	8001aa6 <WS2812_sendbuf+0x46>
	{
		ws2812b.item[i].frameBufferCounter = 0;
 8001a72:	4a6f      	ldr	r2, [pc, #444]	; (8001c30 <WS2812_sendbuf+0x1d0>)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	011b      	lsls	r3, r3, #4
 8001a78:	4413      	add	r3, r2
 8001a7a:	3308      	adds	r3, #8
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	601a      	str	r2, [r3, #0]

		loadNextFramebufferData(&ws2812b.item[i], 0); // ROW 0
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	011b      	lsls	r3, r3, #4
 8001a84:	4a6a      	ldr	r2, [pc, #424]	; (8001c30 <WS2812_sendbuf+0x1d0>)
 8001a86:	4413      	add	r3, r2
 8001a88:	2100      	movs	r1, #0
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f7ff ffaa 	bl	80019e4 <loadNextFramebufferData>
		loadNextFramebufferData(&ws2812b.item[i], 1); // ROW 0
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	011b      	lsls	r3, r3, #4
 8001a94:	4a66      	ldr	r2, [pc, #408]	; (8001c30 <WS2812_sendbuf+0x1d0>)
 8001a96:	4413      	add	r3, r2
 8001a98:	2101      	movs	r1, #1
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f7ff ffa2 	bl	80019e4 <loadNextFramebufferData>
	for( i = 0; i < WS2812_BUFFER_COUNT; i++ )
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	3301      	adds	r3, #1
 8001aa4:	607b      	str	r3, [r7, #4]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d0e2      	beq.n	8001a72 <WS2812_sendbuf+0x12>
	}

	// clear all DMA flags
	__HAL_DMA_CLEAR_FLAG(&dmaUpdate, DMA_FLAG_TCIF1_5 | DMA_FLAG_HTIF1_5 | DMA_FLAG_TEIF1_5);
 8001aac:	4b61      	ldr	r3, [pc, #388]	; (8001c34 <WS2812_sendbuf+0x1d4>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	4b61      	ldr	r3, [pc, #388]	; (8001c38 <WS2812_sendbuf+0x1d8>)
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	d904      	bls.n	8001ac2 <WS2812_sendbuf+0x62>
 8001ab8:	4b60      	ldr	r3, [pc, #384]	; (8001c3c <WS2812_sendbuf+0x1dc>)
 8001aba:	f44f 6260 	mov.w	r2, #3584	; 0xe00
 8001abe:	60da      	str	r2, [r3, #12]
 8001ac0:	e019      	b.n	8001af6 <WS2812_sendbuf+0x96>
 8001ac2:	4b5c      	ldr	r3, [pc, #368]	; (8001c34 <WS2812_sendbuf+0x1d4>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	461a      	mov	r2, r3
 8001ac8:	4b5d      	ldr	r3, [pc, #372]	; (8001c40 <WS2812_sendbuf+0x1e0>)
 8001aca:	429a      	cmp	r2, r3
 8001acc:	d904      	bls.n	8001ad8 <WS2812_sendbuf+0x78>
 8001ace:	4a5b      	ldr	r2, [pc, #364]	; (8001c3c <WS2812_sendbuf+0x1dc>)
 8001ad0:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 8001ad4:	6093      	str	r3, [r2, #8]
 8001ad6:	e00e      	b.n	8001af6 <WS2812_sendbuf+0x96>
 8001ad8:	4b56      	ldr	r3, [pc, #344]	; (8001c34 <WS2812_sendbuf+0x1d4>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	461a      	mov	r2, r3
 8001ade:	4b59      	ldr	r3, [pc, #356]	; (8001c44 <WS2812_sendbuf+0x1e4>)
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	d904      	bls.n	8001aee <WS2812_sendbuf+0x8e>
 8001ae4:	4a58      	ldr	r2, [pc, #352]	; (8001c48 <WS2812_sendbuf+0x1e8>)
 8001ae6:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 8001aea:	60d3      	str	r3, [r2, #12]
 8001aec:	e003      	b.n	8001af6 <WS2812_sendbuf+0x96>
 8001aee:	4a56      	ldr	r2, [pc, #344]	; (8001c48 <WS2812_sendbuf+0x1e8>)
 8001af0:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 8001af4:	6093      	str	r3, [r2, #8]
	__HAL_DMA_CLEAR_FLAG(&dmaCC1, DMA_FLAG_TCIF1_5 | DMA_FLAG_HTIF1_5 | DMA_FLAG_TEIF1_5);
 8001af6:	4b55      	ldr	r3, [pc, #340]	; (8001c4c <WS2812_sendbuf+0x1ec>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	461a      	mov	r2, r3
 8001afc:	4b4e      	ldr	r3, [pc, #312]	; (8001c38 <WS2812_sendbuf+0x1d8>)
 8001afe:	429a      	cmp	r2, r3
 8001b00:	d904      	bls.n	8001b0c <WS2812_sendbuf+0xac>
 8001b02:	4b4e      	ldr	r3, [pc, #312]	; (8001c3c <WS2812_sendbuf+0x1dc>)
 8001b04:	f44f 6260 	mov.w	r2, #3584	; 0xe00
 8001b08:	60da      	str	r2, [r3, #12]
 8001b0a:	e019      	b.n	8001b40 <WS2812_sendbuf+0xe0>
 8001b0c:	4b4f      	ldr	r3, [pc, #316]	; (8001c4c <WS2812_sendbuf+0x1ec>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	461a      	mov	r2, r3
 8001b12:	4b4b      	ldr	r3, [pc, #300]	; (8001c40 <WS2812_sendbuf+0x1e0>)
 8001b14:	429a      	cmp	r2, r3
 8001b16:	d904      	bls.n	8001b22 <WS2812_sendbuf+0xc2>
 8001b18:	4a48      	ldr	r2, [pc, #288]	; (8001c3c <WS2812_sendbuf+0x1dc>)
 8001b1a:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 8001b1e:	6093      	str	r3, [r2, #8]
 8001b20:	e00e      	b.n	8001b40 <WS2812_sendbuf+0xe0>
 8001b22:	4b4a      	ldr	r3, [pc, #296]	; (8001c4c <WS2812_sendbuf+0x1ec>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	461a      	mov	r2, r3
 8001b28:	4b46      	ldr	r3, [pc, #280]	; (8001c44 <WS2812_sendbuf+0x1e4>)
 8001b2a:	429a      	cmp	r2, r3
 8001b2c:	d904      	bls.n	8001b38 <WS2812_sendbuf+0xd8>
 8001b2e:	4a46      	ldr	r2, [pc, #280]	; (8001c48 <WS2812_sendbuf+0x1e8>)
 8001b30:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 8001b34:	60d3      	str	r3, [r2, #12]
 8001b36:	e003      	b.n	8001b40 <WS2812_sendbuf+0xe0>
 8001b38:	4a43      	ldr	r2, [pc, #268]	; (8001c48 <WS2812_sendbuf+0x1e8>)
 8001b3a:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 8001b3e:	6093      	str	r3, [r2, #8]
	__HAL_DMA_CLEAR_FLAG(&dmaCC2, DMA_FLAG_TCIF2_6 | DMA_FLAG_HTIF2_6 | DMA_FLAG_TEIF2_6);
 8001b40:	4b43      	ldr	r3, [pc, #268]	; (8001c50 <WS2812_sendbuf+0x1f0>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	461a      	mov	r2, r3
 8001b46:	4b3c      	ldr	r3, [pc, #240]	; (8001c38 <WS2812_sendbuf+0x1d8>)
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	d904      	bls.n	8001b56 <WS2812_sendbuf+0xf6>
 8001b4c:	4b3b      	ldr	r3, [pc, #236]	; (8001c3c <WS2812_sendbuf+0x1dc>)
 8001b4e:	f44f 1260 	mov.w	r2, #3670016	; 0x380000
 8001b52:	60da      	str	r2, [r3, #12]
 8001b54:	e019      	b.n	8001b8a <WS2812_sendbuf+0x12a>
 8001b56:	4b3e      	ldr	r3, [pc, #248]	; (8001c50 <WS2812_sendbuf+0x1f0>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	461a      	mov	r2, r3
 8001b5c:	4b38      	ldr	r3, [pc, #224]	; (8001c40 <WS2812_sendbuf+0x1e0>)
 8001b5e:	429a      	cmp	r2, r3
 8001b60:	d904      	bls.n	8001b6c <WS2812_sendbuf+0x10c>
 8001b62:	4a36      	ldr	r2, [pc, #216]	; (8001c3c <WS2812_sendbuf+0x1dc>)
 8001b64:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8001b68:	6093      	str	r3, [r2, #8]
 8001b6a:	e00e      	b.n	8001b8a <WS2812_sendbuf+0x12a>
 8001b6c:	4b38      	ldr	r3, [pc, #224]	; (8001c50 <WS2812_sendbuf+0x1f0>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	461a      	mov	r2, r3
 8001b72:	4b34      	ldr	r3, [pc, #208]	; (8001c44 <WS2812_sendbuf+0x1e4>)
 8001b74:	429a      	cmp	r2, r3
 8001b76:	d904      	bls.n	8001b82 <WS2812_sendbuf+0x122>
 8001b78:	4a33      	ldr	r2, [pc, #204]	; (8001c48 <WS2812_sendbuf+0x1e8>)
 8001b7a:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8001b7e:	60d3      	str	r3, [r2, #12]
 8001b80:	e003      	b.n	8001b8a <WS2812_sendbuf+0x12a>
 8001b82:	4a31      	ldr	r2, [pc, #196]	; (8001c48 <WS2812_sendbuf+0x1e8>)
 8001b84:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8001b88:	6093      	str	r3, [r2, #8]



	// configure the number of bytes to be transferred by the DMA controller
	dmaUpdate.Instance->NDTR = BUFFER_SIZE;
 8001b8a:	4b2a      	ldr	r3, [pc, #168]	; (8001c34 <WS2812_sendbuf+0x1d4>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	2230      	movs	r2, #48	; 0x30
 8001b90:	605a      	str	r2, [r3, #4]
	dmaCC1.Instance->NDTR = BUFFER_SIZE;
 8001b92:	4b2e      	ldr	r3, [pc, #184]	; (8001c4c <WS2812_sendbuf+0x1ec>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	2230      	movs	r2, #48	; 0x30
 8001b98:	605a      	str	r2, [r3, #4]
	dmaCC2.Instance->NDTR = BUFFER_SIZE;
 8001b9a:	4b2d      	ldr	r3, [pc, #180]	; (8001c50 <WS2812_sendbuf+0x1f0>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	2230      	movs	r2, #48	; 0x30
 8001ba0:	605a      	str	r2, [r3, #4]

	// clear all TIM2 flags
	__HAL_TIM_CLEAR_FLAG(&TIM1_handle, TIM_FLAG_UPDATE | TIM_FLAG_CC1 | TIM_FLAG_CC2 | TIM_FLAG_CC3 | TIM_FLAG_CC4);
 8001ba2:	4b2c      	ldr	r3, [pc, #176]	; (8001c54 <WS2812_sendbuf+0x1f4>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f06f 021f 	mvn.w	r2, #31
 8001baa:	611a      	str	r2, [r3, #16]

	// enable DMA channels
	__HAL_DMA_ENABLE(&dmaUpdate);
 8001bac:	4b21      	ldr	r3, [pc, #132]	; (8001c34 <WS2812_sendbuf+0x1d4>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	4b20      	ldr	r3, [pc, #128]	; (8001c34 <WS2812_sendbuf+0x1d4>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f042 0201 	orr.w	r2, r2, #1
 8001bba:	601a      	str	r2, [r3, #0]
	__HAL_DMA_ENABLE(&dmaCC1);
 8001bbc:	4b23      	ldr	r3, [pc, #140]	; (8001c4c <WS2812_sendbuf+0x1ec>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	4b22      	ldr	r3, [pc, #136]	; (8001c4c <WS2812_sendbuf+0x1ec>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f042 0201 	orr.w	r2, r2, #1
 8001bca:	601a      	str	r2, [r3, #0]
	__HAL_DMA_ENABLE(&dmaCC2);
 8001bcc:	4b20      	ldr	r3, [pc, #128]	; (8001c50 <WS2812_sendbuf+0x1f0>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	4b1f      	ldr	r3, [pc, #124]	; (8001c50 <WS2812_sendbuf+0x1f0>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f042 0201 	orr.w	r2, r2, #1
 8001bda:	601a      	str	r2, [r3, #0]

	// IMPORTANT: enable the TIM2 DMA requests AFTER enabling the DMA channels!
	__HAL_TIM_ENABLE_DMA(&TIM1_handle, TIM_DMA_UPDATE);
 8001bdc:	4b1d      	ldr	r3, [pc, #116]	; (8001c54 <WS2812_sendbuf+0x1f4>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	68da      	ldr	r2, [r3, #12]
 8001be2:	4b1c      	ldr	r3, [pc, #112]	; (8001c54 <WS2812_sendbuf+0x1f4>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001bea:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(&TIM1_handle, TIM_DMA_CC1);
 8001bec:	4b19      	ldr	r3, [pc, #100]	; (8001c54 <WS2812_sendbuf+0x1f4>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	68da      	ldr	r2, [r3, #12]
 8001bf2:	4b18      	ldr	r3, [pc, #96]	; (8001c54 <WS2812_sendbuf+0x1f4>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001bfa:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(&TIM1_handle, TIM_DMA_CC2);
 8001bfc:	4b15      	ldr	r3, [pc, #84]	; (8001c54 <WS2812_sendbuf+0x1f4>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	68da      	ldr	r2, [r3, #12]
 8001c02:	4b14      	ldr	r3, [pc, #80]	; (8001c54 <WS2812_sendbuf+0x1f4>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001c0a:	60da      	str	r2, [r3, #12]

	TIM1->CNT = tim_period-1;
 8001c0c:	4b12      	ldr	r3, [pc, #72]	; (8001c58 <WS2812_sendbuf+0x1f8>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a12      	ldr	r2, [pc, #72]	; (8001c5c <WS2812_sendbuf+0x1fc>)
 8001c12:	3b01      	subs	r3, #1
 8001c14:	6253      	str	r3, [r2, #36]	; 0x24

	// start TIM2
	__HAL_TIM_ENABLE(&TIM1_handle);
 8001c16:	4b0f      	ldr	r3, [pc, #60]	; (8001c54 <WS2812_sendbuf+0x1f4>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	4b0d      	ldr	r3, [pc, #52]	; (8001c54 <WS2812_sendbuf+0x1f4>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f042 0201 	orr.w	r2, r2, #1
 8001c24:	601a      	str	r2, [r3, #0]
}
 8001c26:	bf00      	nop
 8001c28:	3708      	adds	r7, #8
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	20000110 	.word	0x20000110
 8001c34:	20000620 	.word	0x20000620
 8001c38:	40026458 	.word	0x40026458
 8001c3c:	40026400 	.word	0x40026400
 8001c40:	400260b8 	.word	0x400260b8
 8001c44:	40026058 	.word	0x40026058
 8001c48:	40026000 	.word	0x40026000
 8001c4c:	2000055c 	.word	0x2000055c
 8001c50:	20000494 	.word	0x20000494
 8001c54:	20000510 	.word	0x20000510
 8001c58:	20000558 	.word	0x20000558
 8001c5c:	40010000 	.word	0x40010000

08001c60 <DMA_TransferError>:


void DMA_TransferError(DMA_HandleTypeDef *DmaHandle)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b085      	sub	sp, #20
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
	volatile int i = 0;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	60fb      	str	r3, [r7, #12]
	i++;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	3301      	adds	r3, #1
 8001c70:	60fb      	str	r3, [r7, #12]
}
 8001c72:	bf00      	nop
 8001c74:	3714      	adds	r7, #20
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr
	...

08001c80 <DMA_TransferHalfHandler>:


void DMA_TransferHalfHandler(DMA_HandleTypeDef *DmaHandle)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b086      	sub	sp, #24
 8001c84:	af02      	add	r7, sp, #8
 8001c86:	6078      	str	r0, [r7, #4]

	// Is this the last LED?
	if(ws2812b.repeatCounter == WS2812B_NUMBER_OF_LEDS)
 8001c88:	4b13      	ldr	r3, [pc, #76]	; (8001cd8 <DMA_TransferHalfHandler+0x58>)
 8001c8a:	699b      	ldr	r3, [r3, #24]
 8001c8c:	2b78      	cmp	r3, #120	; 0x78
 8001c8e:	d108      	bne.n	8001ca2 <DMA_TransferHalfHandler+0x22>
	 {

		// If this is the last pixel, set the next pixel value to zeros, because
		// the DMA would not stop exactly at the last bit.
		ws2812b_set_pixel(0, 0, 0, 0, 0);
 8001c90:	2300      	movs	r3, #0
 8001c92:	9300      	str	r3, [sp, #0]
 8001c94:	2300      	movs	r3, #0
 8001c96:	2200      	movs	r2, #0
 8001c98:	2100      	movs	r1, #0
 8001c9a:	2000      	movs	r0, #0
 8001c9c:	f000 f910 	bl	8001ec0 <ws2812b_set_pixel>
		ws2812b.repeatCounter++;
	}



}
 8001ca0:	e015      	b.n	8001cce <DMA_TransferHalfHandler+0x4e>
		for( i = 0; i < WS2812_BUFFER_COUNT; i++ )
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	60fb      	str	r3, [r7, #12]
 8001ca6:	e00a      	b.n	8001cbe <DMA_TransferHalfHandler+0x3e>
			loadNextFramebufferData(&ws2812b.item[i], 0);
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	011b      	lsls	r3, r3, #4
 8001cac:	4a0a      	ldr	r2, [pc, #40]	; (8001cd8 <DMA_TransferHalfHandler+0x58>)
 8001cae:	4413      	add	r3, r2
 8001cb0:	2100      	movs	r1, #0
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f7ff fe96 	bl	80019e4 <loadNextFramebufferData>
		for( i = 0; i < WS2812_BUFFER_COUNT; i++ )
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	3301      	adds	r3, #1
 8001cbc:	60fb      	str	r3, [r7, #12]
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d0f1      	beq.n	8001ca8 <DMA_TransferHalfHandler+0x28>
		ws2812b.repeatCounter++;
 8001cc4:	4b04      	ldr	r3, [pc, #16]	; (8001cd8 <DMA_TransferHalfHandler+0x58>)
 8001cc6:	699b      	ldr	r3, [r3, #24]
 8001cc8:	3301      	adds	r3, #1
 8001cca:	4a03      	ldr	r2, [pc, #12]	; (8001cd8 <DMA_TransferHalfHandler+0x58>)
 8001ccc:	6193      	str	r3, [r2, #24]
}
 8001cce:	bf00      	nop
 8001cd0:	3710      	adds	r7, #16
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	20000110 	.word	0x20000110

08001cdc <DMA_TransferCompleteHandler>:

void DMA_TransferCompleteHandler(DMA_HandleTypeDef *DmaHandle)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b084      	sub	sp, #16
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]

	#if defined(LED_ORANGE_PORT)
		LED_ORANGE_PORT->BSRR = LED_ORANGE_PIN;
 8001ce4:	4b40      	ldr	r3, [pc, #256]	; (8001de8 <DMA_TransferCompleteHandler+0x10c>)
 8001ce6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001cea:	619a      	str	r2, [r3, #24]
	#endif

	if(ws2812b.repeatCounter == WS2812B_NUMBER_OF_LEDS)
 8001cec:	4b3f      	ldr	r3, [pc, #252]	; (8001dec <DMA_TransferCompleteHandler+0x110>)
 8001cee:	699b      	ldr	r3, [r3, #24]
 8001cf0:	2b78      	cmp	r3, #120	; 0x78
 8001cf2:	d15a      	bne.n	8001daa <DMA_TransferCompleteHandler+0xce>
	{
		// Transfer of all LEDs is done, disable DMA but enable tiemr update IRQ to stop the 50us pulse
		ws2812b.repeatCounter = 0;
 8001cf4:	4b3d      	ldr	r3, [pc, #244]	; (8001dec <DMA_TransferCompleteHandler+0x110>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	619a      	str	r2, [r3, #24]

		// Stop timer
		TIM1->CR1 &= ~TIM_CR1_CEN;
 8001cfa:	4b3d      	ldr	r3, [pc, #244]	; (8001df0 <DMA_TransferCompleteHandler+0x114>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a3c      	ldr	r2, [pc, #240]	; (8001df0 <DMA_TransferCompleteHandler+0x114>)
 8001d00:	f023 0301 	bic.w	r3, r3, #1
 8001d04:	6013      	str	r3, [r2, #0]

		// Disable DMA
		__HAL_DMA_DISABLE(&dmaUpdate);
 8001d06:	4b3b      	ldr	r3, [pc, #236]	; (8001df4 <DMA_TransferCompleteHandler+0x118>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	4b39      	ldr	r3, [pc, #228]	; (8001df4 <DMA_TransferCompleteHandler+0x118>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f022 0201 	bic.w	r2, r2, #1
 8001d14:	601a      	str	r2, [r3, #0]
		__HAL_DMA_DISABLE(&dmaCC1);
 8001d16:	4b38      	ldr	r3, [pc, #224]	; (8001df8 <DMA_TransferCompleteHandler+0x11c>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	681a      	ldr	r2, [r3, #0]
 8001d1c:	4b36      	ldr	r3, [pc, #216]	; (8001df8 <DMA_TransferCompleteHandler+0x11c>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f022 0201 	bic.w	r2, r2, #1
 8001d24:	601a      	str	r2, [r3, #0]
		__HAL_DMA_DISABLE(&dmaCC2);
 8001d26:	4b35      	ldr	r3, [pc, #212]	; (8001dfc <DMA_TransferCompleteHandler+0x120>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	4b33      	ldr	r3, [pc, #204]	; (8001dfc <DMA_TransferCompleteHandler+0x120>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f022 0201 	bic.w	r2, r2, #1
 8001d34:	601a      	str	r2, [r3, #0]

		// Disable the DMA requests
		__HAL_TIM_DISABLE_DMA(&TIM1_handle, TIM_DMA_UPDATE);
 8001d36:	4b32      	ldr	r3, [pc, #200]	; (8001e00 <DMA_TransferCompleteHandler+0x124>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	68da      	ldr	r2, [r3, #12]
 8001d3c:	4b30      	ldr	r3, [pc, #192]	; (8001e00 <DMA_TransferCompleteHandler+0x124>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001d44:	60da      	str	r2, [r3, #12]
		__HAL_TIM_DISABLE_DMA(&TIM1_handle, TIM_DMA_CC1);
 8001d46:	4b2e      	ldr	r3, [pc, #184]	; (8001e00 <DMA_TransferCompleteHandler+0x124>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	68da      	ldr	r2, [r3, #12]
 8001d4c:	4b2c      	ldr	r3, [pc, #176]	; (8001e00 <DMA_TransferCompleteHandler+0x124>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001d54:	60da      	str	r2, [r3, #12]
		__HAL_TIM_DISABLE_DMA(&TIM1_handle, TIM_DMA_CC2);
 8001d56:	4b2a      	ldr	r3, [pc, #168]	; (8001e00 <DMA_TransferCompleteHandler+0x124>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	68da      	ldr	r2, [r3, #12]
 8001d5c:	4b28      	ldr	r3, [pc, #160]	; (8001e00 <DMA_TransferCompleteHandler+0x124>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d64:	60da      	str	r2, [r3, #12]

		// Set 50us period for Treset pulse
		//TIM2->PSC = 1000; // For this long period we need prescaler 1000
		TIM1->ARR = timer_reset_pulse_period;
 8001d66:	4a22      	ldr	r2, [pc, #136]	; (8001df0 <DMA_TransferCompleteHandler+0x114>)
 8001d68:	4b26      	ldr	r3, [pc, #152]	; (8001e04 <DMA_TransferCompleteHandler+0x128>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	62d3      	str	r3, [r2, #44]	; 0x2c
		// Reset the timer
		TIM1->CNT = 0;
 8001d6e:	4b20      	ldr	r3, [pc, #128]	; (8001df0 <DMA_TransferCompleteHandler+0x114>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	625a      	str	r2, [r3, #36]	; 0x24

		// Generate an update event to reload the prescaler value immediately
		TIM1->EGR = TIM_EGR_UG;
 8001d74:	4b1e      	ldr	r3, [pc, #120]	; (8001df0 <DMA_TransferCompleteHandler+0x114>)
 8001d76:	2201      	movs	r2, #1
 8001d78:	615a      	str	r2, [r3, #20]
		__HAL_TIM_CLEAR_FLAG(&TIM1_handle, TIM_FLAG_UPDATE);
 8001d7a:	4b21      	ldr	r3, [pc, #132]	; (8001e00 <DMA_TransferCompleteHandler+0x124>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f06f 0201 	mvn.w	r2, #1
 8001d82:	611a      	str	r2, [r3, #16]

		// Enable TIM2 Update interrupt for 50us Treset signal
		__HAL_TIM_ENABLE_IT(&TIM1_handle, TIM_IT_UPDATE);
 8001d84:	4b1e      	ldr	r3, [pc, #120]	; (8001e00 <DMA_TransferCompleteHandler+0x124>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	68da      	ldr	r2, [r3, #12]
 8001d8a:	4b1d      	ldr	r3, [pc, #116]	; (8001e00 <DMA_TransferCompleteHandler+0x124>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f042 0201 	orr.w	r2, r2, #1
 8001d92:	60da      	str	r2, [r3, #12]
		// Enable timer
		TIM1->CR1 |= TIM_CR1_CEN;
 8001d94:	4b16      	ldr	r3, [pc, #88]	; (8001df0 <DMA_TransferCompleteHandler+0x114>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a15      	ldr	r2, [pc, #84]	; (8001df0 <DMA_TransferCompleteHandler+0x114>)
 8001d9a:	f043 0301 	orr.w	r3, r3, #1
 8001d9e:	6013      	str	r3, [r2, #0]

		// Manually set outputs to low to generate 50us reset impulse
		WS2812B_PORT->BSRR = WS2812_IO_Low[0];
 8001da0:	4a19      	ldr	r2, [pc, #100]	; (8001e08 <DMA_TransferCompleteHandler+0x12c>)
 8001da2:	4b1a      	ldr	r3, [pc, #104]	; (8001e0c <DMA_TransferCompleteHandler+0x130>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	6193      	str	r3, [r2, #24]
 8001da8:	e015      	b.n	8001dd6 <DMA_TransferCompleteHandler+0xfa>
	} else {

		// Load bitbuffer with next RGB LED values
		uint32_t i;
		for( i = 0; i < WS2812_BUFFER_COUNT; i++ )
 8001daa:	2300      	movs	r3, #0
 8001dac:	60fb      	str	r3, [r7, #12]
 8001dae:	e00a      	b.n	8001dc6 <DMA_TransferCompleteHandler+0xea>
		{
			loadNextFramebufferData(&ws2812b.item[i], 1);
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	011b      	lsls	r3, r3, #4
 8001db4:	4a0d      	ldr	r2, [pc, #52]	; (8001dec <DMA_TransferCompleteHandler+0x110>)
 8001db6:	4413      	add	r3, r2
 8001db8:	2101      	movs	r1, #1
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f7ff fe12 	bl	80019e4 <loadNextFramebufferData>
		for( i = 0; i < WS2812_BUFFER_COUNT; i++ )
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	3301      	adds	r3, #1
 8001dc4:	60fb      	str	r3, [r7, #12]
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d0f1      	beq.n	8001db0 <DMA_TransferCompleteHandler+0xd4>
		}

		ws2812b.repeatCounter++;
 8001dcc:	4b07      	ldr	r3, [pc, #28]	; (8001dec <DMA_TransferCompleteHandler+0x110>)
 8001dce:	699b      	ldr	r3, [r3, #24]
 8001dd0:	3301      	adds	r3, #1
 8001dd2:	4a06      	ldr	r2, [pc, #24]	; (8001dec <DMA_TransferCompleteHandler+0x110>)
 8001dd4:	6193      	str	r3, [r2, #24]
	}



	#if defined(LED_ORANGE_PORT)
		LED_ORANGE_PORT->BSRR = LED_ORANGE_PIN << 16;
 8001dd6:	4b04      	ldr	r3, [pc, #16]	; (8001de8 <DMA_TransferCompleteHandler+0x10c>)
 8001dd8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001ddc:	619a      	str	r2, [r3, #24]
	#endif

}
 8001dde:	bf00      	nop
 8001de0:	3710      	adds	r7, #16
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	40020c00 	.word	0x40020c00
 8001dec:	20000110 	.word	0x20000110
 8001df0:	40010000 	.word	0x40010000
 8001df4:	20000620 	.word	0x20000620
 8001df8:	2000055c 	.word	0x2000055c
 8001dfc:	20000494 	.word	0x20000494
 8001e00:	20000510 	.word	0x20000510
 8001e04:	20000490 	.word	0x20000490
 8001e08:	40020800 	.word	0x40020800
 8001e0c:	20000008 	.word	0x20000008

08001e10 <DMA2_Stream2_IRQHandler>:

void DMA2_Stream2_IRQHandler(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	af00      	add	r7, sp, #0

	#if defined(LED_BLUE_PORT)
		LED_BLUE_PORT->BSRR = LED_BLUE_PIN;
 8001e14:	4b06      	ldr	r3, [pc, #24]	; (8001e30 <DMA2_Stream2_IRQHandler+0x20>)
 8001e16:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001e1a:	619a      	str	r2, [r3, #24]
	#endif

	// Check the interrupt and clear flag
	  HAL_DMA_IRQHandler(&dmaCC2);
 8001e1c:	4805      	ldr	r0, [pc, #20]	; (8001e34 <DMA2_Stream2_IRQHandler+0x24>)
 8001e1e:	f000 fcc9 	bl	80027b4 <HAL_DMA_IRQHandler>

	#if defined(LED_BLUE_PORT)
		LED_BLUE_PORT->BSRR = LED_BLUE_PIN << 16;
 8001e22:	4b03      	ldr	r3, [pc, #12]	; (8001e30 <DMA2_Stream2_IRQHandler+0x20>)
 8001e24:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001e28:	619a      	str	r2, [r3, #24]
	#endif
}
 8001e2a:	bf00      	nop
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	40020c00 	.word	0x40020c00
 8001e34:	20000494 	.word	0x20000494

08001e38 <TIM1_UP_TIM10_IRQHandler>:

void TIM1_UP_TIM10_IRQHandler(void)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	af00      	add	r7, sp, #0
	#if defined(LED_ORANGE_PORT)
		LED_ORANGE_PORT->BSRR = LED_ORANGE_PIN;
 8001e3c:	4b06      	ldr	r3, [pc, #24]	; (8001e58 <TIM1_UP_TIM10_IRQHandler+0x20>)
 8001e3e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e42:	619a      	str	r2, [r3, #24]
	#endif

	HAL_TIM_IRQHandler(&TIM1_handle);
 8001e44:	4805      	ldr	r0, [pc, #20]	; (8001e5c <TIM1_UP_TIM10_IRQHandler+0x24>)
 8001e46:	f005 fa63 	bl	8007310 <HAL_TIM_IRQHandler>

	#if defined(LED_ORANGE_PORT)
		LED_ORANGE_PORT->BSRR = LED_ORANGE_PIN << 16;
 8001e4a:	4b03      	ldr	r3, [pc, #12]	; (8001e58 <TIM1_UP_TIM10_IRQHandler+0x20>)
 8001e4c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001e50:	619a      	str	r2, [r3, #24]
	#endif
}
 8001e52:	bf00      	nop
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	40020c00 	.word	0x40020c00
 8001e5c:	20000510 	.word	0x20000510

08001e60 <HAL_TIM_PeriodElapsedCallback>:

// TIM2 Interrupt Handler gets executed on every TIM2 Update if enabled
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b083      	sub	sp, #12
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
		__HAL_TIM_DISABLE_IT(&TIM1_handle, TIM_IT_UPDATE);
		// set TransferComplete flag
		ws2812b.transferComplete = 1;
	}*/

    ws2812b.timerPeriodCounter = 0;
 8001e68:	4b11      	ldr	r3, [pc, #68]	; (8001eb0 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	615a      	str	r2, [r3, #20]
    TIM1->CR1 = 0; // disable timer
 8001e6e:	4b11      	ldr	r3, [pc, #68]	; (8001eb4 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	601a      	str	r2, [r3, #0]

    // disable the TIM2 Update IRQ
    __HAL_TIM_DISABLE_IT(&TIM1_handle, TIM_IT_UPDATE);
 8001e74:	4b10      	ldr	r3, [pc, #64]	; (8001eb8 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	68da      	ldr	r2, [r3, #12]
 8001e7a:	4b0f      	ldr	r3, [pc, #60]	; (8001eb8 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f022 0201 	bic.w	r2, r2, #1
 8001e82:	60da      	str	r2, [r3, #12]

    // Set back 1,25us period
    TIM1->ARR = tim_period;
 8001e84:	4a0b      	ldr	r2, [pc, #44]	; (8001eb4 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001e86:	4b0d      	ldr	r3, [pc, #52]	; (8001ebc <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	62d3      	str	r3, [r2, #44]	; 0x2c

    // Generate an update event to reload the Prescaler value immediatly
    TIM1->EGR = TIM_EGR_UG;
 8001e8c:	4b09      	ldr	r3, [pc, #36]	; (8001eb4 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001e8e:	2201      	movs	r2, #1
 8001e90:	615a      	str	r2, [r3, #20]
    __HAL_TIM_CLEAR_FLAG(&TIM1_handle, TIM_FLAG_UPDATE);
 8001e92:	4b09      	ldr	r3, [pc, #36]	; (8001eb8 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f06f 0201 	mvn.w	r2, #1
 8001e9a:	611a      	str	r2, [r3, #16]

    // set transfer_complete flag
    ws2812b.transferComplete = 1;
 8001e9c:	4b04      	ldr	r3, [pc, #16]	; (8001eb0 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	741a      	strb	r2, [r3, #16]

}
 8001ea2:	bf00      	nop
 8001ea4:	370c      	adds	r7, #12
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr
 8001eae:	bf00      	nop
 8001eb0:	20000110 	.word	0x20000110
 8001eb4:	40010000 	.word	0x40010000
 8001eb8:	20000510 	.word	0x20000510
 8001ebc:	20000558 	.word	0x20000558

08001ec0 <ws2812b_set_pixel>:



static void ws2812b_set_pixel(uint8_t row, uint16_t column, uint8_t red, uint8_t green, uint8_t blue)
{
 8001ec0:	b490      	push	{r4, r7}
 8001ec2:	b088      	sub	sp, #32
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	4604      	mov	r4, r0
 8001ec8:	4608      	mov	r0, r1
 8001eca:	4611      	mov	r1, r2
 8001ecc:	461a      	mov	r2, r3
 8001ece:	4623      	mov	r3, r4
 8001ed0:	71fb      	strb	r3, [r7, #7]
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	80bb      	strh	r3, [r7, #4]
 8001ed6:	460b      	mov	r3, r1
 8001ed8:	71bb      	strb	r3, [r7, #6]
 8001eda:	4613      	mov	r3, r2
 8001edc:	70fb      	strb	r3, [r7, #3]

	// Apply gamma
	red = gammaTable[red];
 8001ede:	79bb      	ldrb	r3, [r7, #6]
 8001ee0:	4a69      	ldr	r2, [pc, #420]	; (8002088 <ws2812b_set_pixel+0x1c8>)
 8001ee2:	5cd3      	ldrb	r3, [r2, r3]
 8001ee4:	71bb      	strb	r3, [r7, #6]
	green = gammaTable[green];
 8001ee6:	78fb      	ldrb	r3, [r7, #3]
 8001ee8:	4a67      	ldr	r2, [pc, #412]	; (8002088 <ws2812b_set_pixel+0x1c8>)
 8001eea:	5cd3      	ldrb	r3, [r2, r3]
 8001eec:	70fb      	strb	r3, [r7, #3]
	blue = gammaTable[blue];
 8001eee:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001ef2:	4a65      	ldr	r2, [pc, #404]	; (8002088 <ws2812b_set_pixel+0x1c8>)
 8001ef4:	5cd3      	ldrb	r3, [r2, r3]
 8001ef6:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28


	uint32_t calcCol = (column*24);
 8001efa:	88ba      	ldrh	r2, [r7, #4]
 8001efc:	4613      	mov	r3, r2
 8001efe:	005b      	lsls	r3, r3, #1
 8001f00:	4413      	add	r3, r2
 8001f02:	00db      	lsls	r3, r3, #3
 8001f04:	61fb      	str	r3, [r7, #28]
	uint32_t invRed = ~red;
 8001f06:	79bb      	ldrb	r3, [r7, #6]
 8001f08:	43db      	mvns	r3, r3
 8001f0a:	61bb      	str	r3, [r7, #24]
	uint32_t invGreen = ~green;
 8001f0c:	78fb      	ldrb	r3, [r7, #3]
 8001f0e:	43db      	mvns	r3, r3
 8001f10:	617b      	str	r3, [r7, #20]
	uint32_t invBlue = ~blue;
 8001f12:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001f16:	43db      	mvns	r3, r3
 8001f18:	613b      	str	r3, [r7, #16]
	ws2812bDmaBitBuffer[(calcCol+8+7)] |= (((((invRed)<<7) & 0x80)>>7)<<row);
	ws2812bDmaBitBuffer[(calcCol+16+7)] |= (((((invBlue)<<7) & 0x80)>>7)<<row);
#elif defined(SETPIX_4)

	// Bitband optimizations with pure increments, 5us interrupts
	uint32_t *bitBand = BITBAND_SRAM(&ws2812bDmaBitBuffer[(calcCol)], row);
 8001f1a:	69fb      	ldr	r3, [r7, #28]
 8001f1c:	005b      	lsls	r3, r3, #1
 8001f1e:	4a5b      	ldr	r2, [pc, #364]	; (800208c <ws2812b_set_pixel+0x1cc>)
 8001f20:	4413      	add	r3, r2
 8001f22:	f103 4361 	add.w	r3, r3, #3774873600	; 0xe1000000
 8001f26:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8001f2a:	015b      	lsls	r3, r3, #5
 8001f2c:	79fa      	ldrb	r2, [r7, #7]
 8001f2e:	0092      	lsls	r2, r2, #2
 8001f30:	4413      	add	r3, r2
 8001f32:	60fb      	str	r3, [r7, #12]

	*bitBand =  (invGreen >> 7);
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	09da      	lsrs	r2, r3, #7
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	3340      	adds	r3, #64	; 0x40
 8001f40:	60fb      	str	r3, [r7, #12]

	*bitBand = (invGreen >> 6);
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	099a      	lsrs	r2, r3, #6
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	3340      	adds	r3, #64	; 0x40
 8001f4e:	60fb      	str	r3, [r7, #12]

	*bitBand = (invGreen >> 5);
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	095a      	lsrs	r2, r3, #5
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	3340      	adds	r3, #64	; 0x40
 8001f5c:	60fb      	str	r3, [r7, #12]

	*bitBand = (invGreen >> 4);
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	091a      	lsrs	r2, r3, #4
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	3340      	adds	r3, #64	; 0x40
 8001f6a:	60fb      	str	r3, [r7, #12]

	*bitBand = (invGreen >> 3);
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	08da      	lsrs	r2, r3, #3
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	3340      	adds	r3, #64	; 0x40
 8001f78:	60fb      	str	r3, [r7, #12]

	*bitBand = (invGreen >> 2);
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	089a      	lsrs	r2, r3, #2
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	3340      	adds	r3, #64	; 0x40
 8001f86:	60fb      	str	r3, [r7, #12]

	*bitBand = (invGreen >> 1);
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	085a      	lsrs	r2, r3, #1
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	3340      	adds	r3, #64	; 0x40
 8001f94:	60fb      	str	r3, [r7, #12]

	*bitBand = (invGreen >> 0);
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	697a      	ldr	r2, [r7, #20]
 8001f9a:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	3340      	adds	r3, #64	; 0x40
 8001fa0:	60fb      	str	r3, [r7, #12]

	// RED
	*bitBand =  (invRed >> 7);
 8001fa2:	69bb      	ldr	r3, [r7, #24]
 8001fa4:	09da      	lsrs	r2, r3, #7
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	3340      	adds	r3, #64	; 0x40
 8001fae:	60fb      	str	r3, [r7, #12]

	*bitBand = (invRed >> 6);
 8001fb0:	69bb      	ldr	r3, [r7, #24]
 8001fb2:	099a      	lsrs	r2, r3, #6
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	3340      	adds	r3, #64	; 0x40
 8001fbc:	60fb      	str	r3, [r7, #12]

	*bitBand = (invRed >> 5);
 8001fbe:	69bb      	ldr	r3, [r7, #24]
 8001fc0:	095a      	lsrs	r2, r3, #5
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	3340      	adds	r3, #64	; 0x40
 8001fca:	60fb      	str	r3, [r7, #12]

	*bitBand = (invRed >> 4);
 8001fcc:	69bb      	ldr	r3, [r7, #24]
 8001fce:	091a      	lsrs	r2, r3, #4
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	3340      	adds	r3, #64	; 0x40
 8001fd8:	60fb      	str	r3, [r7, #12]

	*bitBand = (invRed >> 3);
 8001fda:	69bb      	ldr	r3, [r7, #24]
 8001fdc:	08da      	lsrs	r2, r3, #3
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	3340      	adds	r3, #64	; 0x40
 8001fe6:	60fb      	str	r3, [r7, #12]

	*bitBand = (invRed >> 2);
 8001fe8:	69bb      	ldr	r3, [r7, #24]
 8001fea:	089a      	lsrs	r2, r3, #2
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	3340      	adds	r3, #64	; 0x40
 8001ff4:	60fb      	str	r3, [r7, #12]

	*bitBand = (invRed >> 1);
 8001ff6:	69bb      	ldr	r3, [r7, #24]
 8001ff8:	085a      	lsrs	r2, r3, #1
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	3340      	adds	r3, #64	; 0x40
 8002002:	60fb      	str	r3, [r7, #12]

	*bitBand = (invRed >> 0);
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	69ba      	ldr	r2, [r7, #24]
 8002008:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	3340      	adds	r3, #64	; 0x40
 800200e:	60fb      	str	r3, [r7, #12]

	// BLUE
	*bitBand =  (invBlue >> 7);
 8002010:	693b      	ldr	r3, [r7, #16]
 8002012:	09da      	lsrs	r2, r3, #7
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	3340      	adds	r3, #64	; 0x40
 800201c:	60fb      	str	r3, [r7, #12]

	*bitBand = (invBlue >> 6);
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	099a      	lsrs	r2, r3, #6
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	3340      	adds	r3, #64	; 0x40
 800202a:	60fb      	str	r3, [r7, #12]

	*bitBand = (invBlue >> 5);
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	095a      	lsrs	r2, r3, #5
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	3340      	adds	r3, #64	; 0x40
 8002038:	60fb      	str	r3, [r7, #12]

	*bitBand = (invBlue >> 4);
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	091a      	lsrs	r2, r3, #4
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	3340      	adds	r3, #64	; 0x40
 8002046:	60fb      	str	r3, [r7, #12]

	*bitBand = (invBlue >> 3);
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	08da      	lsrs	r2, r3, #3
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	3340      	adds	r3, #64	; 0x40
 8002054:	60fb      	str	r3, [r7, #12]

	*bitBand = (invBlue >> 2);
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	089a      	lsrs	r2, r3, #2
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	3340      	adds	r3, #64	; 0x40
 8002062:	60fb      	str	r3, [r7, #12]

	*bitBand = (invBlue >> 1);
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	085a      	lsrs	r2, r3, #1
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	3340      	adds	r3, #64	; 0x40
 8002070:	60fb      	str	r3, [r7, #12]

	*bitBand = (invBlue >> 0);
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	693a      	ldr	r2, [r7, #16]
 8002076:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	3340      	adds	r3, #64	; 0x40
 800207c:	60fb      	str	r3, [r7, #12]

#endif
}
 800207e:	bf00      	nop
 8002080:	3720      	adds	r7, #32
 8002082:	46bd      	mov	sp, r7
 8002084:	bc90      	pop	{r4, r7}
 8002086:	4770      	bx	lr
 8002088:	0800b780 	.word	0x0800b780
 800208c:	200005c0 	.word	0x200005c0

08002090 <ws2812b_init>:


void ws2812b_init()
{
 8002090:	b580      	push	{r7, lr}
 8002092:	af00      	add	r7, sp, #0
	ws2812b_gpio_init();
 8002094:	f7ff faa6 	bl	80015e4 <ws2812b_gpio_init>

	/*TIM2_init();
	DMA_init();*/


	DMA2_init();
 8002098:	f7ff fbb6 	bl	8001808 <DMA2_init>
	TIM1_init();
 800209c:	f7ff faf2 	bl	8001684 <TIM1_init>


	// Need to start the first transfer
	ws2812b.transferComplete = 1;
 80020a0:	4b02      	ldr	r3, [pc, #8]	; (80020ac <ws2812b_init+0x1c>)
 80020a2:	2201      	movs	r2, #1
 80020a4:	741a      	strb	r2, [r3, #16]
}
 80020a6:	bf00      	nop
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	20000110 	.word	0x20000110

080020b0 <ws2812b_handle>:


void ws2812b_handle()
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	af00      	add	r7, sp, #0
	if(ws2812b.startTransfer) {
 80020b4:	4b05      	ldr	r3, [pc, #20]	; (80020cc <ws2812b_handle+0x1c>)
 80020b6:	7c5b      	ldrb	r3, [r3, #17]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d004      	beq.n	80020c6 <ws2812b_handle+0x16>
		ws2812b.startTransfer = 0;
 80020bc:	4b03      	ldr	r3, [pc, #12]	; (80020cc <ws2812b_handle+0x1c>)
 80020be:	2200      	movs	r2, #0
 80020c0:	745a      	strb	r2, [r3, #17]
		WS2812_sendbuf();
 80020c2:	f7ff fccd 	bl	8001a60 <WS2812_sendbuf>
	}

}
 80020c6:	bf00      	nop
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	20000110 	.word	0x20000110

080020d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80020d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002108 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80020d4:	480d      	ldr	r0, [pc, #52]	; (800210c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80020d6:	490e      	ldr	r1, [pc, #56]	; (8002110 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80020d8:	4a0e      	ldr	r2, [pc, #56]	; (8002114 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80020da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020dc:	e002      	b.n	80020e4 <LoopCopyDataInit>

080020de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020e2:	3304      	adds	r3, #4

080020e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020e8:	d3f9      	bcc.n	80020de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020ea:	4a0b      	ldr	r2, [pc, #44]	; (8002118 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80020ec:	4c0b      	ldr	r4, [pc, #44]	; (800211c <LoopFillZerobss+0x26>)
  movs r3, #0
 80020ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020f0:	e001      	b.n	80020f6 <LoopFillZerobss>

080020f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020f4:	3204      	adds	r2, #4

080020f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020f8:	d3fb      	bcc.n	80020f2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80020fa:	f7ff fa61 	bl	80015c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80020fe:	f009 fa21 	bl	800b544 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002102:	f7fe fb49 	bl	8000798 <main>
  bx  lr    
 8002106:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002108:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800210c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002110:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 8002114:	0800b8f8 	.word	0x0800b8f8
  ldr r2, =_sbss
 8002118:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 800211c:	20000d70 	.word	0x20000d70

08002120 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002120:	e7fe      	b.n	8002120 <ADC_IRQHandler>
	...

08002124 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002128:	4b0e      	ldr	r3, [pc, #56]	; (8002164 <HAL_Init+0x40>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a0d      	ldr	r2, [pc, #52]	; (8002164 <HAL_Init+0x40>)
 800212e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002132:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002134:	4b0b      	ldr	r3, [pc, #44]	; (8002164 <HAL_Init+0x40>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a0a      	ldr	r2, [pc, #40]	; (8002164 <HAL_Init+0x40>)
 800213a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800213e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002140:	4b08      	ldr	r3, [pc, #32]	; (8002164 <HAL_Init+0x40>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a07      	ldr	r2, [pc, #28]	; (8002164 <HAL_Init+0x40>)
 8002146:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800214a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800214c:	2003      	movs	r0, #3
 800214e:	f000 f94f 	bl	80023f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002152:	2000      	movs	r0, #0
 8002154:	f000 f808 	bl	8002168 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002158:	f7fe ffa6 	bl	80010a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800215c:	2300      	movs	r3, #0
}
 800215e:	4618      	mov	r0, r3
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	40023c00 	.word	0x40023c00

08002168 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b082      	sub	sp, #8
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002170:	4b12      	ldr	r3, [pc, #72]	; (80021bc <HAL_InitTick+0x54>)
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	4b12      	ldr	r3, [pc, #72]	; (80021c0 <HAL_InitTick+0x58>)
 8002176:	781b      	ldrb	r3, [r3, #0]
 8002178:	4619      	mov	r1, r3
 800217a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800217e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002182:	fbb2 f3f3 	udiv	r3, r2, r3
 8002186:	4618      	mov	r0, r3
 8002188:	f000 f967 	bl	800245a <HAL_SYSTICK_Config>
 800218c:	4603      	mov	r3, r0
 800218e:	2b00      	cmp	r3, #0
 8002190:	d001      	beq.n	8002196 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	e00e      	b.n	80021b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2b0f      	cmp	r3, #15
 800219a:	d80a      	bhi.n	80021b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800219c:	2200      	movs	r2, #0
 800219e:	6879      	ldr	r1, [r7, #4]
 80021a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80021a4:	f000 f92f 	bl	8002406 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021a8:	4a06      	ldr	r2, [pc, #24]	; (80021c4 <HAL_InitTick+0x5c>)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021ae:	2300      	movs	r3, #0
 80021b0:	e000      	b.n	80021b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	3708      	adds	r7, #8
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	20000000 	.word	0x20000000
 80021c0:	20000010 	.word	0x20000010
 80021c4:	2000000c 	.word	0x2000000c

080021c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021c8:	b480      	push	{r7}
 80021ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021cc:	4b06      	ldr	r3, [pc, #24]	; (80021e8 <HAL_IncTick+0x20>)
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	461a      	mov	r2, r3
 80021d2:	4b06      	ldr	r3, [pc, #24]	; (80021ec <HAL_IncTick+0x24>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4413      	add	r3, r2
 80021d8:	4a04      	ldr	r2, [pc, #16]	; (80021ec <HAL_IncTick+0x24>)
 80021da:	6013      	str	r3, [r2, #0]
}
 80021dc:	bf00      	nop
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr
 80021e6:	bf00      	nop
 80021e8:	20000010 	.word	0x20000010
 80021ec:	20000680 	.word	0x20000680

080021f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021f0:	b480      	push	{r7}
 80021f2:	af00      	add	r7, sp, #0
  return uwTick;
 80021f4:	4b03      	ldr	r3, [pc, #12]	; (8002204 <HAL_GetTick+0x14>)
 80021f6:	681b      	ldr	r3, [r3, #0]
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr
 8002202:	bf00      	nop
 8002204:	20000680 	.word	0x20000680

08002208 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b084      	sub	sp, #16
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002210:	f7ff ffee 	bl	80021f0 <HAL_GetTick>
 8002214:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002220:	d005      	beq.n	800222e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002222:	4b0a      	ldr	r3, [pc, #40]	; (800224c <HAL_Delay+0x44>)
 8002224:	781b      	ldrb	r3, [r3, #0]
 8002226:	461a      	mov	r2, r3
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	4413      	add	r3, r2
 800222c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800222e:	bf00      	nop
 8002230:	f7ff ffde 	bl	80021f0 <HAL_GetTick>
 8002234:	4602      	mov	r2, r0
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	1ad3      	subs	r3, r2, r3
 800223a:	68fa      	ldr	r2, [r7, #12]
 800223c:	429a      	cmp	r2, r3
 800223e:	d8f7      	bhi.n	8002230 <HAL_Delay+0x28>
  {
  }
}
 8002240:	bf00      	nop
 8002242:	bf00      	nop
 8002244:	3710      	adds	r7, #16
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	20000010 	.word	0x20000010

08002250 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002250:	b480      	push	{r7}
 8002252:	b085      	sub	sp, #20
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	f003 0307 	and.w	r3, r3, #7
 800225e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002260:	4b0c      	ldr	r3, [pc, #48]	; (8002294 <__NVIC_SetPriorityGrouping+0x44>)
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002266:	68ba      	ldr	r2, [r7, #8]
 8002268:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800226c:	4013      	ands	r3, r2
 800226e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002278:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800227c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002280:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002282:	4a04      	ldr	r2, [pc, #16]	; (8002294 <__NVIC_SetPriorityGrouping+0x44>)
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	60d3      	str	r3, [r2, #12]
}
 8002288:	bf00      	nop
 800228a:	3714      	adds	r7, #20
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr
 8002294:	e000ed00 	.word	0xe000ed00

08002298 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002298:	b480      	push	{r7}
 800229a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800229c:	4b04      	ldr	r3, [pc, #16]	; (80022b0 <__NVIC_GetPriorityGrouping+0x18>)
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	0a1b      	lsrs	r3, r3, #8
 80022a2:	f003 0307 	and.w	r3, r3, #7
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr
 80022b0:	e000ed00 	.word	0xe000ed00

080022b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b083      	sub	sp, #12
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	4603      	mov	r3, r0
 80022bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	db0b      	blt.n	80022de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022c6:	79fb      	ldrb	r3, [r7, #7]
 80022c8:	f003 021f 	and.w	r2, r3, #31
 80022cc:	4907      	ldr	r1, [pc, #28]	; (80022ec <__NVIC_EnableIRQ+0x38>)
 80022ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022d2:	095b      	lsrs	r3, r3, #5
 80022d4:	2001      	movs	r0, #1
 80022d6:	fa00 f202 	lsl.w	r2, r0, r2
 80022da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80022de:	bf00      	nop
 80022e0:	370c      	adds	r7, #12
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr
 80022ea:	bf00      	nop
 80022ec:	e000e100 	.word	0xe000e100

080022f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b083      	sub	sp, #12
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	4603      	mov	r3, r0
 80022f8:	6039      	str	r1, [r7, #0]
 80022fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002300:	2b00      	cmp	r3, #0
 8002302:	db0a      	blt.n	800231a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	b2da      	uxtb	r2, r3
 8002308:	490c      	ldr	r1, [pc, #48]	; (800233c <__NVIC_SetPriority+0x4c>)
 800230a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800230e:	0112      	lsls	r2, r2, #4
 8002310:	b2d2      	uxtb	r2, r2
 8002312:	440b      	add	r3, r1
 8002314:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002318:	e00a      	b.n	8002330 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	b2da      	uxtb	r2, r3
 800231e:	4908      	ldr	r1, [pc, #32]	; (8002340 <__NVIC_SetPriority+0x50>)
 8002320:	79fb      	ldrb	r3, [r7, #7]
 8002322:	f003 030f 	and.w	r3, r3, #15
 8002326:	3b04      	subs	r3, #4
 8002328:	0112      	lsls	r2, r2, #4
 800232a:	b2d2      	uxtb	r2, r2
 800232c:	440b      	add	r3, r1
 800232e:	761a      	strb	r2, [r3, #24]
}
 8002330:	bf00      	nop
 8002332:	370c      	adds	r7, #12
 8002334:	46bd      	mov	sp, r7
 8002336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233a:	4770      	bx	lr
 800233c:	e000e100 	.word	0xe000e100
 8002340:	e000ed00 	.word	0xe000ed00

08002344 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002344:	b480      	push	{r7}
 8002346:	b089      	sub	sp, #36	; 0x24
 8002348:	af00      	add	r7, sp, #0
 800234a:	60f8      	str	r0, [r7, #12]
 800234c:	60b9      	str	r1, [r7, #8]
 800234e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	f003 0307 	and.w	r3, r3, #7
 8002356:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002358:	69fb      	ldr	r3, [r7, #28]
 800235a:	f1c3 0307 	rsb	r3, r3, #7
 800235e:	2b04      	cmp	r3, #4
 8002360:	bf28      	it	cs
 8002362:	2304      	movcs	r3, #4
 8002364:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002366:	69fb      	ldr	r3, [r7, #28]
 8002368:	3304      	adds	r3, #4
 800236a:	2b06      	cmp	r3, #6
 800236c:	d902      	bls.n	8002374 <NVIC_EncodePriority+0x30>
 800236e:	69fb      	ldr	r3, [r7, #28]
 8002370:	3b03      	subs	r3, #3
 8002372:	e000      	b.n	8002376 <NVIC_EncodePriority+0x32>
 8002374:	2300      	movs	r3, #0
 8002376:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002378:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800237c:	69bb      	ldr	r3, [r7, #24]
 800237e:	fa02 f303 	lsl.w	r3, r2, r3
 8002382:	43da      	mvns	r2, r3
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	401a      	ands	r2, r3
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800238c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	fa01 f303 	lsl.w	r3, r1, r3
 8002396:	43d9      	mvns	r1, r3
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800239c:	4313      	orrs	r3, r2
         );
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3724      	adds	r7, #36	; 0x24
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr
	...

080023ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b082      	sub	sp, #8
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	3b01      	subs	r3, #1
 80023b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023bc:	d301      	bcc.n	80023c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023be:	2301      	movs	r3, #1
 80023c0:	e00f      	b.n	80023e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023c2:	4a0a      	ldr	r2, [pc, #40]	; (80023ec <SysTick_Config+0x40>)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	3b01      	subs	r3, #1
 80023c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023ca:	210f      	movs	r1, #15
 80023cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80023d0:	f7ff ff8e 	bl	80022f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023d4:	4b05      	ldr	r3, [pc, #20]	; (80023ec <SysTick_Config+0x40>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023da:	4b04      	ldr	r3, [pc, #16]	; (80023ec <SysTick_Config+0x40>)
 80023dc:	2207      	movs	r2, #7
 80023de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023e0:	2300      	movs	r3, #0
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	3708      	adds	r7, #8
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop
 80023ec:	e000e010 	.word	0xe000e010

080023f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b082      	sub	sp, #8
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023f8:	6878      	ldr	r0, [r7, #4]
 80023fa:	f7ff ff29 	bl	8002250 <__NVIC_SetPriorityGrouping>
}
 80023fe:	bf00      	nop
 8002400:	3708      	adds	r7, #8
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}

08002406 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002406:	b580      	push	{r7, lr}
 8002408:	b086      	sub	sp, #24
 800240a:	af00      	add	r7, sp, #0
 800240c:	4603      	mov	r3, r0
 800240e:	60b9      	str	r1, [r7, #8]
 8002410:	607a      	str	r2, [r7, #4]
 8002412:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002414:	2300      	movs	r3, #0
 8002416:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002418:	f7ff ff3e 	bl	8002298 <__NVIC_GetPriorityGrouping>
 800241c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800241e:	687a      	ldr	r2, [r7, #4]
 8002420:	68b9      	ldr	r1, [r7, #8]
 8002422:	6978      	ldr	r0, [r7, #20]
 8002424:	f7ff ff8e 	bl	8002344 <NVIC_EncodePriority>
 8002428:	4602      	mov	r2, r0
 800242a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800242e:	4611      	mov	r1, r2
 8002430:	4618      	mov	r0, r3
 8002432:	f7ff ff5d 	bl	80022f0 <__NVIC_SetPriority>
}
 8002436:	bf00      	nop
 8002438:	3718      	adds	r7, #24
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}

0800243e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800243e:	b580      	push	{r7, lr}
 8002440:	b082      	sub	sp, #8
 8002442:	af00      	add	r7, sp, #0
 8002444:	4603      	mov	r3, r0
 8002446:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002448:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800244c:	4618      	mov	r0, r3
 800244e:	f7ff ff31 	bl	80022b4 <__NVIC_EnableIRQ>
}
 8002452:	bf00      	nop
 8002454:	3708      	adds	r7, #8
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}

0800245a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800245a:	b580      	push	{r7, lr}
 800245c:	b082      	sub	sp, #8
 800245e:	af00      	add	r7, sp, #0
 8002460:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002462:	6878      	ldr	r0, [r7, #4]
 8002464:	f7ff ffa2 	bl	80023ac <SysTick_Config>
 8002468:	4603      	mov	r3, r0
}
 800246a:	4618      	mov	r0, r3
 800246c:	3708      	adds	r7, #8
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}
	...

08002474 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b086      	sub	sp, #24
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800247c:	2300      	movs	r3, #0
 800247e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002480:	f7ff feb6 	bl	80021f0 <HAL_GetTick>
 8002484:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d101      	bne.n	8002490 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800248c:	2301      	movs	r3, #1
 800248e:	e099      	b.n	80025c4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2202      	movs	r2, #2
 8002494:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2200      	movs	r2, #0
 800249c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f022 0201 	bic.w	r2, r2, #1
 80024ae:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024b0:	e00f      	b.n	80024d2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80024b2:	f7ff fe9d 	bl	80021f0 <HAL_GetTick>
 80024b6:	4602      	mov	r2, r0
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	1ad3      	subs	r3, r2, r3
 80024bc:	2b05      	cmp	r3, #5
 80024be:	d908      	bls.n	80024d2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2220      	movs	r2, #32
 80024c4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2203      	movs	r2, #3
 80024ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80024ce:	2303      	movs	r3, #3
 80024d0:	e078      	b.n	80025c4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 0301 	and.w	r3, r3, #1
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d1e8      	bne.n	80024b2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80024e8:	697a      	ldr	r2, [r7, #20]
 80024ea:	4b38      	ldr	r3, [pc, #224]	; (80025cc <HAL_DMA_Init+0x158>)
 80024ec:	4013      	ands	r3, r2
 80024ee:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	685a      	ldr	r2, [r3, #4]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80024fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	691b      	ldr	r3, [r3, #16]
 8002504:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800250a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	699b      	ldr	r3, [r3, #24]
 8002510:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002516:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6a1b      	ldr	r3, [r3, #32]
 800251c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800251e:	697a      	ldr	r2, [r7, #20]
 8002520:	4313      	orrs	r3, r2
 8002522:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002528:	2b04      	cmp	r3, #4
 800252a:	d107      	bne.n	800253c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002534:	4313      	orrs	r3, r2
 8002536:	697a      	ldr	r2, [r7, #20]
 8002538:	4313      	orrs	r3, r2
 800253a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	697a      	ldr	r2, [r7, #20]
 8002542:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	695b      	ldr	r3, [r3, #20]
 800254a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	f023 0307 	bic.w	r3, r3, #7
 8002552:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002558:	697a      	ldr	r2, [r7, #20]
 800255a:	4313      	orrs	r3, r2
 800255c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002562:	2b04      	cmp	r3, #4
 8002564:	d117      	bne.n	8002596 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800256a:	697a      	ldr	r2, [r7, #20]
 800256c:	4313      	orrs	r3, r2
 800256e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002574:	2b00      	cmp	r3, #0
 8002576:	d00e      	beq.n	8002596 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002578:	6878      	ldr	r0, [r7, #4]
 800257a:	f000 fb09 	bl	8002b90 <DMA_CheckFifoParam>
 800257e:	4603      	mov	r3, r0
 8002580:	2b00      	cmp	r3, #0
 8002582:	d008      	beq.n	8002596 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2240      	movs	r2, #64	; 0x40
 8002588:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2201      	movs	r2, #1
 800258e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002592:	2301      	movs	r3, #1
 8002594:	e016      	b.n	80025c4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	697a      	ldr	r2, [r7, #20]
 800259c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	f000 fac0 	bl	8002b24 <DMA_CalcBaseAndBitshift>
 80025a4:	4603      	mov	r3, r0
 80025a6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025ac:	223f      	movs	r2, #63	; 0x3f
 80025ae:	409a      	lsls	r2, r3
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2200      	movs	r2, #0
 80025b8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2201      	movs	r2, #1
 80025be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80025c2:	2300      	movs	r3, #0
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	3718      	adds	r7, #24
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}
 80025cc:	f010803f 	.word	0xf010803f

080025d0 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b084      	sub	sp, #16
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d101      	bne.n	80025e2 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e050      	b.n	8002684 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80025e8:	b2db      	uxtb	r3, r3
 80025ea:	2b02      	cmp	r3, #2
 80025ec:	d101      	bne.n	80025f2 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80025ee:	2302      	movs	r3, #2
 80025f0:	e048      	b.n	8002684 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f022 0201 	bic.w	r2, r2, #1
 8002600:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	2200      	movs	r2, #0
 8002608:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	2200      	movs	r2, #0
 8002610:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	2200      	movs	r2, #0
 8002618:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	2200      	movs	r2, #0
 8002620:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	2200      	movs	r2, #0
 8002628:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	2221      	movs	r2, #33	; 0x21
 8002630:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f000 fa76 	bl	8002b24 <DMA_CalcBaseAndBitshift>
 8002638:	4603      	mov	r3, r0
 800263a:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2200      	movs	r2, #0
 8002640:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2200      	movs	r2, #0
 8002646:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2200      	movs	r2, #0
 800264c:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2200      	movs	r2, #0
 8002652:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2200      	movs	r2, #0
 8002658:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2200      	movs	r2, #0
 800265e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002664:	223f      	movs	r2, #63	; 0x3f
 8002666:	409a      	lsls	r2, r3
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2200      	movs	r2, #0
 8002670:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2200      	movs	r2, #0
 8002676:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2200      	movs	r2, #0
 800267e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002682:	2300      	movs	r3, #0
}
 8002684:	4618      	mov	r0, r3
 8002686:	3710      	adds	r7, #16
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}

0800268c <HAL_DMA_Start>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b086      	sub	sp, #24
 8002690:	af00      	add	r7, sp, #0
 8002692:	60f8      	str	r0, [r7, #12]
 8002694:	60b9      	str	r1, [r7, #8]
 8002696:	607a      	str	r2, [r7, #4]
 8002698:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800269a:	2300      	movs	r3, #0
 800269c:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	d101      	bne.n	80026ac <HAL_DMA_Start+0x20>
 80026a8:	2302      	movs	r3, #2
 80026aa:	e026      	b.n	80026fa <HAL_DMA_Start+0x6e>
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	2201      	movs	r2, #1
 80026b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80026ba:	b2db      	uxtb	r3, r3
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d115      	bne.n	80026ec <HAL_DMA_Start+0x60>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	2202      	movs	r2, #2
 80026c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	2200      	movs	r2, #0
 80026cc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	687a      	ldr	r2, [r7, #4]
 80026d2:	68b9      	ldr	r1, [r7, #8]
 80026d4:	68f8      	ldr	r0, [r7, #12]
 80026d6:	f000 f9f7 	bl	8002ac8 <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f042 0201 	orr.w	r2, r2, #1
 80026e8:	601a      	str	r2, [r3, #0]
 80026ea:	e005      	b.n	80026f8 <HAL_DMA_Start+0x6c>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	2200      	movs	r2, #0
 80026f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80026f4:	2302      	movs	r3, #2
 80026f6:	75fb      	strb	r3, [r7, #23]
  } 
  return status; 
 80026f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	3718      	adds	r7, #24
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}

08002702 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002702:	b580      	push	{r7, lr}
 8002704:	b086      	sub	sp, #24
 8002706:	af00      	add	r7, sp, #0
 8002708:	60f8      	str	r0, [r7, #12]
 800270a:	60b9      	str	r1, [r7, #8]
 800270c:	607a      	str	r2, [r7, #4]
 800270e:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002710:	2300      	movs	r3, #0
 8002712:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002718:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002720:	2b01      	cmp	r3, #1
 8002722:	d101      	bne.n	8002728 <HAL_DMA_Start_IT+0x26>
 8002724:	2302      	movs	r3, #2
 8002726:	e040      	b.n	80027aa <HAL_DMA_Start_IT+0xa8>
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	2201      	movs	r2, #1
 800272c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002736:	b2db      	uxtb	r3, r3
 8002738:	2b01      	cmp	r3, #1
 800273a:	d12f      	bne.n	800279c <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	2202      	movs	r2, #2
 8002740:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	2200      	movs	r2, #0
 8002748:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	687a      	ldr	r2, [r7, #4]
 800274e:	68b9      	ldr	r1, [r7, #8]
 8002750:	68f8      	ldr	r0, [r7, #12]
 8002752:	f000 f9b9 	bl	8002ac8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800275a:	223f      	movs	r2, #63	; 0x3f
 800275c:	409a      	lsls	r2, r3
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f042 0216 	orr.w	r2, r2, #22
 8002770:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002776:	2b00      	cmp	r3, #0
 8002778:	d007      	beq.n	800278a <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	681a      	ldr	r2, [r3, #0]
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f042 0208 	orr.w	r2, r2, #8
 8002788:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f042 0201 	orr.w	r2, r2, #1
 8002798:	601a      	str	r2, [r3, #0]
 800279a:	e005      	b.n	80027a8 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	2200      	movs	r2, #0
 80027a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80027a4:	2302      	movs	r3, #2
 80027a6:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80027a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	3718      	adds	r7, #24
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}
	...

080027b4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b086      	sub	sp, #24
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80027bc:	2300      	movs	r3, #0
 80027be:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80027c0:	4b92      	ldr	r3, [pc, #584]	; (8002a0c <HAL_DMA_IRQHandler+0x258>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a92      	ldr	r2, [pc, #584]	; (8002a10 <HAL_DMA_IRQHandler+0x25c>)
 80027c6:	fba2 2303 	umull	r2, r3, r2, r3
 80027ca:	0a9b      	lsrs	r3, r3, #10
 80027cc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027d2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027de:	2208      	movs	r2, #8
 80027e0:	409a      	lsls	r2, r3
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	4013      	ands	r3, r2
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d01a      	beq.n	8002820 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f003 0304 	and.w	r3, r3, #4
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d013      	beq.n	8002820 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f022 0204 	bic.w	r2, r2, #4
 8002806:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800280c:	2208      	movs	r2, #8
 800280e:	409a      	lsls	r2, r3
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002818:	f043 0201 	orr.w	r2, r3, #1
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002824:	2201      	movs	r2, #1
 8002826:	409a      	lsls	r2, r3
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	4013      	ands	r3, r2
 800282c:	2b00      	cmp	r3, #0
 800282e:	d012      	beq.n	8002856 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	695b      	ldr	r3, [r3, #20]
 8002836:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800283a:	2b00      	cmp	r3, #0
 800283c:	d00b      	beq.n	8002856 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002842:	2201      	movs	r2, #1
 8002844:	409a      	lsls	r2, r3
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800284e:	f043 0202 	orr.w	r2, r3, #2
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800285a:	2204      	movs	r2, #4
 800285c:	409a      	lsls	r2, r3
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	4013      	ands	r3, r2
 8002862:	2b00      	cmp	r3, #0
 8002864:	d012      	beq.n	800288c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f003 0302 	and.w	r3, r3, #2
 8002870:	2b00      	cmp	r3, #0
 8002872:	d00b      	beq.n	800288c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002878:	2204      	movs	r2, #4
 800287a:	409a      	lsls	r2, r3
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002884:	f043 0204 	orr.w	r2, r3, #4
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002890:	2210      	movs	r2, #16
 8002892:	409a      	lsls	r2, r3
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	4013      	ands	r3, r2
 8002898:	2b00      	cmp	r3, #0
 800289a:	d043      	beq.n	8002924 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 0308 	and.w	r3, r3, #8
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d03c      	beq.n	8002924 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028ae:	2210      	movs	r2, #16
 80028b0:	409a      	lsls	r2, r3
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d018      	beq.n	80028f6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d108      	bne.n	80028e4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d024      	beq.n	8002924 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028de:	6878      	ldr	r0, [r7, #4]
 80028e0:	4798      	blx	r3
 80028e2:	e01f      	b.n	8002924 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d01b      	beq.n	8002924 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028f0:	6878      	ldr	r0, [r7, #4]
 80028f2:	4798      	blx	r3
 80028f4:	e016      	b.n	8002924 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002900:	2b00      	cmp	r3, #0
 8002902:	d107      	bne.n	8002914 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f022 0208 	bic.w	r2, r2, #8
 8002912:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002918:	2b00      	cmp	r3, #0
 800291a:	d003      	beq.n	8002924 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002920:	6878      	ldr	r0, [r7, #4]
 8002922:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002928:	2220      	movs	r2, #32
 800292a:	409a      	lsls	r2, r3
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	4013      	ands	r3, r2
 8002930:	2b00      	cmp	r3, #0
 8002932:	f000 808e 	beq.w	8002a52 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 0310 	and.w	r3, r3, #16
 8002940:	2b00      	cmp	r3, #0
 8002942:	f000 8086 	beq.w	8002a52 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800294a:	2220      	movs	r2, #32
 800294c:	409a      	lsls	r2, r3
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002958:	b2db      	uxtb	r3, r3
 800295a:	2b05      	cmp	r3, #5
 800295c:	d136      	bne.n	80029cc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f022 0216 	bic.w	r2, r2, #22
 800296c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	695a      	ldr	r2, [r3, #20]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800297c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002982:	2b00      	cmp	r3, #0
 8002984:	d103      	bne.n	800298e <HAL_DMA_IRQHandler+0x1da>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800298a:	2b00      	cmp	r3, #0
 800298c:	d007      	beq.n	800299e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f022 0208 	bic.w	r2, r2, #8
 800299c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029a2:	223f      	movs	r2, #63	; 0x3f
 80029a4:	409a      	lsls	r2, r3
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2201      	movs	r2, #1
 80029ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2200      	movs	r2, #0
 80029b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d07d      	beq.n	8002abe <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	4798      	blx	r3
        }
        return;
 80029ca:	e078      	b.n	8002abe <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d01c      	beq.n	8002a14 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d108      	bne.n	80029fa <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d030      	beq.n	8002a52 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029f4:	6878      	ldr	r0, [r7, #4]
 80029f6:	4798      	blx	r3
 80029f8:	e02b      	b.n	8002a52 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d027      	beq.n	8002a52 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	4798      	blx	r3
 8002a0a:	e022      	b.n	8002a52 <HAL_DMA_IRQHandler+0x29e>
 8002a0c:	20000000 	.word	0x20000000
 8002a10:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d10f      	bne.n	8002a42 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f022 0210 	bic.w	r2, r2, #16
 8002a30:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2201      	movs	r2, #1
 8002a36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d003      	beq.n	8002a52 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d032      	beq.n	8002ac0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a5e:	f003 0301 	and.w	r3, r3, #1
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d022      	beq.n	8002aac <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2205      	movs	r2, #5
 8002a6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	681a      	ldr	r2, [r3, #0]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f022 0201 	bic.w	r2, r2, #1
 8002a7c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	3301      	adds	r3, #1
 8002a82:	60bb      	str	r3, [r7, #8]
 8002a84:	697a      	ldr	r2, [r7, #20]
 8002a86:	429a      	cmp	r2, r3
 8002a88:	d307      	bcc.n	8002a9a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f003 0301 	and.w	r3, r3, #1
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d1f2      	bne.n	8002a7e <HAL_DMA_IRQHandler+0x2ca>
 8002a98:	e000      	b.n	8002a9c <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002a9a:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d005      	beq.n	8002ac0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ab8:	6878      	ldr	r0, [r7, #4]
 8002aba:	4798      	blx	r3
 8002abc:	e000      	b.n	8002ac0 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002abe:	bf00      	nop
    }
  }
}
 8002ac0:	3718      	adds	r7, #24
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	bf00      	nop

08002ac8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b085      	sub	sp, #20
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	60f8      	str	r0, [r7, #12]
 8002ad0:	60b9      	str	r1, [r7, #8]
 8002ad2:	607a      	str	r2, [r7, #4]
 8002ad4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002ae4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	683a      	ldr	r2, [r7, #0]
 8002aec:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	2b40      	cmp	r3, #64	; 0x40
 8002af4:	d108      	bne.n	8002b08 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	687a      	ldr	r2, [r7, #4]
 8002afc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	68ba      	ldr	r2, [r7, #8]
 8002b04:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002b06:	e007      	b.n	8002b18 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	68ba      	ldr	r2, [r7, #8]
 8002b0e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	687a      	ldr	r2, [r7, #4]
 8002b16:	60da      	str	r2, [r3, #12]
}
 8002b18:	bf00      	nop
 8002b1a:	3714      	adds	r7, #20
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b22:	4770      	bx	lr

08002b24 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b085      	sub	sp, #20
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	3b10      	subs	r3, #16
 8002b34:	4a14      	ldr	r2, [pc, #80]	; (8002b88 <DMA_CalcBaseAndBitshift+0x64>)
 8002b36:	fba2 2303 	umull	r2, r3, r2, r3
 8002b3a:	091b      	lsrs	r3, r3, #4
 8002b3c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002b3e:	4a13      	ldr	r2, [pc, #76]	; (8002b8c <DMA_CalcBaseAndBitshift+0x68>)
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	4413      	add	r3, r2
 8002b44:	781b      	ldrb	r3, [r3, #0]
 8002b46:	461a      	mov	r2, r3
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	2b03      	cmp	r3, #3
 8002b50:	d909      	bls.n	8002b66 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002b5a:	f023 0303 	bic.w	r3, r3, #3
 8002b5e:	1d1a      	adds	r2, r3, #4
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	659a      	str	r2, [r3, #88]	; 0x58
 8002b64:	e007      	b.n	8002b76 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002b6e:	f023 0303 	bic.w	r3, r3, #3
 8002b72:	687a      	ldr	r2, [r7, #4]
 8002b74:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3714      	adds	r7, #20
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr
 8002b86:	bf00      	nop
 8002b88:	aaaaaaab 	.word	0xaaaaaaab
 8002b8c:	0800b880 	.word	0x0800b880

08002b90 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b085      	sub	sp, #20
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ba0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	699b      	ldr	r3, [r3, #24]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d11f      	bne.n	8002bea <DMA_CheckFifoParam+0x5a>
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	2b03      	cmp	r3, #3
 8002bae:	d856      	bhi.n	8002c5e <DMA_CheckFifoParam+0xce>
 8002bb0:	a201      	add	r2, pc, #4	; (adr r2, 8002bb8 <DMA_CheckFifoParam+0x28>)
 8002bb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bb6:	bf00      	nop
 8002bb8:	08002bc9 	.word	0x08002bc9
 8002bbc:	08002bdb 	.word	0x08002bdb
 8002bc0:	08002bc9 	.word	0x08002bc9
 8002bc4:	08002c5f 	.word	0x08002c5f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bcc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d046      	beq.n	8002c62 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bd8:	e043      	b.n	8002c62 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bde:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002be2:	d140      	bne.n	8002c66 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002be8:	e03d      	b.n	8002c66 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	699b      	ldr	r3, [r3, #24]
 8002bee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bf2:	d121      	bne.n	8002c38 <DMA_CheckFifoParam+0xa8>
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	2b03      	cmp	r3, #3
 8002bf8:	d837      	bhi.n	8002c6a <DMA_CheckFifoParam+0xda>
 8002bfa:	a201      	add	r2, pc, #4	; (adr r2, 8002c00 <DMA_CheckFifoParam+0x70>)
 8002bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c00:	08002c11 	.word	0x08002c11
 8002c04:	08002c17 	.word	0x08002c17
 8002c08:	08002c11 	.word	0x08002c11
 8002c0c:	08002c29 	.word	0x08002c29
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	73fb      	strb	r3, [r7, #15]
      break;
 8002c14:	e030      	b.n	8002c78 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c1a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d025      	beq.n	8002c6e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c26:	e022      	b.n	8002c6e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c2c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002c30:	d11f      	bne.n	8002c72 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002c36:	e01c      	b.n	8002c72 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	2b02      	cmp	r3, #2
 8002c3c:	d903      	bls.n	8002c46 <DMA_CheckFifoParam+0xb6>
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	2b03      	cmp	r3, #3
 8002c42:	d003      	beq.n	8002c4c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002c44:	e018      	b.n	8002c78 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	73fb      	strb	r3, [r7, #15]
      break;
 8002c4a:	e015      	b.n	8002c78 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c50:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d00e      	beq.n	8002c76 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	73fb      	strb	r3, [r7, #15]
      break;
 8002c5c:	e00b      	b.n	8002c76 <DMA_CheckFifoParam+0xe6>
      break;
 8002c5e:	bf00      	nop
 8002c60:	e00a      	b.n	8002c78 <DMA_CheckFifoParam+0xe8>
      break;
 8002c62:	bf00      	nop
 8002c64:	e008      	b.n	8002c78 <DMA_CheckFifoParam+0xe8>
      break;
 8002c66:	bf00      	nop
 8002c68:	e006      	b.n	8002c78 <DMA_CheckFifoParam+0xe8>
      break;
 8002c6a:	bf00      	nop
 8002c6c:	e004      	b.n	8002c78 <DMA_CheckFifoParam+0xe8>
      break;
 8002c6e:	bf00      	nop
 8002c70:	e002      	b.n	8002c78 <DMA_CheckFifoParam+0xe8>
      break;   
 8002c72:	bf00      	nop
 8002c74:	e000      	b.n	8002c78 <DMA_CheckFifoParam+0xe8>
      break;
 8002c76:	bf00      	nop
    }
  } 
  
  return status; 
 8002c78:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3714      	adds	r7, #20
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c84:	4770      	bx	lr
 8002c86:	bf00      	nop

08002c88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b089      	sub	sp, #36	; 0x24
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
 8002c90:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002c92:	2300      	movs	r3, #0
 8002c94:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002c96:	2300      	movs	r3, #0
 8002c98:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	61fb      	str	r3, [r7, #28]
 8002ca2:	e16b      	b.n	8002f7c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	69fb      	ldr	r3, [r7, #28]
 8002ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	697a      	ldr	r2, [r7, #20]
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002cb8:	693a      	ldr	r2, [r7, #16]
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	429a      	cmp	r2, r3
 8002cbe:	f040 815a 	bne.w	8002f76 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	f003 0303 	and.w	r3, r3, #3
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	d005      	beq.n	8002cda <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002cd6:	2b02      	cmp	r3, #2
 8002cd8:	d130      	bne.n	8002d3c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ce0:	69fb      	ldr	r3, [r7, #28]
 8002ce2:	005b      	lsls	r3, r3, #1
 8002ce4:	2203      	movs	r2, #3
 8002ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cea:	43db      	mvns	r3, r3
 8002cec:	69ba      	ldr	r2, [r7, #24]
 8002cee:	4013      	ands	r3, r2
 8002cf0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	68da      	ldr	r2, [r3, #12]
 8002cf6:	69fb      	ldr	r3, [r7, #28]
 8002cf8:	005b      	lsls	r3, r3, #1
 8002cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8002cfe:	69ba      	ldr	r2, [r7, #24]
 8002d00:	4313      	orrs	r3, r2
 8002d02:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	69ba      	ldr	r2, [r7, #24]
 8002d08:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d10:	2201      	movs	r2, #1
 8002d12:	69fb      	ldr	r3, [r7, #28]
 8002d14:	fa02 f303 	lsl.w	r3, r2, r3
 8002d18:	43db      	mvns	r3, r3
 8002d1a:	69ba      	ldr	r2, [r7, #24]
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	091b      	lsrs	r3, r3, #4
 8002d26:	f003 0201 	and.w	r2, r3, #1
 8002d2a:	69fb      	ldr	r3, [r7, #28]
 8002d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d30:	69ba      	ldr	r2, [r7, #24]
 8002d32:	4313      	orrs	r3, r2
 8002d34:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	69ba      	ldr	r2, [r7, #24]
 8002d3a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	f003 0303 	and.w	r3, r3, #3
 8002d44:	2b03      	cmp	r3, #3
 8002d46:	d017      	beq.n	8002d78 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002d4e:	69fb      	ldr	r3, [r7, #28]
 8002d50:	005b      	lsls	r3, r3, #1
 8002d52:	2203      	movs	r2, #3
 8002d54:	fa02 f303 	lsl.w	r3, r2, r3
 8002d58:	43db      	mvns	r3, r3
 8002d5a:	69ba      	ldr	r2, [r7, #24]
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	689a      	ldr	r2, [r3, #8]
 8002d64:	69fb      	ldr	r3, [r7, #28]
 8002d66:	005b      	lsls	r3, r3, #1
 8002d68:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6c:	69ba      	ldr	r2, [r7, #24]
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	69ba      	ldr	r2, [r7, #24]
 8002d76:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	f003 0303 	and.w	r3, r3, #3
 8002d80:	2b02      	cmp	r3, #2
 8002d82:	d123      	bne.n	8002dcc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d84:	69fb      	ldr	r3, [r7, #28]
 8002d86:	08da      	lsrs	r2, r3, #3
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	3208      	adds	r2, #8
 8002d8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d90:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002d92:	69fb      	ldr	r3, [r7, #28]
 8002d94:	f003 0307 	and.w	r3, r3, #7
 8002d98:	009b      	lsls	r3, r3, #2
 8002d9a:	220f      	movs	r2, #15
 8002d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002da0:	43db      	mvns	r3, r3
 8002da2:	69ba      	ldr	r2, [r7, #24]
 8002da4:	4013      	ands	r3, r2
 8002da6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	691a      	ldr	r2, [r3, #16]
 8002dac:	69fb      	ldr	r3, [r7, #28]
 8002dae:	f003 0307 	and.w	r3, r3, #7
 8002db2:	009b      	lsls	r3, r3, #2
 8002db4:	fa02 f303 	lsl.w	r3, r2, r3
 8002db8:	69ba      	ldr	r2, [r7, #24]
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002dbe:	69fb      	ldr	r3, [r7, #28]
 8002dc0:	08da      	lsrs	r2, r3, #3
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	3208      	adds	r2, #8
 8002dc6:	69b9      	ldr	r1, [r7, #24]
 8002dc8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002dd2:	69fb      	ldr	r3, [r7, #28]
 8002dd4:	005b      	lsls	r3, r3, #1
 8002dd6:	2203      	movs	r2, #3
 8002dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ddc:	43db      	mvns	r3, r3
 8002dde:	69ba      	ldr	r2, [r7, #24]
 8002de0:	4013      	ands	r3, r2
 8002de2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	f003 0203 	and.w	r2, r3, #3
 8002dec:	69fb      	ldr	r3, [r7, #28]
 8002dee:	005b      	lsls	r3, r3, #1
 8002df0:	fa02 f303 	lsl.w	r3, r2, r3
 8002df4:	69ba      	ldr	r2, [r7, #24]
 8002df6:	4313      	orrs	r3, r2
 8002df8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	69ba      	ldr	r2, [r7, #24]
 8002dfe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	f000 80b4 	beq.w	8002f76 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e0e:	2300      	movs	r3, #0
 8002e10:	60fb      	str	r3, [r7, #12]
 8002e12:	4b60      	ldr	r3, [pc, #384]	; (8002f94 <HAL_GPIO_Init+0x30c>)
 8002e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e16:	4a5f      	ldr	r2, [pc, #380]	; (8002f94 <HAL_GPIO_Init+0x30c>)
 8002e18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e1c:	6453      	str	r3, [r2, #68]	; 0x44
 8002e1e:	4b5d      	ldr	r3, [pc, #372]	; (8002f94 <HAL_GPIO_Init+0x30c>)
 8002e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e26:	60fb      	str	r3, [r7, #12]
 8002e28:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e2a:	4a5b      	ldr	r2, [pc, #364]	; (8002f98 <HAL_GPIO_Init+0x310>)
 8002e2c:	69fb      	ldr	r3, [r7, #28]
 8002e2e:	089b      	lsrs	r3, r3, #2
 8002e30:	3302      	adds	r3, #2
 8002e32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e36:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002e38:	69fb      	ldr	r3, [r7, #28]
 8002e3a:	f003 0303 	and.w	r3, r3, #3
 8002e3e:	009b      	lsls	r3, r3, #2
 8002e40:	220f      	movs	r2, #15
 8002e42:	fa02 f303 	lsl.w	r3, r2, r3
 8002e46:	43db      	mvns	r3, r3
 8002e48:	69ba      	ldr	r2, [r7, #24]
 8002e4a:	4013      	ands	r3, r2
 8002e4c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	4a52      	ldr	r2, [pc, #328]	; (8002f9c <HAL_GPIO_Init+0x314>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d02b      	beq.n	8002eae <HAL_GPIO_Init+0x226>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	4a51      	ldr	r2, [pc, #324]	; (8002fa0 <HAL_GPIO_Init+0x318>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d025      	beq.n	8002eaa <HAL_GPIO_Init+0x222>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	4a50      	ldr	r2, [pc, #320]	; (8002fa4 <HAL_GPIO_Init+0x31c>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d01f      	beq.n	8002ea6 <HAL_GPIO_Init+0x21e>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	4a4f      	ldr	r2, [pc, #316]	; (8002fa8 <HAL_GPIO_Init+0x320>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d019      	beq.n	8002ea2 <HAL_GPIO_Init+0x21a>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	4a4e      	ldr	r2, [pc, #312]	; (8002fac <HAL_GPIO_Init+0x324>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d013      	beq.n	8002e9e <HAL_GPIO_Init+0x216>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	4a4d      	ldr	r2, [pc, #308]	; (8002fb0 <HAL_GPIO_Init+0x328>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d00d      	beq.n	8002e9a <HAL_GPIO_Init+0x212>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	4a4c      	ldr	r2, [pc, #304]	; (8002fb4 <HAL_GPIO_Init+0x32c>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d007      	beq.n	8002e96 <HAL_GPIO_Init+0x20e>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	4a4b      	ldr	r2, [pc, #300]	; (8002fb8 <HAL_GPIO_Init+0x330>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d101      	bne.n	8002e92 <HAL_GPIO_Init+0x20a>
 8002e8e:	2307      	movs	r3, #7
 8002e90:	e00e      	b.n	8002eb0 <HAL_GPIO_Init+0x228>
 8002e92:	2308      	movs	r3, #8
 8002e94:	e00c      	b.n	8002eb0 <HAL_GPIO_Init+0x228>
 8002e96:	2306      	movs	r3, #6
 8002e98:	e00a      	b.n	8002eb0 <HAL_GPIO_Init+0x228>
 8002e9a:	2305      	movs	r3, #5
 8002e9c:	e008      	b.n	8002eb0 <HAL_GPIO_Init+0x228>
 8002e9e:	2304      	movs	r3, #4
 8002ea0:	e006      	b.n	8002eb0 <HAL_GPIO_Init+0x228>
 8002ea2:	2303      	movs	r3, #3
 8002ea4:	e004      	b.n	8002eb0 <HAL_GPIO_Init+0x228>
 8002ea6:	2302      	movs	r3, #2
 8002ea8:	e002      	b.n	8002eb0 <HAL_GPIO_Init+0x228>
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e000      	b.n	8002eb0 <HAL_GPIO_Init+0x228>
 8002eae:	2300      	movs	r3, #0
 8002eb0:	69fa      	ldr	r2, [r7, #28]
 8002eb2:	f002 0203 	and.w	r2, r2, #3
 8002eb6:	0092      	lsls	r2, r2, #2
 8002eb8:	4093      	lsls	r3, r2
 8002eba:	69ba      	ldr	r2, [r7, #24]
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ec0:	4935      	ldr	r1, [pc, #212]	; (8002f98 <HAL_GPIO_Init+0x310>)
 8002ec2:	69fb      	ldr	r3, [r7, #28]
 8002ec4:	089b      	lsrs	r3, r3, #2
 8002ec6:	3302      	adds	r3, #2
 8002ec8:	69ba      	ldr	r2, [r7, #24]
 8002eca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ece:	4b3b      	ldr	r3, [pc, #236]	; (8002fbc <HAL_GPIO_Init+0x334>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	43db      	mvns	r3, r3
 8002ed8:	69ba      	ldr	r2, [r7, #24]
 8002eda:	4013      	ands	r3, r2
 8002edc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d003      	beq.n	8002ef2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002eea:	69ba      	ldr	r2, [r7, #24]
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ef2:	4a32      	ldr	r2, [pc, #200]	; (8002fbc <HAL_GPIO_Init+0x334>)
 8002ef4:	69bb      	ldr	r3, [r7, #24]
 8002ef6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002ef8:	4b30      	ldr	r3, [pc, #192]	; (8002fbc <HAL_GPIO_Init+0x334>)
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	43db      	mvns	r3, r3
 8002f02:	69ba      	ldr	r2, [r7, #24]
 8002f04:	4013      	ands	r3, r2
 8002f06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d003      	beq.n	8002f1c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002f14:	69ba      	ldr	r2, [r7, #24]
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002f1c:	4a27      	ldr	r2, [pc, #156]	; (8002fbc <HAL_GPIO_Init+0x334>)
 8002f1e:	69bb      	ldr	r3, [r7, #24]
 8002f20:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f22:	4b26      	ldr	r3, [pc, #152]	; (8002fbc <HAL_GPIO_Init+0x334>)
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	43db      	mvns	r3, r3
 8002f2c:	69ba      	ldr	r2, [r7, #24]
 8002f2e:	4013      	ands	r3, r2
 8002f30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d003      	beq.n	8002f46 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002f3e:	69ba      	ldr	r2, [r7, #24]
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	4313      	orrs	r3, r2
 8002f44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f46:	4a1d      	ldr	r2, [pc, #116]	; (8002fbc <HAL_GPIO_Init+0x334>)
 8002f48:	69bb      	ldr	r3, [r7, #24]
 8002f4a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f4c:	4b1b      	ldr	r3, [pc, #108]	; (8002fbc <HAL_GPIO_Init+0x334>)
 8002f4e:	68db      	ldr	r3, [r3, #12]
 8002f50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	43db      	mvns	r3, r3
 8002f56:	69ba      	ldr	r2, [r7, #24]
 8002f58:	4013      	ands	r3, r2
 8002f5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d003      	beq.n	8002f70 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002f68:	69ba      	ldr	r2, [r7, #24]
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f70:	4a12      	ldr	r2, [pc, #72]	; (8002fbc <HAL_GPIO_Init+0x334>)
 8002f72:	69bb      	ldr	r3, [r7, #24]
 8002f74:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f76:	69fb      	ldr	r3, [r7, #28]
 8002f78:	3301      	adds	r3, #1
 8002f7a:	61fb      	str	r3, [r7, #28]
 8002f7c:	69fb      	ldr	r3, [r7, #28]
 8002f7e:	2b0f      	cmp	r3, #15
 8002f80:	f67f ae90 	bls.w	8002ca4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002f84:	bf00      	nop
 8002f86:	bf00      	nop
 8002f88:	3724      	adds	r7, #36	; 0x24
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f90:	4770      	bx	lr
 8002f92:	bf00      	nop
 8002f94:	40023800 	.word	0x40023800
 8002f98:	40013800 	.word	0x40013800
 8002f9c:	40020000 	.word	0x40020000
 8002fa0:	40020400 	.word	0x40020400
 8002fa4:	40020800 	.word	0x40020800
 8002fa8:	40020c00 	.word	0x40020c00
 8002fac:	40021000 	.word	0x40021000
 8002fb0:	40021400 	.word	0x40021400
 8002fb4:	40021800 	.word	0x40021800
 8002fb8:	40021c00 	.word	0x40021c00
 8002fbc:	40013c00 	.word	0x40013c00

08002fc0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b083      	sub	sp, #12
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
 8002fc8:	460b      	mov	r3, r1
 8002fca:	807b      	strh	r3, [r7, #2]
 8002fcc:	4613      	mov	r3, r2
 8002fce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002fd0:	787b      	ldrb	r3, [r7, #1]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d003      	beq.n	8002fde <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002fd6:	887a      	ldrh	r2, [r7, #2]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002fdc:	e003      	b.n	8002fe6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002fde:	887b      	ldrh	r3, [r7, #2]
 8002fe0:	041a      	lsls	r2, r3, #16
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	619a      	str	r2, [r3, #24]
}
 8002fe6:	bf00      	nop
 8002fe8:	370c      	adds	r7, #12
 8002fea:	46bd      	mov	sp, r7
 8002fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff0:	4770      	bx	lr

08002ff2 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002ff2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ff4:	b08f      	sub	sp, #60	; 0x3c
 8002ff6:	af0a      	add	r7, sp, #40	; 0x28
 8002ff8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d101      	bne.n	8003004 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	e054      	b.n	80030ae <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8003010:	b2db      	uxtb	r3, r3
 8003012:	2b00      	cmp	r3, #0
 8003014:	d106      	bne.n	8003024 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2200      	movs	r2, #0
 800301a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f007 ffe0 	bl	800afe4 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2203      	movs	r2, #3
 8003028:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003030:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003034:	2b00      	cmp	r3, #0
 8003036:	d102      	bne.n	800303e <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2200      	movs	r2, #0
 800303c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4618      	mov	r0, r3
 8003044:	f005 f936 	bl	80082b4 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	603b      	str	r3, [r7, #0]
 800304e:	687e      	ldr	r6, [r7, #4]
 8003050:	466d      	mov	r5, sp
 8003052:	f106 0410 	add.w	r4, r6, #16
 8003056:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003058:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800305a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800305c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800305e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003062:	e885 0003 	stmia.w	r5, {r0, r1}
 8003066:	1d33      	adds	r3, r6, #4
 8003068:	cb0e      	ldmia	r3, {r1, r2, r3}
 800306a:	6838      	ldr	r0, [r7, #0]
 800306c:	f005 f8b0 	bl	80081d0 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	2101      	movs	r1, #1
 8003076:	4618      	mov	r0, r3
 8003078:	f005 f92d 	bl	80082d6 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	603b      	str	r3, [r7, #0]
 8003082:	687e      	ldr	r6, [r7, #4]
 8003084:	466d      	mov	r5, sp
 8003086:	f106 0410 	add.w	r4, r6, #16
 800308a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800308c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800308e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003090:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003092:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003096:	e885 0003 	stmia.w	r5, {r0, r1}
 800309a:	1d33      	adds	r3, r6, #4
 800309c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800309e:	6838      	ldr	r0, [r7, #0]
 80030a0:	f005 fa94 	bl	80085cc <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2201      	movs	r2, #1
 80030a8:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80030ac:	2300      	movs	r3, #0
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	3714      	adds	r7, #20
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080030b6 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80030b6:	b590      	push	{r4, r7, lr}
 80030b8:	b089      	sub	sp, #36	; 0x24
 80030ba:	af04      	add	r7, sp, #16
 80030bc:	6078      	str	r0, [r7, #4]
 80030be:	4608      	mov	r0, r1
 80030c0:	4611      	mov	r1, r2
 80030c2:	461a      	mov	r2, r3
 80030c4:	4603      	mov	r3, r0
 80030c6:	70fb      	strb	r3, [r7, #3]
 80030c8:	460b      	mov	r3, r1
 80030ca:	70bb      	strb	r3, [r7, #2]
 80030cc:	4613      	mov	r3, r2
 80030ce:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80030d6:	2b01      	cmp	r3, #1
 80030d8:	d101      	bne.n	80030de <HAL_HCD_HC_Init+0x28>
 80030da:	2302      	movs	r3, #2
 80030dc:	e076      	b.n	80031cc <HAL_HCD_HC_Init+0x116>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2201      	movs	r2, #1
 80030e2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80030e6:	78fb      	ldrb	r3, [r7, #3]
 80030e8:	687a      	ldr	r2, [r7, #4]
 80030ea:	212c      	movs	r1, #44	; 0x2c
 80030ec:	fb01 f303 	mul.w	r3, r1, r3
 80030f0:	4413      	add	r3, r2
 80030f2:	333d      	adds	r3, #61	; 0x3d
 80030f4:	2200      	movs	r2, #0
 80030f6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80030f8:	78fb      	ldrb	r3, [r7, #3]
 80030fa:	687a      	ldr	r2, [r7, #4]
 80030fc:	212c      	movs	r1, #44	; 0x2c
 80030fe:	fb01 f303 	mul.w	r3, r1, r3
 8003102:	4413      	add	r3, r2
 8003104:	3338      	adds	r3, #56	; 0x38
 8003106:	787a      	ldrb	r2, [r7, #1]
 8003108:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800310a:	78fb      	ldrb	r3, [r7, #3]
 800310c:	687a      	ldr	r2, [r7, #4]
 800310e:	212c      	movs	r1, #44	; 0x2c
 8003110:	fb01 f303 	mul.w	r3, r1, r3
 8003114:	4413      	add	r3, r2
 8003116:	3340      	adds	r3, #64	; 0x40
 8003118:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800311a:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800311c:	78fb      	ldrb	r3, [r7, #3]
 800311e:	687a      	ldr	r2, [r7, #4]
 8003120:	212c      	movs	r1, #44	; 0x2c
 8003122:	fb01 f303 	mul.w	r3, r1, r3
 8003126:	4413      	add	r3, r2
 8003128:	3339      	adds	r3, #57	; 0x39
 800312a:	78fa      	ldrb	r2, [r7, #3]
 800312c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800312e:	78fb      	ldrb	r3, [r7, #3]
 8003130:	687a      	ldr	r2, [r7, #4]
 8003132:	212c      	movs	r1, #44	; 0x2c
 8003134:	fb01 f303 	mul.w	r3, r1, r3
 8003138:	4413      	add	r3, r2
 800313a:	333f      	adds	r3, #63	; 0x3f
 800313c:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8003140:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8003142:	78fb      	ldrb	r3, [r7, #3]
 8003144:	78ba      	ldrb	r2, [r7, #2]
 8003146:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800314a:	b2d0      	uxtb	r0, r2
 800314c:	687a      	ldr	r2, [r7, #4]
 800314e:	212c      	movs	r1, #44	; 0x2c
 8003150:	fb01 f303 	mul.w	r3, r1, r3
 8003154:	4413      	add	r3, r2
 8003156:	333a      	adds	r3, #58	; 0x3a
 8003158:	4602      	mov	r2, r0
 800315a:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 800315c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003160:	2b00      	cmp	r3, #0
 8003162:	da09      	bge.n	8003178 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8003164:	78fb      	ldrb	r3, [r7, #3]
 8003166:	687a      	ldr	r2, [r7, #4]
 8003168:	212c      	movs	r1, #44	; 0x2c
 800316a:	fb01 f303 	mul.w	r3, r1, r3
 800316e:	4413      	add	r3, r2
 8003170:	333b      	adds	r3, #59	; 0x3b
 8003172:	2201      	movs	r2, #1
 8003174:	701a      	strb	r2, [r3, #0]
 8003176:	e008      	b.n	800318a <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8003178:	78fb      	ldrb	r3, [r7, #3]
 800317a:	687a      	ldr	r2, [r7, #4]
 800317c:	212c      	movs	r1, #44	; 0x2c
 800317e:	fb01 f303 	mul.w	r3, r1, r3
 8003182:	4413      	add	r3, r2
 8003184:	333b      	adds	r3, #59	; 0x3b
 8003186:	2200      	movs	r2, #0
 8003188:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800318a:	78fb      	ldrb	r3, [r7, #3]
 800318c:	687a      	ldr	r2, [r7, #4]
 800318e:	212c      	movs	r1, #44	; 0x2c
 8003190:	fb01 f303 	mul.w	r3, r1, r3
 8003194:	4413      	add	r3, r2
 8003196:	333c      	adds	r3, #60	; 0x3c
 8003198:	f897 2020 	ldrb.w	r2, [r7, #32]
 800319c:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6818      	ldr	r0, [r3, #0]
 80031a2:	787c      	ldrb	r4, [r7, #1]
 80031a4:	78ba      	ldrb	r2, [r7, #2]
 80031a6:	78f9      	ldrb	r1, [r7, #3]
 80031a8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80031aa:	9302      	str	r3, [sp, #8]
 80031ac:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80031b0:	9301      	str	r3, [sp, #4]
 80031b2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80031b6:	9300      	str	r3, [sp, #0]
 80031b8:	4623      	mov	r3, r4
 80031ba:	f005 fb81 	bl	80088c0 <USB_HC_Init>
 80031be:	4603      	mov	r3, r0
 80031c0:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2200      	movs	r2, #0
 80031c6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80031ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	3714      	adds	r7, #20
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd90      	pop	{r4, r7, pc}

080031d4 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b084      	sub	sp, #16
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
 80031dc:	460b      	mov	r3, r1
 80031de:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80031e0:	2300      	movs	r3, #0
 80031e2:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80031ea:	2b01      	cmp	r3, #1
 80031ec:	d101      	bne.n	80031f2 <HAL_HCD_HC_Halt+0x1e>
 80031ee:	2302      	movs	r3, #2
 80031f0:	e00f      	b.n	8003212 <HAL_HCD_HC_Halt+0x3e>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2201      	movs	r2, #1
 80031f6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	78fa      	ldrb	r2, [r7, #3]
 8003200:	4611      	mov	r1, r2
 8003202:	4618      	mov	r0, r3
 8003204:	f005 fdbd 	bl	8008d82 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2200      	movs	r2, #0
 800320c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8003210:	7bfb      	ldrb	r3, [r7, #15]
}
 8003212:	4618      	mov	r0, r3
 8003214:	3710      	adds	r7, #16
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}
	...

0800321c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b082      	sub	sp, #8
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
 8003224:	4608      	mov	r0, r1
 8003226:	4611      	mov	r1, r2
 8003228:	461a      	mov	r2, r3
 800322a:	4603      	mov	r3, r0
 800322c:	70fb      	strb	r3, [r7, #3]
 800322e:	460b      	mov	r3, r1
 8003230:	70bb      	strb	r3, [r7, #2]
 8003232:	4613      	mov	r3, r2
 8003234:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8003236:	78fb      	ldrb	r3, [r7, #3]
 8003238:	687a      	ldr	r2, [r7, #4]
 800323a:	212c      	movs	r1, #44	; 0x2c
 800323c:	fb01 f303 	mul.w	r3, r1, r3
 8003240:	4413      	add	r3, r2
 8003242:	333b      	adds	r3, #59	; 0x3b
 8003244:	78ba      	ldrb	r2, [r7, #2]
 8003246:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8003248:	78fb      	ldrb	r3, [r7, #3]
 800324a:	687a      	ldr	r2, [r7, #4]
 800324c:	212c      	movs	r1, #44	; 0x2c
 800324e:	fb01 f303 	mul.w	r3, r1, r3
 8003252:	4413      	add	r3, r2
 8003254:	333f      	adds	r3, #63	; 0x3f
 8003256:	787a      	ldrb	r2, [r7, #1]
 8003258:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800325a:	7c3b      	ldrb	r3, [r7, #16]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d112      	bne.n	8003286 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8003260:	78fb      	ldrb	r3, [r7, #3]
 8003262:	687a      	ldr	r2, [r7, #4]
 8003264:	212c      	movs	r1, #44	; 0x2c
 8003266:	fb01 f303 	mul.w	r3, r1, r3
 800326a:	4413      	add	r3, r2
 800326c:	3342      	adds	r3, #66	; 0x42
 800326e:	2203      	movs	r2, #3
 8003270:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8003272:	78fb      	ldrb	r3, [r7, #3]
 8003274:	687a      	ldr	r2, [r7, #4]
 8003276:	212c      	movs	r1, #44	; 0x2c
 8003278:	fb01 f303 	mul.w	r3, r1, r3
 800327c:	4413      	add	r3, r2
 800327e:	333d      	adds	r3, #61	; 0x3d
 8003280:	7f3a      	ldrb	r2, [r7, #28]
 8003282:	701a      	strb	r2, [r3, #0]
 8003284:	e008      	b.n	8003298 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003286:	78fb      	ldrb	r3, [r7, #3]
 8003288:	687a      	ldr	r2, [r7, #4]
 800328a:	212c      	movs	r1, #44	; 0x2c
 800328c:	fb01 f303 	mul.w	r3, r1, r3
 8003290:	4413      	add	r3, r2
 8003292:	3342      	adds	r3, #66	; 0x42
 8003294:	2202      	movs	r2, #2
 8003296:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8003298:	787b      	ldrb	r3, [r7, #1]
 800329a:	2b03      	cmp	r3, #3
 800329c:	f200 80c6 	bhi.w	800342c <HAL_HCD_HC_SubmitRequest+0x210>
 80032a0:	a201      	add	r2, pc, #4	; (adr r2, 80032a8 <HAL_HCD_HC_SubmitRequest+0x8c>)
 80032a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032a6:	bf00      	nop
 80032a8:	080032b9 	.word	0x080032b9
 80032ac:	08003419 	.word	0x08003419
 80032b0:	0800331d 	.word	0x0800331d
 80032b4:	0800339b 	.word	0x0800339b
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80032b8:	7c3b      	ldrb	r3, [r7, #16]
 80032ba:	2b01      	cmp	r3, #1
 80032bc:	f040 80b8 	bne.w	8003430 <HAL_HCD_HC_SubmitRequest+0x214>
 80032c0:	78bb      	ldrb	r3, [r7, #2]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	f040 80b4 	bne.w	8003430 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80032c8:	8b3b      	ldrh	r3, [r7, #24]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d108      	bne.n	80032e0 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80032ce:	78fb      	ldrb	r3, [r7, #3]
 80032d0:	687a      	ldr	r2, [r7, #4]
 80032d2:	212c      	movs	r1, #44	; 0x2c
 80032d4:	fb01 f303 	mul.w	r3, r1, r3
 80032d8:	4413      	add	r3, r2
 80032da:	3355      	adds	r3, #85	; 0x55
 80032dc:	2201      	movs	r2, #1
 80032de:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80032e0:	78fb      	ldrb	r3, [r7, #3]
 80032e2:	687a      	ldr	r2, [r7, #4]
 80032e4:	212c      	movs	r1, #44	; 0x2c
 80032e6:	fb01 f303 	mul.w	r3, r1, r3
 80032ea:	4413      	add	r3, r2
 80032ec:	3355      	adds	r3, #85	; 0x55
 80032ee:	781b      	ldrb	r3, [r3, #0]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d109      	bne.n	8003308 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80032f4:	78fb      	ldrb	r3, [r7, #3]
 80032f6:	687a      	ldr	r2, [r7, #4]
 80032f8:	212c      	movs	r1, #44	; 0x2c
 80032fa:	fb01 f303 	mul.w	r3, r1, r3
 80032fe:	4413      	add	r3, r2
 8003300:	3342      	adds	r3, #66	; 0x42
 8003302:	2200      	movs	r2, #0
 8003304:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003306:	e093      	b.n	8003430 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003308:	78fb      	ldrb	r3, [r7, #3]
 800330a:	687a      	ldr	r2, [r7, #4]
 800330c:	212c      	movs	r1, #44	; 0x2c
 800330e:	fb01 f303 	mul.w	r3, r1, r3
 8003312:	4413      	add	r3, r2
 8003314:	3342      	adds	r3, #66	; 0x42
 8003316:	2202      	movs	r2, #2
 8003318:	701a      	strb	r2, [r3, #0]
      break;
 800331a:	e089      	b.n	8003430 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 800331c:	78bb      	ldrb	r3, [r7, #2]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d11d      	bne.n	800335e <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003322:	78fb      	ldrb	r3, [r7, #3]
 8003324:	687a      	ldr	r2, [r7, #4]
 8003326:	212c      	movs	r1, #44	; 0x2c
 8003328:	fb01 f303 	mul.w	r3, r1, r3
 800332c:	4413      	add	r3, r2
 800332e:	3355      	adds	r3, #85	; 0x55
 8003330:	781b      	ldrb	r3, [r3, #0]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d109      	bne.n	800334a <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003336:	78fb      	ldrb	r3, [r7, #3]
 8003338:	687a      	ldr	r2, [r7, #4]
 800333a:	212c      	movs	r1, #44	; 0x2c
 800333c:	fb01 f303 	mul.w	r3, r1, r3
 8003340:	4413      	add	r3, r2
 8003342:	3342      	adds	r3, #66	; 0x42
 8003344:	2200      	movs	r2, #0
 8003346:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8003348:	e073      	b.n	8003432 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800334a:	78fb      	ldrb	r3, [r7, #3]
 800334c:	687a      	ldr	r2, [r7, #4]
 800334e:	212c      	movs	r1, #44	; 0x2c
 8003350:	fb01 f303 	mul.w	r3, r1, r3
 8003354:	4413      	add	r3, r2
 8003356:	3342      	adds	r3, #66	; 0x42
 8003358:	2202      	movs	r2, #2
 800335a:	701a      	strb	r2, [r3, #0]
      break;
 800335c:	e069      	b.n	8003432 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800335e:	78fb      	ldrb	r3, [r7, #3]
 8003360:	687a      	ldr	r2, [r7, #4]
 8003362:	212c      	movs	r1, #44	; 0x2c
 8003364:	fb01 f303 	mul.w	r3, r1, r3
 8003368:	4413      	add	r3, r2
 800336a:	3354      	adds	r3, #84	; 0x54
 800336c:	781b      	ldrb	r3, [r3, #0]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d109      	bne.n	8003386 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003372:	78fb      	ldrb	r3, [r7, #3]
 8003374:	687a      	ldr	r2, [r7, #4]
 8003376:	212c      	movs	r1, #44	; 0x2c
 8003378:	fb01 f303 	mul.w	r3, r1, r3
 800337c:	4413      	add	r3, r2
 800337e:	3342      	adds	r3, #66	; 0x42
 8003380:	2200      	movs	r2, #0
 8003382:	701a      	strb	r2, [r3, #0]
      break;
 8003384:	e055      	b.n	8003432 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003386:	78fb      	ldrb	r3, [r7, #3]
 8003388:	687a      	ldr	r2, [r7, #4]
 800338a:	212c      	movs	r1, #44	; 0x2c
 800338c:	fb01 f303 	mul.w	r3, r1, r3
 8003390:	4413      	add	r3, r2
 8003392:	3342      	adds	r3, #66	; 0x42
 8003394:	2202      	movs	r2, #2
 8003396:	701a      	strb	r2, [r3, #0]
      break;
 8003398:	e04b      	b.n	8003432 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800339a:	78bb      	ldrb	r3, [r7, #2]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d11d      	bne.n	80033dc <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80033a0:	78fb      	ldrb	r3, [r7, #3]
 80033a2:	687a      	ldr	r2, [r7, #4]
 80033a4:	212c      	movs	r1, #44	; 0x2c
 80033a6:	fb01 f303 	mul.w	r3, r1, r3
 80033aa:	4413      	add	r3, r2
 80033ac:	3355      	adds	r3, #85	; 0x55
 80033ae:	781b      	ldrb	r3, [r3, #0]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d109      	bne.n	80033c8 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80033b4:	78fb      	ldrb	r3, [r7, #3]
 80033b6:	687a      	ldr	r2, [r7, #4]
 80033b8:	212c      	movs	r1, #44	; 0x2c
 80033ba:	fb01 f303 	mul.w	r3, r1, r3
 80033be:	4413      	add	r3, r2
 80033c0:	3342      	adds	r3, #66	; 0x42
 80033c2:	2200      	movs	r2, #0
 80033c4:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80033c6:	e034      	b.n	8003432 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80033c8:	78fb      	ldrb	r3, [r7, #3]
 80033ca:	687a      	ldr	r2, [r7, #4]
 80033cc:	212c      	movs	r1, #44	; 0x2c
 80033ce:	fb01 f303 	mul.w	r3, r1, r3
 80033d2:	4413      	add	r3, r2
 80033d4:	3342      	adds	r3, #66	; 0x42
 80033d6:	2202      	movs	r2, #2
 80033d8:	701a      	strb	r2, [r3, #0]
      break;
 80033da:	e02a      	b.n	8003432 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80033dc:	78fb      	ldrb	r3, [r7, #3]
 80033de:	687a      	ldr	r2, [r7, #4]
 80033e0:	212c      	movs	r1, #44	; 0x2c
 80033e2:	fb01 f303 	mul.w	r3, r1, r3
 80033e6:	4413      	add	r3, r2
 80033e8:	3354      	adds	r3, #84	; 0x54
 80033ea:	781b      	ldrb	r3, [r3, #0]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d109      	bne.n	8003404 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80033f0:	78fb      	ldrb	r3, [r7, #3]
 80033f2:	687a      	ldr	r2, [r7, #4]
 80033f4:	212c      	movs	r1, #44	; 0x2c
 80033f6:	fb01 f303 	mul.w	r3, r1, r3
 80033fa:	4413      	add	r3, r2
 80033fc:	3342      	adds	r3, #66	; 0x42
 80033fe:	2200      	movs	r2, #0
 8003400:	701a      	strb	r2, [r3, #0]
      break;
 8003402:	e016      	b.n	8003432 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003404:	78fb      	ldrb	r3, [r7, #3]
 8003406:	687a      	ldr	r2, [r7, #4]
 8003408:	212c      	movs	r1, #44	; 0x2c
 800340a:	fb01 f303 	mul.w	r3, r1, r3
 800340e:	4413      	add	r3, r2
 8003410:	3342      	adds	r3, #66	; 0x42
 8003412:	2202      	movs	r2, #2
 8003414:	701a      	strb	r2, [r3, #0]
      break;
 8003416:	e00c      	b.n	8003432 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003418:	78fb      	ldrb	r3, [r7, #3]
 800341a:	687a      	ldr	r2, [r7, #4]
 800341c:	212c      	movs	r1, #44	; 0x2c
 800341e:	fb01 f303 	mul.w	r3, r1, r3
 8003422:	4413      	add	r3, r2
 8003424:	3342      	adds	r3, #66	; 0x42
 8003426:	2200      	movs	r2, #0
 8003428:	701a      	strb	r2, [r3, #0]
      break;
 800342a:	e002      	b.n	8003432 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 800342c:	bf00      	nop
 800342e:	e000      	b.n	8003432 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8003430:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8003432:	78fb      	ldrb	r3, [r7, #3]
 8003434:	687a      	ldr	r2, [r7, #4]
 8003436:	212c      	movs	r1, #44	; 0x2c
 8003438:	fb01 f303 	mul.w	r3, r1, r3
 800343c:	4413      	add	r3, r2
 800343e:	3344      	adds	r3, #68	; 0x44
 8003440:	697a      	ldr	r2, [r7, #20]
 8003442:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8003444:	78fb      	ldrb	r3, [r7, #3]
 8003446:	8b3a      	ldrh	r2, [r7, #24]
 8003448:	6879      	ldr	r1, [r7, #4]
 800344a:	202c      	movs	r0, #44	; 0x2c
 800344c:	fb00 f303 	mul.w	r3, r0, r3
 8003450:	440b      	add	r3, r1
 8003452:	334c      	adds	r3, #76	; 0x4c
 8003454:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8003456:	78fb      	ldrb	r3, [r7, #3]
 8003458:	687a      	ldr	r2, [r7, #4]
 800345a:	212c      	movs	r1, #44	; 0x2c
 800345c:	fb01 f303 	mul.w	r3, r1, r3
 8003460:	4413      	add	r3, r2
 8003462:	3360      	adds	r3, #96	; 0x60
 8003464:	2200      	movs	r2, #0
 8003466:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8003468:	78fb      	ldrb	r3, [r7, #3]
 800346a:	687a      	ldr	r2, [r7, #4]
 800346c:	212c      	movs	r1, #44	; 0x2c
 800346e:	fb01 f303 	mul.w	r3, r1, r3
 8003472:	4413      	add	r3, r2
 8003474:	3350      	adds	r3, #80	; 0x50
 8003476:	2200      	movs	r2, #0
 8003478:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800347a:	78fb      	ldrb	r3, [r7, #3]
 800347c:	687a      	ldr	r2, [r7, #4]
 800347e:	212c      	movs	r1, #44	; 0x2c
 8003480:	fb01 f303 	mul.w	r3, r1, r3
 8003484:	4413      	add	r3, r2
 8003486:	3339      	adds	r3, #57	; 0x39
 8003488:	78fa      	ldrb	r2, [r7, #3]
 800348a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 800348c:	78fb      	ldrb	r3, [r7, #3]
 800348e:	687a      	ldr	r2, [r7, #4]
 8003490:	212c      	movs	r1, #44	; 0x2c
 8003492:	fb01 f303 	mul.w	r3, r1, r3
 8003496:	4413      	add	r3, r2
 8003498:	3361      	adds	r3, #97	; 0x61
 800349a:	2200      	movs	r2, #0
 800349c:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6818      	ldr	r0, [r3, #0]
 80034a2:	78fb      	ldrb	r3, [r7, #3]
 80034a4:	222c      	movs	r2, #44	; 0x2c
 80034a6:	fb02 f303 	mul.w	r3, r2, r3
 80034aa:	3338      	adds	r3, #56	; 0x38
 80034ac:	687a      	ldr	r2, [r7, #4]
 80034ae:	18d1      	adds	r1, r2, r3
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	691b      	ldr	r3, [r3, #16]
 80034b4:	b2db      	uxtb	r3, r3
 80034b6:	461a      	mov	r2, r3
 80034b8:	f005 fb10 	bl	8008adc <USB_HC_StartXfer>
 80034bc:	4603      	mov	r3, r0
}
 80034be:	4618      	mov	r0, r3
 80034c0:	3708      	adds	r7, #8
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}
 80034c6:	bf00      	nop

080034c8 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b086      	sub	sp, #24
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4618      	mov	r0, r3
 80034e0:	f005 f833 	bl	800854a <USB_GetMode>
 80034e4:	4603      	mov	r3, r0
 80034e6:	2b01      	cmp	r3, #1
 80034e8:	f040 80f6 	bne.w	80036d8 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4618      	mov	r0, r3
 80034f2:	f005 f817 	bl	8008524 <USB_ReadInterrupts>
 80034f6:	4603      	mov	r3, r0
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	f000 80ec 	beq.w	80036d6 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4618      	mov	r0, r3
 8003504:	f005 f80e 	bl	8008524 <USB_ReadInterrupts>
 8003508:	4603      	mov	r3, r0
 800350a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800350e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003512:	d104      	bne.n	800351e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800351c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4618      	mov	r0, r3
 8003524:	f004 fffe 	bl	8008524 <USB_ReadInterrupts>
 8003528:	4603      	mov	r3, r0
 800352a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800352e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003532:	d104      	bne.n	800353e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800353c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4618      	mov	r0, r3
 8003544:	f004 ffee 	bl	8008524 <USB_ReadInterrupts>
 8003548:	4603      	mov	r3, r0
 800354a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800354e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003552:	d104      	bne.n	800355e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800355c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4618      	mov	r0, r3
 8003564:	f004 ffde 	bl	8008524 <USB_ReadInterrupts>
 8003568:	4603      	mov	r3, r0
 800356a:	f003 0302 	and.w	r3, r3, #2
 800356e:	2b02      	cmp	r3, #2
 8003570:	d103      	bne.n	800357a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	2202      	movs	r2, #2
 8003578:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4618      	mov	r0, r3
 8003580:	f004 ffd0 	bl	8008524 <USB_ReadInterrupts>
 8003584:	4603      	mov	r3, r0
 8003586:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800358a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800358e:	d11c      	bne.n	80035ca <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003598:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f003 0301 	and.w	r3, r3, #1
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d10f      	bne.n	80035ca <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80035aa:	2110      	movs	r1, #16
 80035ac:	6938      	ldr	r0, [r7, #16]
 80035ae:	f004 fedf 	bl	8008370 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80035b2:	6938      	ldr	r0, [r7, #16]
 80035b4:	f004 ff00 	bl	80083b8 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	2101      	movs	r1, #1
 80035be:	4618      	mov	r0, r3
 80035c0:	f005 f8b8 	bl	8008734 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	f007 fd8b 	bl	800b0e0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4618      	mov	r0, r3
 80035d0:	f004 ffa8 	bl	8008524 <USB_ReadInterrupts>
 80035d4:	4603      	mov	r3, r0
 80035d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80035da:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80035de:	d102      	bne.n	80035e6 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 80035e0:	6878      	ldr	r0, [r7, #4]
 80035e2:	f001 fa03 	bl	80049ec <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4618      	mov	r0, r3
 80035ec:	f004 ff9a 	bl	8008524 <USB_ReadInterrupts>
 80035f0:	4603      	mov	r3, r0
 80035f2:	f003 0308 	and.w	r3, r3, #8
 80035f6:	2b08      	cmp	r3, #8
 80035f8:	d106      	bne.n	8003608 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f007 fd54 	bl	800b0a8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	2208      	movs	r2, #8
 8003606:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4618      	mov	r0, r3
 800360e:	f004 ff89 	bl	8008524 <USB_ReadInterrupts>
 8003612:	4603      	mov	r3, r0
 8003614:	f003 0310 	and.w	r3, r3, #16
 8003618:	2b10      	cmp	r3, #16
 800361a:	d101      	bne.n	8003620 <HAL_HCD_IRQHandler+0x158>
 800361c:	2301      	movs	r3, #1
 800361e:	e000      	b.n	8003622 <HAL_HCD_IRQHandler+0x15a>
 8003620:	2300      	movs	r3, #0
 8003622:	2b00      	cmp	r3, #0
 8003624:	d012      	beq.n	800364c <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	699a      	ldr	r2, [r3, #24]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f022 0210 	bic.w	r2, r2, #16
 8003634:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	f001 f906 	bl	8004848 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	699a      	ldr	r2, [r3, #24]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f042 0210 	orr.w	r2, r2, #16
 800364a:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4618      	mov	r0, r3
 8003652:	f004 ff67 	bl	8008524 <USB_ReadInterrupts>
 8003656:	4603      	mov	r3, r0
 8003658:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800365c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003660:	d13a      	bne.n	80036d8 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4618      	mov	r0, r3
 8003668:	f005 fb7a 	bl	8008d60 <USB_HC_ReadInterrupt>
 800366c:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800366e:	2300      	movs	r3, #0
 8003670:	617b      	str	r3, [r7, #20]
 8003672:	e025      	b.n	80036c0 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	f003 030f 	and.w	r3, r3, #15
 800367a:	68ba      	ldr	r2, [r7, #8]
 800367c:	fa22 f303 	lsr.w	r3, r2, r3
 8003680:	f003 0301 	and.w	r3, r3, #1
 8003684:	2b00      	cmp	r3, #0
 8003686:	d018      	beq.n	80036ba <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	015a      	lsls	r2, r3, #5
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	4413      	add	r3, r2
 8003690:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800369a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800369e:	d106      	bne.n	80036ae <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	b2db      	uxtb	r3, r3
 80036a4:	4619      	mov	r1, r3
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f000 f8ab 	bl	8003802 <HCD_HC_IN_IRQHandler>
 80036ac:	e005      	b.n	80036ba <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80036ae:	697b      	ldr	r3, [r7, #20]
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	4619      	mov	r1, r3
 80036b4:	6878      	ldr	r0, [r7, #4]
 80036b6:	f000 fcc6 	bl	8004046 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	3301      	adds	r3, #1
 80036be:	617b      	str	r3, [r7, #20]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	689b      	ldr	r3, [r3, #8]
 80036c4:	697a      	ldr	r2, [r7, #20]
 80036c6:	429a      	cmp	r2, r3
 80036c8:	d3d4      	bcc.n	8003674 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80036d2:	615a      	str	r2, [r3, #20]
 80036d4:	e000      	b.n	80036d8 <HAL_HCD_IRQHandler+0x210>
      return;
 80036d6:	bf00      	nop
    }
  }
}
 80036d8:	3718      	adds	r7, #24
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}

080036de <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80036de:	b580      	push	{r7, lr}
 80036e0:	b082      	sub	sp, #8
 80036e2:	af00      	add	r7, sp, #0
 80036e4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80036ec:	2b01      	cmp	r3, #1
 80036ee:	d101      	bne.n	80036f4 <HAL_HCD_Start+0x16>
 80036f0:	2302      	movs	r3, #2
 80036f2:	e013      	b.n	800371c <HAL_HCD_Start+0x3e>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2201      	movs	r2, #1
 80036f8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	2101      	movs	r1, #1
 8003702:	4618      	mov	r0, r3
 8003704:	f005 f87a 	bl	80087fc <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4618      	mov	r0, r3
 800370e:	f004 fdc0 	bl	8008292 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2200      	movs	r2, #0
 8003716:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800371a:	2300      	movs	r3, #0
}
 800371c:	4618      	mov	r0, r3
 800371e:	3708      	adds	r7, #8
 8003720:	46bd      	mov	sp, r7
 8003722:	bd80      	pop	{r7, pc}

08003724 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b082      	sub	sp, #8
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003732:	2b01      	cmp	r3, #1
 8003734:	d101      	bne.n	800373a <HAL_HCD_Stop+0x16>
 8003736:	2302      	movs	r3, #2
 8003738:	e00d      	b.n	8003756 <HAL_HCD_Stop+0x32>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2201      	movs	r2, #1
 800373e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4618      	mov	r0, r3
 8003748:	f005 fc74 	bl	8009034 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2200      	movs	r2, #0
 8003750:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003754:	2300      	movs	r3, #0
}
 8003756:	4618      	mov	r0, r3
 8003758:	3708      	adds	r7, #8
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}

0800375e <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 800375e:	b580      	push	{r7, lr}
 8003760:	b082      	sub	sp, #8
 8003762:	af00      	add	r7, sp, #0
 8003764:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4618      	mov	r0, r3
 800376c:	f005 f81c 	bl	80087a8 <USB_ResetPort>
 8003770:	4603      	mov	r3, r0
}
 8003772:	4618      	mov	r0, r3
 8003774:	3708      	adds	r7, #8
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}

0800377a <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800377a:	b480      	push	{r7}
 800377c:	b083      	sub	sp, #12
 800377e:	af00      	add	r7, sp, #0
 8003780:	6078      	str	r0, [r7, #4]
 8003782:	460b      	mov	r3, r1
 8003784:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003786:	78fb      	ldrb	r3, [r7, #3]
 8003788:	687a      	ldr	r2, [r7, #4]
 800378a:	212c      	movs	r1, #44	; 0x2c
 800378c:	fb01 f303 	mul.w	r3, r1, r3
 8003790:	4413      	add	r3, r2
 8003792:	3360      	adds	r3, #96	; 0x60
 8003794:	781b      	ldrb	r3, [r3, #0]
}
 8003796:	4618      	mov	r0, r3
 8003798:	370c      	adds	r7, #12
 800379a:	46bd      	mov	sp, r7
 800379c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a0:	4770      	bx	lr

080037a2 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80037a2:	b480      	push	{r7}
 80037a4:	b083      	sub	sp, #12
 80037a6:	af00      	add	r7, sp, #0
 80037a8:	6078      	str	r0, [r7, #4]
 80037aa:	460b      	mov	r3, r1
 80037ac:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80037ae:	78fb      	ldrb	r3, [r7, #3]
 80037b0:	687a      	ldr	r2, [r7, #4]
 80037b2:	212c      	movs	r1, #44	; 0x2c
 80037b4:	fb01 f303 	mul.w	r3, r1, r3
 80037b8:	4413      	add	r3, r2
 80037ba:	3350      	adds	r3, #80	; 0x50
 80037bc:	681b      	ldr	r3, [r3, #0]
}
 80037be:	4618      	mov	r0, r3
 80037c0:	370c      	adds	r7, #12
 80037c2:	46bd      	mov	sp, r7
 80037c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c8:	4770      	bx	lr

080037ca <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80037ca:	b580      	push	{r7, lr}
 80037cc:	b082      	sub	sp, #8
 80037ce:	af00      	add	r7, sp, #0
 80037d0:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4618      	mov	r0, r3
 80037d8:	f005 f860 	bl	800889c <USB_GetCurrentFrame>
 80037dc:	4603      	mov	r3, r0
}
 80037de:	4618      	mov	r0, r3
 80037e0:	3708      	adds	r7, #8
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}

080037e6 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80037e6:	b580      	push	{r7, lr}
 80037e8:	b082      	sub	sp, #8
 80037ea:	af00      	add	r7, sp, #0
 80037ec:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4618      	mov	r0, r3
 80037f4:	f005 f83b 	bl	800886e <USB_GetHostSpeed>
 80037f8:	4603      	mov	r3, r0
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	3708      	adds	r7, #8
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}

08003802 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003802:	b580      	push	{r7, lr}
 8003804:	b086      	sub	sp, #24
 8003806:	af00      	add	r7, sp, #0
 8003808:	6078      	str	r0, [r7, #4]
 800380a:	460b      	mov	r3, r1
 800380c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003818:	78fb      	ldrb	r3, [r7, #3]
 800381a:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	015a      	lsls	r2, r3, #5
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	4413      	add	r3, r2
 8003824:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	f003 0304 	and.w	r3, r3, #4
 800382e:	2b04      	cmp	r3, #4
 8003830:	d119      	bne.n	8003866 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	015a      	lsls	r2, r3, #5
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	4413      	add	r3, r2
 800383a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800383e:	461a      	mov	r2, r3
 8003840:	2304      	movs	r3, #4
 8003842:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	015a      	lsls	r2, r3, #5
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	4413      	add	r3, r2
 800384c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003850:	68db      	ldr	r3, [r3, #12]
 8003852:	68fa      	ldr	r2, [r7, #12]
 8003854:	0151      	lsls	r1, r2, #5
 8003856:	693a      	ldr	r2, [r7, #16]
 8003858:	440a      	add	r2, r1
 800385a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800385e:	f043 0302 	orr.w	r3, r3, #2
 8003862:	60d3      	str	r3, [r2, #12]
 8003864:	e101      	b.n	8003a6a <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	015a      	lsls	r2, r3, #5
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	4413      	add	r3, r2
 800386e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003878:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800387c:	d12b      	bne.n	80038d6 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	015a      	lsls	r2, r3, #5
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	4413      	add	r3, r2
 8003886:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800388a:	461a      	mov	r2, r3
 800388c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003890:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8003892:	687a      	ldr	r2, [r7, #4]
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	212c      	movs	r1, #44	; 0x2c
 8003898:	fb01 f303 	mul.w	r3, r1, r3
 800389c:	4413      	add	r3, r2
 800389e:	3361      	adds	r3, #97	; 0x61
 80038a0:	2207      	movs	r2, #7
 80038a2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	015a      	lsls	r2, r3, #5
 80038a8:	693b      	ldr	r3, [r7, #16]
 80038aa:	4413      	add	r3, r2
 80038ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038b0:	68db      	ldr	r3, [r3, #12]
 80038b2:	68fa      	ldr	r2, [r7, #12]
 80038b4:	0151      	lsls	r1, r2, #5
 80038b6:	693a      	ldr	r2, [r7, #16]
 80038b8:	440a      	add	r2, r1
 80038ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80038be:	f043 0302 	orr.w	r3, r3, #2
 80038c2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	68fa      	ldr	r2, [r7, #12]
 80038ca:	b2d2      	uxtb	r2, r2
 80038cc:	4611      	mov	r1, r2
 80038ce:	4618      	mov	r0, r3
 80038d0:	f005 fa57 	bl	8008d82 <USB_HC_Halt>
 80038d4:	e0c9      	b.n	8003a6a <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	015a      	lsls	r2, r3, #5
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	4413      	add	r3, r2
 80038de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	f003 0320 	and.w	r3, r3, #32
 80038e8:	2b20      	cmp	r3, #32
 80038ea:	d109      	bne.n	8003900 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	015a      	lsls	r2, r3, #5
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	4413      	add	r3, r2
 80038f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038f8:	461a      	mov	r2, r3
 80038fa:	2320      	movs	r3, #32
 80038fc:	6093      	str	r3, [r2, #8]
 80038fe:	e0b4      	b.n	8003a6a <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	015a      	lsls	r2, r3, #5
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	4413      	add	r3, r2
 8003908:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800390c:	689b      	ldr	r3, [r3, #8]
 800390e:	f003 0308 	and.w	r3, r3, #8
 8003912:	2b08      	cmp	r3, #8
 8003914:	d133      	bne.n	800397e <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	015a      	lsls	r2, r3, #5
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	4413      	add	r3, r2
 800391e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003922:	68db      	ldr	r3, [r3, #12]
 8003924:	68fa      	ldr	r2, [r7, #12]
 8003926:	0151      	lsls	r1, r2, #5
 8003928:	693a      	ldr	r2, [r7, #16]
 800392a:	440a      	add	r2, r1
 800392c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003930:	f043 0302 	orr.w	r3, r3, #2
 8003934:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8003936:	687a      	ldr	r2, [r7, #4]
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	212c      	movs	r1, #44	; 0x2c
 800393c:	fb01 f303 	mul.w	r3, r1, r3
 8003940:	4413      	add	r3, r2
 8003942:	3361      	adds	r3, #97	; 0x61
 8003944:	2205      	movs	r2, #5
 8003946:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	015a      	lsls	r2, r3, #5
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	4413      	add	r3, r2
 8003950:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003954:	461a      	mov	r2, r3
 8003956:	2310      	movs	r3, #16
 8003958:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	015a      	lsls	r2, r3, #5
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	4413      	add	r3, r2
 8003962:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003966:	461a      	mov	r2, r3
 8003968:	2308      	movs	r3, #8
 800396a:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	68fa      	ldr	r2, [r7, #12]
 8003972:	b2d2      	uxtb	r2, r2
 8003974:	4611      	mov	r1, r2
 8003976:	4618      	mov	r0, r3
 8003978:	f005 fa03 	bl	8008d82 <USB_HC_Halt>
 800397c:	e075      	b.n	8003a6a <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	015a      	lsls	r2, r3, #5
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	4413      	add	r3, r2
 8003986:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003990:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003994:	d134      	bne.n	8003a00 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	015a      	lsls	r2, r3, #5
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	4413      	add	r3, r2
 800399e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039a2:	68db      	ldr	r3, [r3, #12]
 80039a4:	68fa      	ldr	r2, [r7, #12]
 80039a6:	0151      	lsls	r1, r2, #5
 80039a8:	693a      	ldr	r2, [r7, #16]
 80039aa:	440a      	add	r2, r1
 80039ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80039b0:	f043 0302 	orr.w	r3, r3, #2
 80039b4:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80039b6:	687a      	ldr	r2, [r7, #4]
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	212c      	movs	r1, #44	; 0x2c
 80039bc:	fb01 f303 	mul.w	r3, r1, r3
 80039c0:	4413      	add	r3, r2
 80039c2:	3361      	adds	r3, #97	; 0x61
 80039c4:	2208      	movs	r2, #8
 80039c6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	015a      	lsls	r2, r3, #5
 80039cc:	693b      	ldr	r3, [r7, #16]
 80039ce:	4413      	add	r3, r2
 80039d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039d4:	461a      	mov	r2, r3
 80039d6:	2310      	movs	r3, #16
 80039d8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	015a      	lsls	r2, r3, #5
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	4413      	add	r3, r2
 80039e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039e6:	461a      	mov	r2, r3
 80039e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80039ec:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	68fa      	ldr	r2, [r7, #12]
 80039f4:	b2d2      	uxtb	r2, r2
 80039f6:	4611      	mov	r1, r2
 80039f8:	4618      	mov	r0, r3
 80039fa:	f005 f9c2 	bl	8008d82 <USB_HC_Halt>
 80039fe:	e034      	b.n	8003a6a <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	015a      	lsls	r2, r3, #5
 8003a04:	693b      	ldr	r3, [r7, #16]
 8003a06:	4413      	add	r3, r2
 8003a08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a12:	2b80      	cmp	r3, #128	; 0x80
 8003a14:	d129      	bne.n	8003a6a <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	015a      	lsls	r2, r3, #5
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	4413      	add	r3, r2
 8003a1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a22:	68db      	ldr	r3, [r3, #12]
 8003a24:	68fa      	ldr	r2, [r7, #12]
 8003a26:	0151      	lsls	r1, r2, #5
 8003a28:	693a      	ldr	r2, [r7, #16]
 8003a2a:	440a      	add	r2, r1
 8003a2c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003a30:	f043 0302 	orr.w	r3, r3, #2
 8003a34:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003a36:	687a      	ldr	r2, [r7, #4]
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	212c      	movs	r1, #44	; 0x2c
 8003a3c:	fb01 f303 	mul.w	r3, r1, r3
 8003a40:	4413      	add	r3, r2
 8003a42:	3361      	adds	r3, #97	; 0x61
 8003a44:	2206      	movs	r2, #6
 8003a46:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	68fa      	ldr	r2, [r7, #12]
 8003a4e:	b2d2      	uxtb	r2, r2
 8003a50:	4611      	mov	r1, r2
 8003a52:	4618      	mov	r0, r3
 8003a54:	f005 f995 	bl	8008d82 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	015a      	lsls	r2, r3, #5
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	4413      	add	r3, r2
 8003a60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a64:	461a      	mov	r2, r3
 8003a66:	2380      	movs	r3, #128	; 0x80
 8003a68:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	015a      	lsls	r2, r3, #5
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	4413      	add	r3, r2
 8003a72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a80:	d122      	bne.n	8003ac8 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	015a      	lsls	r2, r3, #5
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	4413      	add	r3, r2
 8003a8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a8e:	68db      	ldr	r3, [r3, #12]
 8003a90:	68fa      	ldr	r2, [r7, #12]
 8003a92:	0151      	lsls	r1, r2, #5
 8003a94:	693a      	ldr	r2, [r7, #16]
 8003a96:	440a      	add	r2, r1
 8003a98:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003a9c:	f043 0302 	orr.w	r3, r3, #2
 8003aa0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	68fa      	ldr	r2, [r7, #12]
 8003aa8:	b2d2      	uxtb	r2, r2
 8003aaa:	4611      	mov	r1, r2
 8003aac:	4618      	mov	r0, r3
 8003aae:	f005 f968 	bl	8008d82 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	015a      	lsls	r2, r3, #5
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	4413      	add	r3, r2
 8003aba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003abe:	461a      	mov	r2, r3
 8003ac0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003ac4:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8003ac6:	e2ba      	b.n	800403e <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	015a      	lsls	r2, r3, #5
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	4413      	add	r3, r2
 8003ad0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	f003 0301 	and.w	r3, r3, #1
 8003ada:	2b01      	cmp	r3, #1
 8003adc:	f040 811b 	bne.w	8003d16 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	691b      	ldr	r3, [r3, #16]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d019      	beq.n	8003b1c <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003ae8:	687a      	ldr	r2, [r7, #4]
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	212c      	movs	r1, #44	; 0x2c
 8003aee:	fb01 f303 	mul.w	r3, r1, r3
 8003af2:	4413      	add	r3, r2
 8003af4:	3348      	adds	r3, #72	; 0x48
 8003af6:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	0159      	lsls	r1, r3, #5
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	440b      	add	r3, r1
 8003b00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b04:	691b      	ldr	r3, [r3, #16]
 8003b06:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003b0a:	1ad2      	subs	r2, r2, r3
 8003b0c:	6879      	ldr	r1, [r7, #4]
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	202c      	movs	r0, #44	; 0x2c
 8003b12:	fb00 f303 	mul.w	r3, r0, r3
 8003b16:	440b      	add	r3, r1
 8003b18:	3350      	adds	r3, #80	; 0x50
 8003b1a:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003b1c:	687a      	ldr	r2, [r7, #4]
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	212c      	movs	r1, #44	; 0x2c
 8003b22:	fb01 f303 	mul.w	r3, r1, r3
 8003b26:	4413      	add	r3, r2
 8003b28:	3361      	adds	r3, #97	; 0x61
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003b2e:	687a      	ldr	r2, [r7, #4]
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	212c      	movs	r1, #44	; 0x2c
 8003b34:	fb01 f303 	mul.w	r3, r1, r3
 8003b38:	4413      	add	r3, r2
 8003b3a:	335c      	adds	r3, #92	; 0x5c
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	015a      	lsls	r2, r3, #5
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	4413      	add	r3, r2
 8003b48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b4c:	461a      	mov	r2, r3
 8003b4e:	2301      	movs	r3, #1
 8003b50:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003b52:	687a      	ldr	r2, [r7, #4]
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	212c      	movs	r1, #44	; 0x2c
 8003b58:	fb01 f303 	mul.w	r3, r1, r3
 8003b5c:	4413      	add	r3, r2
 8003b5e:	333f      	adds	r3, #63	; 0x3f
 8003b60:	781b      	ldrb	r3, [r3, #0]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d009      	beq.n	8003b7a <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003b66:	687a      	ldr	r2, [r7, #4]
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	212c      	movs	r1, #44	; 0x2c
 8003b6c:	fb01 f303 	mul.w	r3, r1, r3
 8003b70:	4413      	add	r3, r2
 8003b72:	333f      	adds	r3, #63	; 0x3f
 8003b74:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003b76:	2b02      	cmp	r3, #2
 8003b78:	d121      	bne.n	8003bbe <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	015a      	lsls	r2, r3, #5
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	4413      	add	r3, r2
 8003b82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b86:	68db      	ldr	r3, [r3, #12]
 8003b88:	68fa      	ldr	r2, [r7, #12]
 8003b8a:	0151      	lsls	r1, r2, #5
 8003b8c:	693a      	ldr	r2, [r7, #16]
 8003b8e:	440a      	add	r2, r1
 8003b90:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003b94:	f043 0302 	orr.w	r3, r3, #2
 8003b98:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	68fa      	ldr	r2, [r7, #12]
 8003ba0:	b2d2      	uxtb	r2, r2
 8003ba2:	4611      	mov	r1, r2
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	f005 f8ec 	bl	8008d82 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	015a      	lsls	r2, r3, #5
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	4413      	add	r3, r2
 8003bb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bb6:	461a      	mov	r2, r3
 8003bb8:	2310      	movs	r3, #16
 8003bba:	6093      	str	r3, [r2, #8]
 8003bbc:	e066      	b.n	8003c8c <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003bbe:	687a      	ldr	r2, [r7, #4]
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	212c      	movs	r1, #44	; 0x2c
 8003bc4:	fb01 f303 	mul.w	r3, r1, r3
 8003bc8:	4413      	add	r3, r2
 8003bca:	333f      	adds	r3, #63	; 0x3f
 8003bcc:	781b      	ldrb	r3, [r3, #0]
 8003bce:	2b03      	cmp	r3, #3
 8003bd0:	d127      	bne.n	8003c22 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	015a      	lsls	r2, r3, #5
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	4413      	add	r3, r2
 8003bda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	68fa      	ldr	r2, [r7, #12]
 8003be2:	0151      	lsls	r1, r2, #5
 8003be4:	693a      	ldr	r2, [r7, #16]
 8003be6:	440a      	add	r2, r1
 8003be8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003bec:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003bf0:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003bf2:	687a      	ldr	r2, [r7, #4]
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	212c      	movs	r1, #44	; 0x2c
 8003bf8:	fb01 f303 	mul.w	r3, r1, r3
 8003bfc:	4413      	add	r3, r2
 8003bfe:	3360      	adds	r3, #96	; 0x60
 8003c00:	2201      	movs	r2, #1
 8003c02:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	b2d9      	uxtb	r1, r3
 8003c08:	687a      	ldr	r2, [r7, #4]
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	202c      	movs	r0, #44	; 0x2c
 8003c0e:	fb00 f303 	mul.w	r3, r0, r3
 8003c12:	4413      	add	r3, r2
 8003c14:	3360      	adds	r3, #96	; 0x60
 8003c16:	781b      	ldrb	r3, [r3, #0]
 8003c18:	461a      	mov	r2, r3
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f007 fa6e 	bl	800b0fc <HAL_HCD_HC_NotifyURBChange_Callback>
 8003c20:	e034      	b.n	8003c8c <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8003c22:	687a      	ldr	r2, [r7, #4]
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	212c      	movs	r1, #44	; 0x2c
 8003c28:	fb01 f303 	mul.w	r3, r1, r3
 8003c2c:	4413      	add	r3, r2
 8003c2e:	333f      	adds	r3, #63	; 0x3f
 8003c30:	781b      	ldrb	r3, [r3, #0]
 8003c32:	2b01      	cmp	r3, #1
 8003c34:	d12a      	bne.n	8003c8c <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003c36:	687a      	ldr	r2, [r7, #4]
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	212c      	movs	r1, #44	; 0x2c
 8003c3c:	fb01 f303 	mul.w	r3, r1, r3
 8003c40:	4413      	add	r3, r2
 8003c42:	3360      	adds	r3, #96	; 0x60
 8003c44:	2201      	movs	r2, #1
 8003c46:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003c48:	687a      	ldr	r2, [r7, #4]
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	212c      	movs	r1, #44	; 0x2c
 8003c4e:	fb01 f303 	mul.w	r3, r1, r3
 8003c52:	4413      	add	r3, r2
 8003c54:	3354      	adds	r3, #84	; 0x54
 8003c56:	781b      	ldrb	r3, [r3, #0]
 8003c58:	f083 0301 	eor.w	r3, r3, #1
 8003c5c:	b2d8      	uxtb	r0, r3
 8003c5e:	687a      	ldr	r2, [r7, #4]
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	212c      	movs	r1, #44	; 0x2c
 8003c64:	fb01 f303 	mul.w	r3, r1, r3
 8003c68:	4413      	add	r3, r2
 8003c6a:	3354      	adds	r3, #84	; 0x54
 8003c6c:	4602      	mov	r2, r0
 8003c6e:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	b2d9      	uxtb	r1, r3
 8003c74:	687a      	ldr	r2, [r7, #4]
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	202c      	movs	r0, #44	; 0x2c
 8003c7a:	fb00 f303 	mul.w	r3, r0, r3
 8003c7e:	4413      	add	r3, r2
 8003c80:	3360      	adds	r3, #96	; 0x60
 8003c82:	781b      	ldrb	r3, [r3, #0]
 8003c84:	461a      	mov	r2, r3
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	f007 fa38 	bl	800b0fc <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	691b      	ldr	r3, [r3, #16]
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	d12b      	bne.n	8003cec <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8003c94:	687a      	ldr	r2, [r7, #4]
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	212c      	movs	r1, #44	; 0x2c
 8003c9a:	fb01 f303 	mul.w	r3, r1, r3
 8003c9e:	4413      	add	r3, r2
 8003ca0:	3348      	adds	r3, #72	; 0x48
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	6879      	ldr	r1, [r7, #4]
 8003ca6:	68fa      	ldr	r2, [r7, #12]
 8003ca8:	202c      	movs	r0, #44	; 0x2c
 8003caa:	fb00 f202 	mul.w	r2, r0, r2
 8003cae:	440a      	add	r2, r1
 8003cb0:	3240      	adds	r2, #64	; 0x40
 8003cb2:	8812      	ldrh	r2, [r2, #0]
 8003cb4:	fbb3 f3f2 	udiv	r3, r3, r2
 8003cb8:	f003 0301 	and.w	r3, r3, #1
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	f000 81be 	beq.w	800403e <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8003cc2:	687a      	ldr	r2, [r7, #4]
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	212c      	movs	r1, #44	; 0x2c
 8003cc8:	fb01 f303 	mul.w	r3, r1, r3
 8003ccc:	4413      	add	r3, r2
 8003cce:	3354      	adds	r3, #84	; 0x54
 8003cd0:	781b      	ldrb	r3, [r3, #0]
 8003cd2:	f083 0301 	eor.w	r3, r3, #1
 8003cd6:	b2d8      	uxtb	r0, r3
 8003cd8:	687a      	ldr	r2, [r7, #4]
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	212c      	movs	r1, #44	; 0x2c
 8003cde:	fb01 f303 	mul.w	r3, r1, r3
 8003ce2:	4413      	add	r3, r2
 8003ce4:	3354      	adds	r3, #84	; 0x54
 8003ce6:	4602      	mov	r2, r0
 8003ce8:	701a      	strb	r2, [r3, #0]
}
 8003cea:	e1a8      	b.n	800403e <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003cec:	687a      	ldr	r2, [r7, #4]
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	212c      	movs	r1, #44	; 0x2c
 8003cf2:	fb01 f303 	mul.w	r3, r1, r3
 8003cf6:	4413      	add	r3, r2
 8003cf8:	3354      	adds	r3, #84	; 0x54
 8003cfa:	781b      	ldrb	r3, [r3, #0]
 8003cfc:	f083 0301 	eor.w	r3, r3, #1
 8003d00:	b2d8      	uxtb	r0, r3
 8003d02:	687a      	ldr	r2, [r7, #4]
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	212c      	movs	r1, #44	; 0x2c
 8003d08:	fb01 f303 	mul.w	r3, r1, r3
 8003d0c:	4413      	add	r3, r2
 8003d0e:	3354      	adds	r3, #84	; 0x54
 8003d10:	4602      	mov	r2, r0
 8003d12:	701a      	strb	r2, [r3, #0]
}
 8003d14:	e193      	b.n	800403e <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	015a      	lsls	r2, r3, #5
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	4413      	add	r3, r2
 8003d1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	f003 0302 	and.w	r3, r3, #2
 8003d28:	2b02      	cmp	r3, #2
 8003d2a:	f040 8106 	bne.w	8003f3a <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	015a      	lsls	r2, r3, #5
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	4413      	add	r3, r2
 8003d36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d3a:	68db      	ldr	r3, [r3, #12]
 8003d3c:	68fa      	ldr	r2, [r7, #12]
 8003d3e:	0151      	lsls	r1, r2, #5
 8003d40:	693a      	ldr	r2, [r7, #16]
 8003d42:	440a      	add	r2, r1
 8003d44:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003d48:	f023 0302 	bic.w	r3, r3, #2
 8003d4c:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003d4e:	687a      	ldr	r2, [r7, #4]
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	212c      	movs	r1, #44	; 0x2c
 8003d54:	fb01 f303 	mul.w	r3, r1, r3
 8003d58:	4413      	add	r3, r2
 8003d5a:	3361      	adds	r3, #97	; 0x61
 8003d5c:	781b      	ldrb	r3, [r3, #0]
 8003d5e:	2b01      	cmp	r3, #1
 8003d60:	d109      	bne.n	8003d76 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003d62:	687a      	ldr	r2, [r7, #4]
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	212c      	movs	r1, #44	; 0x2c
 8003d68:	fb01 f303 	mul.w	r3, r1, r3
 8003d6c:	4413      	add	r3, r2
 8003d6e:	3360      	adds	r3, #96	; 0x60
 8003d70:	2201      	movs	r2, #1
 8003d72:	701a      	strb	r2, [r3, #0]
 8003d74:	e0c9      	b.n	8003f0a <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003d76:	687a      	ldr	r2, [r7, #4]
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	212c      	movs	r1, #44	; 0x2c
 8003d7c:	fb01 f303 	mul.w	r3, r1, r3
 8003d80:	4413      	add	r3, r2
 8003d82:	3361      	adds	r3, #97	; 0x61
 8003d84:	781b      	ldrb	r3, [r3, #0]
 8003d86:	2b05      	cmp	r3, #5
 8003d88:	d109      	bne.n	8003d9e <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8003d8a:	687a      	ldr	r2, [r7, #4]
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	212c      	movs	r1, #44	; 0x2c
 8003d90:	fb01 f303 	mul.w	r3, r1, r3
 8003d94:	4413      	add	r3, r2
 8003d96:	3360      	adds	r3, #96	; 0x60
 8003d98:	2205      	movs	r2, #5
 8003d9a:	701a      	strb	r2, [r3, #0]
 8003d9c:	e0b5      	b.n	8003f0a <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003d9e:	687a      	ldr	r2, [r7, #4]
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	212c      	movs	r1, #44	; 0x2c
 8003da4:	fb01 f303 	mul.w	r3, r1, r3
 8003da8:	4413      	add	r3, r2
 8003daa:	3361      	adds	r3, #97	; 0x61
 8003dac:	781b      	ldrb	r3, [r3, #0]
 8003dae:	2b06      	cmp	r3, #6
 8003db0:	d009      	beq.n	8003dc6 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003db2:	687a      	ldr	r2, [r7, #4]
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	212c      	movs	r1, #44	; 0x2c
 8003db8:	fb01 f303 	mul.w	r3, r1, r3
 8003dbc:	4413      	add	r3, r2
 8003dbe:	3361      	adds	r3, #97	; 0x61
 8003dc0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003dc2:	2b08      	cmp	r3, #8
 8003dc4:	d150      	bne.n	8003e68 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8003dc6:	687a      	ldr	r2, [r7, #4]
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	212c      	movs	r1, #44	; 0x2c
 8003dcc:	fb01 f303 	mul.w	r3, r1, r3
 8003dd0:	4413      	add	r3, r2
 8003dd2:	335c      	adds	r3, #92	; 0x5c
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	1c5a      	adds	r2, r3, #1
 8003dd8:	6879      	ldr	r1, [r7, #4]
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	202c      	movs	r0, #44	; 0x2c
 8003dde:	fb00 f303 	mul.w	r3, r0, r3
 8003de2:	440b      	add	r3, r1
 8003de4:	335c      	adds	r3, #92	; 0x5c
 8003de6:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003de8:	687a      	ldr	r2, [r7, #4]
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	212c      	movs	r1, #44	; 0x2c
 8003dee:	fb01 f303 	mul.w	r3, r1, r3
 8003df2:	4413      	add	r3, r2
 8003df4:	335c      	adds	r3, #92	; 0x5c
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	2b02      	cmp	r3, #2
 8003dfa:	d912      	bls.n	8003e22 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003dfc:	687a      	ldr	r2, [r7, #4]
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	212c      	movs	r1, #44	; 0x2c
 8003e02:	fb01 f303 	mul.w	r3, r1, r3
 8003e06:	4413      	add	r3, r2
 8003e08:	335c      	adds	r3, #92	; 0x5c
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003e0e:	687a      	ldr	r2, [r7, #4]
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	212c      	movs	r1, #44	; 0x2c
 8003e14:	fb01 f303 	mul.w	r3, r1, r3
 8003e18:	4413      	add	r3, r2
 8003e1a:	3360      	adds	r3, #96	; 0x60
 8003e1c:	2204      	movs	r2, #4
 8003e1e:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003e20:	e073      	b.n	8003f0a <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003e22:	687a      	ldr	r2, [r7, #4]
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	212c      	movs	r1, #44	; 0x2c
 8003e28:	fb01 f303 	mul.w	r3, r1, r3
 8003e2c:	4413      	add	r3, r2
 8003e2e:	3360      	adds	r3, #96	; 0x60
 8003e30:	2202      	movs	r2, #2
 8003e32:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	015a      	lsls	r2, r3, #5
 8003e38:	693b      	ldr	r3, [r7, #16]
 8003e3a:	4413      	add	r3, r2
 8003e3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003e4a:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003e52:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	015a      	lsls	r2, r3, #5
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	4413      	add	r3, r2
 8003e5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e60:	461a      	mov	r2, r3
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003e66:	e050      	b.n	8003f0a <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003e68:	687a      	ldr	r2, [r7, #4]
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	212c      	movs	r1, #44	; 0x2c
 8003e6e:	fb01 f303 	mul.w	r3, r1, r3
 8003e72:	4413      	add	r3, r2
 8003e74:	3361      	adds	r3, #97	; 0x61
 8003e76:	781b      	ldrb	r3, [r3, #0]
 8003e78:	2b03      	cmp	r3, #3
 8003e7a:	d122      	bne.n	8003ec2 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003e7c:	687a      	ldr	r2, [r7, #4]
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	212c      	movs	r1, #44	; 0x2c
 8003e82:	fb01 f303 	mul.w	r3, r1, r3
 8003e86:	4413      	add	r3, r2
 8003e88:	3360      	adds	r3, #96	; 0x60
 8003e8a:	2202      	movs	r2, #2
 8003e8c:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	015a      	lsls	r2, r3, #5
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	4413      	add	r3, r2
 8003e96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003ea4:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003eac:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	015a      	lsls	r2, r3, #5
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	4413      	add	r3, r2
 8003eb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003eba:	461a      	mov	r2, r3
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	6013      	str	r3, [r2, #0]
 8003ec0:	e023      	b.n	8003f0a <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8003ec2:	687a      	ldr	r2, [r7, #4]
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	212c      	movs	r1, #44	; 0x2c
 8003ec8:	fb01 f303 	mul.w	r3, r1, r3
 8003ecc:	4413      	add	r3, r2
 8003ece:	3361      	adds	r3, #97	; 0x61
 8003ed0:	781b      	ldrb	r3, [r3, #0]
 8003ed2:	2b07      	cmp	r3, #7
 8003ed4:	d119      	bne.n	8003f0a <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 8003ed6:	687a      	ldr	r2, [r7, #4]
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	212c      	movs	r1, #44	; 0x2c
 8003edc:	fb01 f303 	mul.w	r3, r1, r3
 8003ee0:	4413      	add	r3, r2
 8003ee2:	335c      	adds	r3, #92	; 0x5c
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	1c5a      	adds	r2, r3, #1
 8003ee8:	6879      	ldr	r1, [r7, #4]
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	202c      	movs	r0, #44	; 0x2c
 8003eee:	fb00 f303 	mul.w	r3, r0, r3
 8003ef2:	440b      	add	r3, r1
 8003ef4:	335c      	adds	r3, #92	; 0x5c
 8003ef6:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003ef8:	687a      	ldr	r2, [r7, #4]
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	212c      	movs	r1, #44	; 0x2c
 8003efe:	fb01 f303 	mul.w	r3, r1, r3
 8003f02:	4413      	add	r3, r2
 8003f04:	3360      	adds	r3, #96	; 0x60
 8003f06:	2204      	movs	r2, #4
 8003f08:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	015a      	lsls	r2, r3, #5
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	4413      	add	r3, r2
 8003f12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f16:	461a      	mov	r2, r3
 8003f18:	2302      	movs	r3, #2
 8003f1a:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	b2d9      	uxtb	r1, r3
 8003f20:	687a      	ldr	r2, [r7, #4]
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	202c      	movs	r0, #44	; 0x2c
 8003f26:	fb00 f303 	mul.w	r3, r0, r3
 8003f2a:	4413      	add	r3, r2
 8003f2c:	3360      	adds	r3, #96	; 0x60
 8003f2e:	781b      	ldrb	r3, [r3, #0]
 8003f30:	461a      	mov	r2, r3
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	f007 f8e2 	bl	800b0fc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003f38:	e081      	b.n	800403e <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	015a      	lsls	r2, r3, #5
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	4413      	add	r3, r2
 8003f42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	f003 0310 	and.w	r3, r3, #16
 8003f4c:	2b10      	cmp	r3, #16
 8003f4e:	d176      	bne.n	800403e <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003f50:	687a      	ldr	r2, [r7, #4]
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	212c      	movs	r1, #44	; 0x2c
 8003f56:	fb01 f303 	mul.w	r3, r1, r3
 8003f5a:	4413      	add	r3, r2
 8003f5c:	333f      	adds	r3, #63	; 0x3f
 8003f5e:	781b      	ldrb	r3, [r3, #0]
 8003f60:	2b03      	cmp	r3, #3
 8003f62:	d121      	bne.n	8003fa8 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003f64:	687a      	ldr	r2, [r7, #4]
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	212c      	movs	r1, #44	; 0x2c
 8003f6a:	fb01 f303 	mul.w	r3, r1, r3
 8003f6e:	4413      	add	r3, r2
 8003f70:	335c      	adds	r3, #92	; 0x5c
 8003f72:	2200      	movs	r2, #0
 8003f74:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	015a      	lsls	r2, r3, #5
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	4413      	add	r3, r2
 8003f7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f82:	68db      	ldr	r3, [r3, #12]
 8003f84:	68fa      	ldr	r2, [r7, #12]
 8003f86:	0151      	lsls	r1, r2, #5
 8003f88:	693a      	ldr	r2, [r7, #16]
 8003f8a:	440a      	add	r2, r1
 8003f8c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003f90:	f043 0302 	orr.w	r3, r3, #2
 8003f94:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	68fa      	ldr	r2, [r7, #12]
 8003f9c:	b2d2      	uxtb	r2, r2
 8003f9e:	4611      	mov	r1, r2
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	f004 feee 	bl	8008d82 <USB_HC_Halt>
 8003fa6:	e041      	b.n	800402c <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003fa8:	687a      	ldr	r2, [r7, #4]
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	212c      	movs	r1, #44	; 0x2c
 8003fae:	fb01 f303 	mul.w	r3, r1, r3
 8003fb2:	4413      	add	r3, r2
 8003fb4:	333f      	adds	r3, #63	; 0x3f
 8003fb6:	781b      	ldrb	r3, [r3, #0]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d009      	beq.n	8003fd0 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003fbc:	687a      	ldr	r2, [r7, #4]
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	212c      	movs	r1, #44	; 0x2c
 8003fc2:	fb01 f303 	mul.w	r3, r1, r3
 8003fc6:	4413      	add	r3, r2
 8003fc8:	333f      	adds	r3, #63	; 0x3f
 8003fca:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003fcc:	2b02      	cmp	r3, #2
 8003fce:	d12d      	bne.n	800402c <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003fd0:	687a      	ldr	r2, [r7, #4]
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	212c      	movs	r1, #44	; 0x2c
 8003fd6:	fb01 f303 	mul.w	r3, r1, r3
 8003fda:	4413      	add	r3, r2
 8003fdc:	335c      	adds	r3, #92	; 0x5c
 8003fde:	2200      	movs	r2, #0
 8003fe0:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	691b      	ldr	r3, [r3, #16]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d120      	bne.n	800402c <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 8003fea:	687a      	ldr	r2, [r7, #4]
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	212c      	movs	r1, #44	; 0x2c
 8003ff0:	fb01 f303 	mul.w	r3, r1, r3
 8003ff4:	4413      	add	r3, r2
 8003ff6:	3361      	adds	r3, #97	; 0x61
 8003ff8:	2203      	movs	r2, #3
 8003ffa:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	015a      	lsls	r2, r3, #5
 8004000:	693b      	ldr	r3, [r7, #16]
 8004002:	4413      	add	r3, r2
 8004004:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004008:	68db      	ldr	r3, [r3, #12]
 800400a:	68fa      	ldr	r2, [r7, #12]
 800400c:	0151      	lsls	r1, r2, #5
 800400e:	693a      	ldr	r2, [r7, #16]
 8004010:	440a      	add	r2, r1
 8004012:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004016:	f043 0302 	orr.w	r3, r3, #2
 800401a:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	68fa      	ldr	r2, [r7, #12]
 8004022:	b2d2      	uxtb	r2, r2
 8004024:	4611      	mov	r1, r2
 8004026:	4618      	mov	r0, r3
 8004028:	f004 feab 	bl	8008d82 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	015a      	lsls	r2, r3, #5
 8004030:	693b      	ldr	r3, [r7, #16]
 8004032:	4413      	add	r3, r2
 8004034:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004038:	461a      	mov	r2, r3
 800403a:	2310      	movs	r3, #16
 800403c:	6093      	str	r3, [r2, #8]
}
 800403e:	bf00      	nop
 8004040:	3718      	adds	r7, #24
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}

08004046 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004046:	b580      	push	{r7, lr}
 8004048:	b088      	sub	sp, #32
 800404a:	af00      	add	r7, sp, #0
 800404c:	6078      	str	r0, [r7, #4]
 800404e:	460b      	mov	r3, r1
 8004050:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004058:	69fb      	ldr	r3, [r7, #28]
 800405a:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 800405c:	78fb      	ldrb	r3, [r7, #3]
 800405e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	015a      	lsls	r2, r3, #5
 8004064:	69bb      	ldr	r3, [r7, #24]
 8004066:	4413      	add	r3, r2
 8004068:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800406c:	689b      	ldr	r3, [r3, #8]
 800406e:	f003 0304 	and.w	r3, r3, #4
 8004072:	2b04      	cmp	r3, #4
 8004074:	d119      	bne.n	80040aa <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	015a      	lsls	r2, r3, #5
 800407a:	69bb      	ldr	r3, [r7, #24]
 800407c:	4413      	add	r3, r2
 800407e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004082:	461a      	mov	r2, r3
 8004084:	2304      	movs	r3, #4
 8004086:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	015a      	lsls	r2, r3, #5
 800408c:	69bb      	ldr	r3, [r7, #24]
 800408e:	4413      	add	r3, r2
 8004090:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004094:	68db      	ldr	r3, [r3, #12]
 8004096:	697a      	ldr	r2, [r7, #20]
 8004098:	0151      	lsls	r1, r2, #5
 800409a:	69ba      	ldr	r2, [r7, #24]
 800409c:	440a      	add	r2, r1
 800409e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80040a2:	f043 0302 	orr.w	r3, r3, #2
 80040a6:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 80040a8:	e3ca      	b.n	8004840 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	015a      	lsls	r2, r3, #5
 80040ae:	69bb      	ldr	r3, [r7, #24]
 80040b0:	4413      	add	r3, r2
 80040b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	f003 0320 	and.w	r3, r3, #32
 80040bc:	2b20      	cmp	r3, #32
 80040be:	d13e      	bne.n	800413e <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	015a      	lsls	r2, r3, #5
 80040c4:	69bb      	ldr	r3, [r7, #24]
 80040c6:	4413      	add	r3, r2
 80040c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040cc:	461a      	mov	r2, r3
 80040ce:	2320      	movs	r3, #32
 80040d0:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80040d2:	687a      	ldr	r2, [r7, #4]
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	212c      	movs	r1, #44	; 0x2c
 80040d8:	fb01 f303 	mul.w	r3, r1, r3
 80040dc:	4413      	add	r3, r2
 80040de:	333d      	adds	r3, #61	; 0x3d
 80040e0:	781b      	ldrb	r3, [r3, #0]
 80040e2:	2b01      	cmp	r3, #1
 80040e4:	f040 83ac 	bne.w	8004840 <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 80040e8:	687a      	ldr	r2, [r7, #4]
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	212c      	movs	r1, #44	; 0x2c
 80040ee:	fb01 f303 	mul.w	r3, r1, r3
 80040f2:	4413      	add	r3, r2
 80040f4:	333d      	adds	r3, #61	; 0x3d
 80040f6:	2200      	movs	r2, #0
 80040f8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80040fa:	687a      	ldr	r2, [r7, #4]
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	212c      	movs	r1, #44	; 0x2c
 8004100:	fb01 f303 	mul.w	r3, r1, r3
 8004104:	4413      	add	r3, r2
 8004106:	3360      	adds	r3, #96	; 0x60
 8004108:	2202      	movs	r2, #2
 800410a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	015a      	lsls	r2, r3, #5
 8004110:	69bb      	ldr	r3, [r7, #24]
 8004112:	4413      	add	r3, r2
 8004114:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004118:	68db      	ldr	r3, [r3, #12]
 800411a:	697a      	ldr	r2, [r7, #20]
 800411c:	0151      	lsls	r1, r2, #5
 800411e:	69ba      	ldr	r2, [r7, #24]
 8004120:	440a      	add	r2, r1
 8004122:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004126:	f043 0302 	orr.w	r3, r3, #2
 800412a:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	697a      	ldr	r2, [r7, #20]
 8004132:	b2d2      	uxtb	r2, r2
 8004134:	4611      	mov	r1, r2
 8004136:	4618      	mov	r0, r3
 8004138:	f004 fe23 	bl	8008d82 <USB_HC_Halt>
}
 800413c:	e380      	b.n	8004840 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	015a      	lsls	r2, r3, #5
 8004142:	69bb      	ldr	r3, [r7, #24]
 8004144:	4413      	add	r3, r2
 8004146:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004150:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004154:	d122      	bne.n	800419c <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004156:	697b      	ldr	r3, [r7, #20]
 8004158:	015a      	lsls	r2, r3, #5
 800415a:	69bb      	ldr	r3, [r7, #24]
 800415c:	4413      	add	r3, r2
 800415e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004162:	68db      	ldr	r3, [r3, #12]
 8004164:	697a      	ldr	r2, [r7, #20]
 8004166:	0151      	lsls	r1, r2, #5
 8004168:	69ba      	ldr	r2, [r7, #24]
 800416a:	440a      	add	r2, r1
 800416c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004170:	f043 0302 	orr.w	r3, r3, #2
 8004174:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	697a      	ldr	r2, [r7, #20]
 800417c:	b2d2      	uxtb	r2, r2
 800417e:	4611      	mov	r1, r2
 8004180:	4618      	mov	r0, r3
 8004182:	f004 fdfe 	bl	8008d82 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	015a      	lsls	r2, r3, #5
 800418a:	69bb      	ldr	r3, [r7, #24]
 800418c:	4413      	add	r3, r2
 800418e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004192:	461a      	mov	r2, r3
 8004194:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004198:	6093      	str	r3, [r2, #8]
}
 800419a:	e351      	b.n	8004840 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	015a      	lsls	r2, r3, #5
 80041a0:	69bb      	ldr	r3, [r7, #24]
 80041a2:	4413      	add	r3, r2
 80041a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041a8:	689b      	ldr	r3, [r3, #8]
 80041aa:	f003 0301 	and.w	r3, r3, #1
 80041ae:	2b01      	cmp	r3, #1
 80041b0:	d150      	bne.n	8004254 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80041b2:	687a      	ldr	r2, [r7, #4]
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	212c      	movs	r1, #44	; 0x2c
 80041b8:	fb01 f303 	mul.w	r3, r1, r3
 80041bc:	4413      	add	r3, r2
 80041be:	335c      	adds	r3, #92	; 0x5c
 80041c0:	2200      	movs	r2, #0
 80041c2:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	015a      	lsls	r2, r3, #5
 80041c8:	69bb      	ldr	r3, [r7, #24]
 80041ca:	4413      	add	r3, r2
 80041cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041d6:	2b40      	cmp	r3, #64	; 0x40
 80041d8:	d111      	bne.n	80041fe <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 80041da:	687a      	ldr	r2, [r7, #4]
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	212c      	movs	r1, #44	; 0x2c
 80041e0:	fb01 f303 	mul.w	r3, r1, r3
 80041e4:	4413      	add	r3, r2
 80041e6:	333d      	adds	r3, #61	; 0x3d
 80041e8:	2201      	movs	r2, #1
 80041ea:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	015a      	lsls	r2, r3, #5
 80041f0:	69bb      	ldr	r3, [r7, #24]
 80041f2:	4413      	add	r3, r2
 80041f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041f8:	461a      	mov	r2, r3
 80041fa:	2340      	movs	r3, #64	; 0x40
 80041fc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	015a      	lsls	r2, r3, #5
 8004202:	69bb      	ldr	r3, [r7, #24]
 8004204:	4413      	add	r3, r2
 8004206:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800420a:	68db      	ldr	r3, [r3, #12]
 800420c:	697a      	ldr	r2, [r7, #20]
 800420e:	0151      	lsls	r1, r2, #5
 8004210:	69ba      	ldr	r2, [r7, #24]
 8004212:	440a      	add	r2, r1
 8004214:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004218:	f043 0302 	orr.w	r3, r3, #2
 800421c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	697a      	ldr	r2, [r7, #20]
 8004224:	b2d2      	uxtb	r2, r2
 8004226:	4611      	mov	r1, r2
 8004228:	4618      	mov	r0, r3
 800422a:	f004 fdaa 	bl	8008d82 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800422e:	697b      	ldr	r3, [r7, #20]
 8004230:	015a      	lsls	r2, r3, #5
 8004232:	69bb      	ldr	r3, [r7, #24]
 8004234:	4413      	add	r3, r2
 8004236:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800423a:	461a      	mov	r2, r3
 800423c:	2301      	movs	r3, #1
 800423e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004240:	687a      	ldr	r2, [r7, #4]
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	212c      	movs	r1, #44	; 0x2c
 8004246:	fb01 f303 	mul.w	r3, r1, r3
 800424a:	4413      	add	r3, r2
 800424c:	3361      	adds	r3, #97	; 0x61
 800424e:	2201      	movs	r2, #1
 8004250:	701a      	strb	r2, [r3, #0]
}
 8004252:	e2f5      	b.n	8004840 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	015a      	lsls	r2, r3, #5
 8004258:	69bb      	ldr	r3, [r7, #24]
 800425a:	4413      	add	r3, r2
 800425c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004266:	2b40      	cmp	r3, #64	; 0x40
 8004268:	d13c      	bne.n	80042e4 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 800426a:	687a      	ldr	r2, [r7, #4]
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	212c      	movs	r1, #44	; 0x2c
 8004270:	fb01 f303 	mul.w	r3, r1, r3
 8004274:	4413      	add	r3, r2
 8004276:	3361      	adds	r3, #97	; 0x61
 8004278:	2204      	movs	r2, #4
 800427a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800427c:	687a      	ldr	r2, [r7, #4]
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	212c      	movs	r1, #44	; 0x2c
 8004282:	fb01 f303 	mul.w	r3, r1, r3
 8004286:	4413      	add	r3, r2
 8004288:	333d      	adds	r3, #61	; 0x3d
 800428a:	2201      	movs	r2, #1
 800428c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800428e:	687a      	ldr	r2, [r7, #4]
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	212c      	movs	r1, #44	; 0x2c
 8004294:	fb01 f303 	mul.w	r3, r1, r3
 8004298:	4413      	add	r3, r2
 800429a:	335c      	adds	r3, #92	; 0x5c
 800429c:	2200      	movs	r2, #0
 800429e:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	015a      	lsls	r2, r3, #5
 80042a4:	69bb      	ldr	r3, [r7, #24]
 80042a6:	4413      	add	r3, r2
 80042a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042ac:	68db      	ldr	r3, [r3, #12]
 80042ae:	697a      	ldr	r2, [r7, #20]
 80042b0:	0151      	lsls	r1, r2, #5
 80042b2:	69ba      	ldr	r2, [r7, #24]
 80042b4:	440a      	add	r2, r1
 80042b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80042ba:	f043 0302 	orr.w	r3, r3, #2
 80042be:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	697a      	ldr	r2, [r7, #20]
 80042c6:	b2d2      	uxtb	r2, r2
 80042c8:	4611      	mov	r1, r2
 80042ca:	4618      	mov	r0, r3
 80042cc:	f004 fd59 	bl	8008d82 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80042d0:	697b      	ldr	r3, [r7, #20]
 80042d2:	015a      	lsls	r2, r3, #5
 80042d4:	69bb      	ldr	r3, [r7, #24]
 80042d6:	4413      	add	r3, r2
 80042d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042dc:	461a      	mov	r2, r3
 80042de:	2340      	movs	r3, #64	; 0x40
 80042e0:	6093      	str	r3, [r2, #8]
}
 80042e2:	e2ad      	b.n	8004840 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	015a      	lsls	r2, r3, #5
 80042e8:	69bb      	ldr	r3, [r7, #24]
 80042ea:	4413      	add	r3, r2
 80042ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	f003 0308 	and.w	r3, r3, #8
 80042f6:	2b08      	cmp	r3, #8
 80042f8:	d12a      	bne.n	8004350 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	015a      	lsls	r2, r3, #5
 80042fe:	69bb      	ldr	r3, [r7, #24]
 8004300:	4413      	add	r3, r2
 8004302:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004306:	461a      	mov	r2, r3
 8004308:	2308      	movs	r3, #8
 800430a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800430c:	697b      	ldr	r3, [r7, #20]
 800430e:	015a      	lsls	r2, r3, #5
 8004310:	69bb      	ldr	r3, [r7, #24]
 8004312:	4413      	add	r3, r2
 8004314:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004318:	68db      	ldr	r3, [r3, #12]
 800431a:	697a      	ldr	r2, [r7, #20]
 800431c:	0151      	lsls	r1, r2, #5
 800431e:	69ba      	ldr	r2, [r7, #24]
 8004320:	440a      	add	r2, r1
 8004322:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004326:	f043 0302 	orr.w	r3, r3, #2
 800432a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	697a      	ldr	r2, [r7, #20]
 8004332:	b2d2      	uxtb	r2, r2
 8004334:	4611      	mov	r1, r2
 8004336:	4618      	mov	r0, r3
 8004338:	f004 fd23 	bl	8008d82 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 800433c:	687a      	ldr	r2, [r7, #4]
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	212c      	movs	r1, #44	; 0x2c
 8004342:	fb01 f303 	mul.w	r3, r1, r3
 8004346:	4413      	add	r3, r2
 8004348:	3361      	adds	r3, #97	; 0x61
 800434a:	2205      	movs	r2, #5
 800434c:	701a      	strb	r2, [r3, #0]
}
 800434e:	e277      	b.n	8004840 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	015a      	lsls	r2, r3, #5
 8004354:	69bb      	ldr	r3, [r7, #24]
 8004356:	4413      	add	r3, r2
 8004358:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800435c:	689b      	ldr	r3, [r3, #8]
 800435e:	f003 0310 	and.w	r3, r3, #16
 8004362:	2b10      	cmp	r3, #16
 8004364:	d150      	bne.n	8004408 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004366:	687a      	ldr	r2, [r7, #4]
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	212c      	movs	r1, #44	; 0x2c
 800436c:	fb01 f303 	mul.w	r3, r1, r3
 8004370:	4413      	add	r3, r2
 8004372:	335c      	adds	r3, #92	; 0x5c
 8004374:	2200      	movs	r2, #0
 8004376:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8004378:	687a      	ldr	r2, [r7, #4]
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	212c      	movs	r1, #44	; 0x2c
 800437e:	fb01 f303 	mul.w	r3, r1, r3
 8004382:	4413      	add	r3, r2
 8004384:	3361      	adds	r3, #97	; 0x61
 8004386:	2203      	movs	r2, #3
 8004388:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800438a:	687a      	ldr	r2, [r7, #4]
 800438c:	697b      	ldr	r3, [r7, #20]
 800438e:	212c      	movs	r1, #44	; 0x2c
 8004390:	fb01 f303 	mul.w	r3, r1, r3
 8004394:	4413      	add	r3, r2
 8004396:	333d      	adds	r3, #61	; 0x3d
 8004398:	781b      	ldrb	r3, [r3, #0]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d112      	bne.n	80043c4 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 800439e:	687a      	ldr	r2, [r7, #4]
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	212c      	movs	r1, #44	; 0x2c
 80043a4:	fb01 f303 	mul.w	r3, r1, r3
 80043a8:	4413      	add	r3, r2
 80043aa:	333c      	adds	r3, #60	; 0x3c
 80043ac:	781b      	ldrb	r3, [r3, #0]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d108      	bne.n	80043c4 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 80043b2:	687a      	ldr	r2, [r7, #4]
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	212c      	movs	r1, #44	; 0x2c
 80043b8:	fb01 f303 	mul.w	r3, r1, r3
 80043bc:	4413      	add	r3, r2
 80043be:	333d      	adds	r3, #61	; 0x3d
 80043c0:	2201      	movs	r2, #1
 80043c2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	015a      	lsls	r2, r3, #5
 80043c8:	69bb      	ldr	r3, [r7, #24]
 80043ca:	4413      	add	r3, r2
 80043cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043d0:	68db      	ldr	r3, [r3, #12]
 80043d2:	697a      	ldr	r2, [r7, #20]
 80043d4:	0151      	lsls	r1, r2, #5
 80043d6:	69ba      	ldr	r2, [r7, #24]
 80043d8:	440a      	add	r2, r1
 80043da:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80043de:	f043 0302 	orr.w	r3, r3, #2
 80043e2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	697a      	ldr	r2, [r7, #20]
 80043ea:	b2d2      	uxtb	r2, r2
 80043ec:	4611      	mov	r1, r2
 80043ee:	4618      	mov	r0, r3
 80043f0:	f004 fcc7 	bl	8008d82 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	015a      	lsls	r2, r3, #5
 80043f8:	69bb      	ldr	r3, [r7, #24]
 80043fa:	4413      	add	r3, r2
 80043fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004400:	461a      	mov	r2, r3
 8004402:	2310      	movs	r3, #16
 8004404:	6093      	str	r3, [r2, #8]
}
 8004406:	e21b      	b.n	8004840 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	015a      	lsls	r2, r3, #5
 800440c:	69bb      	ldr	r3, [r7, #24]
 800440e:	4413      	add	r3, r2
 8004410:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004414:	689b      	ldr	r3, [r3, #8]
 8004416:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800441a:	2b80      	cmp	r3, #128	; 0x80
 800441c:	d174      	bne.n	8004508 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	691b      	ldr	r3, [r3, #16]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d121      	bne.n	800446a <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8004426:	687a      	ldr	r2, [r7, #4]
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	212c      	movs	r1, #44	; 0x2c
 800442c:	fb01 f303 	mul.w	r3, r1, r3
 8004430:	4413      	add	r3, r2
 8004432:	3361      	adds	r3, #97	; 0x61
 8004434:	2206      	movs	r2, #6
 8004436:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	015a      	lsls	r2, r3, #5
 800443c:	69bb      	ldr	r3, [r7, #24]
 800443e:	4413      	add	r3, r2
 8004440:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004444:	68db      	ldr	r3, [r3, #12]
 8004446:	697a      	ldr	r2, [r7, #20]
 8004448:	0151      	lsls	r1, r2, #5
 800444a:	69ba      	ldr	r2, [r7, #24]
 800444c:	440a      	add	r2, r1
 800444e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004452:	f043 0302 	orr.w	r3, r3, #2
 8004456:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	697a      	ldr	r2, [r7, #20]
 800445e:	b2d2      	uxtb	r2, r2
 8004460:	4611      	mov	r1, r2
 8004462:	4618      	mov	r0, r3
 8004464:	f004 fc8d 	bl	8008d82 <USB_HC_Halt>
 8004468:	e044      	b.n	80044f4 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 800446a:	687a      	ldr	r2, [r7, #4]
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	212c      	movs	r1, #44	; 0x2c
 8004470:	fb01 f303 	mul.w	r3, r1, r3
 8004474:	4413      	add	r3, r2
 8004476:	335c      	adds	r3, #92	; 0x5c
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	1c5a      	adds	r2, r3, #1
 800447c:	6879      	ldr	r1, [r7, #4]
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	202c      	movs	r0, #44	; 0x2c
 8004482:	fb00 f303 	mul.w	r3, r0, r3
 8004486:	440b      	add	r3, r1
 8004488:	335c      	adds	r3, #92	; 0x5c
 800448a:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800448c:	687a      	ldr	r2, [r7, #4]
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	212c      	movs	r1, #44	; 0x2c
 8004492:	fb01 f303 	mul.w	r3, r1, r3
 8004496:	4413      	add	r3, r2
 8004498:	335c      	adds	r3, #92	; 0x5c
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	2b02      	cmp	r3, #2
 800449e:	d920      	bls.n	80044e2 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80044a0:	687a      	ldr	r2, [r7, #4]
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	212c      	movs	r1, #44	; 0x2c
 80044a6:	fb01 f303 	mul.w	r3, r1, r3
 80044aa:	4413      	add	r3, r2
 80044ac:	335c      	adds	r3, #92	; 0x5c
 80044ae:	2200      	movs	r2, #0
 80044b0:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80044b2:	687a      	ldr	r2, [r7, #4]
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	212c      	movs	r1, #44	; 0x2c
 80044b8:	fb01 f303 	mul.w	r3, r1, r3
 80044bc:	4413      	add	r3, r2
 80044be:	3360      	adds	r3, #96	; 0x60
 80044c0:	2204      	movs	r2, #4
 80044c2:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	b2d9      	uxtb	r1, r3
 80044c8:	687a      	ldr	r2, [r7, #4]
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	202c      	movs	r0, #44	; 0x2c
 80044ce:	fb00 f303 	mul.w	r3, r0, r3
 80044d2:	4413      	add	r3, r2
 80044d4:	3360      	adds	r3, #96	; 0x60
 80044d6:	781b      	ldrb	r3, [r3, #0]
 80044d8:	461a      	mov	r2, r3
 80044da:	6878      	ldr	r0, [r7, #4]
 80044dc:	f006 fe0e 	bl	800b0fc <HAL_HCD_HC_NotifyURBChange_Callback>
 80044e0:	e008      	b.n	80044f4 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80044e2:	687a      	ldr	r2, [r7, #4]
 80044e4:	697b      	ldr	r3, [r7, #20]
 80044e6:	212c      	movs	r1, #44	; 0x2c
 80044e8:	fb01 f303 	mul.w	r3, r1, r3
 80044ec:	4413      	add	r3, r2
 80044ee:	3360      	adds	r3, #96	; 0x60
 80044f0:	2202      	movs	r2, #2
 80044f2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	015a      	lsls	r2, r3, #5
 80044f8:	69bb      	ldr	r3, [r7, #24]
 80044fa:	4413      	add	r3, r2
 80044fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004500:	461a      	mov	r2, r3
 8004502:	2380      	movs	r3, #128	; 0x80
 8004504:	6093      	str	r3, [r2, #8]
}
 8004506:	e19b      	b.n	8004840 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	015a      	lsls	r2, r3, #5
 800450c:	69bb      	ldr	r3, [r7, #24]
 800450e:	4413      	add	r3, r2
 8004510:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800451a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800451e:	d134      	bne.n	800458a <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	015a      	lsls	r2, r3, #5
 8004524:	69bb      	ldr	r3, [r7, #24]
 8004526:	4413      	add	r3, r2
 8004528:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800452c:	68db      	ldr	r3, [r3, #12]
 800452e:	697a      	ldr	r2, [r7, #20]
 8004530:	0151      	lsls	r1, r2, #5
 8004532:	69ba      	ldr	r2, [r7, #24]
 8004534:	440a      	add	r2, r1
 8004536:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800453a:	f043 0302 	orr.w	r3, r3, #2
 800453e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	697a      	ldr	r2, [r7, #20]
 8004546:	b2d2      	uxtb	r2, r2
 8004548:	4611      	mov	r1, r2
 800454a:	4618      	mov	r0, r3
 800454c:	f004 fc19 	bl	8008d82 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	015a      	lsls	r2, r3, #5
 8004554:	69bb      	ldr	r3, [r7, #24]
 8004556:	4413      	add	r3, r2
 8004558:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800455c:	461a      	mov	r2, r3
 800455e:	2310      	movs	r3, #16
 8004560:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	015a      	lsls	r2, r3, #5
 8004566:	69bb      	ldr	r3, [r7, #24]
 8004568:	4413      	add	r3, r2
 800456a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800456e:	461a      	mov	r2, r3
 8004570:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004574:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8004576:	687a      	ldr	r2, [r7, #4]
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	212c      	movs	r1, #44	; 0x2c
 800457c:	fb01 f303 	mul.w	r3, r1, r3
 8004580:	4413      	add	r3, r2
 8004582:	3361      	adds	r3, #97	; 0x61
 8004584:	2208      	movs	r2, #8
 8004586:	701a      	strb	r2, [r3, #0]
}
 8004588:	e15a      	b.n	8004840 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	015a      	lsls	r2, r3, #5
 800458e:	69bb      	ldr	r3, [r7, #24]
 8004590:	4413      	add	r3, r2
 8004592:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004596:	689b      	ldr	r3, [r3, #8]
 8004598:	f003 0302 	and.w	r3, r3, #2
 800459c:	2b02      	cmp	r3, #2
 800459e:	f040 814f 	bne.w	8004840 <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	015a      	lsls	r2, r3, #5
 80045a6:	69bb      	ldr	r3, [r7, #24]
 80045a8:	4413      	add	r3, r2
 80045aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045ae:	68db      	ldr	r3, [r3, #12]
 80045b0:	697a      	ldr	r2, [r7, #20]
 80045b2:	0151      	lsls	r1, r2, #5
 80045b4:	69ba      	ldr	r2, [r7, #24]
 80045b6:	440a      	add	r2, r1
 80045b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80045bc:	f023 0302 	bic.w	r3, r3, #2
 80045c0:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80045c2:	687a      	ldr	r2, [r7, #4]
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	212c      	movs	r1, #44	; 0x2c
 80045c8:	fb01 f303 	mul.w	r3, r1, r3
 80045cc:	4413      	add	r3, r2
 80045ce:	3361      	adds	r3, #97	; 0x61
 80045d0:	781b      	ldrb	r3, [r3, #0]
 80045d2:	2b01      	cmp	r3, #1
 80045d4:	d17d      	bne.n	80046d2 <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80045d6:	687a      	ldr	r2, [r7, #4]
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	212c      	movs	r1, #44	; 0x2c
 80045dc:	fb01 f303 	mul.w	r3, r1, r3
 80045e0:	4413      	add	r3, r2
 80045e2:	3360      	adds	r3, #96	; 0x60
 80045e4:	2201      	movs	r2, #1
 80045e6:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80045e8:	687a      	ldr	r2, [r7, #4]
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	212c      	movs	r1, #44	; 0x2c
 80045ee:	fb01 f303 	mul.w	r3, r1, r3
 80045f2:	4413      	add	r3, r2
 80045f4:	333f      	adds	r3, #63	; 0x3f
 80045f6:	781b      	ldrb	r3, [r3, #0]
 80045f8:	2b02      	cmp	r3, #2
 80045fa:	d00a      	beq.n	8004612 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80045fc:	687a      	ldr	r2, [r7, #4]
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	212c      	movs	r1, #44	; 0x2c
 8004602:	fb01 f303 	mul.w	r3, r1, r3
 8004606:	4413      	add	r3, r2
 8004608:	333f      	adds	r3, #63	; 0x3f
 800460a:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800460c:	2b03      	cmp	r3, #3
 800460e:	f040 8100 	bne.w	8004812 <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	691b      	ldr	r3, [r3, #16]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d113      	bne.n	8004642 <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 800461a:	687a      	ldr	r2, [r7, #4]
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	212c      	movs	r1, #44	; 0x2c
 8004620:	fb01 f303 	mul.w	r3, r1, r3
 8004624:	4413      	add	r3, r2
 8004626:	3355      	adds	r3, #85	; 0x55
 8004628:	781b      	ldrb	r3, [r3, #0]
 800462a:	f083 0301 	eor.w	r3, r3, #1
 800462e:	b2d8      	uxtb	r0, r3
 8004630:	687a      	ldr	r2, [r7, #4]
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	212c      	movs	r1, #44	; 0x2c
 8004636:	fb01 f303 	mul.w	r3, r1, r3
 800463a:	4413      	add	r3, r2
 800463c:	3355      	adds	r3, #85	; 0x55
 800463e:	4602      	mov	r2, r0
 8004640:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	691b      	ldr	r3, [r3, #16]
 8004646:	2b01      	cmp	r3, #1
 8004648:	f040 80e3 	bne.w	8004812 <HCD_HC_OUT_IRQHandler+0x7cc>
 800464c:	687a      	ldr	r2, [r7, #4]
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	212c      	movs	r1, #44	; 0x2c
 8004652:	fb01 f303 	mul.w	r3, r1, r3
 8004656:	4413      	add	r3, r2
 8004658:	334c      	adds	r3, #76	; 0x4c
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	2b00      	cmp	r3, #0
 800465e:	f000 80d8 	beq.w	8004812 <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8004662:	687a      	ldr	r2, [r7, #4]
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	212c      	movs	r1, #44	; 0x2c
 8004668:	fb01 f303 	mul.w	r3, r1, r3
 800466c:	4413      	add	r3, r2
 800466e:	334c      	adds	r3, #76	; 0x4c
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	6879      	ldr	r1, [r7, #4]
 8004674:	697a      	ldr	r2, [r7, #20]
 8004676:	202c      	movs	r0, #44	; 0x2c
 8004678:	fb00 f202 	mul.w	r2, r0, r2
 800467c:	440a      	add	r2, r1
 800467e:	3240      	adds	r2, #64	; 0x40
 8004680:	8812      	ldrh	r2, [r2, #0]
 8004682:	4413      	add	r3, r2
 8004684:	3b01      	subs	r3, #1
 8004686:	6879      	ldr	r1, [r7, #4]
 8004688:	697a      	ldr	r2, [r7, #20]
 800468a:	202c      	movs	r0, #44	; 0x2c
 800468c:	fb00 f202 	mul.w	r2, r0, r2
 8004690:	440a      	add	r2, r1
 8004692:	3240      	adds	r2, #64	; 0x40
 8004694:	8812      	ldrh	r2, [r2, #0]
 8004696:	fbb3 f3f2 	udiv	r3, r3, r2
 800469a:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	f003 0301 	and.w	r3, r3, #1
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	f000 80b5 	beq.w	8004812 <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80046a8:	687a      	ldr	r2, [r7, #4]
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	212c      	movs	r1, #44	; 0x2c
 80046ae:	fb01 f303 	mul.w	r3, r1, r3
 80046b2:	4413      	add	r3, r2
 80046b4:	3355      	adds	r3, #85	; 0x55
 80046b6:	781b      	ldrb	r3, [r3, #0]
 80046b8:	f083 0301 	eor.w	r3, r3, #1
 80046bc:	b2d8      	uxtb	r0, r3
 80046be:	687a      	ldr	r2, [r7, #4]
 80046c0:	697b      	ldr	r3, [r7, #20]
 80046c2:	212c      	movs	r1, #44	; 0x2c
 80046c4:	fb01 f303 	mul.w	r3, r1, r3
 80046c8:	4413      	add	r3, r2
 80046ca:	3355      	adds	r3, #85	; 0x55
 80046cc:	4602      	mov	r2, r0
 80046ce:	701a      	strb	r2, [r3, #0]
 80046d0:	e09f      	b.n	8004812 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80046d2:	687a      	ldr	r2, [r7, #4]
 80046d4:	697b      	ldr	r3, [r7, #20]
 80046d6:	212c      	movs	r1, #44	; 0x2c
 80046d8:	fb01 f303 	mul.w	r3, r1, r3
 80046dc:	4413      	add	r3, r2
 80046de:	3361      	adds	r3, #97	; 0x61
 80046e0:	781b      	ldrb	r3, [r3, #0]
 80046e2:	2b03      	cmp	r3, #3
 80046e4:	d109      	bne.n	80046fa <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80046e6:	687a      	ldr	r2, [r7, #4]
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	212c      	movs	r1, #44	; 0x2c
 80046ec:	fb01 f303 	mul.w	r3, r1, r3
 80046f0:	4413      	add	r3, r2
 80046f2:	3360      	adds	r3, #96	; 0x60
 80046f4:	2202      	movs	r2, #2
 80046f6:	701a      	strb	r2, [r3, #0]
 80046f8:	e08b      	b.n	8004812 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80046fa:	687a      	ldr	r2, [r7, #4]
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	212c      	movs	r1, #44	; 0x2c
 8004700:	fb01 f303 	mul.w	r3, r1, r3
 8004704:	4413      	add	r3, r2
 8004706:	3361      	adds	r3, #97	; 0x61
 8004708:	781b      	ldrb	r3, [r3, #0]
 800470a:	2b04      	cmp	r3, #4
 800470c:	d109      	bne.n	8004722 <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800470e:	687a      	ldr	r2, [r7, #4]
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	212c      	movs	r1, #44	; 0x2c
 8004714:	fb01 f303 	mul.w	r3, r1, r3
 8004718:	4413      	add	r3, r2
 800471a:	3360      	adds	r3, #96	; 0x60
 800471c:	2202      	movs	r2, #2
 800471e:	701a      	strb	r2, [r3, #0]
 8004720:	e077      	b.n	8004812 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004722:	687a      	ldr	r2, [r7, #4]
 8004724:	697b      	ldr	r3, [r7, #20]
 8004726:	212c      	movs	r1, #44	; 0x2c
 8004728:	fb01 f303 	mul.w	r3, r1, r3
 800472c:	4413      	add	r3, r2
 800472e:	3361      	adds	r3, #97	; 0x61
 8004730:	781b      	ldrb	r3, [r3, #0]
 8004732:	2b05      	cmp	r3, #5
 8004734:	d109      	bne.n	800474a <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8004736:	687a      	ldr	r2, [r7, #4]
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	212c      	movs	r1, #44	; 0x2c
 800473c:	fb01 f303 	mul.w	r3, r1, r3
 8004740:	4413      	add	r3, r2
 8004742:	3360      	adds	r3, #96	; 0x60
 8004744:	2205      	movs	r2, #5
 8004746:	701a      	strb	r2, [r3, #0]
 8004748:	e063      	b.n	8004812 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800474a:	687a      	ldr	r2, [r7, #4]
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	212c      	movs	r1, #44	; 0x2c
 8004750:	fb01 f303 	mul.w	r3, r1, r3
 8004754:	4413      	add	r3, r2
 8004756:	3361      	adds	r3, #97	; 0x61
 8004758:	781b      	ldrb	r3, [r3, #0]
 800475a:	2b06      	cmp	r3, #6
 800475c:	d009      	beq.n	8004772 <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800475e:	687a      	ldr	r2, [r7, #4]
 8004760:	697b      	ldr	r3, [r7, #20]
 8004762:	212c      	movs	r1, #44	; 0x2c
 8004764:	fb01 f303 	mul.w	r3, r1, r3
 8004768:	4413      	add	r3, r2
 800476a:	3361      	adds	r3, #97	; 0x61
 800476c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800476e:	2b08      	cmp	r3, #8
 8004770:	d14f      	bne.n	8004812 <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 8004772:	687a      	ldr	r2, [r7, #4]
 8004774:	697b      	ldr	r3, [r7, #20]
 8004776:	212c      	movs	r1, #44	; 0x2c
 8004778:	fb01 f303 	mul.w	r3, r1, r3
 800477c:	4413      	add	r3, r2
 800477e:	335c      	adds	r3, #92	; 0x5c
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	1c5a      	adds	r2, r3, #1
 8004784:	6879      	ldr	r1, [r7, #4]
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	202c      	movs	r0, #44	; 0x2c
 800478a:	fb00 f303 	mul.w	r3, r0, r3
 800478e:	440b      	add	r3, r1
 8004790:	335c      	adds	r3, #92	; 0x5c
 8004792:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004794:	687a      	ldr	r2, [r7, #4]
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	212c      	movs	r1, #44	; 0x2c
 800479a:	fb01 f303 	mul.w	r3, r1, r3
 800479e:	4413      	add	r3, r2
 80047a0:	335c      	adds	r3, #92	; 0x5c
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	2b02      	cmp	r3, #2
 80047a6:	d912      	bls.n	80047ce <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80047a8:	687a      	ldr	r2, [r7, #4]
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	212c      	movs	r1, #44	; 0x2c
 80047ae:	fb01 f303 	mul.w	r3, r1, r3
 80047b2:	4413      	add	r3, r2
 80047b4:	335c      	adds	r3, #92	; 0x5c
 80047b6:	2200      	movs	r2, #0
 80047b8:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80047ba:	687a      	ldr	r2, [r7, #4]
 80047bc:	697b      	ldr	r3, [r7, #20]
 80047be:	212c      	movs	r1, #44	; 0x2c
 80047c0:	fb01 f303 	mul.w	r3, r1, r3
 80047c4:	4413      	add	r3, r2
 80047c6:	3360      	adds	r3, #96	; 0x60
 80047c8:	2204      	movs	r2, #4
 80047ca:	701a      	strb	r2, [r3, #0]
 80047cc:	e021      	b.n	8004812 <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80047ce:	687a      	ldr	r2, [r7, #4]
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	212c      	movs	r1, #44	; 0x2c
 80047d4:	fb01 f303 	mul.w	r3, r1, r3
 80047d8:	4413      	add	r3, r2
 80047da:	3360      	adds	r3, #96	; 0x60
 80047dc:	2202      	movs	r2, #2
 80047de:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80047e0:	697b      	ldr	r3, [r7, #20]
 80047e2:	015a      	lsls	r2, r3, #5
 80047e4:	69bb      	ldr	r3, [r7, #24]
 80047e6:	4413      	add	r3, r2
 80047e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80047f6:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80047fe:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	015a      	lsls	r2, r3, #5
 8004804:	69bb      	ldr	r3, [r7, #24]
 8004806:	4413      	add	r3, r2
 8004808:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800480c:	461a      	mov	r2, r3
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004812:	697b      	ldr	r3, [r7, #20]
 8004814:	015a      	lsls	r2, r3, #5
 8004816:	69bb      	ldr	r3, [r7, #24]
 8004818:	4413      	add	r3, r2
 800481a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800481e:	461a      	mov	r2, r3
 8004820:	2302      	movs	r3, #2
 8004822:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004824:	697b      	ldr	r3, [r7, #20]
 8004826:	b2d9      	uxtb	r1, r3
 8004828:	687a      	ldr	r2, [r7, #4]
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	202c      	movs	r0, #44	; 0x2c
 800482e:	fb00 f303 	mul.w	r3, r0, r3
 8004832:	4413      	add	r3, r2
 8004834:	3360      	adds	r3, #96	; 0x60
 8004836:	781b      	ldrb	r3, [r3, #0]
 8004838:	461a      	mov	r2, r3
 800483a:	6878      	ldr	r0, [r7, #4]
 800483c:	f006 fc5e 	bl	800b0fc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004840:	bf00      	nop
 8004842:	3720      	adds	r7, #32
 8004844:	46bd      	mov	sp, r7
 8004846:	bd80      	pop	{r7, pc}

08004848 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b08a      	sub	sp, #40	; 0x28
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004858:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	6a1b      	ldr	r3, [r3, #32]
 8004860:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004862:	69fb      	ldr	r3, [r7, #28]
 8004864:	f003 030f 	and.w	r3, r3, #15
 8004868:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800486a:	69fb      	ldr	r3, [r7, #28]
 800486c:	0c5b      	lsrs	r3, r3, #17
 800486e:	f003 030f 	and.w	r3, r3, #15
 8004872:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004874:	69fb      	ldr	r3, [r7, #28]
 8004876:	091b      	lsrs	r3, r3, #4
 8004878:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800487c:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	2b02      	cmp	r3, #2
 8004882:	d004      	beq.n	800488e <HCD_RXQLVL_IRQHandler+0x46>
 8004884:	697b      	ldr	r3, [r7, #20]
 8004886:	2b05      	cmp	r3, #5
 8004888:	f000 80a9 	beq.w	80049de <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800488c:	e0aa      	b.n	80049e4 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	2b00      	cmp	r3, #0
 8004892:	f000 80a6 	beq.w	80049e2 <HCD_RXQLVL_IRQHandler+0x19a>
 8004896:	687a      	ldr	r2, [r7, #4]
 8004898:	69bb      	ldr	r3, [r7, #24]
 800489a:	212c      	movs	r1, #44	; 0x2c
 800489c:	fb01 f303 	mul.w	r3, r1, r3
 80048a0:	4413      	add	r3, r2
 80048a2:	3344      	adds	r3, #68	; 0x44
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	f000 809b 	beq.w	80049e2 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80048ac:	687a      	ldr	r2, [r7, #4]
 80048ae:	69bb      	ldr	r3, [r7, #24]
 80048b0:	212c      	movs	r1, #44	; 0x2c
 80048b2:	fb01 f303 	mul.w	r3, r1, r3
 80048b6:	4413      	add	r3, r2
 80048b8:	3350      	adds	r3, #80	; 0x50
 80048ba:	681a      	ldr	r2, [r3, #0]
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	441a      	add	r2, r3
 80048c0:	6879      	ldr	r1, [r7, #4]
 80048c2:	69bb      	ldr	r3, [r7, #24]
 80048c4:	202c      	movs	r0, #44	; 0x2c
 80048c6:	fb00 f303 	mul.w	r3, r0, r3
 80048ca:	440b      	add	r3, r1
 80048cc:	334c      	adds	r3, #76	; 0x4c
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	429a      	cmp	r2, r3
 80048d2:	d87a      	bhi.n	80049ca <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6818      	ldr	r0, [r3, #0]
 80048d8:	687a      	ldr	r2, [r7, #4]
 80048da:	69bb      	ldr	r3, [r7, #24]
 80048dc:	212c      	movs	r1, #44	; 0x2c
 80048de:	fb01 f303 	mul.w	r3, r1, r3
 80048e2:	4413      	add	r3, r2
 80048e4:	3344      	adds	r3, #68	; 0x44
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	693a      	ldr	r2, [r7, #16]
 80048ea:	b292      	uxth	r2, r2
 80048ec:	4619      	mov	r1, r3
 80048ee:	f003 fdc1 	bl	8008474 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80048f2:	687a      	ldr	r2, [r7, #4]
 80048f4:	69bb      	ldr	r3, [r7, #24]
 80048f6:	212c      	movs	r1, #44	; 0x2c
 80048f8:	fb01 f303 	mul.w	r3, r1, r3
 80048fc:	4413      	add	r3, r2
 80048fe:	3344      	adds	r3, #68	; 0x44
 8004900:	681a      	ldr	r2, [r3, #0]
 8004902:	693b      	ldr	r3, [r7, #16]
 8004904:	441a      	add	r2, r3
 8004906:	6879      	ldr	r1, [r7, #4]
 8004908:	69bb      	ldr	r3, [r7, #24]
 800490a:	202c      	movs	r0, #44	; 0x2c
 800490c:	fb00 f303 	mul.w	r3, r0, r3
 8004910:	440b      	add	r3, r1
 8004912:	3344      	adds	r3, #68	; 0x44
 8004914:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8004916:	687a      	ldr	r2, [r7, #4]
 8004918:	69bb      	ldr	r3, [r7, #24]
 800491a:	212c      	movs	r1, #44	; 0x2c
 800491c:	fb01 f303 	mul.w	r3, r1, r3
 8004920:	4413      	add	r3, r2
 8004922:	3350      	adds	r3, #80	; 0x50
 8004924:	681a      	ldr	r2, [r3, #0]
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	441a      	add	r2, r3
 800492a:	6879      	ldr	r1, [r7, #4]
 800492c:	69bb      	ldr	r3, [r7, #24]
 800492e:	202c      	movs	r0, #44	; 0x2c
 8004930:	fb00 f303 	mul.w	r3, r0, r3
 8004934:	440b      	add	r3, r1
 8004936:	3350      	adds	r3, #80	; 0x50
 8004938:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800493a:	69bb      	ldr	r3, [r7, #24]
 800493c:	015a      	lsls	r2, r3, #5
 800493e:	6a3b      	ldr	r3, [r7, #32]
 8004940:	4413      	add	r3, r2
 8004942:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004946:	691b      	ldr	r3, [r3, #16]
 8004948:	0cdb      	lsrs	r3, r3, #19
 800494a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800494e:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8004950:	687a      	ldr	r2, [r7, #4]
 8004952:	69bb      	ldr	r3, [r7, #24]
 8004954:	212c      	movs	r1, #44	; 0x2c
 8004956:	fb01 f303 	mul.w	r3, r1, r3
 800495a:	4413      	add	r3, r2
 800495c:	3340      	adds	r3, #64	; 0x40
 800495e:	881b      	ldrh	r3, [r3, #0]
 8004960:	461a      	mov	r2, r3
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	4293      	cmp	r3, r2
 8004966:	d13c      	bne.n	80049e2 <HCD_RXQLVL_IRQHandler+0x19a>
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d039      	beq.n	80049e2 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 800496e:	69bb      	ldr	r3, [r7, #24]
 8004970:	015a      	lsls	r2, r3, #5
 8004972:	6a3b      	ldr	r3, [r7, #32]
 8004974:	4413      	add	r3, r2
 8004976:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004984:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800498c:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 800498e:	69bb      	ldr	r3, [r7, #24]
 8004990:	015a      	lsls	r2, r3, #5
 8004992:	6a3b      	ldr	r3, [r7, #32]
 8004994:	4413      	add	r3, r2
 8004996:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800499a:	461a      	mov	r2, r3
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80049a0:	687a      	ldr	r2, [r7, #4]
 80049a2:	69bb      	ldr	r3, [r7, #24]
 80049a4:	212c      	movs	r1, #44	; 0x2c
 80049a6:	fb01 f303 	mul.w	r3, r1, r3
 80049aa:	4413      	add	r3, r2
 80049ac:	3354      	adds	r3, #84	; 0x54
 80049ae:	781b      	ldrb	r3, [r3, #0]
 80049b0:	f083 0301 	eor.w	r3, r3, #1
 80049b4:	b2d8      	uxtb	r0, r3
 80049b6:	687a      	ldr	r2, [r7, #4]
 80049b8:	69bb      	ldr	r3, [r7, #24]
 80049ba:	212c      	movs	r1, #44	; 0x2c
 80049bc:	fb01 f303 	mul.w	r3, r1, r3
 80049c0:	4413      	add	r3, r2
 80049c2:	3354      	adds	r3, #84	; 0x54
 80049c4:	4602      	mov	r2, r0
 80049c6:	701a      	strb	r2, [r3, #0]
      break;
 80049c8:	e00b      	b.n	80049e2 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 80049ca:	687a      	ldr	r2, [r7, #4]
 80049cc:	69bb      	ldr	r3, [r7, #24]
 80049ce:	212c      	movs	r1, #44	; 0x2c
 80049d0:	fb01 f303 	mul.w	r3, r1, r3
 80049d4:	4413      	add	r3, r2
 80049d6:	3360      	adds	r3, #96	; 0x60
 80049d8:	2204      	movs	r2, #4
 80049da:	701a      	strb	r2, [r3, #0]
      break;
 80049dc:	e001      	b.n	80049e2 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 80049de:	bf00      	nop
 80049e0:	e000      	b.n	80049e4 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 80049e2:	bf00      	nop
  }
}
 80049e4:	bf00      	nop
 80049e6:	3728      	adds	r7, #40	; 0x28
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bd80      	pop	{r7, pc}

080049ec <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b086      	sub	sp, #24
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80049fe:	693b      	ldr	r3, [r7, #16]
 8004a00:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004a08:	693b      	ldr	r3, [r7, #16]
 8004a0a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004a18:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	f003 0302 	and.w	r3, r3, #2
 8004a20:	2b02      	cmp	r3, #2
 8004a22:	d10b      	bne.n	8004a3c <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	f003 0301 	and.w	r3, r3, #1
 8004a2a:	2b01      	cmp	r3, #1
 8004a2c:	d102      	bne.n	8004a34 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004a2e:	6878      	ldr	r0, [r7, #4]
 8004a30:	f006 fb48 	bl	800b0c4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	f043 0302 	orr.w	r3, r3, #2
 8004a3a:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	f003 0308 	and.w	r3, r3, #8
 8004a42:	2b08      	cmp	r3, #8
 8004a44:	d132      	bne.n	8004aac <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	f043 0308 	orr.w	r3, r3, #8
 8004a4c:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	f003 0304 	and.w	r3, r3, #4
 8004a54:	2b04      	cmp	r3, #4
 8004a56:	d126      	bne.n	8004aa6 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	699b      	ldr	r3, [r3, #24]
 8004a5c:	2b02      	cmp	r3, #2
 8004a5e:	d113      	bne.n	8004a88 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004a66:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004a6a:	d106      	bne.n	8004a7a <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	2102      	movs	r1, #2
 8004a72:	4618      	mov	r0, r3
 8004a74:	f003 fe5e 	bl	8008734 <USB_InitFSLSPClkSel>
 8004a78:	e011      	b.n	8004a9e <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	2101      	movs	r1, #1
 8004a80:	4618      	mov	r0, r3
 8004a82:	f003 fe57 	bl	8008734 <USB_InitFSLSPClkSel>
 8004a86:	e00a      	b.n	8004a9e <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	68db      	ldr	r3, [r3, #12]
 8004a8c:	2b01      	cmp	r3, #1
 8004a8e:	d106      	bne.n	8004a9e <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8004a90:	693b      	ldr	r3, [r7, #16]
 8004a92:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a96:	461a      	mov	r2, r3
 8004a98:	f64e 2360 	movw	r3, #60000	; 0xea60
 8004a9c:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004a9e:	6878      	ldr	r0, [r7, #4]
 8004aa0:	f006 fb3a 	bl	800b118 <HAL_HCD_PortEnabled_Callback>
 8004aa4:	e002      	b.n	8004aac <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	f006 fb44 	bl	800b134 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	f003 0320 	and.w	r3, r3, #32
 8004ab2:	2b20      	cmp	r3, #32
 8004ab4:	d103      	bne.n	8004abe <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	f043 0320 	orr.w	r3, r3, #32
 8004abc:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004abe:	693b      	ldr	r3, [r7, #16]
 8004ac0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004ac4:	461a      	mov	r2, r3
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	6013      	str	r3, [r2, #0]
}
 8004aca:	bf00      	nop
 8004acc:	3718      	adds	r7, #24
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bd80      	pop	{r7, pc}
	...

08004ad4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b084      	sub	sp, #16
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d101      	bne.n	8004ae6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e12b      	b.n	8004d3e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004aec:	b2db      	uxtb	r3, r3
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d106      	bne.n	8004b00 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2200      	movs	r2, #0
 8004af6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004afa:	6878      	ldr	r0, [r7, #4]
 8004afc:	f7fc fafc 	bl	80010f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2224      	movs	r2, #36	; 0x24
 8004b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	681a      	ldr	r2, [r3, #0]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f022 0201 	bic.w	r2, r2, #1
 8004b16:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	681a      	ldr	r2, [r3, #0]
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004b26:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	681a      	ldr	r2, [r3, #0]
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004b36:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004b38:	f002 f878 	bl	8006c2c <HAL_RCC_GetPCLK1Freq>
 8004b3c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	4a81      	ldr	r2, [pc, #516]	; (8004d48 <HAL_I2C_Init+0x274>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d807      	bhi.n	8004b58 <HAL_I2C_Init+0x84>
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	4a80      	ldr	r2, [pc, #512]	; (8004d4c <HAL_I2C_Init+0x278>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	bf94      	ite	ls
 8004b50:	2301      	movls	r3, #1
 8004b52:	2300      	movhi	r3, #0
 8004b54:	b2db      	uxtb	r3, r3
 8004b56:	e006      	b.n	8004b66 <HAL_I2C_Init+0x92>
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	4a7d      	ldr	r2, [pc, #500]	; (8004d50 <HAL_I2C_Init+0x27c>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	bf94      	ite	ls
 8004b60:	2301      	movls	r3, #1
 8004b62:	2300      	movhi	r3, #0
 8004b64:	b2db      	uxtb	r3, r3
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d001      	beq.n	8004b6e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	e0e7      	b.n	8004d3e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	4a78      	ldr	r2, [pc, #480]	; (8004d54 <HAL_I2C_Init+0x280>)
 8004b72:	fba2 2303 	umull	r2, r3, r2, r3
 8004b76:	0c9b      	lsrs	r3, r3, #18
 8004b78:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	68ba      	ldr	r2, [r7, #8]
 8004b8a:	430a      	orrs	r2, r1
 8004b8c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	6a1b      	ldr	r3, [r3, #32]
 8004b94:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	4a6a      	ldr	r2, [pc, #424]	; (8004d48 <HAL_I2C_Init+0x274>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d802      	bhi.n	8004ba8 <HAL_I2C_Init+0xd4>
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	3301      	adds	r3, #1
 8004ba6:	e009      	b.n	8004bbc <HAL_I2C_Init+0xe8>
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004bae:	fb02 f303 	mul.w	r3, r2, r3
 8004bb2:	4a69      	ldr	r2, [pc, #420]	; (8004d58 <HAL_I2C_Init+0x284>)
 8004bb4:	fba2 2303 	umull	r2, r3, r2, r3
 8004bb8:	099b      	lsrs	r3, r3, #6
 8004bba:	3301      	adds	r3, #1
 8004bbc:	687a      	ldr	r2, [r7, #4]
 8004bbe:	6812      	ldr	r2, [r2, #0]
 8004bc0:	430b      	orrs	r3, r1
 8004bc2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	69db      	ldr	r3, [r3, #28]
 8004bca:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004bce:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	495c      	ldr	r1, [pc, #368]	; (8004d48 <HAL_I2C_Init+0x274>)
 8004bd8:	428b      	cmp	r3, r1
 8004bda:	d819      	bhi.n	8004c10 <HAL_I2C_Init+0x13c>
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	1e59      	subs	r1, r3, #1
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	005b      	lsls	r3, r3, #1
 8004be6:	fbb1 f3f3 	udiv	r3, r1, r3
 8004bea:	1c59      	adds	r1, r3, #1
 8004bec:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004bf0:	400b      	ands	r3, r1
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d00a      	beq.n	8004c0c <HAL_I2C_Init+0x138>
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	1e59      	subs	r1, r3, #1
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	005b      	lsls	r3, r3, #1
 8004c00:	fbb1 f3f3 	udiv	r3, r1, r3
 8004c04:	3301      	adds	r3, #1
 8004c06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c0a:	e051      	b.n	8004cb0 <HAL_I2C_Init+0x1dc>
 8004c0c:	2304      	movs	r3, #4
 8004c0e:	e04f      	b.n	8004cb0 <HAL_I2C_Init+0x1dc>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	689b      	ldr	r3, [r3, #8]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d111      	bne.n	8004c3c <HAL_I2C_Init+0x168>
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	1e58      	subs	r0, r3, #1
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6859      	ldr	r1, [r3, #4]
 8004c20:	460b      	mov	r3, r1
 8004c22:	005b      	lsls	r3, r3, #1
 8004c24:	440b      	add	r3, r1
 8004c26:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c2a:	3301      	adds	r3, #1
 8004c2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	bf0c      	ite	eq
 8004c34:	2301      	moveq	r3, #1
 8004c36:	2300      	movne	r3, #0
 8004c38:	b2db      	uxtb	r3, r3
 8004c3a:	e012      	b.n	8004c62 <HAL_I2C_Init+0x18e>
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	1e58      	subs	r0, r3, #1
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6859      	ldr	r1, [r3, #4]
 8004c44:	460b      	mov	r3, r1
 8004c46:	009b      	lsls	r3, r3, #2
 8004c48:	440b      	add	r3, r1
 8004c4a:	0099      	lsls	r1, r3, #2
 8004c4c:	440b      	add	r3, r1
 8004c4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c52:	3301      	adds	r3, #1
 8004c54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	bf0c      	ite	eq
 8004c5c:	2301      	moveq	r3, #1
 8004c5e:	2300      	movne	r3, #0
 8004c60:	b2db      	uxtb	r3, r3
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d001      	beq.n	8004c6a <HAL_I2C_Init+0x196>
 8004c66:	2301      	movs	r3, #1
 8004c68:	e022      	b.n	8004cb0 <HAL_I2C_Init+0x1dc>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	689b      	ldr	r3, [r3, #8]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d10e      	bne.n	8004c90 <HAL_I2C_Init+0x1bc>
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	1e58      	subs	r0, r3, #1
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6859      	ldr	r1, [r3, #4]
 8004c7a:	460b      	mov	r3, r1
 8004c7c:	005b      	lsls	r3, r3, #1
 8004c7e:	440b      	add	r3, r1
 8004c80:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c84:	3301      	adds	r3, #1
 8004c86:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c8e:	e00f      	b.n	8004cb0 <HAL_I2C_Init+0x1dc>
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	1e58      	subs	r0, r3, #1
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6859      	ldr	r1, [r3, #4]
 8004c98:	460b      	mov	r3, r1
 8004c9a:	009b      	lsls	r3, r3, #2
 8004c9c:	440b      	add	r3, r1
 8004c9e:	0099      	lsls	r1, r3, #2
 8004ca0:	440b      	add	r3, r1
 8004ca2:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ca6:	3301      	adds	r3, #1
 8004ca8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004cac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004cb0:	6879      	ldr	r1, [r7, #4]
 8004cb2:	6809      	ldr	r1, [r1, #0]
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	69da      	ldr	r2, [r3, #28]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6a1b      	ldr	r3, [r3, #32]
 8004cca:	431a      	orrs	r2, r3
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	430a      	orrs	r2, r1
 8004cd2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	689b      	ldr	r3, [r3, #8]
 8004cda:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004cde:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004ce2:	687a      	ldr	r2, [r7, #4]
 8004ce4:	6911      	ldr	r1, [r2, #16]
 8004ce6:	687a      	ldr	r2, [r7, #4]
 8004ce8:	68d2      	ldr	r2, [r2, #12]
 8004cea:	4311      	orrs	r1, r2
 8004cec:	687a      	ldr	r2, [r7, #4]
 8004cee:	6812      	ldr	r2, [r2, #0]
 8004cf0:	430b      	orrs	r3, r1
 8004cf2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	68db      	ldr	r3, [r3, #12]
 8004cfa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	695a      	ldr	r2, [r3, #20]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	699b      	ldr	r3, [r3, #24]
 8004d06:	431a      	orrs	r2, r3
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	430a      	orrs	r2, r1
 8004d0e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	681a      	ldr	r2, [r3, #0]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f042 0201 	orr.w	r2, r2, #1
 8004d1e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2200      	movs	r2, #0
 8004d24:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2220      	movs	r2, #32
 8004d2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2200      	movs	r2, #0
 8004d32:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2200      	movs	r2, #0
 8004d38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004d3c:	2300      	movs	r3, #0
}
 8004d3e:	4618      	mov	r0, r3
 8004d40:	3710      	adds	r7, #16
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}
 8004d46:	bf00      	nop
 8004d48:	000186a0 	.word	0x000186a0
 8004d4c:	001e847f 	.word	0x001e847f
 8004d50:	003d08ff 	.word	0x003d08ff
 8004d54:	431bde83 	.word	0x431bde83
 8004d58:	10624dd3 	.word	0x10624dd3

08004d5c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b088      	sub	sp, #32
 8004d60:	af02      	add	r7, sp, #8
 8004d62:	60f8      	str	r0, [r7, #12]
 8004d64:	4608      	mov	r0, r1
 8004d66:	4611      	mov	r1, r2
 8004d68:	461a      	mov	r2, r3
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	817b      	strh	r3, [r7, #10]
 8004d6e:	460b      	mov	r3, r1
 8004d70:	813b      	strh	r3, [r7, #8]
 8004d72:	4613      	mov	r3, r2
 8004d74:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004d76:	f7fd fa3b 	bl	80021f0 <HAL_GetTick>
 8004d7a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d82:	b2db      	uxtb	r3, r3
 8004d84:	2b20      	cmp	r3, #32
 8004d86:	f040 80d9 	bne.w	8004f3c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	9300      	str	r3, [sp, #0]
 8004d8e:	2319      	movs	r3, #25
 8004d90:	2201      	movs	r2, #1
 8004d92:	496d      	ldr	r1, [pc, #436]	; (8004f48 <HAL_I2C_Mem_Write+0x1ec>)
 8004d94:	68f8      	ldr	r0, [r7, #12]
 8004d96:	f000 fc7f 	bl	8005698 <I2C_WaitOnFlagUntilTimeout>
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d001      	beq.n	8004da4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004da0:	2302      	movs	r3, #2
 8004da2:	e0cc      	b.n	8004f3e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004daa:	2b01      	cmp	r3, #1
 8004dac:	d101      	bne.n	8004db2 <HAL_I2C_Mem_Write+0x56>
 8004dae:	2302      	movs	r3, #2
 8004db0:	e0c5      	b.n	8004f3e <HAL_I2C_Mem_Write+0x1e2>
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	2201      	movs	r2, #1
 8004db6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f003 0301 	and.w	r3, r3, #1
 8004dc4:	2b01      	cmp	r3, #1
 8004dc6:	d007      	beq.n	8004dd8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	681a      	ldr	r2, [r3, #0]
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f042 0201 	orr.w	r2, r2, #1
 8004dd6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	681a      	ldr	r2, [r3, #0]
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004de6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	2221      	movs	r2, #33	; 0x21
 8004dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	2240      	movs	r2, #64	; 0x40
 8004df4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	6a3a      	ldr	r2, [r7, #32]
 8004e02:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004e08:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e0e:	b29a      	uxth	r2, r3
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	4a4d      	ldr	r2, [pc, #308]	; (8004f4c <HAL_I2C_Mem_Write+0x1f0>)
 8004e18:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004e1a:	88f8      	ldrh	r0, [r7, #6]
 8004e1c:	893a      	ldrh	r2, [r7, #8]
 8004e1e:	8979      	ldrh	r1, [r7, #10]
 8004e20:	697b      	ldr	r3, [r7, #20]
 8004e22:	9301      	str	r3, [sp, #4]
 8004e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e26:	9300      	str	r3, [sp, #0]
 8004e28:	4603      	mov	r3, r0
 8004e2a:	68f8      	ldr	r0, [r7, #12]
 8004e2c:	f000 fab6 	bl	800539c <I2C_RequestMemoryWrite>
 8004e30:	4603      	mov	r3, r0
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d052      	beq.n	8004edc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004e36:	2301      	movs	r3, #1
 8004e38:	e081      	b.n	8004f3e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e3a:	697a      	ldr	r2, [r7, #20]
 8004e3c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004e3e:	68f8      	ldr	r0, [r7, #12]
 8004e40:	f000 fd00 	bl	8005844 <I2C_WaitOnTXEFlagUntilTimeout>
 8004e44:	4603      	mov	r3, r0
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d00d      	beq.n	8004e66 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e4e:	2b04      	cmp	r3, #4
 8004e50:	d107      	bne.n	8004e62 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	681a      	ldr	r2, [r3, #0]
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e60:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004e62:	2301      	movs	r3, #1
 8004e64:	e06b      	b.n	8004f3e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e6a:	781a      	ldrb	r2, [r3, #0]
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e76:	1c5a      	adds	r2, r3, #1
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e80:	3b01      	subs	r3, #1
 8004e82:	b29a      	uxth	r2, r3
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e8c:	b29b      	uxth	r3, r3
 8004e8e:	3b01      	subs	r3, #1
 8004e90:	b29a      	uxth	r2, r3
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	695b      	ldr	r3, [r3, #20]
 8004e9c:	f003 0304 	and.w	r3, r3, #4
 8004ea0:	2b04      	cmp	r3, #4
 8004ea2:	d11b      	bne.n	8004edc <HAL_I2C_Mem_Write+0x180>
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d017      	beq.n	8004edc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb0:	781a      	ldrb	r2, [r3, #0]
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ebc:	1c5a      	adds	r2, r3, #1
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ec6:	3b01      	subs	r3, #1
 8004ec8:	b29a      	uxth	r2, r3
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ed2:	b29b      	uxth	r3, r3
 8004ed4:	3b01      	subs	r3, #1
 8004ed6:	b29a      	uxth	r2, r3
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d1aa      	bne.n	8004e3a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ee4:	697a      	ldr	r2, [r7, #20]
 8004ee6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004ee8:	68f8      	ldr	r0, [r7, #12]
 8004eea:	f000 fcec 	bl	80058c6 <I2C_WaitOnBTFFlagUntilTimeout>
 8004eee:	4603      	mov	r3, r0
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d00d      	beq.n	8004f10 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ef8:	2b04      	cmp	r3, #4
 8004efa:	d107      	bne.n	8004f0c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	681a      	ldr	r2, [r3, #0]
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f0a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	e016      	b.n	8004f3e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	681a      	ldr	r2, [r3, #0]
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f1e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	2220      	movs	r2, #32
 8004f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	2200      	movs	r2, #0
 8004f34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004f38:	2300      	movs	r3, #0
 8004f3a:	e000      	b.n	8004f3e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004f3c:	2302      	movs	r3, #2
  }
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	3718      	adds	r7, #24
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd80      	pop	{r7, pc}
 8004f46:	bf00      	nop
 8004f48:	00100002 	.word	0x00100002
 8004f4c:	ffff0000 	.word	0xffff0000

08004f50 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b08c      	sub	sp, #48	; 0x30
 8004f54:	af02      	add	r7, sp, #8
 8004f56:	60f8      	str	r0, [r7, #12]
 8004f58:	4608      	mov	r0, r1
 8004f5a:	4611      	mov	r1, r2
 8004f5c:	461a      	mov	r2, r3
 8004f5e:	4603      	mov	r3, r0
 8004f60:	817b      	strh	r3, [r7, #10]
 8004f62:	460b      	mov	r3, r1
 8004f64:	813b      	strh	r3, [r7, #8]
 8004f66:	4613      	mov	r3, r2
 8004f68:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004f6a:	f7fd f941 	bl	80021f0 <HAL_GetTick>
 8004f6e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f76:	b2db      	uxtb	r3, r3
 8004f78:	2b20      	cmp	r3, #32
 8004f7a:	f040 8208 	bne.w	800538e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f80:	9300      	str	r3, [sp, #0]
 8004f82:	2319      	movs	r3, #25
 8004f84:	2201      	movs	r2, #1
 8004f86:	497b      	ldr	r1, [pc, #492]	; (8005174 <HAL_I2C_Mem_Read+0x224>)
 8004f88:	68f8      	ldr	r0, [r7, #12]
 8004f8a:	f000 fb85 	bl	8005698 <I2C_WaitOnFlagUntilTimeout>
 8004f8e:	4603      	mov	r3, r0
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d001      	beq.n	8004f98 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004f94:	2302      	movs	r3, #2
 8004f96:	e1fb      	b.n	8005390 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f9e:	2b01      	cmp	r3, #1
 8004fa0:	d101      	bne.n	8004fa6 <HAL_I2C_Mem_Read+0x56>
 8004fa2:	2302      	movs	r3, #2
 8004fa4:	e1f4      	b.n	8005390 <HAL_I2C_Mem_Read+0x440>
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	2201      	movs	r2, #1
 8004faa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f003 0301 	and.w	r3, r3, #1
 8004fb8:	2b01      	cmp	r3, #1
 8004fba:	d007      	beq.n	8004fcc <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	681a      	ldr	r2, [r3, #0]
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f042 0201 	orr.w	r2, r2, #1
 8004fca:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	681a      	ldr	r2, [r3, #0]
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004fda:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2222      	movs	r2, #34	; 0x22
 8004fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	2240      	movs	r2, #64	; 0x40
 8004fe8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ff6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004ffc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005002:	b29a      	uxth	r2, r3
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	4a5b      	ldr	r2, [pc, #364]	; (8005178 <HAL_I2C_Mem_Read+0x228>)
 800500c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800500e:	88f8      	ldrh	r0, [r7, #6]
 8005010:	893a      	ldrh	r2, [r7, #8]
 8005012:	8979      	ldrh	r1, [r7, #10]
 8005014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005016:	9301      	str	r3, [sp, #4]
 8005018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800501a:	9300      	str	r3, [sp, #0]
 800501c:	4603      	mov	r3, r0
 800501e:	68f8      	ldr	r0, [r7, #12]
 8005020:	f000 fa52 	bl	80054c8 <I2C_RequestMemoryRead>
 8005024:	4603      	mov	r3, r0
 8005026:	2b00      	cmp	r3, #0
 8005028:	d001      	beq.n	800502e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800502a:	2301      	movs	r3, #1
 800502c:	e1b0      	b.n	8005390 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005032:	2b00      	cmp	r3, #0
 8005034:	d113      	bne.n	800505e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005036:	2300      	movs	r3, #0
 8005038:	623b      	str	r3, [r7, #32]
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	695b      	ldr	r3, [r3, #20]
 8005040:	623b      	str	r3, [r7, #32]
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	699b      	ldr	r3, [r3, #24]
 8005048:	623b      	str	r3, [r7, #32]
 800504a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	681a      	ldr	r2, [r3, #0]
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800505a:	601a      	str	r2, [r3, #0]
 800505c:	e184      	b.n	8005368 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005062:	2b01      	cmp	r3, #1
 8005064:	d11b      	bne.n	800509e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	681a      	ldr	r2, [r3, #0]
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005074:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005076:	2300      	movs	r3, #0
 8005078:	61fb      	str	r3, [r7, #28]
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	695b      	ldr	r3, [r3, #20]
 8005080:	61fb      	str	r3, [r7, #28]
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	699b      	ldr	r3, [r3, #24]
 8005088:	61fb      	str	r3, [r7, #28]
 800508a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	681a      	ldr	r2, [r3, #0]
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800509a:	601a      	str	r2, [r3, #0]
 800509c:	e164      	b.n	8005368 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050a2:	2b02      	cmp	r3, #2
 80050a4:	d11b      	bne.n	80050de <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	681a      	ldr	r2, [r3, #0]
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050b4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	681a      	ldr	r2, [r3, #0]
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80050c4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050c6:	2300      	movs	r3, #0
 80050c8:	61bb      	str	r3, [r7, #24]
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	695b      	ldr	r3, [r3, #20]
 80050d0:	61bb      	str	r3, [r7, #24]
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	699b      	ldr	r3, [r3, #24]
 80050d8:	61bb      	str	r3, [r7, #24]
 80050da:	69bb      	ldr	r3, [r7, #24]
 80050dc:	e144      	b.n	8005368 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050de:	2300      	movs	r3, #0
 80050e0:	617b      	str	r3, [r7, #20]
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	695b      	ldr	r3, [r3, #20]
 80050e8:	617b      	str	r3, [r7, #20]
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	699b      	ldr	r3, [r3, #24]
 80050f0:	617b      	str	r3, [r7, #20]
 80050f2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80050f4:	e138      	b.n	8005368 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050fa:	2b03      	cmp	r3, #3
 80050fc:	f200 80f1 	bhi.w	80052e2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005104:	2b01      	cmp	r3, #1
 8005106:	d123      	bne.n	8005150 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005108:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800510a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800510c:	68f8      	ldr	r0, [r7, #12]
 800510e:	f000 fc1b 	bl	8005948 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005112:	4603      	mov	r3, r0
 8005114:	2b00      	cmp	r3, #0
 8005116:	d001      	beq.n	800511c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005118:	2301      	movs	r3, #1
 800511a:	e139      	b.n	8005390 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	691a      	ldr	r2, [r3, #16]
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005126:	b2d2      	uxtb	r2, r2
 8005128:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800512e:	1c5a      	adds	r2, r3, #1
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005138:	3b01      	subs	r3, #1
 800513a:	b29a      	uxth	r2, r3
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005144:	b29b      	uxth	r3, r3
 8005146:	3b01      	subs	r3, #1
 8005148:	b29a      	uxth	r2, r3
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800514e:	e10b      	b.n	8005368 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005154:	2b02      	cmp	r3, #2
 8005156:	d14e      	bne.n	80051f6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800515a:	9300      	str	r3, [sp, #0]
 800515c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800515e:	2200      	movs	r2, #0
 8005160:	4906      	ldr	r1, [pc, #24]	; (800517c <HAL_I2C_Mem_Read+0x22c>)
 8005162:	68f8      	ldr	r0, [r7, #12]
 8005164:	f000 fa98 	bl	8005698 <I2C_WaitOnFlagUntilTimeout>
 8005168:	4603      	mov	r3, r0
 800516a:	2b00      	cmp	r3, #0
 800516c:	d008      	beq.n	8005180 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800516e:	2301      	movs	r3, #1
 8005170:	e10e      	b.n	8005390 <HAL_I2C_Mem_Read+0x440>
 8005172:	bf00      	nop
 8005174:	00100002 	.word	0x00100002
 8005178:	ffff0000 	.word	0xffff0000
 800517c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	681a      	ldr	r2, [r3, #0]
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800518e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	691a      	ldr	r2, [r3, #16]
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800519a:	b2d2      	uxtb	r2, r2
 800519c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a2:	1c5a      	adds	r2, r3, #1
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051ac:	3b01      	subs	r3, #1
 80051ae:	b29a      	uxth	r2, r3
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051b8:	b29b      	uxth	r3, r3
 80051ba:	3b01      	subs	r3, #1
 80051bc:	b29a      	uxth	r2, r3
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	691a      	ldr	r2, [r3, #16]
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051cc:	b2d2      	uxtb	r2, r2
 80051ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d4:	1c5a      	adds	r2, r3, #1
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051de:	3b01      	subs	r3, #1
 80051e0:	b29a      	uxth	r2, r3
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051ea:	b29b      	uxth	r3, r3
 80051ec:	3b01      	subs	r3, #1
 80051ee:	b29a      	uxth	r2, r3
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80051f4:	e0b8      	b.n	8005368 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80051f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f8:	9300      	str	r3, [sp, #0]
 80051fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051fc:	2200      	movs	r2, #0
 80051fe:	4966      	ldr	r1, [pc, #408]	; (8005398 <HAL_I2C_Mem_Read+0x448>)
 8005200:	68f8      	ldr	r0, [r7, #12]
 8005202:	f000 fa49 	bl	8005698 <I2C_WaitOnFlagUntilTimeout>
 8005206:	4603      	mov	r3, r0
 8005208:	2b00      	cmp	r3, #0
 800520a:	d001      	beq.n	8005210 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800520c:	2301      	movs	r3, #1
 800520e:	e0bf      	b.n	8005390 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	681a      	ldr	r2, [r3, #0]
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800521e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	691a      	ldr	r2, [r3, #16]
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800522a:	b2d2      	uxtb	r2, r2
 800522c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005232:	1c5a      	adds	r2, r3, #1
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800523c:	3b01      	subs	r3, #1
 800523e:	b29a      	uxth	r2, r3
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005248:	b29b      	uxth	r3, r3
 800524a:	3b01      	subs	r3, #1
 800524c:	b29a      	uxth	r2, r3
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005254:	9300      	str	r3, [sp, #0]
 8005256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005258:	2200      	movs	r2, #0
 800525a:	494f      	ldr	r1, [pc, #316]	; (8005398 <HAL_I2C_Mem_Read+0x448>)
 800525c:	68f8      	ldr	r0, [r7, #12]
 800525e:	f000 fa1b 	bl	8005698 <I2C_WaitOnFlagUntilTimeout>
 8005262:	4603      	mov	r3, r0
 8005264:	2b00      	cmp	r3, #0
 8005266:	d001      	beq.n	800526c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005268:	2301      	movs	r3, #1
 800526a:	e091      	b.n	8005390 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	681a      	ldr	r2, [r3, #0]
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800527a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	691a      	ldr	r2, [r3, #16]
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005286:	b2d2      	uxtb	r2, r2
 8005288:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800528e:	1c5a      	adds	r2, r3, #1
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005298:	3b01      	subs	r3, #1
 800529a:	b29a      	uxth	r2, r3
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052a4:	b29b      	uxth	r3, r3
 80052a6:	3b01      	subs	r3, #1
 80052a8:	b29a      	uxth	r2, r3
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	691a      	ldr	r2, [r3, #16]
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052b8:	b2d2      	uxtb	r2, r2
 80052ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052c0:	1c5a      	adds	r2, r3, #1
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052ca:	3b01      	subs	r3, #1
 80052cc:	b29a      	uxth	r2, r3
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052d6:	b29b      	uxth	r3, r3
 80052d8:	3b01      	subs	r3, #1
 80052da:	b29a      	uxth	r2, r3
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	855a      	strh	r2, [r3, #42]	; 0x2a
 80052e0:	e042      	b.n	8005368 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80052e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052e4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80052e6:	68f8      	ldr	r0, [r7, #12]
 80052e8:	f000 fb2e 	bl	8005948 <I2C_WaitOnRXNEFlagUntilTimeout>
 80052ec:	4603      	mov	r3, r0
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d001      	beq.n	80052f6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80052f2:	2301      	movs	r3, #1
 80052f4:	e04c      	b.n	8005390 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	691a      	ldr	r2, [r3, #16]
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005300:	b2d2      	uxtb	r2, r2
 8005302:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005308:	1c5a      	adds	r2, r3, #1
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005312:	3b01      	subs	r3, #1
 8005314:	b29a      	uxth	r2, r3
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800531e:	b29b      	uxth	r3, r3
 8005320:	3b01      	subs	r3, #1
 8005322:	b29a      	uxth	r2, r3
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	695b      	ldr	r3, [r3, #20]
 800532e:	f003 0304 	and.w	r3, r3, #4
 8005332:	2b04      	cmp	r3, #4
 8005334:	d118      	bne.n	8005368 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	691a      	ldr	r2, [r3, #16]
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005340:	b2d2      	uxtb	r2, r2
 8005342:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005348:	1c5a      	adds	r2, r3, #1
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005352:	3b01      	subs	r3, #1
 8005354:	b29a      	uxth	r2, r3
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800535e:	b29b      	uxth	r3, r3
 8005360:	3b01      	subs	r3, #1
 8005362:	b29a      	uxth	r2, r3
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800536c:	2b00      	cmp	r3, #0
 800536e:	f47f aec2 	bne.w	80050f6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	2220      	movs	r2, #32
 8005376:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	2200      	movs	r2, #0
 800537e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	2200      	movs	r2, #0
 8005386:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800538a:	2300      	movs	r3, #0
 800538c:	e000      	b.n	8005390 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800538e:	2302      	movs	r3, #2
  }
}
 8005390:	4618      	mov	r0, r3
 8005392:	3728      	adds	r7, #40	; 0x28
 8005394:	46bd      	mov	sp, r7
 8005396:	bd80      	pop	{r7, pc}
 8005398:	00010004 	.word	0x00010004

0800539c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b088      	sub	sp, #32
 80053a0:	af02      	add	r7, sp, #8
 80053a2:	60f8      	str	r0, [r7, #12]
 80053a4:	4608      	mov	r0, r1
 80053a6:	4611      	mov	r1, r2
 80053a8:	461a      	mov	r2, r3
 80053aa:	4603      	mov	r3, r0
 80053ac:	817b      	strh	r3, [r7, #10]
 80053ae:	460b      	mov	r3, r1
 80053b0:	813b      	strh	r3, [r7, #8]
 80053b2:	4613      	mov	r3, r2
 80053b4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	681a      	ldr	r2, [r3, #0]
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80053c4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80053c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c8:	9300      	str	r3, [sp, #0]
 80053ca:	6a3b      	ldr	r3, [r7, #32]
 80053cc:	2200      	movs	r2, #0
 80053ce:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80053d2:	68f8      	ldr	r0, [r7, #12]
 80053d4:	f000 f960 	bl	8005698 <I2C_WaitOnFlagUntilTimeout>
 80053d8:	4603      	mov	r3, r0
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d00d      	beq.n	80053fa <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053ec:	d103      	bne.n	80053f6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80053f4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80053f6:	2303      	movs	r3, #3
 80053f8:	e05f      	b.n	80054ba <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80053fa:	897b      	ldrh	r3, [r7, #10]
 80053fc:	b2db      	uxtb	r3, r3
 80053fe:	461a      	mov	r2, r3
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005408:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800540a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800540c:	6a3a      	ldr	r2, [r7, #32]
 800540e:	492d      	ldr	r1, [pc, #180]	; (80054c4 <I2C_RequestMemoryWrite+0x128>)
 8005410:	68f8      	ldr	r0, [r7, #12]
 8005412:	f000 f998 	bl	8005746 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005416:	4603      	mov	r3, r0
 8005418:	2b00      	cmp	r3, #0
 800541a:	d001      	beq.n	8005420 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800541c:	2301      	movs	r3, #1
 800541e:	e04c      	b.n	80054ba <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005420:	2300      	movs	r3, #0
 8005422:	617b      	str	r3, [r7, #20]
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	695b      	ldr	r3, [r3, #20]
 800542a:	617b      	str	r3, [r7, #20]
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	699b      	ldr	r3, [r3, #24]
 8005432:	617b      	str	r3, [r7, #20]
 8005434:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005436:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005438:	6a39      	ldr	r1, [r7, #32]
 800543a:	68f8      	ldr	r0, [r7, #12]
 800543c:	f000 fa02 	bl	8005844 <I2C_WaitOnTXEFlagUntilTimeout>
 8005440:	4603      	mov	r3, r0
 8005442:	2b00      	cmp	r3, #0
 8005444:	d00d      	beq.n	8005462 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800544a:	2b04      	cmp	r3, #4
 800544c:	d107      	bne.n	800545e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	681a      	ldr	r2, [r3, #0]
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800545c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800545e:	2301      	movs	r3, #1
 8005460:	e02b      	b.n	80054ba <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005462:	88fb      	ldrh	r3, [r7, #6]
 8005464:	2b01      	cmp	r3, #1
 8005466:	d105      	bne.n	8005474 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005468:	893b      	ldrh	r3, [r7, #8]
 800546a:	b2da      	uxtb	r2, r3
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	611a      	str	r2, [r3, #16]
 8005472:	e021      	b.n	80054b8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005474:	893b      	ldrh	r3, [r7, #8]
 8005476:	0a1b      	lsrs	r3, r3, #8
 8005478:	b29b      	uxth	r3, r3
 800547a:	b2da      	uxtb	r2, r3
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005482:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005484:	6a39      	ldr	r1, [r7, #32]
 8005486:	68f8      	ldr	r0, [r7, #12]
 8005488:	f000 f9dc 	bl	8005844 <I2C_WaitOnTXEFlagUntilTimeout>
 800548c:	4603      	mov	r3, r0
 800548e:	2b00      	cmp	r3, #0
 8005490:	d00d      	beq.n	80054ae <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005496:	2b04      	cmp	r3, #4
 8005498:	d107      	bne.n	80054aa <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	681a      	ldr	r2, [r3, #0]
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054a8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80054aa:	2301      	movs	r3, #1
 80054ac:	e005      	b.n	80054ba <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80054ae:	893b      	ldrh	r3, [r7, #8]
 80054b0:	b2da      	uxtb	r2, r3
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80054b8:	2300      	movs	r3, #0
}
 80054ba:	4618      	mov	r0, r3
 80054bc:	3718      	adds	r7, #24
 80054be:	46bd      	mov	sp, r7
 80054c0:	bd80      	pop	{r7, pc}
 80054c2:	bf00      	nop
 80054c4:	00010002 	.word	0x00010002

080054c8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b088      	sub	sp, #32
 80054cc:	af02      	add	r7, sp, #8
 80054ce:	60f8      	str	r0, [r7, #12]
 80054d0:	4608      	mov	r0, r1
 80054d2:	4611      	mov	r1, r2
 80054d4:	461a      	mov	r2, r3
 80054d6:	4603      	mov	r3, r0
 80054d8:	817b      	strh	r3, [r7, #10]
 80054da:	460b      	mov	r3, r1
 80054dc:	813b      	strh	r3, [r7, #8]
 80054de:	4613      	mov	r3, r2
 80054e0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	681a      	ldr	r2, [r3, #0]
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80054f0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	681a      	ldr	r2, [r3, #0]
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005500:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005504:	9300      	str	r3, [sp, #0]
 8005506:	6a3b      	ldr	r3, [r7, #32]
 8005508:	2200      	movs	r2, #0
 800550a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800550e:	68f8      	ldr	r0, [r7, #12]
 8005510:	f000 f8c2 	bl	8005698 <I2C_WaitOnFlagUntilTimeout>
 8005514:	4603      	mov	r3, r0
 8005516:	2b00      	cmp	r3, #0
 8005518:	d00d      	beq.n	8005536 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005524:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005528:	d103      	bne.n	8005532 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005530:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005532:	2303      	movs	r3, #3
 8005534:	e0aa      	b.n	800568c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005536:	897b      	ldrh	r3, [r7, #10]
 8005538:	b2db      	uxtb	r3, r3
 800553a:	461a      	mov	r2, r3
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005544:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005548:	6a3a      	ldr	r2, [r7, #32]
 800554a:	4952      	ldr	r1, [pc, #328]	; (8005694 <I2C_RequestMemoryRead+0x1cc>)
 800554c:	68f8      	ldr	r0, [r7, #12]
 800554e:	f000 f8fa 	bl	8005746 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005552:	4603      	mov	r3, r0
 8005554:	2b00      	cmp	r3, #0
 8005556:	d001      	beq.n	800555c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005558:	2301      	movs	r3, #1
 800555a:	e097      	b.n	800568c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800555c:	2300      	movs	r3, #0
 800555e:	617b      	str	r3, [r7, #20]
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	695b      	ldr	r3, [r3, #20]
 8005566:	617b      	str	r3, [r7, #20]
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	699b      	ldr	r3, [r3, #24]
 800556e:	617b      	str	r3, [r7, #20]
 8005570:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005572:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005574:	6a39      	ldr	r1, [r7, #32]
 8005576:	68f8      	ldr	r0, [r7, #12]
 8005578:	f000 f964 	bl	8005844 <I2C_WaitOnTXEFlagUntilTimeout>
 800557c:	4603      	mov	r3, r0
 800557e:	2b00      	cmp	r3, #0
 8005580:	d00d      	beq.n	800559e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005586:	2b04      	cmp	r3, #4
 8005588:	d107      	bne.n	800559a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	681a      	ldr	r2, [r3, #0]
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005598:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800559a:	2301      	movs	r3, #1
 800559c:	e076      	b.n	800568c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800559e:	88fb      	ldrh	r3, [r7, #6]
 80055a0:	2b01      	cmp	r3, #1
 80055a2:	d105      	bne.n	80055b0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80055a4:	893b      	ldrh	r3, [r7, #8]
 80055a6:	b2da      	uxtb	r2, r3
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	611a      	str	r2, [r3, #16]
 80055ae:	e021      	b.n	80055f4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80055b0:	893b      	ldrh	r3, [r7, #8]
 80055b2:	0a1b      	lsrs	r3, r3, #8
 80055b4:	b29b      	uxth	r3, r3
 80055b6:	b2da      	uxtb	r2, r3
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80055be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055c0:	6a39      	ldr	r1, [r7, #32]
 80055c2:	68f8      	ldr	r0, [r7, #12]
 80055c4:	f000 f93e 	bl	8005844 <I2C_WaitOnTXEFlagUntilTimeout>
 80055c8:	4603      	mov	r3, r0
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d00d      	beq.n	80055ea <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055d2:	2b04      	cmp	r3, #4
 80055d4:	d107      	bne.n	80055e6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	681a      	ldr	r2, [r3, #0]
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055e4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80055e6:	2301      	movs	r3, #1
 80055e8:	e050      	b.n	800568c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80055ea:	893b      	ldrh	r3, [r7, #8]
 80055ec:	b2da      	uxtb	r2, r3
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80055f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055f6:	6a39      	ldr	r1, [r7, #32]
 80055f8:	68f8      	ldr	r0, [r7, #12]
 80055fa:	f000 f923 	bl	8005844 <I2C_WaitOnTXEFlagUntilTimeout>
 80055fe:	4603      	mov	r3, r0
 8005600:	2b00      	cmp	r3, #0
 8005602:	d00d      	beq.n	8005620 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005608:	2b04      	cmp	r3, #4
 800560a:	d107      	bne.n	800561c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	681a      	ldr	r2, [r3, #0]
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800561a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800561c:	2301      	movs	r3, #1
 800561e:	e035      	b.n	800568c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	681a      	ldr	r2, [r3, #0]
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800562e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005632:	9300      	str	r3, [sp, #0]
 8005634:	6a3b      	ldr	r3, [r7, #32]
 8005636:	2200      	movs	r2, #0
 8005638:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800563c:	68f8      	ldr	r0, [r7, #12]
 800563e:	f000 f82b 	bl	8005698 <I2C_WaitOnFlagUntilTimeout>
 8005642:	4603      	mov	r3, r0
 8005644:	2b00      	cmp	r3, #0
 8005646:	d00d      	beq.n	8005664 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005652:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005656:	d103      	bne.n	8005660 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800565e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005660:	2303      	movs	r3, #3
 8005662:	e013      	b.n	800568c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005664:	897b      	ldrh	r3, [r7, #10]
 8005666:	b2db      	uxtb	r3, r3
 8005668:	f043 0301 	orr.w	r3, r3, #1
 800566c:	b2da      	uxtb	r2, r3
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005676:	6a3a      	ldr	r2, [r7, #32]
 8005678:	4906      	ldr	r1, [pc, #24]	; (8005694 <I2C_RequestMemoryRead+0x1cc>)
 800567a:	68f8      	ldr	r0, [r7, #12]
 800567c:	f000 f863 	bl	8005746 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005680:	4603      	mov	r3, r0
 8005682:	2b00      	cmp	r3, #0
 8005684:	d001      	beq.n	800568a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005686:	2301      	movs	r3, #1
 8005688:	e000      	b.n	800568c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800568a:	2300      	movs	r3, #0
}
 800568c:	4618      	mov	r0, r3
 800568e:	3718      	adds	r7, #24
 8005690:	46bd      	mov	sp, r7
 8005692:	bd80      	pop	{r7, pc}
 8005694:	00010002 	.word	0x00010002

08005698 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b084      	sub	sp, #16
 800569c:	af00      	add	r7, sp, #0
 800569e:	60f8      	str	r0, [r7, #12]
 80056a0:	60b9      	str	r1, [r7, #8]
 80056a2:	603b      	str	r3, [r7, #0]
 80056a4:	4613      	mov	r3, r2
 80056a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80056a8:	e025      	b.n	80056f6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80056b0:	d021      	beq.n	80056f6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056b2:	f7fc fd9d 	bl	80021f0 <HAL_GetTick>
 80056b6:	4602      	mov	r2, r0
 80056b8:	69bb      	ldr	r3, [r7, #24]
 80056ba:	1ad3      	subs	r3, r2, r3
 80056bc:	683a      	ldr	r2, [r7, #0]
 80056be:	429a      	cmp	r2, r3
 80056c0:	d302      	bcc.n	80056c8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d116      	bne.n	80056f6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	2200      	movs	r2, #0
 80056cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	2220      	movs	r2, #32
 80056d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	2200      	movs	r2, #0
 80056da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056e2:	f043 0220 	orr.w	r2, r3, #32
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	2200      	movs	r2, #0
 80056ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80056f2:	2301      	movs	r3, #1
 80056f4:	e023      	b.n	800573e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	0c1b      	lsrs	r3, r3, #16
 80056fa:	b2db      	uxtb	r3, r3
 80056fc:	2b01      	cmp	r3, #1
 80056fe:	d10d      	bne.n	800571c <I2C_WaitOnFlagUntilTimeout+0x84>
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	695b      	ldr	r3, [r3, #20]
 8005706:	43da      	mvns	r2, r3
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	4013      	ands	r3, r2
 800570c:	b29b      	uxth	r3, r3
 800570e:	2b00      	cmp	r3, #0
 8005710:	bf0c      	ite	eq
 8005712:	2301      	moveq	r3, #1
 8005714:	2300      	movne	r3, #0
 8005716:	b2db      	uxtb	r3, r3
 8005718:	461a      	mov	r2, r3
 800571a:	e00c      	b.n	8005736 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	699b      	ldr	r3, [r3, #24]
 8005722:	43da      	mvns	r2, r3
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	4013      	ands	r3, r2
 8005728:	b29b      	uxth	r3, r3
 800572a:	2b00      	cmp	r3, #0
 800572c:	bf0c      	ite	eq
 800572e:	2301      	moveq	r3, #1
 8005730:	2300      	movne	r3, #0
 8005732:	b2db      	uxtb	r3, r3
 8005734:	461a      	mov	r2, r3
 8005736:	79fb      	ldrb	r3, [r7, #7]
 8005738:	429a      	cmp	r2, r3
 800573a:	d0b6      	beq.n	80056aa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800573c:	2300      	movs	r3, #0
}
 800573e:	4618      	mov	r0, r3
 8005740:	3710      	adds	r7, #16
 8005742:	46bd      	mov	sp, r7
 8005744:	bd80      	pop	{r7, pc}

08005746 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005746:	b580      	push	{r7, lr}
 8005748:	b084      	sub	sp, #16
 800574a:	af00      	add	r7, sp, #0
 800574c:	60f8      	str	r0, [r7, #12]
 800574e:	60b9      	str	r1, [r7, #8]
 8005750:	607a      	str	r2, [r7, #4]
 8005752:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005754:	e051      	b.n	80057fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	695b      	ldr	r3, [r3, #20]
 800575c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005760:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005764:	d123      	bne.n	80057ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	681a      	ldr	r2, [r3, #0]
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005774:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800577e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	2200      	movs	r2, #0
 8005784:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	2220      	movs	r2, #32
 800578a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	2200      	movs	r2, #0
 8005792:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800579a:	f043 0204 	orr.w	r2, r3, #4
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	2200      	movs	r2, #0
 80057a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80057aa:	2301      	movs	r3, #1
 80057ac:	e046      	b.n	800583c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80057b4:	d021      	beq.n	80057fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057b6:	f7fc fd1b 	bl	80021f0 <HAL_GetTick>
 80057ba:	4602      	mov	r2, r0
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	1ad3      	subs	r3, r2, r3
 80057c0:	687a      	ldr	r2, [r7, #4]
 80057c2:	429a      	cmp	r2, r3
 80057c4:	d302      	bcc.n	80057cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d116      	bne.n	80057fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	2200      	movs	r2, #0
 80057d0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	2220      	movs	r2, #32
 80057d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	2200      	movs	r2, #0
 80057de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057e6:	f043 0220 	orr.w	r2, r3, #32
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	2200      	movs	r2, #0
 80057f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80057f6:	2301      	movs	r3, #1
 80057f8:	e020      	b.n	800583c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	0c1b      	lsrs	r3, r3, #16
 80057fe:	b2db      	uxtb	r3, r3
 8005800:	2b01      	cmp	r3, #1
 8005802:	d10c      	bne.n	800581e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	695b      	ldr	r3, [r3, #20]
 800580a:	43da      	mvns	r2, r3
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	4013      	ands	r3, r2
 8005810:	b29b      	uxth	r3, r3
 8005812:	2b00      	cmp	r3, #0
 8005814:	bf14      	ite	ne
 8005816:	2301      	movne	r3, #1
 8005818:	2300      	moveq	r3, #0
 800581a:	b2db      	uxtb	r3, r3
 800581c:	e00b      	b.n	8005836 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	699b      	ldr	r3, [r3, #24]
 8005824:	43da      	mvns	r2, r3
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	4013      	ands	r3, r2
 800582a:	b29b      	uxth	r3, r3
 800582c:	2b00      	cmp	r3, #0
 800582e:	bf14      	ite	ne
 8005830:	2301      	movne	r3, #1
 8005832:	2300      	moveq	r3, #0
 8005834:	b2db      	uxtb	r3, r3
 8005836:	2b00      	cmp	r3, #0
 8005838:	d18d      	bne.n	8005756 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800583a:	2300      	movs	r3, #0
}
 800583c:	4618      	mov	r0, r3
 800583e:	3710      	adds	r7, #16
 8005840:	46bd      	mov	sp, r7
 8005842:	bd80      	pop	{r7, pc}

08005844 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b084      	sub	sp, #16
 8005848:	af00      	add	r7, sp, #0
 800584a:	60f8      	str	r0, [r7, #12]
 800584c:	60b9      	str	r1, [r7, #8]
 800584e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005850:	e02d      	b.n	80058ae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005852:	68f8      	ldr	r0, [r7, #12]
 8005854:	f000 f8ce 	bl	80059f4 <I2C_IsAcknowledgeFailed>
 8005858:	4603      	mov	r3, r0
 800585a:	2b00      	cmp	r3, #0
 800585c:	d001      	beq.n	8005862 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800585e:	2301      	movs	r3, #1
 8005860:	e02d      	b.n	80058be <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005862:	68bb      	ldr	r3, [r7, #8]
 8005864:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005868:	d021      	beq.n	80058ae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800586a:	f7fc fcc1 	bl	80021f0 <HAL_GetTick>
 800586e:	4602      	mov	r2, r0
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	1ad3      	subs	r3, r2, r3
 8005874:	68ba      	ldr	r2, [r7, #8]
 8005876:	429a      	cmp	r2, r3
 8005878:	d302      	bcc.n	8005880 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d116      	bne.n	80058ae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	2200      	movs	r2, #0
 8005884:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	2220      	movs	r2, #32
 800588a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	2200      	movs	r2, #0
 8005892:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800589a:	f043 0220 	orr.w	r2, r3, #32
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	2200      	movs	r2, #0
 80058a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80058aa:	2301      	movs	r3, #1
 80058ac:	e007      	b.n	80058be <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	695b      	ldr	r3, [r3, #20]
 80058b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058b8:	2b80      	cmp	r3, #128	; 0x80
 80058ba:	d1ca      	bne.n	8005852 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80058bc:	2300      	movs	r3, #0
}
 80058be:	4618      	mov	r0, r3
 80058c0:	3710      	adds	r7, #16
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bd80      	pop	{r7, pc}

080058c6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80058c6:	b580      	push	{r7, lr}
 80058c8:	b084      	sub	sp, #16
 80058ca:	af00      	add	r7, sp, #0
 80058cc:	60f8      	str	r0, [r7, #12]
 80058ce:	60b9      	str	r1, [r7, #8]
 80058d0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80058d2:	e02d      	b.n	8005930 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80058d4:	68f8      	ldr	r0, [r7, #12]
 80058d6:	f000 f88d 	bl	80059f4 <I2C_IsAcknowledgeFailed>
 80058da:	4603      	mov	r3, r0
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d001      	beq.n	80058e4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80058e0:	2301      	movs	r3, #1
 80058e2:	e02d      	b.n	8005940 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80058ea:	d021      	beq.n	8005930 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058ec:	f7fc fc80 	bl	80021f0 <HAL_GetTick>
 80058f0:	4602      	mov	r2, r0
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	1ad3      	subs	r3, r2, r3
 80058f6:	68ba      	ldr	r2, [r7, #8]
 80058f8:	429a      	cmp	r2, r3
 80058fa:	d302      	bcc.n	8005902 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d116      	bne.n	8005930 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	2200      	movs	r2, #0
 8005906:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	2220      	movs	r2, #32
 800590c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	2200      	movs	r2, #0
 8005914:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800591c:	f043 0220 	orr.w	r2, r3, #32
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	2200      	movs	r2, #0
 8005928:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800592c:	2301      	movs	r3, #1
 800592e:	e007      	b.n	8005940 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	695b      	ldr	r3, [r3, #20]
 8005936:	f003 0304 	and.w	r3, r3, #4
 800593a:	2b04      	cmp	r3, #4
 800593c:	d1ca      	bne.n	80058d4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800593e:	2300      	movs	r3, #0
}
 8005940:	4618      	mov	r0, r3
 8005942:	3710      	adds	r7, #16
 8005944:	46bd      	mov	sp, r7
 8005946:	bd80      	pop	{r7, pc}

08005948 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b084      	sub	sp, #16
 800594c:	af00      	add	r7, sp, #0
 800594e:	60f8      	str	r0, [r7, #12]
 8005950:	60b9      	str	r1, [r7, #8]
 8005952:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005954:	e042      	b.n	80059dc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	695b      	ldr	r3, [r3, #20]
 800595c:	f003 0310 	and.w	r3, r3, #16
 8005960:	2b10      	cmp	r3, #16
 8005962:	d119      	bne.n	8005998 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f06f 0210 	mvn.w	r2, #16
 800596c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	2200      	movs	r2, #0
 8005972:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	2220      	movs	r2, #32
 8005978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	2200      	movs	r2, #0
 8005980:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	2200      	movs	r2, #0
 8005990:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005994:	2301      	movs	r3, #1
 8005996:	e029      	b.n	80059ec <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005998:	f7fc fc2a 	bl	80021f0 <HAL_GetTick>
 800599c:	4602      	mov	r2, r0
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	1ad3      	subs	r3, r2, r3
 80059a2:	68ba      	ldr	r2, [r7, #8]
 80059a4:	429a      	cmp	r2, r3
 80059a6:	d302      	bcc.n	80059ae <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d116      	bne.n	80059dc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	2200      	movs	r2, #0
 80059b2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	2220      	movs	r2, #32
 80059b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	2200      	movs	r2, #0
 80059c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059c8:	f043 0220 	orr.w	r2, r3, #32
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	2200      	movs	r2, #0
 80059d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80059d8:	2301      	movs	r3, #1
 80059da:	e007      	b.n	80059ec <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	695b      	ldr	r3, [r3, #20]
 80059e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059e6:	2b40      	cmp	r3, #64	; 0x40
 80059e8:	d1b5      	bne.n	8005956 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80059ea:	2300      	movs	r3, #0
}
 80059ec:	4618      	mov	r0, r3
 80059ee:	3710      	adds	r7, #16
 80059f0:	46bd      	mov	sp, r7
 80059f2:	bd80      	pop	{r7, pc}

080059f4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80059f4:	b480      	push	{r7}
 80059f6:	b083      	sub	sp, #12
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	695b      	ldr	r3, [r3, #20]
 8005a02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a0a:	d11b      	bne.n	8005a44 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005a14:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2200      	movs	r2, #0
 8005a1a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2220      	movs	r2, #32
 8005a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2200      	movs	r2, #0
 8005a28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a30:	f043 0204 	orr.w	r2, r3, #4
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005a40:	2301      	movs	r3, #1
 8005a42:	e000      	b.n	8005a46 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005a44:	2300      	movs	r3, #0
}
 8005a46:	4618      	mov	r0, r3
 8005a48:	370c      	adds	r7, #12
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a50:	4770      	bx	lr
	...

08005a54 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b088      	sub	sp, #32
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d101      	bne.n	8005a66 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8005a62:	2301      	movs	r3, #1
 8005a64:	e128      	b.n	8005cb8 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a6c:	b2db      	uxtb	r3, r3
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d109      	bne.n	8005a86 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2200      	movs	r2, #0
 8005a76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	4a90      	ldr	r2, [pc, #576]	; (8005cc0 <HAL_I2S_Init+0x26c>)
 8005a7e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8005a80:	6878      	ldr	r0, [r7, #4]
 8005a82:	f7fb fb81 	bl	8001188 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2202      	movs	r2, #2
 8005a8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	69db      	ldr	r3, [r3, #28]
 8005a94:	687a      	ldr	r2, [r7, #4]
 8005a96:	6812      	ldr	r2, [r2, #0]
 8005a98:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005a9c:	f023 030f 	bic.w	r3, r3, #15
 8005aa0:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	2202      	movs	r2, #2
 8005aa8:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	695b      	ldr	r3, [r3, #20]
 8005aae:	2b02      	cmp	r3, #2
 8005ab0:	d060      	beq.n	8005b74 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	68db      	ldr	r3, [r3, #12]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d102      	bne.n	8005ac0 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8005aba:	2310      	movs	r3, #16
 8005abc:	617b      	str	r3, [r7, #20]
 8005abe:	e001      	b.n	8005ac4 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8005ac0:	2320      	movs	r3, #32
 8005ac2:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	689b      	ldr	r3, [r3, #8]
 8005ac8:	2b20      	cmp	r3, #32
 8005aca:	d802      	bhi.n	8005ad2 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8005acc:	697b      	ldr	r3, [r7, #20]
 8005ace:	005b      	lsls	r3, r3, #1
 8005ad0:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8005ad2:	2001      	movs	r0, #1
 8005ad4:	f001 f9b4 	bl	8006e40 <HAL_RCCEx_GetPeriphCLKFreq>
 8005ad8:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	691b      	ldr	r3, [r3, #16]
 8005ade:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ae2:	d125      	bne.n	8005b30 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	68db      	ldr	r3, [r3, #12]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d010      	beq.n	8005b0e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005aec:	697b      	ldr	r3, [r7, #20]
 8005aee:	009b      	lsls	r3, r3, #2
 8005af0:	68fa      	ldr	r2, [r7, #12]
 8005af2:	fbb2 f2f3 	udiv	r2, r2, r3
 8005af6:	4613      	mov	r3, r2
 8005af8:	009b      	lsls	r3, r3, #2
 8005afa:	4413      	add	r3, r2
 8005afc:	005b      	lsls	r3, r3, #1
 8005afe:	461a      	mov	r2, r3
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	695b      	ldr	r3, [r3, #20]
 8005b04:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b08:	3305      	adds	r3, #5
 8005b0a:	613b      	str	r3, [r7, #16]
 8005b0c:	e01f      	b.n	8005b4e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005b0e:	697b      	ldr	r3, [r7, #20]
 8005b10:	00db      	lsls	r3, r3, #3
 8005b12:	68fa      	ldr	r2, [r7, #12]
 8005b14:	fbb2 f2f3 	udiv	r2, r2, r3
 8005b18:	4613      	mov	r3, r2
 8005b1a:	009b      	lsls	r3, r3, #2
 8005b1c:	4413      	add	r3, r2
 8005b1e:	005b      	lsls	r3, r3, #1
 8005b20:	461a      	mov	r2, r3
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	695b      	ldr	r3, [r3, #20]
 8005b26:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b2a:	3305      	adds	r3, #5
 8005b2c:	613b      	str	r3, [r7, #16]
 8005b2e:	e00e      	b.n	8005b4e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005b30:	68fa      	ldr	r2, [r7, #12]
 8005b32:	697b      	ldr	r3, [r7, #20]
 8005b34:	fbb2 f2f3 	udiv	r2, r2, r3
 8005b38:	4613      	mov	r3, r2
 8005b3a:	009b      	lsls	r3, r3, #2
 8005b3c:	4413      	add	r3, r2
 8005b3e:	005b      	lsls	r3, r3, #1
 8005b40:	461a      	mov	r2, r3
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	695b      	ldr	r3, [r3, #20]
 8005b46:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b4a:	3305      	adds	r3, #5
 8005b4c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8005b4e:	693b      	ldr	r3, [r7, #16]
 8005b50:	4a5c      	ldr	r2, [pc, #368]	; (8005cc4 <HAL_I2S_Init+0x270>)
 8005b52:	fba2 2303 	umull	r2, r3, r2, r3
 8005b56:	08db      	lsrs	r3, r3, #3
 8005b58:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8005b5a:	693b      	ldr	r3, [r7, #16]
 8005b5c:	f003 0301 	and.w	r3, r3, #1
 8005b60:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8005b62:	693a      	ldr	r2, [r7, #16]
 8005b64:	69bb      	ldr	r3, [r7, #24]
 8005b66:	1ad3      	subs	r3, r2, r3
 8005b68:	085b      	lsrs	r3, r3, #1
 8005b6a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8005b6c:	69bb      	ldr	r3, [r7, #24]
 8005b6e:	021b      	lsls	r3, r3, #8
 8005b70:	61bb      	str	r3, [r7, #24]
 8005b72:	e003      	b.n	8005b7c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8005b74:	2302      	movs	r3, #2
 8005b76:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8005b78:	2300      	movs	r3, #0
 8005b7a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8005b7c:	69fb      	ldr	r3, [r7, #28]
 8005b7e:	2b01      	cmp	r3, #1
 8005b80:	d902      	bls.n	8005b88 <HAL_I2S_Init+0x134>
 8005b82:	69fb      	ldr	r3, [r7, #28]
 8005b84:	2bff      	cmp	r3, #255	; 0xff
 8005b86:	d907      	bls.n	8005b98 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b8c:	f043 0210 	orr.w	r2, r3, #16
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8005b94:	2301      	movs	r3, #1
 8005b96:	e08f      	b.n	8005cb8 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	691a      	ldr	r2, [r3, #16]
 8005b9c:	69bb      	ldr	r3, [r7, #24]
 8005b9e:	ea42 0103 	orr.w	r1, r2, r3
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	69fa      	ldr	r2, [r7, #28]
 8005ba8:	430a      	orrs	r2, r1
 8005baa:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	69db      	ldr	r3, [r3, #28]
 8005bb2:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005bb6:	f023 030f 	bic.w	r3, r3, #15
 8005bba:	687a      	ldr	r2, [r7, #4]
 8005bbc:	6851      	ldr	r1, [r2, #4]
 8005bbe:	687a      	ldr	r2, [r7, #4]
 8005bc0:	6892      	ldr	r2, [r2, #8]
 8005bc2:	4311      	orrs	r1, r2
 8005bc4:	687a      	ldr	r2, [r7, #4]
 8005bc6:	68d2      	ldr	r2, [r2, #12]
 8005bc8:	4311      	orrs	r1, r2
 8005bca:	687a      	ldr	r2, [r7, #4]
 8005bcc:	6992      	ldr	r2, [r2, #24]
 8005bce:	430a      	orrs	r2, r1
 8005bd0:	431a      	orrs	r2, r3
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005bda:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6a1b      	ldr	r3, [r3, #32]
 8005be0:	2b01      	cmp	r3, #1
 8005be2:	d161      	bne.n	8005ca8 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	4a38      	ldr	r2, [pc, #224]	; (8005cc8 <HAL_I2S_Init+0x274>)
 8005be8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	4a37      	ldr	r2, [pc, #220]	; (8005ccc <HAL_I2S_Init+0x278>)
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d101      	bne.n	8005bf8 <HAL_I2S_Init+0x1a4>
 8005bf4:	4b36      	ldr	r3, [pc, #216]	; (8005cd0 <HAL_I2S_Init+0x27c>)
 8005bf6:	e001      	b.n	8005bfc <HAL_I2S_Init+0x1a8>
 8005bf8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005bfc:	69db      	ldr	r3, [r3, #28]
 8005bfe:	687a      	ldr	r2, [r7, #4]
 8005c00:	6812      	ldr	r2, [r2, #0]
 8005c02:	4932      	ldr	r1, [pc, #200]	; (8005ccc <HAL_I2S_Init+0x278>)
 8005c04:	428a      	cmp	r2, r1
 8005c06:	d101      	bne.n	8005c0c <HAL_I2S_Init+0x1b8>
 8005c08:	4a31      	ldr	r2, [pc, #196]	; (8005cd0 <HAL_I2S_Init+0x27c>)
 8005c0a:	e001      	b.n	8005c10 <HAL_I2S_Init+0x1bc>
 8005c0c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8005c10:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005c14:	f023 030f 	bic.w	r3, r3, #15
 8005c18:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	4a2b      	ldr	r2, [pc, #172]	; (8005ccc <HAL_I2S_Init+0x278>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d101      	bne.n	8005c28 <HAL_I2S_Init+0x1d4>
 8005c24:	4b2a      	ldr	r3, [pc, #168]	; (8005cd0 <HAL_I2S_Init+0x27c>)
 8005c26:	e001      	b.n	8005c2c <HAL_I2S_Init+0x1d8>
 8005c28:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005c2c:	2202      	movs	r2, #2
 8005c2e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	4a25      	ldr	r2, [pc, #148]	; (8005ccc <HAL_I2S_Init+0x278>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d101      	bne.n	8005c3e <HAL_I2S_Init+0x1ea>
 8005c3a:	4b25      	ldr	r3, [pc, #148]	; (8005cd0 <HAL_I2S_Init+0x27c>)
 8005c3c:	e001      	b.n	8005c42 <HAL_I2S_Init+0x1ee>
 8005c3e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005c42:	69db      	ldr	r3, [r3, #28]
 8005c44:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	685b      	ldr	r3, [r3, #4]
 8005c4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c4e:	d003      	beq.n	8005c58 <HAL_I2S_Init+0x204>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	685b      	ldr	r3, [r3, #4]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d103      	bne.n	8005c60 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8005c58:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005c5c:	613b      	str	r3, [r7, #16]
 8005c5e:	e001      	b.n	8005c64 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8005c60:	2300      	movs	r3, #0
 8005c62:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8005c64:	693b      	ldr	r3, [r7, #16]
 8005c66:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	689b      	ldr	r3, [r3, #8]
 8005c6c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	68db      	ldr	r3, [r3, #12]
 8005c76:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005c78:	4313      	orrs	r3, r2
 8005c7a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	699b      	ldr	r3, [r3, #24]
 8005c80:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005c82:	4313      	orrs	r3, r2
 8005c84:	b29a      	uxth	r2, r3
 8005c86:	897b      	ldrh	r3, [r7, #10]
 8005c88:	4313      	orrs	r3, r2
 8005c8a:	b29b      	uxth	r3, r3
 8005c8c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005c90:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4a0d      	ldr	r2, [pc, #52]	; (8005ccc <HAL_I2S_Init+0x278>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d101      	bne.n	8005ca0 <HAL_I2S_Init+0x24c>
 8005c9c:	4b0c      	ldr	r3, [pc, #48]	; (8005cd0 <HAL_I2S_Init+0x27c>)
 8005c9e:	e001      	b.n	8005ca4 <HAL_I2S_Init+0x250>
 8005ca0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005ca4:	897a      	ldrh	r2, [r7, #10]
 8005ca6:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2200      	movs	r2, #0
 8005cac:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2201      	movs	r2, #1
 8005cb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8005cb6:	2300      	movs	r3, #0
}
 8005cb8:	4618      	mov	r0, r3
 8005cba:	3720      	adds	r7, #32
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	bd80      	pop	{r7, pc}
 8005cc0:	08005dcb 	.word	0x08005dcb
 8005cc4:	cccccccd 	.word	0xcccccccd
 8005cc8:	08005ee1 	.word	0x08005ee1
 8005ccc:	40003800 	.word	0x40003800
 8005cd0:	40003400 	.word	0x40003400

08005cd4 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	b083      	sub	sp, #12
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8005cdc:	bf00      	nop
 8005cde:	370c      	adds	r7, #12
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce6:	4770      	bx	lr

08005ce8 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005ce8:	b480      	push	{r7}
 8005cea:	b083      	sub	sp, #12
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8005cf0:	bf00      	nop
 8005cf2:	370c      	adds	r7, #12
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfa:	4770      	bx	lr

08005cfc <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8005cfc:	b480      	push	{r7}
 8005cfe:	b083      	sub	sp, #12
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8005d04:	bf00      	nop
 8005d06:	370c      	adds	r7, #12
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0e:	4770      	bx	lr

08005d10 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b082      	sub	sp, #8
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d1c:	881a      	ldrh	r2, [r3, #0]
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d28:	1c9a      	adds	r2, r3, #2
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d32:	b29b      	uxth	r3, r3
 8005d34:	3b01      	subs	r3, #1
 8005d36:	b29a      	uxth	r2, r3
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d40:	b29b      	uxth	r3, r3
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d10e      	bne.n	8005d64 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	685a      	ldr	r2, [r3, #4]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005d54:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2201      	movs	r2, #1
 8005d5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8005d5e:	6878      	ldr	r0, [r7, #4]
 8005d60:	f7ff ffb8 	bl	8005cd4 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005d64:	bf00      	nop
 8005d66:	3708      	adds	r7, #8
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	bd80      	pop	{r7, pc}

08005d6c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b082      	sub	sp, #8
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	68da      	ldr	r2, [r3, #12]
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d7e:	b292      	uxth	r2, r2
 8005d80:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d86:	1c9a      	adds	r2, r3, #2
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005d90:	b29b      	uxth	r3, r3
 8005d92:	3b01      	subs	r3, #1
 8005d94:	b29a      	uxth	r2, r3
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005d9e:	b29b      	uxth	r3, r3
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d10e      	bne.n	8005dc2 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	685a      	ldr	r2, [r3, #4]
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005db2:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2201      	movs	r2, #1
 8005db8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8005dbc:	6878      	ldr	r0, [r7, #4]
 8005dbe:	f7ff ff93 	bl	8005ce8 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005dc2:	bf00      	nop
 8005dc4:	3708      	adds	r7, #8
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	bd80      	pop	{r7, pc}

08005dca <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005dca:	b580      	push	{r7, lr}
 8005dcc:	b086      	sub	sp, #24
 8005dce:	af00      	add	r7, sp, #0
 8005dd0:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	689b      	ldr	r3, [r3, #8]
 8005dd8:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005de0:	b2db      	uxtb	r3, r3
 8005de2:	2b04      	cmp	r3, #4
 8005de4:	d13a      	bne.n	8005e5c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8005de6:	697b      	ldr	r3, [r7, #20]
 8005de8:	f003 0301 	and.w	r3, r3, #1
 8005dec:	2b01      	cmp	r3, #1
 8005dee:	d109      	bne.n	8005e04 <I2S_IRQHandler+0x3a>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	685b      	ldr	r3, [r3, #4]
 8005df6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dfa:	2b40      	cmp	r3, #64	; 0x40
 8005dfc:	d102      	bne.n	8005e04 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8005dfe:	6878      	ldr	r0, [r7, #4]
 8005e00:	f7ff ffb4 	bl	8005d6c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005e04:	697b      	ldr	r3, [r7, #20]
 8005e06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e0a:	2b40      	cmp	r3, #64	; 0x40
 8005e0c:	d126      	bne.n	8005e5c <I2S_IRQHandler+0x92>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	685b      	ldr	r3, [r3, #4]
 8005e14:	f003 0320 	and.w	r3, r3, #32
 8005e18:	2b20      	cmp	r3, #32
 8005e1a:	d11f      	bne.n	8005e5c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	685a      	ldr	r2, [r3, #4]
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005e2a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	613b      	str	r3, [r7, #16]
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	68db      	ldr	r3, [r3, #12]
 8005e36:	613b      	str	r3, [r7, #16]
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	689b      	ldr	r3, [r3, #8]
 8005e3e:	613b      	str	r3, [r7, #16]
 8005e40:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2201      	movs	r2, #1
 8005e46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e4e:	f043 0202 	orr.w	r2, r3, #2
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005e56:	6878      	ldr	r0, [r7, #4]
 8005e58:	f7ff ff50 	bl	8005cfc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e62:	b2db      	uxtb	r3, r3
 8005e64:	2b03      	cmp	r3, #3
 8005e66:	d136      	bne.n	8005ed6 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8005e68:	697b      	ldr	r3, [r7, #20]
 8005e6a:	f003 0302 	and.w	r3, r3, #2
 8005e6e:	2b02      	cmp	r3, #2
 8005e70:	d109      	bne.n	8005e86 <I2S_IRQHandler+0xbc>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	685b      	ldr	r3, [r3, #4]
 8005e78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e7c:	2b80      	cmp	r3, #128	; 0x80
 8005e7e:	d102      	bne.n	8005e86 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8005e80:	6878      	ldr	r0, [r7, #4]
 8005e82:	f7ff ff45 	bl	8005d10 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005e86:	697b      	ldr	r3, [r7, #20]
 8005e88:	f003 0308 	and.w	r3, r3, #8
 8005e8c:	2b08      	cmp	r3, #8
 8005e8e:	d122      	bne.n	8005ed6 <I2S_IRQHandler+0x10c>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	685b      	ldr	r3, [r3, #4]
 8005e96:	f003 0320 	and.w	r3, r3, #32
 8005e9a:	2b20      	cmp	r3, #32
 8005e9c:	d11b      	bne.n	8005ed6 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	685a      	ldr	r2, [r3, #4]
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005eac:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005eae:	2300      	movs	r3, #0
 8005eb0:	60fb      	str	r3, [r7, #12]
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	689b      	ldr	r3, [r3, #8]
 8005eb8:	60fb      	str	r3, [r7, #12]
 8005eba:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2201      	movs	r2, #1
 8005ec0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ec8:	f043 0204 	orr.w	r2, r3, #4
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005ed0:	6878      	ldr	r0, [r7, #4]
 8005ed2:	f7ff ff13 	bl	8005cfc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005ed6:	bf00      	nop
 8005ed8:	3718      	adds	r7, #24
 8005eda:	46bd      	mov	sp, r7
 8005edc:	bd80      	pop	{r7, pc}
	...

08005ee0 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b088      	sub	sp, #32
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	689b      	ldr	r3, [r3, #8]
 8005eee:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4aa2      	ldr	r2, [pc, #648]	; (8006180 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d101      	bne.n	8005efe <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8005efa:	4ba2      	ldr	r3, [pc, #648]	; (8006184 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005efc:	e001      	b.n	8005f02 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8005efe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005f02:	689b      	ldr	r3, [r3, #8]
 8005f04:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	685b      	ldr	r3, [r3, #4]
 8005f0c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	4a9b      	ldr	r2, [pc, #620]	; (8006180 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d101      	bne.n	8005f1c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8005f18:	4b9a      	ldr	r3, [pc, #616]	; (8006184 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005f1a:	e001      	b.n	8005f20 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8005f1c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005f20:	685b      	ldr	r3, [r3, #4]
 8005f22:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	685b      	ldr	r3, [r3, #4]
 8005f28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f2c:	d004      	beq.n	8005f38 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	685b      	ldr	r3, [r3, #4]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	f040 8099 	bne.w	800606a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8005f38:	69fb      	ldr	r3, [r7, #28]
 8005f3a:	f003 0302 	and.w	r3, r3, #2
 8005f3e:	2b02      	cmp	r3, #2
 8005f40:	d107      	bne.n	8005f52 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8005f42:	697b      	ldr	r3, [r7, #20]
 8005f44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d002      	beq.n	8005f52 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8005f4c:	6878      	ldr	r0, [r7, #4]
 8005f4e:	f000 f925 	bl	800619c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8005f52:	69bb      	ldr	r3, [r7, #24]
 8005f54:	f003 0301 	and.w	r3, r3, #1
 8005f58:	2b01      	cmp	r3, #1
 8005f5a:	d107      	bne.n	8005f6c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8005f5c:	693b      	ldr	r3, [r7, #16]
 8005f5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d002      	beq.n	8005f6c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8005f66:	6878      	ldr	r0, [r7, #4]
 8005f68:	f000 f9c8 	bl	80062fc <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005f6c:	69bb      	ldr	r3, [r7, #24]
 8005f6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f72:	2b40      	cmp	r3, #64	; 0x40
 8005f74:	d13a      	bne.n	8005fec <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8005f76:	693b      	ldr	r3, [r7, #16]
 8005f78:	f003 0320 	and.w	r3, r3, #32
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d035      	beq.n	8005fec <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	4a7e      	ldr	r2, [pc, #504]	; (8006180 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d101      	bne.n	8005f8e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8005f8a:	4b7e      	ldr	r3, [pc, #504]	; (8006184 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005f8c:	e001      	b.n	8005f92 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8005f8e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005f92:	685a      	ldr	r2, [r3, #4]
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4979      	ldr	r1, [pc, #484]	; (8006180 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005f9a:	428b      	cmp	r3, r1
 8005f9c:	d101      	bne.n	8005fa2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8005f9e:	4b79      	ldr	r3, [pc, #484]	; (8006184 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005fa0:	e001      	b.n	8005fa6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8005fa2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005fa6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005faa:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	685a      	ldr	r2, [r3, #4]
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005fba:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	60fb      	str	r3, [r7, #12]
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	68db      	ldr	r3, [r3, #12]
 8005fc6:	60fb      	str	r3, [r7, #12]
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	689b      	ldr	r3, [r3, #8]
 8005fce:	60fb      	str	r3, [r7, #12]
 8005fd0:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2201      	movs	r2, #1
 8005fd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fde:	f043 0202 	orr.w	r2, r3, #2
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005fe6:	6878      	ldr	r0, [r7, #4]
 8005fe8:	f7ff fe88 	bl	8005cfc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005fec:	69fb      	ldr	r3, [r7, #28]
 8005fee:	f003 0308 	and.w	r3, r3, #8
 8005ff2:	2b08      	cmp	r3, #8
 8005ff4:	f040 80be 	bne.w	8006174 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8005ff8:	697b      	ldr	r3, [r7, #20]
 8005ffa:	f003 0320 	and.w	r3, r3, #32
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	f000 80b8 	beq.w	8006174 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	685a      	ldr	r2, [r3, #4]
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006012:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4a59      	ldr	r2, [pc, #356]	; (8006180 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d101      	bne.n	8006022 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800601e:	4b59      	ldr	r3, [pc, #356]	; (8006184 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006020:	e001      	b.n	8006026 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8006022:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006026:	685a      	ldr	r2, [r3, #4]
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	4954      	ldr	r1, [pc, #336]	; (8006180 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800602e:	428b      	cmp	r3, r1
 8006030:	d101      	bne.n	8006036 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8006032:	4b54      	ldr	r3, [pc, #336]	; (8006184 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006034:	e001      	b.n	800603a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8006036:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800603a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800603e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8006040:	2300      	movs	r3, #0
 8006042:	60bb      	str	r3, [r7, #8]
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	689b      	ldr	r3, [r3, #8]
 800604a:	60bb      	str	r3, [r7, #8]
 800604c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2201      	movs	r2, #1
 8006052:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800605a:	f043 0204 	orr.w	r2, r3, #4
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006062:	6878      	ldr	r0, [r7, #4]
 8006064:	f7ff fe4a 	bl	8005cfc <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006068:	e084      	b.n	8006174 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800606a:	69bb      	ldr	r3, [r7, #24]
 800606c:	f003 0302 	and.w	r3, r3, #2
 8006070:	2b02      	cmp	r3, #2
 8006072:	d107      	bne.n	8006084 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8006074:	693b      	ldr	r3, [r7, #16]
 8006076:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800607a:	2b00      	cmp	r3, #0
 800607c:	d002      	beq.n	8006084 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	f000 f8be 	bl	8006200 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8006084:	69fb      	ldr	r3, [r7, #28]
 8006086:	f003 0301 	and.w	r3, r3, #1
 800608a:	2b01      	cmp	r3, #1
 800608c:	d107      	bne.n	800609e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800608e:	697b      	ldr	r3, [r7, #20]
 8006090:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006094:	2b00      	cmp	r3, #0
 8006096:	d002      	beq.n	800609e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8006098:	6878      	ldr	r0, [r7, #4]
 800609a:	f000 f8fd 	bl	8006298 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800609e:	69fb      	ldr	r3, [r7, #28]
 80060a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060a4:	2b40      	cmp	r3, #64	; 0x40
 80060a6:	d12f      	bne.n	8006108 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80060a8:	697b      	ldr	r3, [r7, #20]
 80060aa:	f003 0320 	and.w	r3, r3, #32
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d02a      	beq.n	8006108 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	685a      	ldr	r2, [r3, #4]
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80060c0:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	4a2e      	ldr	r2, [pc, #184]	; (8006180 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d101      	bne.n	80060d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80060cc:	4b2d      	ldr	r3, [pc, #180]	; (8006184 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80060ce:	e001      	b.n	80060d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80060d0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80060d4:	685a      	ldr	r2, [r3, #4]
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	4929      	ldr	r1, [pc, #164]	; (8006180 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80060dc:	428b      	cmp	r3, r1
 80060de:	d101      	bne.n	80060e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80060e0:	4b28      	ldr	r3, [pc, #160]	; (8006184 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80060e2:	e001      	b.n	80060e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80060e4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80060e8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80060ec:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2201      	movs	r2, #1
 80060f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060fa:	f043 0202 	orr.w	r2, r3, #2
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006102:	6878      	ldr	r0, [r7, #4]
 8006104:	f7ff fdfa 	bl	8005cfc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8006108:	69bb      	ldr	r3, [r7, #24]
 800610a:	f003 0308 	and.w	r3, r3, #8
 800610e:	2b08      	cmp	r3, #8
 8006110:	d131      	bne.n	8006176 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8006112:	693b      	ldr	r3, [r7, #16]
 8006114:	f003 0320 	and.w	r3, r3, #32
 8006118:	2b00      	cmp	r3, #0
 800611a:	d02c      	beq.n	8006176 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4a17      	ldr	r2, [pc, #92]	; (8006180 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d101      	bne.n	800612a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8006126:	4b17      	ldr	r3, [pc, #92]	; (8006184 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006128:	e001      	b.n	800612e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800612a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800612e:	685a      	ldr	r2, [r3, #4]
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	4912      	ldr	r1, [pc, #72]	; (8006180 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006136:	428b      	cmp	r3, r1
 8006138:	d101      	bne.n	800613e <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 800613a:	4b12      	ldr	r3, [pc, #72]	; (8006184 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800613c:	e001      	b.n	8006142 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 800613e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006142:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006146:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	685a      	ldr	r2, [r3, #4]
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006156:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2201      	movs	r2, #1
 800615c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006164:	f043 0204 	orr.w	r2, r3, #4
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800616c:	6878      	ldr	r0, [r7, #4]
 800616e:	f7ff fdc5 	bl	8005cfc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006172:	e000      	b.n	8006176 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006174:	bf00      	nop
}
 8006176:	bf00      	nop
 8006178:	3720      	adds	r7, #32
 800617a:	46bd      	mov	sp, r7
 800617c:	bd80      	pop	{r7, pc}
 800617e:	bf00      	nop
 8006180:	40003800 	.word	0x40003800
 8006184:	40003400 	.word	0x40003400

08006188 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006188:	b480      	push	{r7}
 800618a:	b083      	sub	sp, #12
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8006190:	bf00      	nop
 8006192:	370c      	adds	r7, #12
 8006194:	46bd      	mov	sp, r7
 8006196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619a:	4770      	bx	lr

0800619c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b082      	sub	sp, #8
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061a8:	1c99      	adds	r1, r3, #2
 80061aa:	687a      	ldr	r2, [r7, #4]
 80061ac:	6251      	str	r1, [r2, #36]	; 0x24
 80061ae:	881a      	ldrh	r2, [r3, #0]
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061ba:	b29b      	uxth	r3, r3
 80061bc:	3b01      	subs	r3, #1
 80061be:	b29a      	uxth	r2, r3
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061c8:	b29b      	uxth	r3, r3
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d113      	bne.n	80061f6 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	685a      	ldr	r2, [r3, #4]
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80061dc:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80061e2:	b29b      	uxth	r3, r3
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d106      	bne.n	80061f6 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2201      	movs	r2, #1
 80061ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80061f0:	6878      	ldr	r0, [r7, #4]
 80061f2:	f7ff ffc9 	bl	8006188 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80061f6:	bf00      	nop
 80061f8:	3708      	adds	r7, #8
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bd80      	pop	{r7, pc}
	...

08006200 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b082      	sub	sp, #8
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800620c:	1c99      	adds	r1, r3, #2
 800620e:	687a      	ldr	r2, [r7, #4]
 8006210:	6251      	str	r1, [r2, #36]	; 0x24
 8006212:	8819      	ldrh	r1, [r3, #0]
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4a1d      	ldr	r2, [pc, #116]	; (8006290 <I2SEx_TxISR_I2SExt+0x90>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d101      	bne.n	8006222 <I2SEx_TxISR_I2SExt+0x22>
 800621e:	4b1d      	ldr	r3, [pc, #116]	; (8006294 <I2SEx_TxISR_I2SExt+0x94>)
 8006220:	e001      	b.n	8006226 <I2SEx_TxISR_I2SExt+0x26>
 8006222:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006226:	460a      	mov	r2, r1
 8006228:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800622e:	b29b      	uxth	r3, r3
 8006230:	3b01      	subs	r3, #1
 8006232:	b29a      	uxth	r2, r3
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800623c:	b29b      	uxth	r3, r3
 800623e:	2b00      	cmp	r3, #0
 8006240:	d121      	bne.n	8006286 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4a12      	ldr	r2, [pc, #72]	; (8006290 <I2SEx_TxISR_I2SExt+0x90>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d101      	bne.n	8006250 <I2SEx_TxISR_I2SExt+0x50>
 800624c:	4b11      	ldr	r3, [pc, #68]	; (8006294 <I2SEx_TxISR_I2SExt+0x94>)
 800624e:	e001      	b.n	8006254 <I2SEx_TxISR_I2SExt+0x54>
 8006250:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006254:	685a      	ldr	r2, [r3, #4]
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	490d      	ldr	r1, [pc, #52]	; (8006290 <I2SEx_TxISR_I2SExt+0x90>)
 800625c:	428b      	cmp	r3, r1
 800625e:	d101      	bne.n	8006264 <I2SEx_TxISR_I2SExt+0x64>
 8006260:	4b0c      	ldr	r3, [pc, #48]	; (8006294 <I2SEx_TxISR_I2SExt+0x94>)
 8006262:	e001      	b.n	8006268 <I2SEx_TxISR_I2SExt+0x68>
 8006264:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006268:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800626c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006272:	b29b      	uxth	r3, r3
 8006274:	2b00      	cmp	r3, #0
 8006276:	d106      	bne.n	8006286 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2201      	movs	r2, #1
 800627c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006280:	6878      	ldr	r0, [r7, #4]
 8006282:	f7ff ff81 	bl	8006188 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006286:	bf00      	nop
 8006288:	3708      	adds	r7, #8
 800628a:	46bd      	mov	sp, r7
 800628c:	bd80      	pop	{r7, pc}
 800628e:	bf00      	nop
 8006290:	40003800 	.word	0x40003800
 8006294:	40003400 	.word	0x40003400

08006298 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b082      	sub	sp, #8
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	68d8      	ldr	r0, [r3, #12]
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062aa:	1c99      	adds	r1, r3, #2
 80062ac:	687a      	ldr	r2, [r7, #4]
 80062ae:	62d1      	str	r1, [r2, #44]	; 0x2c
 80062b0:	b282      	uxth	r2, r0
 80062b2:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80062b8:	b29b      	uxth	r3, r3
 80062ba:	3b01      	subs	r3, #1
 80062bc:	b29a      	uxth	r2, r3
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80062c6:	b29b      	uxth	r3, r3
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d113      	bne.n	80062f4 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	685a      	ldr	r2, [r3, #4]
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80062da:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062e0:	b29b      	uxth	r3, r3
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d106      	bne.n	80062f4 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2201      	movs	r2, #1
 80062ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	f7ff ff4a 	bl	8006188 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80062f4:	bf00      	nop
 80062f6:	3708      	adds	r7, #8
 80062f8:	46bd      	mov	sp, r7
 80062fa:	bd80      	pop	{r7, pc}

080062fc <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b082      	sub	sp, #8
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	4a20      	ldr	r2, [pc, #128]	; (800638c <I2SEx_RxISR_I2SExt+0x90>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d101      	bne.n	8006312 <I2SEx_RxISR_I2SExt+0x16>
 800630e:	4b20      	ldr	r3, [pc, #128]	; (8006390 <I2SEx_RxISR_I2SExt+0x94>)
 8006310:	e001      	b.n	8006316 <I2SEx_RxISR_I2SExt+0x1a>
 8006312:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006316:	68d8      	ldr	r0, [r3, #12]
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800631c:	1c99      	adds	r1, r3, #2
 800631e:	687a      	ldr	r2, [r7, #4]
 8006320:	62d1      	str	r1, [r2, #44]	; 0x2c
 8006322:	b282      	uxth	r2, r0
 8006324:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800632a:	b29b      	uxth	r3, r3
 800632c:	3b01      	subs	r3, #1
 800632e:	b29a      	uxth	r2, r3
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006338:	b29b      	uxth	r3, r3
 800633a:	2b00      	cmp	r3, #0
 800633c:	d121      	bne.n	8006382 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	4a12      	ldr	r2, [pc, #72]	; (800638c <I2SEx_RxISR_I2SExt+0x90>)
 8006344:	4293      	cmp	r3, r2
 8006346:	d101      	bne.n	800634c <I2SEx_RxISR_I2SExt+0x50>
 8006348:	4b11      	ldr	r3, [pc, #68]	; (8006390 <I2SEx_RxISR_I2SExt+0x94>)
 800634a:	e001      	b.n	8006350 <I2SEx_RxISR_I2SExt+0x54>
 800634c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006350:	685a      	ldr	r2, [r3, #4]
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	490d      	ldr	r1, [pc, #52]	; (800638c <I2SEx_RxISR_I2SExt+0x90>)
 8006358:	428b      	cmp	r3, r1
 800635a:	d101      	bne.n	8006360 <I2SEx_RxISR_I2SExt+0x64>
 800635c:	4b0c      	ldr	r3, [pc, #48]	; (8006390 <I2SEx_RxISR_I2SExt+0x94>)
 800635e:	e001      	b.n	8006364 <I2SEx_RxISR_I2SExt+0x68>
 8006360:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006364:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006368:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800636e:	b29b      	uxth	r3, r3
 8006370:	2b00      	cmp	r3, #0
 8006372:	d106      	bne.n	8006382 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2201      	movs	r2, #1
 8006378:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800637c:	6878      	ldr	r0, [r7, #4]
 800637e:	f7ff ff03 	bl	8006188 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006382:	bf00      	nop
 8006384:	3708      	adds	r7, #8
 8006386:	46bd      	mov	sp, r7
 8006388:	bd80      	pop	{r7, pc}
 800638a:	bf00      	nop
 800638c:	40003800 	.word	0x40003800
 8006390:	40003400 	.word	0x40003400

08006394 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b086      	sub	sp, #24
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d101      	bne.n	80063a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80063a2:	2301      	movs	r3, #1
 80063a4:	e264      	b.n	8006870 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f003 0301 	and.w	r3, r3, #1
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d075      	beq.n	800649e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80063b2:	4ba3      	ldr	r3, [pc, #652]	; (8006640 <HAL_RCC_OscConfig+0x2ac>)
 80063b4:	689b      	ldr	r3, [r3, #8]
 80063b6:	f003 030c 	and.w	r3, r3, #12
 80063ba:	2b04      	cmp	r3, #4
 80063bc:	d00c      	beq.n	80063d8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80063be:	4ba0      	ldr	r3, [pc, #640]	; (8006640 <HAL_RCC_OscConfig+0x2ac>)
 80063c0:	689b      	ldr	r3, [r3, #8]
 80063c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80063c6:	2b08      	cmp	r3, #8
 80063c8:	d112      	bne.n	80063f0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80063ca:	4b9d      	ldr	r3, [pc, #628]	; (8006640 <HAL_RCC_OscConfig+0x2ac>)
 80063cc:	685b      	ldr	r3, [r3, #4]
 80063ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80063d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80063d6:	d10b      	bne.n	80063f0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80063d8:	4b99      	ldr	r3, [pc, #612]	; (8006640 <HAL_RCC_OscConfig+0x2ac>)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d05b      	beq.n	800649c <HAL_RCC_OscConfig+0x108>
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	685b      	ldr	r3, [r3, #4]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d157      	bne.n	800649c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80063ec:	2301      	movs	r3, #1
 80063ee:	e23f      	b.n	8006870 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	685b      	ldr	r3, [r3, #4]
 80063f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063f8:	d106      	bne.n	8006408 <HAL_RCC_OscConfig+0x74>
 80063fa:	4b91      	ldr	r3, [pc, #580]	; (8006640 <HAL_RCC_OscConfig+0x2ac>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4a90      	ldr	r2, [pc, #576]	; (8006640 <HAL_RCC_OscConfig+0x2ac>)
 8006400:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006404:	6013      	str	r3, [r2, #0]
 8006406:	e01d      	b.n	8006444 <HAL_RCC_OscConfig+0xb0>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	685b      	ldr	r3, [r3, #4]
 800640c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006410:	d10c      	bne.n	800642c <HAL_RCC_OscConfig+0x98>
 8006412:	4b8b      	ldr	r3, [pc, #556]	; (8006640 <HAL_RCC_OscConfig+0x2ac>)
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	4a8a      	ldr	r2, [pc, #552]	; (8006640 <HAL_RCC_OscConfig+0x2ac>)
 8006418:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800641c:	6013      	str	r3, [r2, #0]
 800641e:	4b88      	ldr	r3, [pc, #544]	; (8006640 <HAL_RCC_OscConfig+0x2ac>)
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4a87      	ldr	r2, [pc, #540]	; (8006640 <HAL_RCC_OscConfig+0x2ac>)
 8006424:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006428:	6013      	str	r3, [r2, #0]
 800642a:	e00b      	b.n	8006444 <HAL_RCC_OscConfig+0xb0>
 800642c:	4b84      	ldr	r3, [pc, #528]	; (8006640 <HAL_RCC_OscConfig+0x2ac>)
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	4a83      	ldr	r2, [pc, #524]	; (8006640 <HAL_RCC_OscConfig+0x2ac>)
 8006432:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006436:	6013      	str	r3, [r2, #0]
 8006438:	4b81      	ldr	r3, [pc, #516]	; (8006640 <HAL_RCC_OscConfig+0x2ac>)
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	4a80      	ldr	r2, [pc, #512]	; (8006640 <HAL_RCC_OscConfig+0x2ac>)
 800643e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006442:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	685b      	ldr	r3, [r3, #4]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d013      	beq.n	8006474 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800644c:	f7fb fed0 	bl	80021f0 <HAL_GetTick>
 8006450:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006452:	e008      	b.n	8006466 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006454:	f7fb fecc 	bl	80021f0 <HAL_GetTick>
 8006458:	4602      	mov	r2, r0
 800645a:	693b      	ldr	r3, [r7, #16]
 800645c:	1ad3      	subs	r3, r2, r3
 800645e:	2b64      	cmp	r3, #100	; 0x64
 8006460:	d901      	bls.n	8006466 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006462:	2303      	movs	r3, #3
 8006464:	e204      	b.n	8006870 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006466:	4b76      	ldr	r3, [pc, #472]	; (8006640 <HAL_RCC_OscConfig+0x2ac>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800646e:	2b00      	cmp	r3, #0
 8006470:	d0f0      	beq.n	8006454 <HAL_RCC_OscConfig+0xc0>
 8006472:	e014      	b.n	800649e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006474:	f7fb febc 	bl	80021f0 <HAL_GetTick>
 8006478:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800647a:	e008      	b.n	800648e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800647c:	f7fb feb8 	bl	80021f0 <HAL_GetTick>
 8006480:	4602      	mov	r2, r0
 8006482:	693b      	ldr	r3, [r7, #16]
 8006484:	1ad3      	subs	r3, r2, r3
 8006486:	2b64      	cmp	r3, #100	; 0x64
 8006488:	d901      	bls.n	800648e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800648a:	2303      	movs	r3, #3
 800648c:	e1f0      	b.n	8006870 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800648e:	4b6c      	ldr	r3, [pc, #432]	; (8006640 <HAL_RCC_OscConfig+0x2ac>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006496:	2b00      	cmp	r3, #0
 8006498:	d1f0      	bne.n	800647c <HAL_RCC_OscConfig+0xe8>
 800649a:	e000      	b.n	800649e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800649c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f003 0302 	and.w	r3, r3, #2
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d063      	beq.n	8006572 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80064aa:	4b65      	ldr	r3, [pc, #404]	; (8006640 <HAL_RCC_OscConfig+0x2ac>)
 80064ac:	689b      	ldr	r3, [r3, #8]
 80064ae:	f003 030c 	and.w	r3, r3, #12
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d00b      	beq.n	80064ce <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80064b6:	4b62      	ldr	r3, [pc, #392]	; (8006640 <HAL_RCC_OscConfig+0x2ac>)
 80064b8:	689b      	ldr	r3, [r3, #8]
 80064ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80064be:	2b08      	cmp	r3, #8
 80064c0:	d11c      	bne.n	80064fc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80064c2:	4b5f      	ldr	r3, [pc, #380]	; (8006640 <HAL_RCC_OscConfig+0x2ac>)
 80064c4:	685b      	ldr	r3, [r3, #4]
 80064c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d116      	bne.n	80064fc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80064ce:	4b5c      	ldr	r3, [pc, #368]	; (8006640 <HAL_RCC_OscConfig+0x2ac>)
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f003 0302 	and.w	r3, r3, #2
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d005      	beq.n	80064e6 <HAL_RCC_OscConfig+0x152>
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	68db      	ldr	r3, [r3, #12]
 80064de:	2b01      	cmp	r3, #1
 80064e0:	d001      	beq.n	80064e6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80064e2:	2301      	movs	r3, #1
 80064e4:	e1c4      	b.n	8006870 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064e6:	4b56      	ldr	r3, [pc, #344]	; (8006640 <HAL_RCC_OscConfig+0x2ac>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	691b      	ldr	r3, [r3, #16]
 80064f2:	00db      	lsls	r3, r3, #3
 80064f4:	4952      	ldr	r1, [pc, #328]	; (8006640 <HAL_RCC_OscConfig+0x2ac>)
 80064f6:	4313      	orrs	r3, r2
 80064f8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80064fa:	e03a      	b.n	8006572 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	68db      	ldr	r3, [r3, #12]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d020      	beq.n	8006546 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006504:	4b4f      	ldr	r3, [pc, #316]	; (8006644 <HAL_RCC_OscConfig+0x2b0>)
 8006506:	2201      	movs	r2, #1
 8006508:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800650a:	f7fb fe71 	bl	80021f0 <HAL_GetTick>
 800650e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006510:	e008      	b.n	8006524 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006512:	f7fb fe6d 	bl	80021f0 <HAL_GetTick>
 8006516:	4602      	mov	r2, r0
 8006518:	693b      	ldr	r3, [r7, #16]
 800651a:	1ad3      	subs	r3, r2, r3
 800651c:	2b02      	cmp	r3, #2
 800651e:	d901      	bls.n	8006524 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006520:	2303      	movs	r3, #3
 8006522:	e1a5      	b.n	8006870 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006524:	4b46      	ldr	r3, [pc, #280]	; (8006640 <HAL_RCC_OscConfig+0x2ac>)
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f003 0302 	and.w	r3, r3, #2
 800652c:	2b00      	cmp	r3, #0
 800652e:	d0f0      	beq.n	8006512 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006530:	4b43      	ldr	r3, [pc, #268]	; (8006640 <HAL_RCC_OscConfig+0x2ac>)
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	691b      	ldr	r3, [r3, #16]
 800653c:	00db      	lsls	r3, r3, #3
 800653e:	4940      	ldr	r1, [pc, #256]	; (8006640 <HAL_RCC_OscConfig+0x2ac>)
 8006540:	4313      	orrs	r3, r2
 8006542:	600b      	str	r3, [r1, #0]
 8006544:	e015      	b.n	8006572 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006546:	4b3f      	ldr	r3, [pc, #252]	; (8006644 <HAL_RCC_OscConfig+0x2b0>)
 8006548:	2200      	movs	r2, #0
 800654a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800654c:	f7fb fe50 	bl	80021f0 <HAL_GetTick>
 8006550:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006552:	e008      	b.n	8006566 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006554:	f7fb fe4c 	bl	80021f0 <HAL_GetTick>
 8006558:	4602      	mov	r2, r0
 800655a:	693b      	ldr	r3, [r7, #16]
 800655c:	1ad3      	subs	r3, r2, r3
 800655e:	2b02      	cmp	r3, #2
 8006560:	d901      	bls.n	8006566 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006562:	2303      	movs	r3, #3
 8006564:	e184      	b.n	8006870 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006566:	4b36      	ldr	r3, [pc, #216]	; (8006640 <HAL_RCC_OscConfig+0x2ac>)
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f003 0302 	and.w	r3, r3, #2
 800656e:	2b00      	cmp	r3, #0
 8006570:	d1f0      	bne.n	8006554 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f003 0308 	and.w	r3, r3, #8
 800657a:	2b00      	cmp	r3, #0
 800657c:	d030      	beq.n	80065e0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	695b      	ldr	r3, [r3, #20]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d016      	beq.n	80065b4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006586:	4b30      	ldr	r3, [pc, #192]	; (8006648 <HAL_RCC_OscConfig+0x2b4>)
 8006588:	2201      	movs	r2, #1
 800658a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800658c:	f7fb fe30 	bl	80021f0 <HAL_GetTick>
 8006590:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006592:	e008      	b.n	80065a6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006594:	f7fb fe2c 	bl	80021f0 <HAL_GetTick>
 8006598:	4602      	mov	r2, r0
 800659a:	693b      	ldr	r3, [r7, #16]
 800659c:	1ad3      	subs	r3, r2, r3
 800659e:	2b02      	cmp	r3, #2
 80065a0:	d901      	bls.n	80065a6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80065a2:	2303      	movs	r3, #3
 80065a4:	e164      	b.n	8006870 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80065a6:	4b26      	ldr	r3, [pc, #152]	; (8006640 <HAL_RCC_OscConfig+0x2ac>)
 80065a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065aa:	f003 0302 	and.w	r3, r3, #2
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d0f0      	beq.n	8006594 <HAL_RCC_OscConfig+0x200>
 80065b2:	e015      	b.n	80065e0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80065b4:	4b24      	ldr	r3, [pc, #144]	; (8006648 <HAL_RCC_OscConfig+0x2b4>)
 80065b6:	2200      	movs	r2, #0
 80065b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80065ba:	f7fb fe19 	bl	80021f0 <HAL_GetTick>
 80065be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80065c0:	e008      	b.n	80065d4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80065c2:	f7fb fe15 	bl	80021f0 <HAL_GetTick>
 80065c6:	4602      	mov	r2, r0
 80065c8:	693b      	ldr	r3, [r7, #16]
 80065ca:	1ad3      	subs	r3, r2, r3
 80065cc:	2b02      	cmp	r3, #2
 80065ce:	d901      	bls.n	80065d4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80065d0:	2303      	movs	r3, #3
 80065d2:	e14d      	b.n	8006870 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80065d4:	4b1a      	ldr	r3, [pc, #104]	; (8006640 <HAL_RCC_OscConfig+0x2ac>)
 80065d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065d8:	f003 0302 	and.w	r3, r3, #2
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d1f0      	bne.n	80065c2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f003 0304 	and.w	r3, r3, #4
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	f000 80a0 	beq.w	800672e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80065ee:	2300      	movs	r3, #0
 80065f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80065f2:	4b13      	ldr	r3, [pc, #76]	; (8006640 <HAL_RCC_OscConfig+0x2ac>)
 80065f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d10f      	bne.n	800661e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80065fe:	2300      	movs	r3, #0
 8006600:	60bb      	str	r3, [r7, #8]
 8006602:	4b0f      	ldr	r3, [pc, #60]	; (8006640 <HAL_RCC_OscConfig+0x2ac>)
 8006604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006606:	4a0e      	ldr	r2, [pc, #56]	; (8006640 <HAL_RCC_OscConfig+0x2ac>)
 8006608:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800660c:	6413      	str	r3, [r2, #64]	; 0x40
 800660e:	4b0c      	ldr	r3, [pc, #48]	; (8006640 <HAL_RCC_OscConfig+0x2ac>)
 8006610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006612:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006616:	60bb      	str	r3, [r7, #8]
 8006618:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800661a:	2301      	movs	r3, #1
 800661c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800661e:	4b0b      	ldr	r3, [pc, #44]	; (800664c <HAL_RCC_OscConfig+0x2b8>)
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006626:	2b00      	cmp	r3, #0
 8006628:	d121      	bne.n	800666e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800662a:	4b08      	ldr	r3, [pc, #32]	; (800664c <HAL_RCC_OscConfig+0x2b8>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	4a07      	ldr	r2, [pc, #28]	; (800664c <HAL_RCC_OscConfig+0x2b8>)
 8006630:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006634:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006636:	f7fb fddb 	bl	80021f0 <HAL_GetTick>
 800663a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800663c:	e011      	b.n	8006662 <HAL_RCC_OscConfig+0x2ce>
 800663e:	bf00      	nop
 8006640:	40023800 	.word	0x40023800
 8006644:	42470000 	.word	0x42470000
 8006648:	42470e80 	.word	0x42470e80
 800664c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006650:	f7fb fdce 	bl	80021f0 <HAL_GetTick>
 8006654:	4602      	mov	r2, r0
 8006656:	693b      	ldr	r3, [r7, #16]
 8006658:	1ad3      	subs	r3, r2, r3
 800665a:	2b02      	cmp	r3, #2
 800665c:	d901      	bls.n	8006662 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800665e:	2303      	movs	r3, #3
 8006660:	e106      	b.n	8006870 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006662:	4b85      	ldr	r3, [pc, #532]	; (8006878 <HAL_RCC_OscConfig+0x4e4>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800666a:	2b00      	cmp	r3, #0
 800666c:	d0f0      	beq.n	8006650 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	689b      	ldr	r3, [r3, #8]
 8006672:	2b01      	cmp	r3, #1
 8006674:	d106      	bne.n	8006684 <HAL_RCC_OscConfig+0x2f0>
 8006676:	4b81      	ldr	r3, [pc, #516]	; (800687c <HAL_RCC_OscConfig+0x4e8>)
 8006678:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800667a:	4a80      	ldr	r2, [pc, #512]	; (800687c <HAL_RCC_OscConfig+0x4e8>)
 800667c:	f043 0301 	orr.w	r3, r3, #1
 8006680:	6713      	str	r3, [r2, #112]	; 0x70
 8006682:	e01c      	b.n	80066be <HAL_RCC_OscConfig+0x32a>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	689b      	ldr	r3, [r3, #8]
 8006688:	2b05      	cmp	r3, #5
 800668a:	d10c      	bne.n	80066a6 <HAL_RCC_OscConfig+0x312>
 800668c:	4b7b      	ldr	r3, [pc, #492]	; (800687c <HAL_RCC_OscConfig+0x4e8>)
 800668e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006690:	4a7a      	ldr	r2, [pc, #488]	; (800687c <HAL_RCC_OscConfig+0x4e8>)
 8006692:	f043 0304 	orr.w	r3, r3, #4
 8006696:	6713      	str	r3, [r2, #112]	; 0x70
 8006698:	4b78      	ldr	r3, [pc, #480]	; (800687c <HAL_RCC_OscConfig+0x4e8>)
 800669a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800669c:	4a77      	ldr	r2, [pc, #476]	; (800687c <HAL_RCC_OscConfig+0x4e8>)
 800669e:	f043 0301 	orr.w	r3, r3, #1
 80066a2:	6713      	str	r3, [r2, #112]	; 0x70
 80066a4:	e00b      	b.n	80066be <HAL_RCC_OscConfig+0x32a>
 80066a6:	4b75      	ldr	r3, [pc, #468]	; (800687c <HAL_RCC_OscConfig+0x4e8>)
 80066a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066aa:	4a74      	ldr	r2, [pc, #464]	; (800687c <HAL_RCC_OscConfig+0x4e8>)
 80066ac:	f023 0301 	bic.w	r3, r3, #1
 80066b0:	6713      	str	r3, [r2, #112]	; 0x70
 80066b2:	4b72      	ldr	r3, [pc, #456]	; (800687c <HAL_RCC_OscConfig+0x4e8>)
 80066b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066b6:	4a71      	ldr	r2, [pc, #452]	; (800687c <HAL_RCC_OscConfig+0x4e8>)
 80066b8:	f023 0304 	bic.w	r3, r3, #4
 80066bc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	689b      	ldr	r3, [r3, #8]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d015      	beq.n	80066f2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066c6:	f7fb fd93 	bl	80021f0 <HAL_GetTick>
 80066ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066cc:	e00a      	b.n	80066e4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80066ce:	f7fb fd8f 	bl	80021f0 <HAL_GetTick>
 80066d2:	4602      	mov	r2, r0
 80066d4:	693b      	ldr	r3, [r7, #16]
 80066d6:	1ad3      	subs	r3, r2, r3
 80066d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80066dc:	4293      	cmp	r3, r2
 80066de:	d901      	bls.n	80066e4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80066e0:	2303      	movs	r3, #3
 80066e2:	e0c5      	b.n	8006870 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066e4:	4b65      	ldr	r3, [pc, #404]	; (800687c <HAL_RCC_OscConfig+0x4e8>)
 80066e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066e8:	f003 0302 	and.w	r3, r3, #2
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d0ee      	beq.n	80066ce <HAL_RCC_OscConfig+0x33a>
 80066f0:	e014      	b.n	800671c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80066f2:	f7fb fd7d 	bl	80021f0 <HAL_GetTick>
 80066f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80066f8:	e00a      	b.n	8006710 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80066fa:	f7fb fd79 	bl	80021f0 <HAL_GetTick>
 80066fe:	4602      	mov	r2, r0
 8006700:	693b      	ldr	r3, [r7, #16]
 8006702:	1ad3      	subs	r3, r2, r3
 8006704:	f241 3288 	movw	r2, #5000	; 0x1388
 8006708:	4293      	cmp	r3, r2
 800670a:	d901      	bls.n	8006710 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800670c:	2303      	movs	r3, #3
 800670e:	e0af      	b.n	8006870 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006710:	4b5a      	ldr	r3, [pc, #360]	; (800687c <HAL_RCC_OscConfig+0x4e8>)
 8006712:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006714:	f003 0302 	and.w	r3, r3, #2
 8006718:	2b00      	cmp	r3, #0
 800671a:	d1ee      	bne.n	80066fa <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800671c:	7dfb      	ldrb	r3, [r7, #23]
 800671e:	2b01      	cmp	r3, #1
 8006720:	d105      	bne.n	800672e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006722:	4b56      	ldr	r3, [pc, #344]	; (800687c <HAL_RCC_OscConfig+0x4e8>)
 8006724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006726:	4a55      	ldr	r2, [pc, #340]	; (800687c <HAL_RCC_OscConfig+0x4e8>)
 8006728:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800672c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	699b      	ldr	r3, [r3, #24]
 8006732:	2b00      	cmp	r3, #0
 8006734:	f000 809b 	beq.w	800686e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006738:	4b50      	ldr	r3, [pc, #320]	; (800687c <HAL_RCC_OscConfig+0x4e8>)
 800673a:	689b      	ldr	r3, [r3, #8]
 800673c:	f003 030c 	and.w	r3, r3, #12
 8006740:	2b08      	cmp	r3, #8
 8006742:	d05c      	beq.n	80067fe <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	699b      	ldr	r3, [r3, #24]
 8006748:	2b02      	cmp	r3, #2
 800674a:	d141      	bne.n	80067d0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800674c:	4b4c      	ldr	r3, [pc, #304]	; (8006880 <HAL_RCC_OscConfig+0x4ec>)
 800674e:	2200      	movs	r2, #0
 8006750:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006752:	f7fb fd4d 	bl	80021f0 <HAL_GetTick>
 8006756:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006758:	e008      	b.n	800676c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800675a:	f7fb fd49 	bl	80021f0 <HAL_GetTick>
 800675e:	4602      	mov	r2, r0
 8006760:	693b      	ldr	r3, [r7, #16]
 8006762:	1ad3      	subs	r3, r2, r3
 8006764:	2b02      	cmp	r3, #2
 8006766:	d901      	bls.n	800676c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8006768:	2303      	movs	r3, #3
 800676a:	e081      	b.n	8006870 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800676c:	4b43      	ldr	r3, [pc, #268]	; (800687c <HAL_RCC_OscConfig+0x4e8>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006774:	2b00      	cmp	r3, #0
 8006776:	d1f0      	bne.n	800675a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	69da      	ldr	r2, [r3, #28]
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	6a1b      	ldr	r3, [r3, #32]
 8006780:	431a      	orrs	r2, r3
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006786:	019b      	lsls	r3, r3, #6
 8006788:	431a      	orrs	r2, r3
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800678e:	085b      	lsrs	r3, r3, #1
 8006790:	3b01      	subs	r3, #1
 8006792:	041b      	lsls	r3, r3, #16
 8006794:	431a      	orrs	r2, r3
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800679a:	061b      	lsls	r3, r3, #24
 800679c:	4937      	ldr	r1, [pc, #220]	; (800687c <HAL_RCC_OscConfig+0x4e8>)
 800679e:	4313      	orrs	r3, r2
 80067a0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80067a2:	4b37      	ldr	r3, [pc, #220]	; (8006880 <HAL_RCC_OscConfig+0x4ec>)
 80067a4:	2201      	movs	r2, #1
 80067a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067a8:	f7fb fd22 	bl	80021f0 <HAL_GetTick>
 80067ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80067ae:	e008      	b.n	80067c2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80067b0:	f7fb fd1e 	bl	80021f0 <HAL_GetTick>
 80067b4:	4602      	mov	r2, r0
 80067b6:	693b      	ldr	r3, [r7, #16]
 80067b8:	1ad3      	subs	r3, r2, r3
 80067ba:	2b02      	cmp	r3, #2
 80067bc:	d901      	bls.n	80067c2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80067be:	2303      	movs	r3, #3
 80067c0:	e056      	b.n	8006870 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80067c2:	4b2e      	ldr	r3, [pc, #184]	; (800687c <HAL_RCC_OscConfig+0x4e8>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d0f0      	beq.n	80067b0 <HAL_RCC_OscConfig+0x41c>
 80067ce:	e04e      	b.n	800686e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80067d0:	4b2b      	ldr	r3, [pc, #172]	; (8006880 <HAL_RCC_OscConfig+0x4ec>)
 80067d2:	2200      	movs	r2, #0
 80067d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067d6:	f7fb fd0b 	bl	80021f0 <HAL_GetTick>
 80067da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80067dc:	e008      	b.n	80067f0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80067de:	f7fb fd07 	bl	80021f0 <HAL_GetTick>
 80067e2:	4602      	mov	r2, r0
 80067e4:	693b      	ldr	r3, [r7, #16]
 80067e6:	1ad3      	subs	r3, r2, r3
 80067e8:	2b02      	cmp	r3, #2
 80067ea:	d901      	bls.n	80067f0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80067ec:	2303      	movs	r3, #3
 80067ee:	e03f      	b.n	8006870 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80067f0:	4b22      	ldr	r3, [pc, #136]	; (800687c <HAL_RCC_OscConfig+0x4e8>)
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d1f0      	bne.n	80067de <HAL_RCC_OscConfig+0x44a>
 80067fc:	e037      	b.n	800686e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	699b      	ldr	r3, [r3, #24]
 8006802:	2b01      	cmp	r3, #1
 8006804:	d101      	bne.n	800680a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8006806:	2301      	movs	r3, #1
 8006808:	e032      	b.n	8006870 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800680a:	4b1c      	ldr	r3, [pc, #112]	; (800687c <HAL_RCC_OscConfig+0x4e8>)
 800680c:	685b      	ldr	r3, [r3, #4]
 800680e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	699b      	ldr	r3, [r3, #24]
 8006814:	2b01      	cmp	r3, #1
 8006816:	d028      	beq.n	800686a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006822:	429a      	cmp	r2, r3
 8006824:	d121      	bne.n	800686a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006830:	429a      	cmp	r2, r3
 8006832:	d11a      	bne.n	800686a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006834:	68fa      	ldr	r2, [r7, #12]
 8006836:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800683a:	4013      	ands	r3, r2
 800683c:	687a      	ldr	r2, [r7, #4]
 800683e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006840:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006842:	4293      	cmp	r3, r2
 8006844:	d111      	bne.n	800686a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006850:	085b      	lsrs	r3, r3, #1
 8006852:	3b01      	subs	r3, #1
 8006854:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006856:	429a      	cmp	r2, r3
 8006858:	d107      	bne.n	800686a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006864:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006866:	429a      	cmp	r2, r3
 8006868:	d001      	beq.n	800686e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800686a:	2301      	movs	r3, #1
 800686c:	e000      	b.n	8006870 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800686e:	2300      	movs	r3, #0
}
 8006870:	4618      	mov	r0, r3
 8006872:	3718      	adds	r7, #24
 8006874:	46bd      	mov	sp, r7
 8006876:	bd80      	pop	{r7, pc}
 8006878:	40007000 	.word	0x40007000
 800687c:	40023800 	.word	0x40023800
 8006880:	42470060 	.word	0x42470060

08006884 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006884:	b580      	push	{r7, lr}
 8006886:	b084      	sub	sp, #16
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
 800688c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d101      	bne.n	8006898 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006894:	2301      	movs	r3, #1
 8006896:	e0cc      	b.n	8006a32 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006898:	4b68      	ldr	r3, [pc, #416]	; (8006a3c <HAL_RCC_ClockConfig+0x1b8>)
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f003 0307 	and.w	r3, r3, #7
 80068a0:	683a      	ldr	r2, [r7, #0]
 80068a2:	429a      	cmp	r2, r3
 80068a4:	d90c      	bls.n	80068c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80068a6:	4b65      	ldr	r3, [pc, #404]	; (8006a3c <HAL_RCC_ClockConfig+0x1b8>)
 80068a8:	683a      	ldr	r2, [r7, #0]
 80068aa:	b2d2      	uxtb	r2, r2
 80068ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80068ae:	4b63      	ldr	r3, [pc, #396]	; (8006a3c <HAL_RCC_ClockConfig+0x1b8>)
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f003 0307 	and.w	r3, r3, #7
 80068b6:	683a      	ldr	r2, [r7, #0]
 80068b8:	429a      	cmp	r2, r3
 80068ba:	d001      	beq.n	80068c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80068bc:	2301      	movs	r3, #1
 80068be:	e0b8      	b.n	8006a32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f003 0302 	and.w	r3, r3, #2
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d020      	beq.n	800690e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f003 0304 	and.w	r3, r3, #4
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d005      	beq.n	80068e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80068d8:	4b59      	ldr	r3, [pc, #356]	; (8006a40 <HAL_RCC_ClockConfig+0x1bc>)
 80068da:	689b      	ldr	r3, [r3, #8]
 80068dc:	4a58      	ldr	r2, [pc, #352]	; (8006a40 <HAL_RCC_ClockConfig+0x1bc>)
 80068de:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80068e2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f003 0308 	and.w	r3, r3, #8
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d005      	beq.n	80068fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80068f0:	4b53      	ldr	r3, [pc, #332]	; (8006a40 <HAL_RCC_ClockConfig+0x1bc>)
 80068f2:	689b      	ldr	r3, [r3, #8]
 80068f4:	4a52      	ldr	r2, [pc, #328]	; (8006a40 <HAL_RCC_ClockConfig+0x1bc>)
 80068f6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80068fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80068fc:	4b50      	ldr	r3, [pc, #320]	; (8006a40 <HAL_RCC_ClockConfig+0x1bc>)
 80068fe:	689b      	ldr	r3, [r3, #8]
 8006900:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	689b      	ldr	r3, [r3, #8]
 8006908:	494d      	ldr	r1, [pc, #308]	; (8006a40 <HAL_RCC_ClockConfig+0x1bc>)
 800690a:	4313      	orrs	r3, r2
 800690c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f003 0301 	and.w	r3, r3, #1
 8006916:	2b00      	cmp	r3, #0
 8006918:	d044      	beq.n	80069a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	685b      	ldr	r3, [r3, #4]
 800691e:	2b01      	cmp	r3, #1
 8006920:	d107      	bne.n	8006932 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006922:	4b47      	ldr	r3, [pc, #284]	; (8006a40 <HAL_RCC_ClockConfig+0x1bc>)
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800692a:	2b00      	cmp	r3, #0
 800692c:	d119      	bne.n	8006962 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800692e:	2301      	movs	r3, #1
 8006930:	e07f      	b.n	8006a32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	685b      	ldr	r3, [r3, #4]
 8006936:	2b02      	cmp	r3, #2
 8006938:	d003      	beq.n	8006942 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800693e:	2b03      	cmp	r3, #3
 8006940:	d107      	bne.n	8006952 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006942:	4b3f      	ldr	r3, [pc, #252]	; (8006a40 <HAL_RCC_ClockConfig+0x1bc>)
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800694a:	2b00      	cmp	r3, #0
 800694c:	d109      	bne.n	8006962 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800694e:	2301      	movs	r3, #1
 8006950:	e06f      	b.n	8006a32 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006952:	4b3b      	ldr	r3, [pc, #236]	; (8006a40 <HAL_RCC_ClockConfig+0x1bc>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f003 0302 	and.w	r3, r3, #2
 800695a:	2b00      	cmp	r3, #0
 800695c:	d101      	bne.n	8006962 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800695e:	2301      	movs	r3, #1
 8006960:	e067      	b.n	8006a32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006962:	4b37      	ldr	r3, [pc, #220]	; (8006a40 <HAL_RCC_ClockConfig+0x1bc>)
 8006964:	689b      	ldr	r3, [r3, #8]
 8006966:	f023 0203 	bic.w	r2, r3, #3
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	685b      	ldr	r3, [r3, #4]
 800696e:	4934      	ldr	r1, [pc, #208]	; (8006a40 <HAL_RCC_ClockConfig+0x1bc>)
 8006970:	4313      	orrs	r3, r2
 8006972:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006974:	f7fb fc3c 	bl	80021f0 <HAL_GetTick>
 8006978:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800697a:	e00a      	b.n	8006992 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800697c:	f7fb fc38 	bl	80021f0 <HAL_GetTick>
 8006980:	4602      	mov	r2, r0
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	1ad3      	subs	r3, r2, r3
 8006986:	f241 3288 	movw	r2, #5000	; 0x1388
 800698a:	4293      	cmp	r3, r2
 800698c:	d901      	bls.n	8006992 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800698e:	2303      	movs	r3, #3
 8006990:	e04f      	b.n	8006a32 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006992:	4b2b      	ldr	r3, [pc, #172]	; (8006a40 <HAL_RCC_ClockConfig+0x1bc>)
 8006994:	689b      	ldr	r3, [r3, #8]
 8006996:	f003 020c 	and.w	r2, r3, #12
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	685b      	ldr	r3, [r3, #4]
 800699e:	009b      	lsls	r3, r3, #2
 80069a0:	429a      	cmp	r2, r3
 80069a2:	d1eb      	bne.n	800697c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80069a4:	4b25      	ldr	r3, [pc, #148]	; (8006a3c <HAL_RCC_ClockConfig+0x1b8>)
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f003 0307 	and.w	r3, r3, #7
 80069ac:	683a      	ldr	r2, [r7, #0]
 80069ae:	429a      	cmp	r2, r3
 80069b0:	d20c      	bcs.n	80069cc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80069b2:	4b22      	ldr	r3, [pc, #136]	; (8006a3c <HAL_RCC_ClockConfig+0x1b8>)
 80069b4:	683a      	ldr	r2, [r7, #0]
 80069b6:	b2d2      	uxtb	r2, r2
 80069b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80069ba:	4b20      	ldr	r3, [pc, #128]	; (8006a3c <HAL_RCC_ClockConfig+0x1b8>)
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f003 0307 	and.w	r3, r3, #7
 80069c2:	683a      	ldr	r2, [r7, #0]
 80069c4:	429a      	cmp	r2, r3
 80069c6:	d001      	beq.n	80069cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80069c8:	2301      	movs	r3, #1
 80069ca:	e032      	b.n	8006a32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f003 0304 	and.w	r3, r3, #4
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d008      	beq.n	80069ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80069d8:	4b19      	ldr	r3, [pc, #100]	; (8006a40 <HAL_RCC_ClockConfig+0x1bc>)
 80069da:	689b      	ldr	r3, [r3, #8]
 80069dc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	68db      	ldr	r3, [r3, #12]
 80069e4:	4916      	ldr	r1, [pc, #88]	; (8006a40 <HAL_RCC_ClockConfig+0x1bc>)
 80069e6:	4313      	orrs	r3, r2
 80069e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f003 0308 	and.w	r3, r3, #8
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d009      	beq.n	8006a0a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80069f6:	4b12      	ldr	r3, [pc, #72]	; (8006a40 <HAL_RCC_ClockConfig+0x1bc>)
 80069f8:	689b      	ldr	r3, [r3, #8]
 80069fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	691b      	ldr	r3, [r3, #16]
 8006a02:	00db      	lsls	r3, r3, #3
 8006a04:	490e      	ldr	r1, [pc, #56]	; (8006a40 <HAL_RCC_ClockConfig+0x1bc>)
 8006a06:	4313      	orrs	r3, r2
 8006a08:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006a0a:	f000 f821 	bl	8006a50 <HAL_RCC_GetSysClockFreq>
 8006a0e:	4602      	mov	r2, r0
 8006a10:	4b0b      	ldr	r3, [pc, #44]	; (8006a40 <HAL_RCC_ClockConfig+0x1bc>)
 8006a12:	689b      	ldr	r3, [r3, #8]
 8006a14:	091b      	lsrs	r3, r3, #4
 8006a16:	f003 030f 	and.w	r3, r3, #15
 8006a1a:	490a      	ldr	r1, [pc, #40]	; (8006a44 <HAL_RCC_ClockConfig+0x1c0>)
 8006a1c:	5ccb      	ldrb	r3, [r1, r3]
 8006a1e:	fa22 f303 	lsr.w	r3, r2, r3
 8006a22:	4a09      	ldr	r2, [pc, #36]	; (8006a48 <HAL_RCC_ClockConfig+0x1c4>)
 8006a24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006a26:	4b09      	ldr	r3, [pc, #36]	; (8006a4c <HAL_RCC_ClockConfig+0x1c8>)
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	f7fb fb9c 	bl	8002168 <HAL_InitTick>

  return HAL_OK;
 8006a30:	2300      	movs	r3, #0
}
 8006a32:	4618      	mov	r0, r3
 8006a34:	3710      	adds	r7, #16
 8006a36:	46bd      	mov	sp, r7
 8006a38:	bd80      	pop	{r7, pc}
 8006a3a:	bf00      	nop
 8006a3c:	40023c00 	.word	0x40023c00
 8006a40:	40023800 	.word	0x40023800
 8006a44:	0800b768 	.word	0x0800b768
 8006a48:	20000000 	.word	0x20000000
 8006a4c:	2000000c 	.word	0x2000000c

08006a50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006a50:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006a54:	b084      	sub	sp, #16
 8006a56:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006a58:	2300      	movs	r3, #0
 8006a5a:	607b      	str	r3, [r7, #4]
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	60fb      	str	r3, [r7, #12]
 8006a60:	2300      	movs	r3, #0
 8006a62:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006a64:	2300      	movs	r3, #0
 8006a66:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006a68:	4b67      	ldr	r3, [pc, #412]	; (8006c08 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006a6a:	689b      	ldr	r3, [r3, #8]
 8006a6c:	f003 030c 	and.w	r3, r3, #12
 8006a70:	2b08      	cmp	r3, #8
 8006a72:	d00d      	beq.n	8006a90 <HAL_RCC_GetSysClockFreq+0x40>
 8006a74:	2b08      	cmp	r3, #8
 8006a76:	f200 80bd 	bhi.w	8006bf4 <HAL_RCC_GetSysClockFreq+0x1a4>
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d002      	beq.n	8006a84 <HAL_RCC_GetSysClockFreq+0x34>
 8006a7e:	2b04      	cmp	r3, #4
 8006a80:	d003      	beq.n	8006a8a <HAL_RCC_GetSysClockFreq+0x3a>
 8006a82:	e0b7      	b.n	8006bf4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006a84:	4b61      	ldr	r3, [pc, #388]	; (8006c0c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006a86:	60bb      	str	r3, [r7, #8]
       break;
 8006a88:	e0b7      	b.n	8006bfa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006a8a:	4b61      	ldr	r3, [pc, #388]	; (8006c10 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8006a8c:	60bb      	str	r3, [r7, #8]
      break;
 8006a8e:	e0b4      	b.n	8006bfa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006a90:	4b5d      	ldr	r3, [pc, #372]	; (8006c08 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006a92:	685b      	ldr	r3, [r3, #4]
 8006a94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006a98:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006a9a:	4b5b      	ldr	r3, [pc, #364]	; (8006c08 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006a9c:	685b      	ldr	r3, [r3, #4]
 8006a9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d04d      	beq.n	8006b42 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006aa6:	4b58      	ldr	r3, [pc, #352]	; (8006c08 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006aa8:	685b      	ldr	r3, [r3, #4]
 8006aaa:	099b      	lsrs	r3, r3, #6
 8006aac:	461a      	mov	r2, r3
 8006aae:	f04f 0300 	mov.w	r3, #0
 8006ab2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006ab6:	f04f 0100 	mov.w	r1, #0
 8006aba:	ea02 0800 	and.w	r8, r2, r0
 8006abe:	ea03 0901 	and.w	r9, r3, r1
 8006ac2:	4640      	mov	r0, r8
 8006ac4:	4649      	mov	r1, r9
 8006ac6:	f04f 0200 	mov.w	r2, #0
 8006aca:	f04f 0300 	mov.w	r3, #0
 8006ace:	014b      	lsls	r3, r1, #5
 8006ad0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006ad4:	0142      	lsls	r2, r0, #5
 8006ad6:	4610      	mov	r0, r2
 8006ad8:	4619      	mov	r1, r3
 8006ada:	ebb0 0008 	subs.w	r0, r0, r8
 8006ade:	eb61 0109 	sbc.w	r1, r1, r9
 8006ae2:	f04f 0200 	mov.w	r2, #0
 8006ae6:	f04f 0300 	mov.w	r3, #0
 8006aea:	018b      	lsls	r3, r1, #6
 8006aec:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006af0:	0182      	lsls	r2, r0, #6
 8006af2:	1a12      	subs	r2, r2, r0
 8006af4:	eb63 0301 	sbc.w	r3, r3, r1
 8006af8:	f04f 0000 	mov.w	r0, #0
 8006afc:	f04f 0100 	mov.w	r1, #0
 8006b00:	00d9      	lsls	r1, r3, #3
 8006b02:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006b06:	00d0      	lsls	r0, r2, #3
 8006b08:	4602      	mov	r2, r0
 8006b0a:	460b      	mov	r3, r1
 8006b0c:	eb12 0208 	adds.w	r2, r2, r8
 8006b10:	eb43 0309 	adc.w	r3, r3, r9
 8006b14:	f04f 0000 	mov.w	r0, #0
 8006b18:	f04f 0100 	mov.w	r1, #0
 8006b1c:	0259      	lsls	r1, r3, #9
 8006b1e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8006b22:	0250      	lsls	r0, r2, #9
 8006b24:	4602      	mov	r2, r0
 8006b26:	460b      	mov	r3, r1
 8006b28:	4610      	mov	r0, r2
 8006b2a:	4619      	mov	r1, r3
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	461a      	mov	r2, r3
 8006b30:	f04f 0300 	mov.w	r3, #0
 8006b34:	f7f9 fb48 	bl	80001c8 <__aeabi_uldivmod>
 8006b38:	4602      	mov	r2, r0
 8006b3a:	460b      	mov	r3, r1
 8006b3c:	4613      	mov	r3, r2
 8006b3e:	60fb      	str	r3, [r7, #12]
 8006b40:	e04a      	b.n	8006bd8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006b42:	4b31      	ldr	r3, [pc, #196]	; (8006c08 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006b44:	685b      	ldr	r3, [r3, #4]
 8006b46:	099b      	lsrs	r3, r3, #6
 8006b48:	461a      	mov	r2, r3
 8006b4a:	f04f 0300 	mov.w	r3, #0
 8006b4e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006b52:	f04f 0100 	mov.w	r1, #0
 8006b56:	ea02 0400 	and.w	r4, r2, r0
 8006b5a:	ea03 0501 	and.w	r5, r3, r1
 8006b5e:	4620      	mov	r0, r4
 8006b60:	4629      	mov	r1, r5
 8006b62:	f04f 0200 	mov.w	r2, #0
 8006b66:	f04f 0300 	mov.w	r3, #0
 8006b6a:	014b      	lsls	r3, r1, #5
 8006b6c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006b70:	0142      	lsls	r2, r0, #5
 8006b72:	4610      	mov	r0, r2
 8006b74:	4619      	mov	r1, r3
 8006b76:	1b00      	subs	r0, r0, r4
 8006b78:	eb61 0105 	sbc.w	r1, r1, r5
 8006b7c:	f04f 0200 	mov.w	r2, #0
 8006b80:	f04f 0300 	mov.w	r3, #0
 8006b84:	018b      	lsls	r3, r1, #6
 8006b86:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006b8a:	0182      	lsls	r2, r0, #6
 8006b8c:	1a12      	subs	r2, r2, r0
 8006b8e:	eb63 0301 	sbc.w	r3, r3, r1
 8006b92:	f04f 0000 	mov.w	r0, #0
 8006b96:	f04f 0100 	mov.w	r1, #0
 8006b9a:	00d9      	lsls	r1, r3, #3
 8006b9c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006ba0:	00d0      	lsls	r0, r2, #3
 8006ba2:	4602      	mov	r2, r0
 8006ba4:	460b      	mov	r3, r1
 8006ba6:	1912      	adds	r2, r2, r4
 8006ba8:	eb45 0303 	adc.w	r3, r5, r3
 8006bac:	f04f 0000 	mov.w	r0, #0
 8006bb0:	f04f 0100 	mov.w	r1, #0
 8006bb4:	0299      	lsls	r1, r3, #10
 8006bb6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8006bba:	0290      	lsls	r0, r2, #10
 8006bbc:	4602      	mov	r2, r0
 8006bbe:	460b      	mov	r3, r1
 8006bc0:	4610      	mov	r0, r2
 8006bc2:	4619      	mov	r1, r3
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	461a      	mov	r2, r3
 8006bc8:	f04f 0300 	mov.w	r3, #0
 8006bcc:	f7f9 fafc 	bl	80001c8 <__aeabi_uldivmod>
 8006bd0:	4602      	mov	r2, r0
 8006bd2:	460b      	mov	r3, r1
 8006bd4:	4613      	mov	r3, r2
 8006bd6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006bd8:	4b0b      	ldr	r3, [pc, #44]	; (8006c08 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006bda:	685b      	ldr	r3, [r3, #4]
 8006bdc:	0c1b      	lsrs	r3, r3, #16
 8006bde:	f003 0303 	and.w	r3, r3, #3
 8006be2:	3301      	adds	r3, #1
 8006be4:	005b      	lsls	r3, r3, #1
 8006be6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006be8:	68fa      	ldr	r2, [r7, #12]
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bf0:	60bb      	str	r3, [r7, #8]
      break;
 8006bf2:	e002      	b.n	8006bfa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006bf4:	4b05      	ldr	r3, [pc, #20]	; (8006c0c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006bf6:	60bb      	str	r3, [r7, #8]
      break;
 8006bf8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006bfa:	68bb      	ldr	r3, [r7, #8]
}
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	3710      	adds	r7, #16
 8006c00:	46bd      	mov	sp, r7
 8006c02:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006c06:	bf00      	nop
 8006c08:	40023800 	.word	0x40023800
 8006c0c:	00f42400 	.word	0x00f42400
 8006c10:	007a1200 	.word	0x007a1200

08006c14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006c14:	b480      	push	{r7}
 8006c16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006c18:	4b03      	ldr	r3, [pc, #12]	; (8006c28 <HAL_RCC_GetHCLKFreq+0x14>)
 8006c1a:	681b      	ldr	r3, [r3, #0]
}
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c24:	4770      	bx	lr
 8006c26:	bf00      	nop
 8006c28:	20000000 	.word	0x20000000

08006c2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006c30:	f7ff fff0 	bl	8006c14 <HAL_RCC_GetHCLKFreq>
 8006c34:	4602      	mov	r2, r0
 8006c36:	4b05      	ldr	r3, [pc, #20]	; (8006c4c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006c38:	689b      	ldr	r3, [r3, #8]
 8006c3a:	0a9b      	lsrs	r3, r3, #10
 8006c3c:	f003 0307 	and.w	r3, r3, #7
 8006c40:	4903      	ldr	r1, [pc, #12]	; (8006c50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006c42:	5ccb      	ldrb	r3, [r1, r3]
 8006c44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006c48:	4618      	mov	r0, r3
 8006c4a:	bd80      	pop	{r7, pc}
 8006c4c:	40023800 	.word	0x40023800
 8006c50:	0800b778 	.word	0x0800b778

08006c54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006c58:	f7ff ffdc 	bl	8006c14 <HAL_RCC_GetHCLKFreq>
 8006c5c:	4602      	mov	r2, r0
 8006c5e:	4b05      	ldr	r3, [pc, #20]	; (8006c74 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006c60:	689b      	ldr	r3, [r3, #8]
 8006c62:	0b5b      	lsrs	r3, r3, #13
 8006c64:	f003 0307 	and.w	r3, r3, #7
 8006c68:	4903      	ldr	r1, [pc, #12]	; (8006c78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006c6a:	5ccb      	ldrb	r3, [r1, r3]
 8006c6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006c70:	4618      	mov	r0, r3
 8006c72:	bd80      	pop	{r7, pc}
 8006c74:	40023800 	.word	0x40023800
 8006c78:	0800b778 	.word	0x0800b778

08006c7c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b086      	sub	sp, #24
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006c84:	2300      	movs	r3, #0
 8006c86:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006c88:	2300      	movs	r3, #0
 8006c8a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f003 0301 	and.w	r3, r3, #1
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d105      	bne.n	8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d035      	beq.n	8006d10 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006ca4:	4b62      	ldr	r3, [pc, #392]	; (8006e30 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006caa:	f7fb faa1 	bl	80021f0 <HAL_GetTick>
 8006cae:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006cb0:	e008      	b.n	8006cc4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006cb2:	f7fb fa9d 	bl	80021f0 <HAL_GetTick>
 8006cb6:	4602      	mov	r2, r0
 8006cb8:	697b      	ldr	r3, [r7, #20]
 8006cba:	1ad3      	subs	r3, r2, r3
 8006cbc:	2b02      	cmp	r3, #2
 8006cbe:	d901      	bls.n	8006cc4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006cc0:	2303      	movs	r3, #3
 8006cc2:	e0b0      	b.n	8006e26 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006cc4:	4b5b      	ldr	r3, [pc, #364]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d1f0      	bne.n	8006cb2 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	685b      	ldr	r3, [r3, #4]
 8006cd4:	019a      	lsls	r2, r3, #6
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	689b      	ldr	r3, [r3, #8]
 8006cda:	071b      	lsls	r3, r3, #28
 8006cdc:	4955      	ldr	r1, [pc, #340]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006cde:	4313      	orrs	r3, r2
 8006ce0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006ce4:	4b52      	ldr	r3, [pc, #328]	; (8006e30 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006ce6:	2201      	movs	r2, #1
 8006ce8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006cea:	f7fb fa81 	bl	80021f0 <HAL_GetTick>
 8006cee:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006cf0:	e008      	b.n	8006d04 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006cf2:	f7fb fa7d 	bl	80021f0 <HAL_GetTick>
 8006cf6:	4602      	mov	r2, r0
 8006cf8:	697b      	ldr	r3, [r7, #20]
 8006cfa:	1ad3      	subs	r3, r2, r3
 8006cfc:	2b02      	cmp	r3, #2
 8006cfe:	d901      	bls.n	8006d04 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006d00:	2303      	movs	r3, #3
 8006d02:	e090      	b.n	8006e26 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006d04:	4b4b      	ldr	r3, [pc, #300]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d0f0      	beq.n	8006cf2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f003 0302 	and.w	r3, r3, #2
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	f000 8083 	beq.w	8006e24 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006d1e:	2300      	movs	r3, #0
 8006d20:	60fb      	str	r3, [r7, #12]
 8006d22:	4b44      	ldr	r3, [pc, #272]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d26:	4a43      	ldr	r2, [pc, #268]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006d28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d2c:	6413      	str	r3, [r2, #64]	; 0x40
 8006d2e:	4b41      	ldr	r3, [pc, #260]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d36:	60fb      	str	r3, [r7, #12]
 8006d38:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006d3a:	4b3f      	ldr	r3, [pc, #252]	; (8006e38 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	4a3e      	ldr	r2, [pc, #248]	; (8006e38 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006d40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d44:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006d46:	f7fb fa53 	bl	80021f0 <HAL_GetTick>
 8006d4a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006d4c:	e008      	b.n	8006d60 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006d4e:	f7fb fa4f 	bl	80021f0 <HAL_GetTick>
 8006d52:	4602      	mov	r2, r0
 8006d54:	697b      	ldr	r3, [r7, #20]
 8006d56:	1ad3      	subs	r3, r2, r3
 8006d58:	2b02      	cmp	r3, #2
 8006d5a:	d901      	bls.n	8006d60 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8006d5c:	2303      	movs	r3, #3
 8006d5e:	e062      	b.n	8006e26 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006d60:	4b35      	ldr	r3, [pc, #212]	; (8006e38 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d0f0      	beq.n	8006d4e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006d6c:	4b31      	ldr	r3, [pc, #196]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006d6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d70:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d74:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006d76:	693b      	ldr	r3, [r7, #16]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d02f      	beq.n	8006ddc <HAL_RCCEx_PeriphCLKConfig+0x160>
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	68db      	ldr	r3, [r3, #12]
 8006d80:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d84:	693a      	ldr	r2, [r7, #16]
 8006d86:	429a      	cmp	r2, r3
 8006d88:	d028      	beq.n	8006ddc <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006d8a:	4b2a      	ldr	r3, [pc, #168]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006d8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d92:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006d94:	4b29      	ldr	r3, [pc, #164]	; (8006e3c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006d96:	2201      	movs	r2, #1
 8006d98:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006d9a:	4b28      	ldr	r3, [pc, #160]	; (8006e3c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006da0:	4a24      	ldr	r2, [pc, #144]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006da2:	693b      	ldr	r3, [r7, #16]
 8006da4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006da6:	4b23      	ldr	r3, [pc, #140]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006da8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006daa:	f003 0301 	and.w	r3, r3, #1
 8006dae:	2b01      	cmp	r3, #1
 8006db0:	d114      	bne.n	8006ddc <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006db2:	f7fb fa1d 	bl	80021f0 <HAL_GetTick>
 8006db6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006db8:	e00a      	b.n	8006dd0 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006dba:	f7fb fa19 	bl	80021f0 <HAL_GetTick>
 8006dbe:	4602      	mov	r2, r0
 8006dc0:	697b      	ldr	r3, [r7, #20]
 8006dc2:	1ad3      	subs	r3, r2, r3
 8006dc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d901      	bls.n	8006dd0 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8006dcc:	2303      	movs	r3, #3
 8006dce:	e02a      	b.n	8006e26 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006dd0:	4b18      	ldr	r3, [pc, #96]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006dd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dd4:	f003 0302 	and.w	r3, r3, #2
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d0ee      	beq.n	8006dba <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	68db      	ldr	r3, [r3, #12]
 8006de0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006de4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006de8:	d10d      	bne.n	8006e06 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8006dea:	4b12      	ldr	r3, [pc, #72]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006dec:	689b      	ldr	r3, [r3, #8]
 8006dee:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	68db      	ldr	r3, [r3, #12]
 8006df6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006dfa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006dfe:	490d      	ldr	r1, [pc, #52]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006e00:	4313      	orrs	r3, r2
 8006e02:	608b      	str	r3, [r1, #8]
 8006e04:	e005      	b.n	8006e12 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006e06:	4b0b      	ldr	r3, [pc, #44]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006e08:	689b      	ldr	r3, [r3, #8]
 8006e0a:	4a0a      	ldr	r2, [pc, #40]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006e0c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006e10:	6093      	str	r3, [r2, #8]
 8006e12:	4b08      	ldr	r3, [pc, #32]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006e14:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	68db      	ldr	r3, [r3, #12]
 8006e1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006e1e:	4905      	ldr	r1, [pc, #20]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006e20:	4313      	orrs	r3, r2
 8006e22:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8006e24:	2300      	movs	r3, #0
}
 8006e26:	4618      	mov	r0, r3
 8006e28:	3718      	adds	r7, #24
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	bd80      	pop	{r7, pc}
 8006e2e:	bf00      	nop
 8006e30:	42470068 	.word	0x42470068
 8006e34:	40023800 	.word	0x40023800
 8006e38:	40007000 	.word	0x40007000
 8006e3c:	42470e40 	.word	0x42470e40

08006e40 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006e40:	b480      	push	{r7}
 8006e42:	b087      	sub	sp, #28
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8006e48:	2300      	movs	r3, #0
 8006e4a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8006e50:	2300      	movs	r3, #0
 8006e52:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8006e54:	2300      	movs	r3, #0
 8006e56:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2b01      	cmp	r3, #1
 8006e5c:	d13e      	bne.n	8006edc <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8006e5e:	4b23      	ldr	r3, [pc, #140]	; (8006eec <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006e60:	689b      	ldr	r3, [r3, #8]
 8006e62:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006e66:	60fb      	str	r3, [r7, #12]
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d005      	beq.n	8006e7a <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	2b01      	cmp	r3, #1
 8006e72:	d12f      	bne.n	8006ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8006e74:	4b1e      	ldr	r3, [pc, #120]	; (8006ef0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006e76:	617b      	str	r3, [r7, #20]
          break;
 8006e78:	e02f      	b.n	8006eda <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006e7a:	4b1c      	ldr	r3, [pc, #112]	; (8006eec <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006e7c:	685b      	ldr	r3, [r3, #4]
 8006e7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e82:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006e86:	d108      	bne.n	8006e9a <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006e88:	4b18      	ldr	r3, [pc, #96]	; (8006eec <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006e8a:	685b      	ldr	r3, [r3, #4]
 8006e8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006e90:	4a18      	ldr	r2, [pc, #96]	; (8006ef4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8006e92:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e96:	613b      	str	r3, [r7, #16]
 8006e98:	e007      	b.n	8006eaa <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006e9a:	4b14      	ldr	r3, [pc, #80]	; (8006eec <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006e9c:	685b      	ldr	r3, [r3, #4]
 8006e9e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006ea2:	4a15      	ldr	r2, [pc, #84]	; (8006ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8006ea4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ea8:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8006eaa:	4b10      	ldr	r3, [pc, #64]	; (8006eec <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006eac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006eb0:	099b      	lsrs	r3, r3, #6
 8006eb2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006eb6:	693b      	ldr	r3, [r7, #16]
 8006eb8:	fb02 f303 	mul.w	r3, r2, r3
 8006ebc:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8006ebe:	4b0b      	ldr	r3, [pc, #44]	; (8006eec <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006ec0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ec4:	0f1b      	lsrs	r3, r3, #28
 8006ec6:	f003 0307 	and.w	r3, r3, #7
 8006eca:	68ba      	ldr	r2, [r7, #8]
 8006ecc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ed0:	617b      	str	r3, [r7, #20]
          break;
 8006ed2:	e002      	b.n	8006eda <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	617b      	str	r3, [r7, #20]
          break;
 8006ed8:	bf00      	nop
        }
      }
      break;
 8006eda:	bf00      	nop
    }
  }
  return frequency;
 8006edc:	697b      	ldr	r3, [r7, #20]
}
 8006ede:	4618      	mov	r0, r3
 8006ee0:	371c      	adds	r7, #28
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee8:	4770      	bx	lr
 8006eea:	bf00      	nop
 8006eec:	40023800 	.word	0x40023800
 8006ef0:	00bb8000 	.word	0x00bb8000
 8006ef4:	007a1200 	.word	0x007a1200
 8006ef8:	00f42400 	.word	0x00f42400

08006efc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b082      	sub	sp, #8
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d101      	bne.n	8006f0e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006f0a:	2301      	movs	r3, #1
 8006f0c:	e07b      	b.n	8007006 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d108      	bne.n	8006f28 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	685b      	ldr	r3, [r3, #4]
 8006f1a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006f1e:	d009      	beq.n	8006f34 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2200      	movs	r2, #0
 8006f24:	61da      	str	r2, [r3, #28]
 8006f26:	e005      	b.n	8006f34 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2200      	movs	r2, #0
 8006f32:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2200      	movs	r2, #0
 8006f38:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006f40:	b2db      	uxtb	r3, r3
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d106      	bne.n	8006f54 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2200      	movs	r2, #0
 8006f4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006f4e:	6878      	ldr	r0, [r7, #4]
 8006f50:	f7fa f99a 	bl	8001288 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2202      	movs	r2, #2
 8006f58:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	681a      	ldr	r2, [r3, #0]
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f6a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	685b      	ldr	r3, [r3, #4]
 8006f70:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	689b      	ldr	r3, [r3, #8]
 8006f78:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006f7c:	431a      	orrs	r2, r3
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	68db      	ldr	r3, [r3, #12]
 8006f82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f86:	431a      	orrs	r2, r3
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	691b      	ldr	r3, [r3, #16]
 8006f8c:	f003 0302 	and.w	r3, r3, #2
 8006f90:	431a      	orrs	r2, r3
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	695b      	ldr	r3, [r3, #20]
 8006f96:	f003 0301 	and.w	r3, r3, #1
 8006f9a:	431a      	orrs	r2, r3
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	699b      	ldr	r3, [r3, #24]
 8006fa0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006fa4:	431a      	orrs	r2, r3
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	69db      	ldr	r3, [r3, #28]
 8006faa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006fae:	431a      	orrs	r2, r3
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	6a1b      	ldr	r3, [r3, #32]
 8006fb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fb8:	ea42 0103 	orr.w	r1, r2, r3
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fc0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	430a      	orrs	r2, r1
 8006fca:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	699b      	ldr	r3, [r3, #24]
 8006fd0:	0c1b      	lsrs	r3, r3, #16
 8006fd2:	f003 0104 	and.w	r1, r3, #4
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fda:	f003 0210 	and.w	r2, r3, #16
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	430a      	orrs	r2, r1
 8006fe4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	69da      	ldr	r2, [r3, #28]
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006ff4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2201      	movs	r2, #1
 8007000:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007004:	2300      	movs	r3, #0
}
 8007006:	4618      	mov	r0, r3
 8007008:	3708      	adds	r7, #8
 800700a:	46bd      	mov	sp, r7
 800700c:	bd80      	pop	{r7, pc}
	...

08007010 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007010:	b480      	push	{r7}
 8007012:	b085      	sub	sp, #20
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800701e:	b2db      	uxtb	r3, r3
 8007020:	2b01      	cmp	r3, #1
 8007022:	d001      	beq.n	8007028 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007024:	2301      	movs	r3, #1
 8007026:	e046      	b.n	80070b6 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2202      	movs	r2, #2
 800702c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	4a23      	ldr	r2, [pc, #140]	; (80070c4 <HAL_TIM_Base_Start+0xb4>)
 8007036:	4293      	cmp	r3, r2
 8007038:	d022      	beq.n	8007080 <HAL_TIM_Base_Start+0x70>
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007042:	d01d      	beq.n	8007080 <HAL_TIM_Base_Start+0x70>
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	4a1f      	ldr	r2, [pc, #124]	; (80070c8 <HAL_TIM_Base_Start+0xb8>)
 800704a:	4293      	cmp	r3, r2
 800704c:	d018      	beq.n	8007080 <HAL_TIM_Base_Start+0x70>
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	4a1e      	ldr	r2, [pc, #120]	; (80070cc <HAL_TIM_Base_Start+0xbc>)
 8007054:	4293      	cmp	r3, r2
 8007056:	d013      	beq.n	8007080 <HAL_TIM_Base_Start+0x70>
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	4a1c      	ldr	r2, [pc, #112]	; (80070d0 <HAL_TIM_Base_Start+0xc0>)
 800705e:	4293      	cmp	r3, r2
 8007060:	d00e      	beq.n	8007080 <HAL_TIM_Base_Start+0x70>
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	4a1b      	ldr	r2, [pc, #108]	; (80070d4 <HAL_TIM_Base_Start+0xc4>)
 8007068:	4293      	cmp	r3, r2
 800706a:	d009      	beq.n	8007080 <HAL_TIM_Base_Start+0x70>
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	4a19      	ldr	r2, [pc, #100]	; (80070d8 <HAL_TIM_Base_Start+0xc8>)
 8007072:	4293      	cmp	r3, r2
 8007074:	d004      	beq.n	8007080 <HAL_TIM_Base_Start+0x70>
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	4a18      	ldr	r2, [pc, #96]	; (80070dc <HAL_TIM_Base_Start+0xcc>)
 800707c:	4293      	cmp	r3, r2
 800707e:	d111      	bne.n	80070a4 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	689b      	ldr	r3, [r3, #8]
 8007086:	f003 0307 	and.w	r3, r3, #7
 800708a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	2b06      	cmp	r3, #6
 8007090:	d010      	beq.n	80070b4 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	681a      	ldr	r2, [r3, #0]
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f042 0201 	orr.w	r2, r2, #1
 80070a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070a2:	e007      	b.n	80070b4 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	681a      	ldr	r2, [r3, #0]
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f042 0201 	orr.w	r2, r2, #1
 80070b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80070b4:	2300      	movs	r3, #0
}
 80070b6:	4618      	mov	r0, r3
 80070b8:	3714      	adds	r7, #20
 80070ba:	46bd      	mov	sp, r7
 80070bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c0:	4770      	bx	lr
 80070c2:	bf00      	nop
 80070c4:	40010000 	.word	0x40010000
 80070c8:	40000400 	.word	0x40000400
 80070cc:	40000800 	.word	0x40000800
 80070d0:	40000c00 	.word	0x40000c00
 80070d4:	40010400 	.word	0x40010400
 80070d8:	40014000 	.word	0x40014000
 80070dc:	40001800 	.word	0x40001800

080070e0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b082      	sub	sp, #8
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d101      	bne.n	80070f2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80070ee:	2301      	movs	r3, #1
 80070f0:	e041      	b.n	8007176 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070f8:	b2db      	uxtb	r3, r3
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d106      	bne.n	800710c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2200      	movs	r2, #0
 8007102:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007106:	6878      	ldr	r0, [r7, #4]
 8007108:	f7fa f906 	bl	8001318 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2202      	movs	r2, #2
 8007110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681a      	ldr	r2, [r3, #0]
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	3304      	adds	r3, #4
 800711c:	4619      	mov	r1, r3
 800711e:	4610      	mov	r0, r2
 8007120:	f000 fae8 	bl	80076f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2201      	movs	r2, #1
 8007128:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2201      	movs	r2, #1
 8007130:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2201      	movs	r2, #1
 8007138:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2201      	movs	r2, #1
 8007140:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2201      	movs	r2, #1
 8007148:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2201      	movs	r2, #1
 8007150:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2201      	movs	r2, #1
 8007158:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2201      	movs	r2, #1
 8007160:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2201      	movs	r2, #1
 8007168:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2201      	movs	r2, #1
 8007170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007174:	2300      	movs	r3, #0
}
 8007176:	4618      	mov	r0, r3
 8007178:	3708      	adds	r7, #8
 800717a:	46bd      	mov	sp, r7
 800717c:	bd80      	pop	{r7, pc}
	...

08007180 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b084      	sub	sp, #16
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
 8007188:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d109      	bne.n	80071a4 <HAL_TIM_PWM_Start+0x24>
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007196:	b2db      	uxtb	r3, r3
 8007198:	2b01      	cmp	r3, #1
 800719a:	bf14      	ite	ne
 800719c:	2301      	movne	r3, #1
 800719e:	2300      	moveq	r3, #0
 80071a0:	b2db      	uxtb	r3, r3
 80071a2:	e022      	b.n	80071ea <HAL_TIM_PWM_Start+0x6a>
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	2b04      	cmp	r3, #4
 80071a8:	d109      	bne.n	80071be <HAL_TIM_PWM_Start+0x3e>
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80071b0:	b2db      	uxtb	r3, r3
 80071b2:	2b01      	cmp	r3, #1
 80071b4:	bf14      	ite	ne
 80071b6:	2301      	movne	r3, #1
 80071b8:	2300      	moveq	r3, #0
 80071ba:	b2db      	uxtb	r3, r3
 80071bc:	e015      	b.n	80071ea <HAL_TIM_PWM_Start+0x6a>
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	2b08      	cmp	r3, #8
 80071c2:	d109      	bne.n	80071d8 <HAL_TIM_PWM_Start+0x58>
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80071ca:	b2db      	uxtb	r3, r3
 80071cc:	2b01      	cmp	r3, #1
 80071ce:	bf14      	ite	ne
 80071d0:	2301      	movne	r3, #1
 80071d2:	2300      	moveq	r3, #0
 80071d4:	b2db      	uxtb	r3, r3
 80071d6:	e008      	b.n	80071ea <HAL_TIM_PWM_Start+0x6a>
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80071de:	b2db      	uxtb	r3, r3
 80071e0:	2b01      	cmp	r3, #1
 80071e2:	bf14      	ite	ne
 80071e4:	2301      	movne	r3, #1
 80071e6:	2300      	moveq	r3, #0
 80071e8:	b2db      	uxtb	r3, r3
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d001      	beq.n	80071f2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80071ee:	2301      	movs	r3, #1
 80071f0:	e07c      	b.n	80072ec <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80071f2:	683b      	ldr	r3, [r7, #0]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d104      	bne.n	8007202 <HAL_TIM_PWM_Start+0x82>
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2202      	movs	r2, #2
 80071fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007200:	e013      	b.n	800722a <HAL_TIM_PWM_Start+0xaa>
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	2b04      	cmp	r3, #4
 8007206:	d104      	bne.n	8007212 <HAL_TIM_PWM_Start+0x92>
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2202      	movs	r2, #2
 800720c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007210:	e00b      	b.n	800722a <HAL_TIM_PWM_Start+0xaa>
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	2b08      	cmp	r3, #8
 8007216:	d104      	bne.n	8007222 <HAL_TIM_PWM_Start+0xa2>
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2202      	movs	r2, #2
 800721c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007220:	e003      	b.n	800722a <HAL_TIM_PWM_Start+0xaa>
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	2202      	movs	r2, #2
 8007226:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	2201      	movs	r2, #1
 8007230:	6839      	ldr	r1, [r7, #0]
 8007232:	4618      	mov	r0, r3
 8007234:	f000 fcae 	bl	8007b94 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	4a2d      	ldr	r2, [pc, #180]	; (80072f4 <HAL_TIM_PWM_Start+0x174>)
 800723e:	4293      	cmp	r3, r2
 8007240:	d004      	beq.n	800724c <HAL_TIM_PWM_Start+0xcc>
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	4a2c      	ldr	r2, [pc, #176]	; (80072f8 <HAL_TIM_PWM_Start+0x178>)
 8007248:	4293      	cmp	r3, r2
 800724a:	d101      	bne.n	8007250 <HAL_TIM_PWM_Start+0xd0>
 800724c:	2301      	movs	r3, #1
 800724e:	e000      	b.n	8007252 <HAL_TIM_PWM_Start+0xd2>
 8007250:	2300      	movs	r3, #0
 8007252:	2b00      	cmp	r3, #0
 8007254:	d007      	beq.n	8007266 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007264:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	4a22      	ldr	r2, [pc, #136]	; (80072f4 <HAL_TIM_PWM_Start+0x174>)
 800726c:	4293      	cmp	r3, r2
 800726e:	d022      	beq.n	80072b6 <HAL_TIM_PWM_Start+0x136>
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007278:	d01d      	beq.n	80072b6 <HAL_TIM_PWM_Start+0x136>
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	4a1f      	ldr	r2, [pc, #124]	; (80072fc <HAL_TIM_PWM_Start+0x17c>)
 8007280:	4293      	cmp	r3, r2
 8007282:	d018      	beq.n	80072b6 <HAL_TIM_PWM_Start+0x136>
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	4a1d      	ldr	r2, [pc, #116]	; (8007300 <HAL_TIM_PWM_Start+0x180>)
 800728a:	4293      	cmp	r3, r2
 800728c:	d013      	beq.n	80072b6 <HAL_TIM_PWM_Start+0x136>
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	4a1c      	ldr	r2, [pc, #112]	; (8007304 <HAL_TIM_PWM_Start+0x184>)
 8007294:	4293      	cmp	r3, r2
 8007296:	d00e      	beq.n	80072b6 <HAL_TIM_PWM_Start+0x136>
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	4a16      	ldr	r2, [pc, #88]	; (80072f8 <HAL_TIM_PWM_Start+0x178>)
 800729e:	4293      	cmp	r3, r2
 80072a0:	d009      	beq.n	80072b6 <HAL_TIM_PWM_Start+0x136>
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	4a18      	ldr	r2, [pc, #96]	; (8007308 <HAL_TIM_PWM_Start+0x188>)
 80072a8:	4293      	cmp	r3, r2
 80072aa:	d004      	beq.n	80072b6 <HAL_TIM_PWM_Start+0x136>
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	4a16      	ldr	r2, [pc, #88]	; (800730c <HAL_TIM_PWM_Start+0x18c>)
 80072b2:	4293      	cmp	r3, r2
 80072b4:	d111      	bne.n	80072da <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	689b      	ldr	r3, [r3, #8]
 80072bc:	f003 0307 	and.w	r3, r3, #7
 80072c0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	2b06      	cmp	r3, #6
 80072c6:	d010      	beq.n	80072ea <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	681a      	ldr	r2, [r3, #0]
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f042 0201 	orr.w	r2, r2, #1
 80072d6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072d8:	e007      	b.n	80072ea <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	681a      	ldr	r2, [r3, #0]
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	f042 0201 	orr.w	r2, r2, #1
 80072e8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80072ea:	2300      	movs	r3, #0
}
 80072ec:	4618      	mov	r0, r3
 80072ee:	3710      	adds	r7, #16
 80072f0:	46bd      	mov	sp, r7
 80072f2:	bd80      	pop	{r7, pc}
 80072f4:	40010000 	.word	0x40010000
 80072f8:	40010400 	.word	0x40010400
 80072fc:	40000400 	.word	0x40000400
 8007300:	40000800 	.word	0x40000800
 8007304:	40000c00 	.word	0x40000c00
 8007308:	40014000 	.word	0x40014000
 800730c:	40001800 	.word	0x40001800

08007310 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b082      	sub	sp, #8
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	691b      	ldr	r3, [r3, #16]
 800731e:	f003 0302 	and.w	r3, r3, #2
 8007322:	2b02      	cmp	r3, #2
 8007324:	d122      	bne.n	800736c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	68db      	ldr	r3, [r3, #12]
 800732c:	f003 0302 	and.w	r3, r3, #2
 8007330:	2b02      	cmp	r3, #2
 8007332:	d11b      	bne.n	800736c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f06f 0202 	mvn.w	r2, #2
 800733c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	2201      	movs	r2, #1
 8007342:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	699b      	ldr	r3, [r3, #24]
 800734a:	f003 0303 	and.w	r3, r3, #3
 800734e:	2b00      	cmp	r3, #0
 8007350:	d003      	beq.n	800735a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007352:	6878      	ldr	r0, [r7, #4]
 8007354:	f000 f9b0 	bl	80076b8 <HAL_TIM_IC_CaptureCallback>
 8007358:	e005      	b.n	8007366 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800735a:	6878      	ldr	r0, [r7, #4]
 800735c:	f000 f9a2 	bl	80076a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007360:	6878      	ldr	r0, [r7, #4]
 8007362:	f000 f9b3 	bl	80076cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	2200      	movs	r2, #0
 800736a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	691b      	ldr	r3, [r3, #16]
 8007372:	f003 0304 	and.w	r3, r3, #4
 8007376:	2b04      	cmp	r3, #4
 8007378:	d122      	bne.n	80073c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	68db      	ldr	r3, [r3, #12]
 8007380:	f003 0304 	and.w	r3, r3, #4
 8007384:	2b04      	cmp	r3, #4
 8007386:	d11b      	bne.n	80073c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f06f 0204 	mvn.w	r2, #4
 8007390:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2202      	movs	r2, #2
 8007396:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	699b      	ldr	r3, [r3, #24]
 800739e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d003      	beq.n	80073ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80073a6:	6878      	ldr	r0, [r7, #4]
 80073a8:	f000 f986 	bl	80076b8 <HAL_TIM_IC_CaptureCallback>
 80073ac:	e005      	b.n	80073ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80073ae:	6878      	ldr	r0, [r7, #4]
 80073b0:	f000 f978 	bl	80076a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073b4:	6878      	ldr	r0, [r7, #4]
 80073b6:	f000 f989 	bl	80076cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2200      	movs	r2, #0
 80073be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	691b      	ldr	r3, [r3, #16]
 80073c6:	f003 0308 	and.w	r3, r3, #8
 80073ca:	2b08      	cmp	r3, #8
 80073cc:	d122      	bne.n	8007414 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	68db      	ldr	r3, [r3, #12]
 80073d4:	f003 0308 	and.w	r3, r3, #8
 80073d8:	2b08      	cmp	r3, #8
 80073da:	d11b      	bne.n	8007414 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f06f 0208 	mvn.w	r2, #8
 80073e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	2204      	movs	r2, #4
 80073ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	69db      	ldr	r3, [r3, #28]
 80073f2:	f003 0303 	and.w	r3, r3, #3
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d003      	beq.n	8007402 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80073fa:	6878      	ldr	r0, [r7, #4]
 80073fc:	f000 f95c 	bl	80076b8 <HAL_TIM_IC_CaptureCallback>
 8007400:	e005      	b.n	800740e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007402:	6878      	ldr	r0, [r7, #4]
 8007404:	f000 f94e 	bl	80076a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007408:	6878      	ldr	r0, [r7, #4]
 800740a:	f000 f95f 	bl	80076cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2200      	movs	r2, #0
 8007412:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	691b      	ldr	r3, [r3, #16]
 800741a:	f003 0310 	and.w	r3, r3, #16
 800741e:	2b10      	cmp	r3, #16
 8007420:	d122      	bne.n	8007468 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	68db      	ldr	r3, [r3, #12]
 8007428:	f003 0310 	and.w	r3, r3, #16
 800742c:	2b10      	cmp	r3, #16
 800742e:	d11b      	bne.n	8007468 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f06f 0210 	mvn.w	r2, #16
 8007438:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2208      	movs	r2, #8
 800743e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	69db      	ldr	r3, [r3, #28]
 8007446:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800744a:	2b00      	cmp	r3, #0
 800744c:	d003      	beq.n	8007456 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800744e:	6878      	ldr	r0, [r7, #4]
 8007450:	f000 f932 	bl	80076b8 <HAL_TIM_IC_CaptureCallback>
 8007454:	e005      	b.n	8007462 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007456:	6878      	ldr	r0, [r7, #4]
 8007458:	f000 f924 	bl	80076a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800745c:	6878      	ldr	r0, [r7, #4]
 800745e:	f000 f935 	bl	80076cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2200      	movs	r2, #0
 8007466:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	691b      	ldr	r3, [r3, #16]
 800746e:	f003 0301 	and.w	r3, r3, #1
 8007472:	2b01      	cmp	r3, #1
 8007474:	d10e      	bne.n	8007494 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	68db      	ldr	r3, [r3, #12]
 800747c:	f003 0301 	and.w	r3, r3, #1
 8007480:	2b01      	cmp	r3, #1
 8007482:	d107      	bne.n	8007494 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f06f 0201 	mvn.w	r2, #1
 800748c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800748e:	6878      	ldr	r0, [r7, #4]
 8007490:	f7fa fce6 	bl	8001e60 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	691b      	ldr	r3, [r3, #16]
 800749a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800749e:	2b80      	cmp	r3, #128	; 0x80
 80074a0:	d10e      	bne.n	80074c0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	68db      	ldr	r3, [r3, #12]
 80074a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074ac:	2b80      	cmp	r3, #128	; 0x80
 80074ae:	d107      	bne.n	80074c0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80074b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80074ba:	6878      	ldr	r0, [r7, #4]
 80074bc:	f000 fc68 	bl	8007d90 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	691b      	ldr	r3, [r3, #16]
 80074c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074ca:	2b40      	cmp	r3, #64	; 0x40
 80074cc:	d10e      	bne.n	80074ec <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	68db      	ldr	r3, [r3, #12]
 80074d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074d8:	2b40      	cmp	r3, #64	; 0x40
 80074da:	d107      	bne.n	80074ec <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80074e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80074e6:	6878      	ldr	r0, [r7, #4]
 80074e8:	f000 f8fa 	bl	80076e0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	691b      	ldr	r3, [r3, #16]
 80074f2:	f003 0320 	and.w	r3, r3, #32
 80074f6:	2b20      	cmp	r3, #32
 80074f8:	d10e      	bne.n	8007518 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	68db      	ldr	r3, [r3, #12]
 8007500:	f003 0320 	and.w	r3, r3, #32
 8007504:	2b20      	cmp	r3, #32
 8007506:	d107      	bne.n	8007518 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f06f 0220 	mvn.w	r2, #32
 8007510:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007512:	6878      	ldr	r0, [r7, #4]
 8007514:	f000 fc32 	bl	8007d7c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007518:	bf00      	nop
 800751a:	3708      	adds	r7, #8
 800751c:	46bd      	mov	sp, r7
 800751e:	bd80      	pop	{r7, pc}

08007520 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007520:	b580      	push	{r7, lr}
 8007522:	b086      	sub	sp, #24
 8007524:	af00      	add	r7, sp, #0
 8007526:	60f8      	str	r0, [r7, #12]
 8007528:	60b9      	str	r1, [r7, #8]
 800752a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800752c:	2300      	movs	r3, #0
 800752e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007536:	2b01      	cmp	r3, #1
 8007538:	d101      	bne.n	800753e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800753a:	2302      	movs	r3, #2
 800753c:	e0ae      	b.n	800769c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	2201      	movs	r2, #1
 8007542:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	2b0c      	cmp	r3, #12
 800754a:	f200 809f 	bhi.w	800768c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800754e:	a201      	add	r2, pc, #4	; (adr r2, 8007554 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007550:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007554:	08007589 	.word	0x08007589
 8007558:	0800768d 	.word	0x0800768d
 800755c:	0800768d 	.word	0x0800768d
 8007560:	0800768d 	.word	0x0800768d
 8007564:	080075c9 	.word	0x080075c9
 8007568:	0800768d 	.word	0x0800768d
 800756c:	0800768d 	.word	0x0800768d
 8007570:	0800768d 	.word	0x0800768d
 8007574:	0800760b 	.word	0x0800760b
 8007578:	0800768d 	.word	0x0800768d
 800757c:	0800768d 	.word	0x0800768d
 8007580:	0800768d 	.word	0x0800768d
 8007584:	0800764b 	.word	0x0800764b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	68b9      	ldr	r1, [r7, #8]
 800758e:	4618      	mov	r0, r3
 8007590:	f000 f950 	bl	8007834 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	699a      	ldr	r2, [r3, #24]
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	f042 0208 	orr.w	r2, r2, #8
 80075a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	699a      	ldr	r2, [r3, #24]
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	f022 0204 	bic.w	r2, r2, #4
 80075b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	6999      	ldr	r1, [r3, #24]
 80075ba:	68bb      	ldr	r3, [r7, #8]
 80075bc:	691a      	ldr	r2, [r3, #16]
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	430a      	orrs	r2, r1
 80075c4:	619a      	str	r2, [r3, #24]
      break;
 80075c6:	e064      	b.n	8007692 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	68b9      	ldr	r1, [r7, #8]
 80075ce:	4618      	mov	r0, r3
 80075d0:	f000 f9a0 	bl	8007914 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	699a      	ldr	r2, [r3, #24]
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80075e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	699a      	ldr	r2, [r3, #24]
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80075f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	6999      	ldr	r1, [r3, #24]
 80075fa:	68bb      	ldr	r3, [r7, #8]
 80075fc:	691b      	ldr	r3, [r3, #16]
 80075fe:	021a      	lsls	r2, r3, #8
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	430a      	orrs	r2, r1
 8007606:	619a      	str	r2, [r3, #24]
      break;
 8007608:	e043      	b.n	8007692 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	68b9      	ldr	r1, [r7, #8]
 8007610:	4618      	mov	r0, r3
 8007612:	f000 f9f5 	bl	8007a00 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	69da      	ldr	r2, [r3, #28]
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	f042 0208 	orr.w	r2, r2, #8
 8007624:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	69da      	ldr	r2, [r3, #28]
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	f022 0204 	bic.w	r2, r2, #4
 8007634:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	69d9      	ldr	r1, [r3, #28]
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	691a      	ldr	r2, [r3, #16]
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	430a      	orrs	r2, r1
 8007646:	61da      	str	r2, [r3, #28]
      break;
 8007648:	e023      	b.n	8007692 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	68b9      	ldr	r1, [r7, #8]
 8007650:	4618      	mov	r0, r3
 8007652:	f000 fa49 	bl	8007ae8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	69da      	ldr	r2, [r3, #28]
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007664:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	69da      	ldr	r2, [r3, #28]
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007674:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	69d9      	ldr	r1, [r3, #28]
 800767c:	68bb      	ldr	r3, [r7, #8]
 800767e:	691b      	ldr	r3, [r3, #16]
 8007680:	021a      	lsls	r2, r3, #8
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	430a      	orrs	r2, r1
 8007688:	61da      	str	r2, [r3, #28]
      break;
 800768a:	e002      	b.n	8007692 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800768c:	2301      	movs	r3, #1
 800768e:	75fb      	strb	r3, [r7, #23]
      break;
 8007690:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	2200      	movs	r2, #0
 8007696:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800769a:	7dfb      	ldrb	r3, [r7, #23]
}
 800769c:	4618      	mov	r0, r3
 800769e:	3718      	adds	r7, #24
 80076a0:	46bd      	mov	sp, r7
 80076a2:	bd80      	pop	{r7, pc}

080076a4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80076a4:	b480      	push	{r7}
 80076a6:	b083      	sub	sp, #12
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80076ac:	bf00      	nop
 80076ae:	370c      	adds	r7, #12
 80076b0:	46bd      	mov	sp, r7
 80076b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b6:	4770      	bx	lr

080076b8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80076b8:	b480      	push	{r7}
 80076ba:	b083      	sub	sp, #12
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80076c0:	bf00      	nop
 80076c2:	370c      	adds	r7, #12
 80076c4:	46bd      	mov	sp, r7
 80076c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ca:	4770      	bx	lr

080076cc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80076cc:	b480      	push	{r7}
 80076ce:	b083      	sub	sp, #12
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80076d4:	bf00      	nop
 80076d6:	370c      	adds	r7, #12
 80076d8:	46bd      	mov	sp, r7
 80076da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076de:	4770      	bx	lr

080076e0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80076e0:	b480      	push	{r7}
 80076e2:	b083      	sub	sp, #12
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80076e8:	bf00      	nop
 80076ea:	370c      	adds	r7, #12
 80076ec:	46bd      	mov	sp, r7
 80076ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f2:	4770      	bx	lr

080076f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80076f4:	b480      	push	{r7}
 80076f6:	b085      	sub	sp, #20
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
 80076fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	4a40      	ldr	r2, [pc, #256]	; (8007808 <TIM_Base_SetConfig+0x114>)
 8007708:	4293      	cmp	r3, r2
 800770a:	d013      	beq.n	8007734 <TIM_Base_SetConfig+0x40>
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007712:	d00f      	beq.n	8007734 <TIM_Base_SetConfig+0x40>
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	4a3d      	ldr	r2, [pc, #244]	; (800780c <TIM_Base_SetConfig+0x118>)
 8007718:	4293      	cmp	r3, r2
 800771a:	d00b      	beq.n	8007734 <TIM_Base_SetConfig+0x40>
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	4a3c      	ldr	r2, [pc, #240]	; (8007810 <TIM_Base_SetConfig+0x11c>)
 8007720:	4293      	cmp	r3, r2
 8007722:	d007      	beq.n	8007734 <TIM_Base_SetConfig+0x40>
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	4a3b      	ldr	r2, [pc, #236]	; (8007814 <TIM_Base_SetConfig+0x120>)
 8007728:	4293      	cmp	r3, r2
 800772a:	d003      	beq.n	8007734 <TIM_Base_SetConfig+0x40>
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	4a3a      	ldr	r2, [pc, #232]	; (8007818 <TIM_Base_SetConfig+0x124>)
 8007730:	4293      	cmp	r3, r2
 8007732:	d108      	bne.n	8007746 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800773a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	685b      	ldr	r3, [r3, #4]
 8007740:	68fa      	ldr	r2, [r7, #12]
 8007742:	4313      	orrs	r3, r2
 8007744:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	4a2f      	ldr	r2, [pc, #188]	; (8007808 <TIM_Base_SetConfig+0x114>)
 800774a:	4293      	cmp	r3, r2
 800774c:	d02b      	beq.n	80077a6 <TIM_Base_SetConfig+0xb2>
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007754:	d027      	beq.n	80077a6 <TIM_Base_SetConfig+0xb2>
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	4a2c      	ldr	r2, [pc, #176]	; (800780c <TIM_Base_SetConfig+0x118>)
 800775a:	4293      	cmp	r3, r2
 800775c:	d023      	beq.n	80077a6 <TIM_Base_SetConfig+0xb2>
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	4a2b      	ldr	r2, [pc, #172]	; (8007810 <TIM_Base_SetConfig+0x11c>)
 8007762:	4293      	cmp	r3, r2
 8007764:	d01f      	beq.n	80077a6 <TIM_Base_SetConfig+0xb2>
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	4a2a      	ldr	r2, [pc, #168]	; (8007814 <TIM_Base_SetConfig+0x120>)
 800776a:	4293      	cmp	r3, r2
 800776c:	d01b      	beq.n	80077a6 <TIM_Base_SetConfig+0xb2>
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	4a29      	ldr	r2, [pc, #164]	; (8007818 <TIM_Base_SetConfig+0x124>)
 8007772:	4293      	cmp	r3, r2
 8007774:	d017      	beq.n	80077a6 <TIM_Base_SetConfig+0xb2>
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	4a28      	ldr	r2, [pc, #160]	; (800781c <TIM_Base_SetConfig+0x128>)
 800777a:	4293      	cmp	r3, r2
 800777c:	d013      	beq.n	80077a6 <TIM_Base_SetConfig+0xb2>
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	4a27      	ldr	r2, [pc, #156]	; (8007820 <TIM_Base_SetConfig+0x12c>)
 8007782:	4293      	cmp	r3, r2
 8007784:	d00f      	beq.n	80077a6 <TIM_Base_SetConfig+0xb2>
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	4a26      	ldr	r2, [pc, #152]	; (8007824 <TIM_Base_SetConfig+0x130>)
 800778a:	4293      	cmp	r3, r2
 800778c:	d00b      	beq.n	80077a6 <TIM_Base_SetConfig+0xb2>
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	4a25      	ldr	r2, [pc, #148]	; (8007828 <TIM_Base_SetConfig+0x134>)
 8007792:	4293      	cmp	r3, r2
 8007794:	d007      	beq.n	80077a6 <TIM_Base_SetConfig+0xb2>
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	4a24      	ldr	r2, [pc, #144]	; (800782c <TIM_Base_SetConfig+0x138>)
 800779a:	4293      	cmp	r3, r2
 800779c:	d003      	beq.n	80077a6 <TIM_Base_SetConfig+0xb2>
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	4a23      	ldr	r2, [pc, #140]	; (8007830 <TIM_Base_SetConfig+0x13c>)
 80077a2:	4293      	cmp	r3, r2
 80077a4:	d108      	bne.n	80077b8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80077ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	68db      	ldr	r3, [r3, #12]
 80077b2:	68fa      	ldr	r2, [r7, #12]
 80077b4:	4313      	orrs	r3, r2
 80077b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	695b      	ldr	r3, [r3, #20]
 80077c2:	4313      	orrs	r3, r2
 80077c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	68fa      	ldr	r2, [r7, #12]
 80077ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80077cc:	683b      	ldr	r3, [r7, #0]
 80077ce:	689a      	ldr	r2, [r3, #8]
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	681a      	ldr	r2, [r3, #0]
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	4a0a      	ldr	r2, [pc, #40]	; (8007808 <TIM_Base_SetConfig+0x114>)
 80077e0:	4293      	cmp	r3, r2
 80077e2:	d003      	beq.n	80077ec <TIM_Base_SetConfig+0xf8>
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	4a0c      	ldr	r2, [pc, #48]	; (8007818 <TIM_Base_SetConfig+0x124>)
 80077e8:	4293      	cmp	r3, r2
 80077ea:	d103      	bne.n	80077f4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	691a      	ldr	r2, [r3, #16]
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2201      	movs	r2, #1
 80077f8:	615a      	str	r2, [r3, #20]
}
 80077fa:	bf00      	nop
 80077fc:	3714      	adds	r7, #20
 80077fe:	46bd      	mov	sp, r7
 8007800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007804:	4770      	bx	lr
 8007806:	bf00      	nop
 8007808:	40010000 	.word	0x40010000
 800780c:	40000400 	.word	0x40000400
 8007810:	40000800 	.word	0x40000800
 8007814:	40000c00 	.word	0x40000c00
 8007818:	40010400 	.word	0x40010400
 800781c:	40014000 	.word	0x40014000
 8007820:	40014400 	.word	0x40014400
 8007824:	40014800 	.word	0x40014800
 8007828:	40001800 	.word	0x40001800
 800782c:	40001c00 	.word	0x40001c00
 8007830:	40002000 	.word	0x40002000

08007834 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007834:	b480      	push	{r7}
 8007836:	b087      	sub	sp, #28
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
 800783c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	6a1b      	ldr	r3, [r3, #32]
 8007842:	f023 0201 	bic.w	r2, r3, #1
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	6a1b      	ldr	r3, [r3, #32]
 800784e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	685b      	ldr	r3, [r3, #4]
 8007854:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	699b      	ldr	r3, [r3, #24]
 800785a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007862:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	f023 0303 	bic.w	r3, r3, #3
 800786a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	68fa      	ldr	r2, [r7, #12]
 8007872:	4313      	orrs	r3, r2
 8007874:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007876:	697b      	ldr	r3, [r7, #20]
 8007878:	f023 0302 	bic.w	r3, r3, #2
 800787c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	689b      	ldr	r3, [r3, #8]
 8007882:	697a      	ldr	r2, [r7, #20]
 8007884:	4313      	orrs	r3, r2
 8007886:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	4a20      	ldr	r2, [pc, #128]	; (800790c <TIM_OC1_SetConfig+0xd8>)
 800788c:	4293      	cmp	r3, r2
 800788e:	d003      	beq.n	8007898 <TIM_OC1_SetConfig+0x64>
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	4a1f      	ldr	r2, [pc, #124]	; (8007910 <TIM_OC1_SetConfig+0xdc>)
 8007894:	4293      	cmp	r3, r2
 8007896:	d10c      	bne.n	80078b2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007898:	697b      	ldr	r3, [r7, #20]
 800789a:	f023 0308 	bic.w	r3, r3, #8
 800789e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80078a0:	683b      	ldr	r3, [r7, #0]
 80078a2:	68db      	ldr	r3, [r3, #12]
 80078a4:	697a      	ldr	r2, [r7, #20]
 80078a6:	4313      	orrs	r3, r2
 80078a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80078aa:	697b      	ldr	r3, [r7, #20]
 80078ac:	f023 0304 	bic.w	r3, r3, #4
 80078b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	4a15      	ldr	r2, [pc, #84]	; (800790c <TIM_OC1_SetConfig+0xd8>)
 80078b6:	4293      	cmp	r3, r2
 80078b8:	d003      	beq.n	80078c2 <TIM_OC1_SetConfig+0x8e>
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	4a14      	ldr	r2, [pc, #80]	; (8007910 <TIM_OC1_SetConfig+0xdc>)
 80078be:	4293      	cmp	r3, r2
 80078c0:	d111      	bne.n	80078e6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80078c2:	693b      	ldr	r3, [r7, #16]
 80078c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80078c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80078ca:	693b      	ldr	r3, [r7, #16]
 80078cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80078d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80078d2:	683b      	ldr	r3, [r7, #0]
 80078d4:	695b      	ldr	r3, [r3, #20]
 80078d6:	693a      	ldr	r2, [r7, #16]
 80078d8:	4313      	orrs	r3, r2
 80078da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	699b      	ldr	r3, [r3, #24]
 80078e0:	693a      	ldr	r2, [r7, #16]
 80078e2:	4313      	orrs	r3, r2
 80078e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	693a      	ldr	r2, [r7, #16]
 80078ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	68fa      	ldr	r2, [r7, #12]
 80078f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80078f2:	683b      	ldr	r3, [r7, #0]
 80078f4:	685a      	ldr	r2, [r3, #4]
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	697a      	ldr	r2, [r7, #20]
 80078fe:	621a      	str	r2, [r3, #32]
}
 8007900:	bf00      	nop
 8007902:	371c      	adds	r7, #28
 8007904:	46bd      	mov	sp, r7
 8007906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790a:	4770      	bx	lr
 800790c:	40010000 	.word	0x40010000
 8007910:	40010400 	.word	0x40010400

08007914 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007914:	b480      	push	{r7}
 8007916:	b087      	sub	sp, #28
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
 800791c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	6a1b      	ldr	r3, [r3, #32]
 8007922:	f023 0210 	bic.w	r2, r3, #16
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	6a1b      	ldr	r3, [r3, #32]
 800792e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	685b      	ldr	r3, [r3, #4]
 8007934:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	699b      	ldr	r3, [r3, #24]
 800793a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007942:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800794a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	021b      	lsls	r3, r3, #8
 8007952:	68fa      	ldr	r2, [r7, #12]
 8007954:	4313      	orrs	r3, r2
 8007956:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007958:	697b      	ldr	r3, [r7, #20]
 800795a:	f023 0320 	bic.w	r3, r3, #32
 800795e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	689b      	ldr	r3, [r3, #8]
 8007964:	011b      	lsls	r3, r3, #4
 8007966:	697a      	ldr	r2, [r7, #20]
 8007968:	4313      	orrs	r3, r2
 800796a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	4a22      	ldr	r2, [pc, #136]	; (80079f8 <TIM_OC2_SetConfig+0xe4>)
 8007970:	4293      	cmp	r3, r2
 8007972:	d003      	beq.n	800797c <TIM_OC2_SetConfig+0x68>
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	4a21      	ldr	r2, [pc, #132]	; (80079fc <TIM_OC2_SetConfig+0xe8>)
 8007978:	4293      	cmp	r3, r2
 800797a:	d10d      	bne.n	8007998 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800797c:	697b      	ldr	r3, [r7, #20]
 800797e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007982:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007984:	683b      	ldr	r3, [r7, #0]
 8007986:	68db      	ldr	r3, [r3, #12]
 8007988:	011b      	lsls	r3, r3, #4
 800798a:	697a      	ldr	r2, [r7, #20]
 800798c:	4313      	orrs	r3, r2
 800798e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007990:	697b      	ldr	r3, [r7, #20]
 8007992:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007996:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	4a17      	ldr	r2, [pc, #92]	; (80079f8 <TIM_OC2_SetConfig+0xe4>)
 800799c:	4293      	cmp	r3, r2
 800799e:	d003      	beq.n	80079a8 <TIM_OC2_SetConfig+0x94>
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	4a16      	ldr	r2, [pc, #88]	; (80079fc <TIM_OC2_SetConfig+0xe8>)
 80079a4:	4293      	cmp	r3, r2
 80079a6:	d113      	bne.n	80079d0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80079a8:	693b      	ldr	r3, [r7, #16]
 80079aa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80079ae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80079b0:	693b      	ldr	r3, [r7, #16]
 80079b2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80079b6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	695b      	ldr	r3, [r3, #20]
 80079bc:	009b      	lsls	r3, r3, #2
 80079be:	693a      	ldr	r2, [r7, #16]
 80079c0:	4313      	orrs	r3, r2
 80079c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	699b      	ldr	r3, [r3, #24]
 80079c8:	009b      	lsls	r3, r3, #2
 80079ca:	693a      	ldr	r2, [r7, #16]
 80079cc:	4313      	orrs	r3, r2
 80079ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	693a      	ldr	r2, [r7, #16]
 80079d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	68fa      	ldr	r2, [r7, #12]
 80079da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	685a      	ldr	r2, [r3, #4]
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	697a      	ldr	r2, [r7, #20]
 80079e8:	621a      	str	r2, [r3, #32]
}
 80079ea:	bf00      	nop
 80079ec:	371c      	adds	r7, #28
 80079ee:	46bd      	mov	sp, r7
 80079f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f4:	4770      	bx	lr
 80079f6:	bf00      	nop
 80079f8:	40010000 	.word	0x40010000
 80079fc:	40010400 	.word	0x40010400

08007a00 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007a00:	b480      	push	{r7}
 8007a02:	b087      	sub	sp, #28
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
 8007a08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	6a1b      	ldr	r3, [r3, #32]
 8007a0e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	6a1b      	ldr	r3, [r3, #32]
 8007a1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	685b      	ldr	r3, [r3, #4]
 8007a20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	69db      	ldr	r3, [r3, #28]
 8007a26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	f023 0303 	bic.w	r3, r3, #3
 8007a36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	68fa      	ldr	r2, [r7, #12]
 8007a3e:	4313      	orrs	r3, r2
 8007a40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007a42:	697b      	ldr	r3, [r7, #20]
 8007a44:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007a48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007a4a:	683b      	ldr	r3, [r7, #0]
 8007a4c:	689b      	ldr	r3, [r3, #8]
 8007a4e:	021b      	lsls	r3, r3, #8
 8007a50:	697a      	ldr	r2, [r7, #20]
 8007a52:	4313      	orrs	r3, r2
 8007a54:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	4a21      	ldr	r2, [pc, #132]	; (8007ae0 <TIM_OC3_SetConfig+0xe0>)
 8007a5a:	4293      	cmp	r3, r2
 8007a5c:	d003      	beq.n	8007a66 <TIM_OC3_SetConfig+0x66>
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	4a20      	ldr	r2, [pc, #128]	; (8007ae4 <TIM_OC3_SetConfig+0xe4>)
 8007a62:	4293      	cmp	r3, r2
 8007a64:	d10d      	bne.n	8007a82 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007a66:	697b      	ldr	r3, [r7, #20]
 8007a68:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007a6c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007a6e:	683b      	ldr	r3, [r7, #0]
 8007a70:	68db      	ldr	r3, [r3, #12]
 8007a72:	021b      	lsls	r3, r3, #8
 8007a74:	697a      	ldr	r2, [r7, #20]
 8007a76:	4313      	orrs	r3, r2
 8007a78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007a7a:	697b      	ldr	r3, [r7, #20]
 8007a7c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007a80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	4a16      	ldr	r2, [pc, #88]	; (8007ae0 <TIM_OC3_SetConfig+0xe0>)
 8007a86:	4293      	cmp	r3, r2
 8007a88:	d003      	beq.n	8007a92 <TIM_OC3_SetConfig+0x92>
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	4a15      	ldr	r2, [pc, #84]	; (8007ae4 <TIM_OC3_SetConfig+0xe4>)
 8007a8e:	4293      	cmp	r3, r2
 8007a90:	d113      	bne.n	8007aba <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007a92:	693b      	ldr	r3, [r7, #16]
 8007a94:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007a98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007a9a:	693b      	ldr	r3, [r7, #16]
 8007a9c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007aa0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007aa2:	683b      	ldr	r3, [r7, #0]
 8007aa4:	695b      	ldr	r3, [r3, #20]
 8007aa6:	011b      	lsls	r3, r3, #4
 8007aa8:	693a      	ldr	r2, [r7, #16]
 8007aaa:	4313      	orrs	r3, r2
 8007aac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	699b      	ldr	r3, [r3, #24]
 8007ab2:	011b      	lsls	r3, r3, #4
 8007ab4:	693a      	ldr	r2, [r7, #16]
 8007ab6:	4313      	orrs	r3, r2
 8007ab8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	693a      	ldr	r2, [r7, #16]
 8007abe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	68fa      	ldr	r2, [r7, #12]
 8007ac4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007ac6:	683b      	ldr	r3, [r7, #0]
 8007ac8:	685a      	ldr	r2, [r3, #4]
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	697a      	ldr	r2, [r7, #20]
 8007ad2:	621a      	str	r2, [r3, #32]
}
 8007ad4:	bf00      	nop
 8007ad6:	371c      	adds	r7, #28
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ade:	4770      	bx	lr
 8007ae0:	40010000 	.word	0x40010000
 8007ae4:	40010400 	.word	0x40010400

08007ae8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007ae8:	b480      	push	{r7}
 8007aea:	b087      	sub	sp, #28
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
 8007af0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	6a1b      	ldr	r3, [r3, #32]
 8007af6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	6a1b      	ldr	r3, [r3, #32]
 8007b02:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	685b      	ldr	r3, [r3, #4]
 8007b08:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	69db      	ldr	r3, [r3, #28]
 8007b0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	021b      	lsls	r3, r3, #8
 8007b26:	68fa      	ldr	r2, [r7, #12]
 8007b28:	4313      	orrs	r3, r2
 8007b2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007b2c:	693b      	ldr	r3, [r7, #16]
 8007b2e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007b32:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007b34:	683b      	ldr	r3, [r7, #0]
 8007b36:	689b      	ldr	r3, [r3, #8]
 8007b38:	031b      	lsls	r3, r3, #12
 8007b3a:	693a      	ldr	r2, [r7, #16]
 8007b3c:	4313      	orrs	r3, r2
 8007b3e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	4a12      	ldr	r2, [pc, #72]	; (8007b8c <TIM_OC4_SetConfig+0xa4>)
 8007b44:	4293      	cmp	r3, r2
 8007b46:	d003      	beq.n	8007b50 <TIM_OC4_SetConfig+0x68>
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	4a11      	ldr	r2, [pc, #68]	; (8007b90 <TIM_OC4_SetConfig+0xa8>)
 8007b4c:	4293      	cmp	r3, r2
 8007b4e:	d109      	bne.n	8007b64 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007b50:	697b      	ldr	r3, [r7, #20]
 8007b52:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007b56:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	695b      	ldr	r3, [r3, #20]
 8007b5c:	019b      	lsls	r3, r3, #6
 8007b5e:	697a      	ldr	r2, [r7, #20]
 8007b60:	4313      	orrs	r3, r2
 8007b62:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	697a      	ldr	r2, [r7, #20]
 8007b68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	68fa      	ldr	r2, [r7, #12]
 8007b6e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	685a      	ldr	r2, [r3, #4]
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	693a      	ldr	r2, [r7, #16]
 8007b7c:	621a      	str	r2, [r3, #32]
}
 8007b7e:	bf00      	nop
 8007b80:	371c      	adds	r7, #28
 8007b82:	46bd      	mov	sp, r7
 8007b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b88:	4770      	bx	lr
 8007b8a:	bf00      	nop
 8007b8c:	40010000 	.word	0x40010000
 8007b90:	40010400 	.word	0x40010400

08007b94 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007b94:	b480      	push	{r7}
 8007b96:	b087      	sub	sp, #28
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	60f8      	str	r0, [r7, #12]
 8007b9c:	60b9      	str	r1, [r7, #8]
 8007b9e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007ba0:	68bb      	ldr	r3, [r7, #8]
 8007ba2:	f003 031f 	and.w	r3, r3, #31
 8007ba6:	2201      	movs	r2, #1
 8007ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8007bac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	6a1a      	ldr	r2, [r3, #32]
 8007bb2:	697b      	ldr	r3, [r7, #20]
 8007bb4:	43db      	mvns	r3, r3
 8007bb6:	401a      	ands	r2, r3
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	6a1a      	ldr	r2, [r3, #32]
 8007bc0:	68bb      	ldr	r3, [r7, #8]
 8007bc2:	f003 031f 	and.w	r3, r3, #31
 8007bc6:	6879      	ldr	r1, [r7, #4]
 8007bc8:	fa01 f303 	lsl.w	r3, r1, r3
 8007bcc:	431a      	orrs	r2, r3
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	621a      	str	r2, [r3, #32]
}
 8007bd2:	bf00      	nop
 8007bd4:	371c      	adds	r7, #28
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bdc:	4770      	bx	lr
	...

08007be0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007be0:	b480      	push	{r7}
 8007be2:	b085      	sub	sp, #20
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
 8007be8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007bf0:	2b01      	cmp	r3, #1
 8007bf2:	d101      	bne.n	8007bf8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007bf4:	2302      	movs	r3, #2
 8007bf6:	e05a      	b.n	8007cae <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2201      	movs	r2, #1
 8007bfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	2202      	movs	r2, #2
 8007c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	685b      	ldr	r3, [r3, #4]
 8007c0e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	689b      	ldr	r3, [r3, #8]
 8007c16:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c1e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	68fa      	ldr	r2, [r7, #12]
 8007c26:	4313      	orrs	r3, r2
 8007c28:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	68fa      	ldr	r2, [r7, #12]
 8007c30:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	4a21      	ldr	r2, [pc, #132]	; (8007cbc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007c38:	4293      	cmp	r3, r2
 8007c3a:	d022      	beq.n	8007c82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c44:	d01d      	beq.n	8007c82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	4a1d      	ldr	r2, [pc, #116]	; (8007cc0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007c4c:	4293      	cmp	r3, r2
 8007c4e:	d018      	beq.n	8007c82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	4a1b      	ldr	r2, [pc, #108]	; (8007cc4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007c56:	4293      	cmp	r3, r2
 8007c58:	d013      	beq.n	8007c82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	4a1a      	ldr	r2, [pc, #104]	; (8007cc8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007c60:	4293      	cmp	r3, r2
 8007c62:	d00e      	beq.n	8007c82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	4a18      	ldr	r2, [pc, #96]	; (8007ccc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007c6a:	4293      	cmp	r3, r2
 8007c6c:	d009      	beq.n	8007c82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	4a17      	ldr	r2, [pc, #92]	; (8007cd0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007c74:	4293      	cmp	r3, r2
 8007c76:	d004      	beq.n	8007c82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	4a15      	ldr	r2, [pc, #84]	; (8007cd4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007c7e:	4293      	cmp	r3, r2
 8007c80:	d10c      	bne.n	8007c9c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007c82:	68bb      	ldr	r3, [r7, #8]
 8007c84:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007c88:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007c8a:	683b      	ldr	r3, [r7, #0]
 8007c8c:	685b      	ldr	r3, [r3, #4]
 8007c8e:	68ba      	ldr	r2, [r7, #8]
 8007c90:	4313      	orrs	r3, r2
 8007c92:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	68ba      	ldr	r2, [r7, #8]
 8007c9a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2201      	movs	r2, #1
 8007ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007cac:	2300      	movs	r3, #0
}
 8007cae:	4618      	mov	r0, r3
 8007cb0:	3714      	adds	r7, #20
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb8:	4770      	bx	lr
 8007cba:	bf00      	nop
 8007cbc:	40010000 	.word	0x40010000
 8007cc0:	40000400 	.word	0x40000400
 8007cc4:	40000800 	.word	0x40000800
 8007cc8:	40000c00 	.word	0x40000c00
 8007ccc:	40010400 	.word	0x40010400
 8007cd0:	40014000 	.word	0x40014000
 8007cd4:	40001800 	.word	0x40001800

08007cd8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007cd8:	b480      	push	{r7}
 8007cda:	b085      	sub	sp, #20
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
 8007ce0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007cec:	2b01      	cmp	r3, #1
 8007cee:	d101      	bne.n	8007cf4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007cf0:	2302      	movs	r3, #2
 8007cf2:	e03d      	b.n	8007d70 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2201      	movs	r2, #1
 8007cf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007d02:	683b      	ldr	r3, [r7, #0]
 8007d04:	68db      	ldr	r3, [r3, #12]
 8007d06:	4313      	orrs	r3, r2
 8007d08:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	689b      	ldr	r3, [r3, #8]
 8007d14:	4313      	orrs	r3, r2
 8007d16:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007d1e:	683b      	ldr	r3, [r7, #0]
 8007d20:	685b      	ldr	r3, [r3, #4]
 8007d22:	4313      	orrs	r3, r2
 8007d24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	4313      	orrs	r3, r2
 8007d32:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	691b      	ldr	r3, [r3, #16]
 8007d3e:	4313      	orrs	r3, r2
 8007d40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	695b      	ldr	r3, [r3, #20]
 8007d4c:	4313      	orrs	r3, r2
 8007d4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007d56:	683b      	ldr	r3, [r7, #0]
 8007d58:	69db      	ldr	r3, [r3, #28]
 8007d5a:	4313      	orrs	r3, r2
 8007d5c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	68fa      	ldr	r2, [r7, #12]
 8007d64:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	2200      	movs	r2, #0
 8007d6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007d6e:	2300      	movs	r3, #0
}
 8007d70:	4618      	mov	r0, r3
 8007d72:	3714      	adds	r7, #20
 8007d74:	46bd      	mov	sp, r7
 8007d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7a:	4770      	bx	lr

08007d7c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007d7c:	b480      	push	{r7}
 8007d7e:	b083      	sub	sp, #12
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007d84:	bf00      	nop
 8007d86:	370c      	adds	r7, #12
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8e:	4770      	bx	lr

08007d90 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007d90:	b480      	push	{r7}
 8007d92:	b083      	sub	sp, #12
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007d98:	bf00      	nop
 8007d9a:	370c      	adds	r7, #12
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da2:	4770      	bx	lr

08007da4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b082      	sub	sp, #8
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d101      	bne.n	8007db6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007db2:	2301      	movs	r3, #1
 8007db4:	e03f      	b.n	8007e36 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007dbc:	b2db      	uxtb	r3, r3
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d106      	bne.n	8007dd0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007dca:	6878      	ldr	r0, [r7, #4]
 8007dcc:	f7f9 fb3c 	bl	8001448 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2224      	movs	r2, #36	; 0x24
 8007dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	68da      	ldr	r2, [r3, #12]
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007de6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007de8:	6878      	ldr	r0, [r7, #4]
 8007dea:	f000 f829 	bl	8007e40 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	691a      	ldr	r2, [r3, #16]
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007dfc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	695a      	ldr	r2, [r3, #20]
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007e0c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	68da      	ldr	r2, [r3, #12]
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007e1c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2200      	movs	r2, #0
 8007e22:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2220      	movs	r2, #32
 8007e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2220      	movs	r2, #32
 8007e30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007e34:	2300      	movs	r3, #0
}
 8007e36:	4618      	mov	r0, r3
 8007e38:	3708      	adds	r7, #8
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	bd80      	pop	{r7, pc}
	...

08007e40 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e44:	b09f      	sub	sp, #124	; 0x7c
 8007e46:	af00      	add	r7, sp, #0
 8007e48:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007e4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	691b      	ldr	r3, [r3, #16]
 8007e50:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007e54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e56:	68d9      	ldr	r1, [r3, #12]
 8007e58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e5a:	681a      	ldr	r2, [r3, #0]
 8007e5c:	ea40 0301 	orr.w	r3, r0, r1
 8007e60:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007e62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e64:	689a      	ldr	r2, [r3, #8]
 8007e66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e68:	691b      	ldr	r3, [r3, #16]
 8007e6a:	431a      	orrs	r2, r3
 8007e6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e6e:	695b      	ldr	r3, [r3, #20]
 8007e70:	431a      	orrs	r2, r3
 8007e72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e74:	69db      	ldr	r3, [r3, #28]
 8007e76:	4313      	orrs	r3, r2
 8007e78:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8007e7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	68db      	ldr	r3, [r3, #12]
 8007e80:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007e84:	f021 010c 	bic.w	r1, r1, #12
 8007e88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e8a:	681a      	ldr	r2, [r3, #0]
 8007e8c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007e8e:	430b      	orrs	r3, r1
 8007e90:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007e92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	695b      	ldr	r3, [r3, #20]
 8007e98:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007e9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e9e:	6999      	ldr	r1, [r3, #24]
 8007ea0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ea2:	681a      	ldr	r2, [r3, #0]
 8007ea4:	ea40 0301 	orr.w	r3, r0, r1
 8007ea8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007eaa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007eac:	681a      	ldr	r2, [r3, #0]
 8007eae:	4bc5      	ldr	r3, [pc, #788]	; (80081c4 <UART_SetConfig+0x384>)
 8007eb0:	429a      	cmp	r2, r3
 8007eb2:	d004      	beq.n	8007ebe <UART_SetConfig+0x7e>
 8007eb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007eb6:	681a      	ldr	r2, [r3, #0]
 8007eb8:	4bc3      	ldr	r3, [pc, #780]	; (80081c8 <UART_SetConfig+0x388>)
 8007eba:	429a      	cmp	r2, r3
 8007ebc:	d103      	bne.n	8007ec6 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007ebe:	f7fe fec9 	bl	8006c54 <HAL_RCC_GetPCLK2Freq>
 8007ec2:	6778      	str	r0, [r7, #116]	; 0x74
 8007ec4:	e002      	b.n	8007ecc <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007ec6:	f7fe feb1 	bl	8006c2c <HAL_RCC_GetPCLK1Freq>
 8007eca:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007ecc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ece:	69db      	ldr	r3, [r3, #28]
 8007ed0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ed4:	f040 80b6 	bne.w	8008044 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007ed8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007eda:	461c      	mov	r4, r3
 8007edc:	f04f 0500 	mov.w	r5, #0
 8007ee0:	4622      	mov	r2, r4
 8007ee2:	462b      	mov	r3, r5
 8007ee4:	1891      	adds	r1, r2, r2
 8007ee6:	6439      	str	r1, [r7, #64]	; 0x40
 8007ee8:	415b      	adcs	r3, r3
 8007eea:	647b      	str	r3, [r7, #68]	; 0x44
 8007eec:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007ef0:	1912      	adds	r2, r2, r4
 8007ef2:	eb45 0303 	adc.w	r3, r5, r3
 8007ef6:	f04f 0000 	mov.w	r0, #0
 8007efa:	f04f 0100 	mov.w	r1, #0
 8007efe:	00d9      	lsls	r1, r3, #3
 8007f00:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007f04:	00d0      	lsls	r0, r2, #3
 8007f06:	4602      	mov	r2, r0
 8007f08:	460b      	mov	r3, r1
 8007f0a:	1911      	adds	r1, r2, r4
 8007f0c:	6639      	str	r1, [r7, #96]	; 0x60
 8007f0e:	416b      	adcs	r3, r5
 8007f10:	667b      	str	r3, [r7, #100]	; 0x64
 8007f12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f14:	685b      	ldr	r3, [r3, #4]
 8007f16:	461a      	mov	r2, r3
 8007f18:	f04f 0300 	mov.w	r3, #0
 8007f1c:	1891      	adds	r1, r2, r2
 8007f1e:	63b9      	str	r1, [r7, #56]	; 0x38
 8007f20:	415b      	adcs	r3, r3
 8007f22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007f24:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007f28:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8007f2c:	f7f8 f94c 	bl	80001c8 <__aeabi_uldivmod>
 8007f30:	4602      	mov	r2, r0
 8007f32:	460b      	mov	r3, r1
 8007f34:	4ba5      	ldr	r3, [pc, #660]	; (80081cc <UART_SetConfig+0x38c>)
 8007f36:	fba3 2302 	umull	r2, r3, r3, r2
 8007f3a:	095b      	lsrs	r3, r3, #5
 8007f3c:	011e      	lsls	r6, r3, #4
 8007f3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007f40:	461c      	mov	r4, r3
 8007f42:	f04f 0500 	mov.w	r5, #0
 8007f46:	4622      	mov	r2, r4
 8007f48:	462b      	mov	r3, r5
 8007f4a:	1891      	adds	r1, r2, r2
 8007f4c:	6339      	str	r1, [r7, #48]	; 0x30
 8007f4e:	415b      	adcs	r3, r3
 8007f50:	637b      	str	r3, [r7, #52]	; 0x34
 8007f52:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007f56:	1912      	adds	r2, r2, r4
 8007f58:	eb45 0303 	adc.w	r3, r5, r3
 8007f5c:	f04f 0000 	mov.w	r0, #0
 8007f60:	f04f 0100 	mov.w	r1, #0
 8007f64:	00d9      	lsls	r1, r3, #3
 8007f66:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007f6a:	00d0      	lsls	r0, r2, #3
 8007f6c:	4602      	mov	r2, r0
 8007f6e:	460b      	mov	r3, r1
 8007f70:	1911      	adds	r1, r2, r4
 8007f72:	65b9      	str	r1, [r7, #88]	; 0x58
 8007f74:	416b      	adcs	r3, r5
 8007f76:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007f78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f7a:	685b      	ldr	r3, [r3, #4]
 8007f7c:	461a      	mov	r2, r3
 8007f7e:	f04f 0300 	mov.w	r3, #0
 8007f82:	1891      	adds	r1, r2, r2
 8007f84:	62b9      	str	r1, [r7, #40]	; 0x28
 8007f86:	415b      	adcs	r3, r3
 8007f88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007f8a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007f8e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8007f92:	f7f8 f919 	bl	80001c8 <__aeabi_uldivmod>
 8007f96:	4602      	mov	r2, r0
 8007f98:	460b      	mov	r3, r1
 8007f9a:	4b8c      	ldr	r3, [pc, #560]	; (80081cc <UART_SetConfig+0x38c>)
 8007f9c:	fba3 1302 	umull	r1, r3, r3, r2
 8007fa0:	095b      	lsrs	r3, r3, #5
 8007fa2:	2164      	movs	r1, #100	; 0x64
 8007fa4:	fb01 f303 	mul.w	r3, r1, r3
 8007fa8:	1ad3      	subs	r3, r2, r3
 8007faa:	00db      	lsls	r3, r3, #3
 8007fac:	3332      	adds	r3, #50	; 0x32
 8007fae:	4a87      	ldr	r2, [pc, #540]	; (80081cc <UART_SetConfig+0x38c>)
 8007fb0:	fba2 2303 	umull	r2, r3, r2, r3
 8007fb4:	095b      	lsrs	r3, r3, #5
 8007fb6:	005b      	lsls	r3, r3, #1
 8007fb8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007fbc:	441e      	add	r6, r3
 8007fbe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	f04f 0100 	mov.w	r1, #0
 8007fc6:	4602      	mov	r2, r0
 8007fc8:	460b      	mov	r3, r1
 8007fca:	1894      	adds	r4, r2, r2
 8007fcc:	623c      	str	r4, [r7, #32]
 8007fce:	415b      	adcs	r3, r3
 8007fd0:	627b      	str	r3, [r7, #36]	; 0x24
 8007fd2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007fd6:	1812      	adds	r2, r2, r0
 8007fd8:	eb41 0303 	adc.w	r3, r1, r3
 8007fdc:	f04f 0400 	mov.w	r4, #0
 8007fe0:	f04f 0500 	mov.w	r5, #0
 8007fe4:	00dd      	lsls	r5, r3, #3
 8007fe6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007fea:	00d4      	lsls	r4, r2, #3
 8007fec:	4622      	mov	r2, r4
 8007fee:	462b      	mov	r3, r5
 8007ff0:	1814      	adds	r4, r2, r0
 8007ff2:	653c      	str	r4, [r7, #80]	; 0x50
 8007ff4:	414b      	adcs	r3, r1
 8007ff6:	657b      	str	r3, [r7, #84]	; 0x54
 8007ff8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ffa:	685b      	ldr	r3, [r3, #4]
 8007ffc:	461a      	mov	r2, r3
 8007ffe:	f04f 0300 	mov.w	r3, #0
 8008002:	1891      	adds	r1, r2, r2
 8008004:	61b9      	str	r1, [r7, #24]
 8008006:	415b      	adcs	r3, r3
 8008008:	61fb      	str	r3, [r7, #28]
 800800a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800800e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8008012:	f7f8 f8d9 	bl	80001c8 <__aeabi_uldivmod>
 8008016:	4602      	mov	r2, r0
 8008018:	460b      	mov	r3, r1
 800801a:	4b6c      	ldr	r3, [pc, #432]	; (80081cc <UART_SetConfig+0x38c>)
 800801c:	fba3 1302 	umull	r1, r3, r3, r2
 8008020:	095b      	lsrs	r3, r3, #5
 8008022:	2164      	movs	r1, #100	; 0x64
 8008024:	fb01 f303 	mul.w	r3, r1, r3
 8008028:	1ad3      	subs	r3, r2, r3
 800802a:	00db      	lsls	r3, r3, #3
 800802c:	3332      	adds	r3, #50	; 0x32
 800802e:	4a67      	ldr	r2, [pc, #412]	; (80081cc <UART_SetConfig+0x38c>)
 8008030:	fba2 2303 	umull	r2, r3, r2, r3
 8008034:	095b      	lsrs	r3, r3, #5
 8008036:	f003 0207 	and.w	r2, r3, #7
 800803a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	4432      	add	r2, r6
 8008040:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008042:	e0b9      	b.n	80081b8 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008044:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008046:	461c      	mov	r4, r3
 8008048:	f04f 0500 	mov.w	r5, #0
 800804c:	4622      	mov	r2, r4
 800804e:	462b      	mov	r3, r5
 8008050:	1891      	adds	r1, r2, r2
 8008052:	6139      	str	r1, [r7, #16]
 8008054:	415b      	adcs	r3, r3
 8008056:	617b      	str	r3, [r7, #20]
 8008058:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800805c:	1912      	adds	r2, r2, r4
 800805e:	eb45 0303 	adc.w	r3, r5, r3
 8008062:	f04f 0000 	mov.w	r0, #0
 8008066:	f04f 0100 	mov.w	r1, #0
 800806a:	00d9      	lsls	r1, r3, #3
 800806c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008070:	00d0      	lsls	r0, r2, #3
 8008072:	4602      	mov	r2, r0
 8008074:	460b      	mov	r3, r1
 8008076:	eb12 0804 	adds.w	r8, r2, r4
 800807a:	eb43 0905 	adc.w	r9, r3, r5
 800807e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008080:	685b      	ldr	r3, [r3, #4]
 8008082:	4618      	mov	r0, r3
 8008084:	f04f 0100 	mov.w	r1, #0
 8008088:	f04f 0200 	mov.w	r2, #0
 800808c:	f04f 0300 	mov.w	r3, #0
 8008090:	008b      	lsls	r3, r1, #2
 8008092:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008096:	0082      	lsls	r2, r0, #2
 8008098:	4640      	mov	r0, r8
 800809a:	4649      	mov	r1, r9
 800809c:	f7f8 f894 	bl	80001c8 <__aeabi_uldivmod>
 80080a0:	4602      	mov	r2, r0
 80080a2:	460b      	mov	r3, r1
 80080a4:	4b49      	ldr	r3, [pc, #292]	; (80081cc <UART_SetConfig+0x38c>)
 80080a6:	fba3 2302 	umull	r2, r3, r3, r2
 80080aa:	095b      	lsrs	r3, r3, #5
 80080ac:	011e      	lsls	r6, r3, #4
 80080ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80080b0:	4618      	mov	r0, r3
 80080b2:	f04f 0100 	mov.w	r1, #0
 80080b6:	4602      	mov	r2, r0
 80080b8:	460b      	mov	r3, r1
 80080ba:	1894      	adds	r4, r2, r2
 80080bc:	60bc      	str	r4, [r7, #8]
 80080be:	415b      	adcs	r3, r3
 80080c0:	60fb      	str	r3, [r7, #12]
 80080c2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80080c6:	1812      	adds	r2, r2, r0
 80080c8:	eb41 0303 	adc.w	r3, r1, r3
 80080cc:	f04f 0400 	mov.w	r4, #0
 80080d0:	f04f 0500 	mov.w	r5, #0
 80080d4:	00dd      	lsls	r5, r3, #3
 80080d6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80080da:	00d4      	lsls	r4, r2, #3
 80080dc:	4622      	mov	r2, r4
 80080de:	462b      	mov	r3, r5
 80080e0:	1814      	adds	r4, r2, r0
 80080e2:	64bc      	str	r4, [r7, #72]	; 0x48
 80080e4:	414b      	adcs	r3, r1
 80080e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80080e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080ea:	685b      	ldr	r3, [r3, #4]
 80080ec:	4618      	mov	r0, r3
 80080ee:	f04f 0100 	mov.w	r1, #0
 80080f2:	f04f 0200 	mov.w	r2, #0
 80080f6:	f04f 0300 	mov.w	r3, #0
 80080fa:	008b      	lsls	r3, r1, #2
 80080fc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008100:	0082      	lsls	r2, r0, #2
 8008102:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8008106:	f7f8 f85f 	bl	80001c8 <__aeabi_uldivmod>
 800810a:	4602      	mov	r2, r0
 800810c:	460b      	mov	r3, r1
 800810e:	4b2f      	ldr	r3, [pc, #188]	; (80081cc <UART_SetConfig+0x38c>)
 8008110:	fba3 1302 	umull	r1, r3, r3, r2
 8008114:	095b      	lsrs	r3, r3, #5
 8008116:	2164      	movs	r1, #100	; 0x64
 8008118:	fb01 f303 	mul.w	r3, r1, r3
 800811c:	1ad3      	subs	r3, r2, r3
 800811e:	011b      	lsls	r3, r3, #4
 8008120:	3332      	adds	r3, #50	; 0x32
 8008122:	4a2a      	ldr	r2, [pc, #168]	; (80081cc <UART_SetConfig+0x38c>)
 8008124:	fba2 2303 	umull	r2, r3, r2, r3
 8008128:	095b      	lsrs	r3, r3, #5
 800812a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800812e:	441e      	add	r6, r3
 8008130:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008132:	4618      	mov	r0, r3
 8008134:	f04f 0100 	mov.w	r1, #0
 8008138:	4602      	mov	r2, r0
 800813a:	460b      	mov	r3, r1
 800813c:	1894      	adds	r4, r2, r2
 800813e:	603c      	str	r4, [r7, #0]
 8008140:	415b      	adcs	r3, r3
 8008142:	607b      	str	r3, [r7, #4]
 8008144:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008148:	1812      	adds	r2, r2, r0
 800814a:	eb41 0303 	adc.w	r3, r1, r3
 800814e:	f04f 0400 	mov.w	r4, #0
 8008152:	f04f 0500 	mov.w	r5, #0
 8008156:	00dd      	lsls	r5, r3, #3
 8008158:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800815c:	00d4      	lsls	r4, r2, #3
 800815e:	4622      	mov	r2, r4
 8008160:	462b      	mov	r3, r5
 8008162:	eb12 0a00 	adds.w	sl, r2, r0
 8008166:	eb43 0b01 	adc.w	fp, r3, r1
 800816a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800816c:	685b      	ldr	r3, [r3, #4]
 800816e:	4618      	mov	r0, r3
 8008170:	f04f 0100 	mov.w	r1, #0
 8008174:	f04f 0200 	mov.w	r2, #0
 8008178:	f04f 0300 	mov.w	r3, #0
 800817c:	008b      	lsls	r3, r1, #2
 800817e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008182:	0082      	lsls	r2, r0, #2
 8008184:	4650      	mov	r0, sl
 8008186:	4659      	mov	r1, fp
 8008188:	f7f8 f81e 	bl	80001c8 <__aeabi_uldivmod>
 800818c:	4602      	mov	r2, r0
 800818e:	460b      	mov	r3, r1
 8008190:	4b0e      	ldr	r3, [pc, #56]	; (80081cc <UART_SetConfig+0x38c>)
 8008192:	fba3 1302 	umull	r1, r3, r3, r2
 8008196:	095b      	lsrs	r3, r3, #5
 8008198:	2164      	movs	r1, #100	; 0x64
 800819a:	fb01 f303 	mul.w	r3, r1, r3
 800819e:	1ad3      	subs	r3, r2, r3
 80081a0:	011b      	lsls	r3, r3, #4
 80081a2:	3332      	adds	r3, #50	; 0x32
 80081a4:	4a09      	ldr	r2, [pc, #36]	; (80081cc <UART_SetConfig+0x38c>)
 80081a6:	fba2 2303 	umull	r2, r3, r2, r3
 80081aa:	095b      	lsrs	r3, r3, #5
 80081ac:	f003 020f 	and.w	r2, r3, #15
 80081b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	4432      	add	r2, r6
 80081b6:	609a      	str	r2, [r3, #8]
}
 80081b8:	bf00      	nop
 80081ba:	377c      	adds	r7, #124	; 0x7c
 80081bc:	46bd      	mov	sp, r7
 80081be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081c2:	bf00      	nop
 80081c4:	40011000 	.word	0x40011000
 80081c8:	40011400 	.word	0x40011400
 80081cc:	51eb851f 	.word	0x51eb851f

080081d0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80081d0:	b084      	sub	sp, #16
 80081d2:	b580      	push	{r7, lr}
 80081d4:	b084      	sub	sp, #16
 80081d6:	af00      	add	r7, sp, #0
 80081d8:	6078      	str	r0, [r7, #4]
 80081da:	f107 001c 	add.w	r0, r7, #28
 80081de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80081e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081e4:	2b01      	cmp	r3, #1
 80081e6:	d122      	bne.n	800822e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081ec:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	68db      	ldr	r3, [r3, #12]
 80081f8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80081fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008200:	687a      	ldr	r2, [r7, #4]
 8008202:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	68db      	ldr	r3, [r3, #12]
 8008208:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008210:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008212:	2b01      	cmp	r3, #1
 8008214:	d105      	bne.n	8008222 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	68db      	ldr	r3, [r3, #12]
 800821a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008222:	6878      	ldr	r0, [r7, #4]
 8008224:	f000 f9a0 	bl	8008568 <USB_CoreReset>
 8008228:	4603      	mov	r3, r0
 800822a:	73fb      	strb	r3, [r7, #15]
 800822c:	e01a      	b.n	8008264 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	68db      	ldr	r3, [r3, #12]
 8008232:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800823a:	6878      	ldr	r0, [r7, #4]
 800823c:	f000 f994 	bl	8008568 <USB_CoreReset>
 8008240:	4603      	mov	r3, r0
 8008242:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008244:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008246:	2b00      	cmp	r3, #0
 8008248:	d106      	bne.n	8008258 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800824e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	639a      	str	r2, [r3, #56]	; 0x38
 8008256:	e005      	b.n	8008264 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800825c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008266:	2b01      	cmp	r3, #1
 8008268:	d10b      	bne.n	8008282 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	689b      	ldr	r3, [r3, #8]
 800826e:	f043 0206 	orr.w	r2, r3, #6
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	689b      	ldr	r3, [r3, #8]
 800827a:	f043 0220 	orr.w	r2, r3, #32
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008282:	7bfb      	ldrb	r3, [r7, #15]
}
 8008284:	4618      	mov	r0, r3
 8008286:	3710      	adds	r7, #16
 8008288:	46bd      	mov	sp, r7
 800828a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800828e:	b004      	add	sp, #16
 8008290:	4770      	bx	lr

08008292 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008292:	b480      	push	{r7}
 8008294:	b083      	sub	sp, #12
 8008296:	af00      	add	r7, sp, #0
 8008298:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	689b      	ldr	r3, [r3, #8]
 800829e:	f043 0201 	orr.w	r2, r3, #1
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80082a6:	2300      	movs	r3, #0
}
 80082a8:	4618      	mov	r0, r3
 80082aa:	370c      	adds	r7, #12
 80082ac:	46bd      	mov	sp, r7
 80082ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b2:	4770      	bx	lr

080082b4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80082b4:	b480      	push	{r7}
 80082b6:	b083      	sub	sp, #12
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	689b      	ldr	r3, [r3, #8]
 80082c0:	f023 0201 	bic.w	r2, r3, #1
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80082c8:	2300      	movs	r3, #0
}
 80082ca:	4618      	mov	r0, r3
 80082cc:	370c      	adds	r7, #12
 80082ce:	46bd      	mov	sp, r7
 80082d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d4:	4770      	bx	lr

080082d6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80082d6:	b580      	push	{r7, lr}
 80082d8:	b084      	sub	sp, #16
 80082da:	af00      	add	r7, sp, #0
 80082dc:	6078      	str	r0, [r7, #4]
 80082de:	460b      	mov	r3, r1
 80082e0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80082e2:	2300      	movs	r3, #0
 80082e4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	68db      	ldr	r3, [r3, #12]
 80082ea:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80082f2:	78fb      	ldrb	r3, [r7, #3]
 80082f4:	2b01      	cmp	r3, #1
 80082f6:	d115      	bne.n	8008324 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	68db      	ldr	r3, [r3, #12]
 80082fc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008304:	2001      	movs	r0, #1
 8008306:	f7f9 ff7f 	bl	8002208 <HAL_Delay>
      ms++;
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	3301      	adds	r3, #1
 800830e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008310:	6878      	ldr	r0, [r7, #4]
 8008312:	f000 f91a 	bl	800854a <USB_GetMode>
 8008316:	4603      	mov	r3, r0
 8008318:	2b01      	cmp	r3, #1
 800831a:	d01e      	beq.n	800835a <USB_SetCurrentMode+0x84>
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	2b31      	cmp	r3, #49	; 0x31
 8008320:	d9f0      	bls.n	8008304 <USB_SetCurrentMode+0x2e>
 8008322:	e01a      	b.n	800835a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008324:	78fb      	ldrb	r3, [r7, #3]
 8008326:	2b00      	cmp	r3, #0
 8008328:	d115      	bne.n	8008356 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	68db      	ldr	r3, [r3, #12]
 800832e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008336:	2001      	movs	r0, #1
 8008338:	f7f9 ff66 	bl	8002208 <HAL_Delay>
      ms++;
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	3301      	adds	r3, #1
 8008340:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008342:	6878      	ldr	r0, [r7, #4]
 8008344:	f000 f901 	bl	800854a <USB_GetMode>
 8008348:	4603      	mov	r3, r0
 800834a:	2b00      	cmp	r3, #0
 800834c:	d005      	beq.n	800835a <USB_SetCurrentMode+0x84>
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	2b31      	cmp	r3, #49	; 0x31
 8008352:	d9f0      	bls.n	8008336 <USB_SetCurrentMode+0x60>
 8008354:	e001      	b.n	800835a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008356:	2301      	movs	r3, #1
 8008358:	e005      	b.n	8008366 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	2b32      	cmp	r3, #50	; 0x32
 800835e:	d101      	bne.n	8008364 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008360:	2301      	movs	r3, #1
 8008362:	e000      	b.n	8008366 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008364:	2300      	movs	r3, #0
}
 8008366:	4618      	mov	r0, r3
 8008368:	3710      	adds	r7, #16
 800836a:	46bd      	mov	sp, r7
 800836c:	bd80      	pop	{r7, pc}
	...

08008370 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008370:	b480      	push	{r7}
 8008372:	b085      	sub	sp, #20
 8008374:	af00      	add	r7, sp, #0
 8008376:	6078      	str	r0, [r7, #4]
 8008378:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800837a:	2300      	movs	r3, #0
 800837c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800837e:	683b      	ldr	r3, [r7, #0]
 8008380:	019b      	lsls	r3, r3, #6
 8008382:	f043 0220 	orr.w	r2, r3, #32
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	3301      	adds	r3, #1
 800838e:	60fb      	str	r3, [r7, #12]
 8008390:	4a08      	ldr	r2, [pc, #32]	; (80083b4 <USB_FlushTxFifo+0x44>)
 8008392:	4293      	cmp	r3, r2
 8008394:	d901      	bls.n	800839a <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8008396:	2303      	movs	r3, #3
 8008398:	e006      	b.n	80083a8 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	691b      	ldr	r3, [r3, #16]
 800839e:	f003 0320 	and.w	r3, r3, #32
 80083a2:	2b20      	cmp	r3, #32
 80083a4:	d0f1      	beq.n	800838a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80083a6:	2300      	movs	r3, #0
}
 80083a8:	4618      	mov	r0, r3
 80083aa:	3714      	adds	r7, #20
 80083ac:	46bd      	mov	sp, r7
 80083ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b2:	4770      	bx	lr
 80083b4:	00030d40 	.word	0x00030d40

080083b8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80083b8:	b480      	push	{r7}
 80083ba:	b085      	sub	sp, #20
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80083c0:	2300      	movs	r3, #0
 80083c2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	2210      	movs	r2, #16
 80083c8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	3301      	adds	r3, #1
 80083ce:	60fb      	str	r3, [r7, #12]
 80083d0:	4a08      	ldr	r2, [pc, #32]	; (80083f4 <USB_FlushRxFifo+0x3c>)
 80083d2:	4293      	cmp	r3, r2
 80083d4:	d901      	bls.n	80083da <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 80083d6:	2303      	movs	r3, #3
 80083d8:	e006      	b.n	80083e8 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	691b      	ldr	r3, [r3, #16]
 80083de:	f003 0310 	and.w	r3, r3, #16
 80083e2:	2b10      	cmp	r3, #16
 80083e4:	d0f1      	beq.n	80083ca <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80083e6:	2300      	movs	r3, #0
}
 80083e8:	4618      	mov	r0, r3
 80083ea:	3714      	adds	r7, #20
 80083ec:	46bd      	mov	sp, r7
 80083ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f2:	4770      	bx	lr
 80083f4:	00030d40 	.word	0x00030d40

080083f8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80083f8:	b480      	push	{r7}
 80083fa:	b089      	sub	sp, #36	; 0x24
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	60f8      	str	r0, [r7, #12]
 8008400:	60b9      	str	r1, [r7, #8]
 8008402:	4611      	mov	r1, r2
 8008404:	461a      	mov	r2, r3
 8008406:	460b      	mov	r3, r1
 8008408:	71fb      	strb	r3, [r7, #7]
 800840a:	4613      	mov	r3, r2
 800840c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008412:	68bb      	ldr	r3, [r7, #8]
 8008414:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008416:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800841a:	2b00      	cmp	r3, #0
 800841c:	d123      	bne.n	8008466 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800841e:	88bb      	ldrh	r3, [r7, #4]
 8008420:	3303      	adds	r3, #3
 8008422:	089b      	lsrs	r3, r3, #2
 8008424:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008426:	2300      	movs	r3, #0
 8008428:	61bb      	str	r3, [r7, #24]
 800842a:	e018      	b.n	800845e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800842c:	79fb      	ldrb	r3, [r7, #7]
 800842e:	031a      	lsls	r2, r3, #12
 8008430:	697b      	ldr	r3, [r7, #20]
 8008432:	4413      	add	r3, r2
 8008434:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008438:	461a      	mov	r2, r3
 800843a:	69fb      	ldr	r3, [r7, #28]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008440:	69fb      	ldr	r3, [r7, #28]
 8008442:	3301      	adds	r3, #1
 8008444:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008446:	69fb      	ldr	r3, [r7, #28]
 8008448:	3301      	adds	r3, #1
 800844a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800844c:	69fb      	ldr	r3, [r7, #28]
 800844e:	3301      	adds	r3, #1
 8008450:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008452:	69fb      	ldr	r3, [r7, #28]
 8008454:	3301      	adds	r3, #1
 8008456:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008458:	69bb      	ldr	r3, [r7, #24]
 800845a:	3301      	adds	r3, #1
 800845c:	61bb      	str	r3, [r7, #24]
 800845e:	69ba      	ldr	r2, [r7, #24]
 8008460:	693b      	ldr	r3, [r7, #16]
 8008462:	429a      	cmp	r2, r3
 8008464:	d3e2      	bcc.n	800842c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008466:	2300      	movs	r3, #0
}
 8008468:	4618      	mov	r0, r3
 800846a:	3724      	adds	r7, #36	; 0x24
 800846c:	46bd      	mov	sp, r7
 800846e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008472:	4770      	bx	lr

08008474 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008474:	b480      	push	{r7}
 8008476:	b08b      	sub	sp, #44	; 0x2c
 8008478:	af00      	add	r7, sp, #0
 800847a:	60f8      	str	r0, [r7, #12]
 800847c:	60b9      	str	r1, [r7, #8]
 800847e:	4613      	mov	r3, r2
 8008480:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008486:	68bb      	ldr	r3, [r7, #8]
 8008488:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800848a:	88fb      	ldrh	r3, [r7, #6]
 800848c:	089b      	lsrs	r3, r3, #2
 800848e:	b29b      	uxth	r3, r3
 8008490:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008492:	88fb      	ldrh	r3, [r7, #6]
 8008494:	f003 0303 	and.w	r3, r3, #3
 8008498:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800849a:	2300      	movs	r3, #0
 800849c:	623b      	str	r3, [r7, #32]
 800849e:	e014      	b.n	80084ca <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80084a0:	69bb      	ldr	r3, [r7, #24]
 80084a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80084a6:	681a      	ldr	r2, [r3, #0]
 80084a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084aa:	601a      	str	r2, [r3, #0]
    pDest++;
 80084ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084ae:	3301      	adds	r3, #1
 80084b0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80084b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084b4:	3301      	adds	r3, #1
 80084b6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80084b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084ba:	3301      	adds	r3, #1
 80084bc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80084be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084c0:	3301      	adds	r3, #1
 80084c2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80084c4:	6a3b      	ldr	r3, [r7, #32]
 80084c6:	3301      	adds	r3, #1
 80084c8:	623b      	str	r3, [r7, #32]
 80084ca:	6a3a      	ldr	r2, [r7, #32]
 80084cc:	697b      	ldr	r3, [r7, #20]
 80084ce:	429a      	cmp	r2, r3
 80084d0:	d3e6      	bcc.n	80084a0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80084d2:	8bfb      	ldrh	r3, [r7, #30]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d01e      	beq.n	8008516 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80084d8:	2300      	movs	r3, #0
 80084da:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80084dc:	69bb      	ldr	r3, [r7, #24]
 80084de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80084e2:	461a      	mov	r2, r3
 80084e4:	f107 0310 	add.w	r3, r7, #16
 80084e8:	6812      	ldr	r2, [r2, #0]
 80084ea:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80084ec:	693a      	ldr	r2, [r7, #16]
 80084ee:	6a3b      	ldr	r3, [r7, #32]
 80084f0:	b2db      	uxtb	r3, r3
 80084f2:	00db      	lsls	r3, r3, #3
 80084f4:	fa22 f303 	lsr.w	r3, r2, r3
 80084f8:	b2da      	uxtb	r2, r3
 80084fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084fc:	701a      	strb	r2, [r3, #0]
      i++;
 80084fe:	6a3b      	ldr	r3, [r7, #32]
 8008500:	3301      	adds	r3, #1
 8008502:	623b      	str	r3, [r7, #32]
      pDest++;
 8008504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008506:	3301      	adds	r3, #1
 8008508:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800850a:	8bfb      	ldrh	r3, [r7, #30]
 800850c:	3b01      	subs	r3, #1
 800850e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008510:	8bfb      	ldrh	r3, [r7, #30]
 8008512:	2b00      	cmp	r3, #0
 8008514:	d1ea      	bne.n	80084ec <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008518:	4618      	mov	r0, r3
 800851a:	372c      	adds	r7, #44	; 0x2c
 800851c:	46bd      	mov	sp, r7
 800851e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008522:	4770      	bx	lr

08008524 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008524:	b480      	push	{r7}
 8008526:	b085      	sub	sp, #20
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	695b      	ldr	r3, [r3, #20]
 8008530:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	699b      	ldr	r3, [r3, #24]
 8008536:	68fa      	ldr	r2, [r7, #12]
 8008538:	4013      	ands	r3, r2
 800853a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800853c:	68fb      	ldr	r3, [r7, #12]
}
 800853e:	4618      	mov	r0, r3
 8008540:	3714      	adds	r7, #20
 8008542:	46bd      	mov	sp, r7
 8008544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008548:	4770      	bx	lr

0800854a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800854a:	b480      	push	{r7}
 800854c:	b083      	sub	sp, #12
 800854e:	af00      	add	r7, sp, #0
 8008550:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	695b      	ldr	r3, [r3, #20]
 8008556:	f003 0301 	and.w	r3, r3, #1
}
 800855a:	4618      	mov	r0, r3
 800855c:	370c      	adds	r7, #12
 800855e:	46bd      	mov	sp, r7
 8008560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008564:	4770      	bx	lr
	...

08008568 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008568:	b480      	push	{r7}
 800856a:	b085      	sub	sp, #20
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008570:	2300      	movs	r3, #0
 8008572:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	3301      	adds	r3, #1
 8008578:	60fb      	str	r3, [r7, #12]
 800857a:	4a13      	ldr	r2, [pc, #76]	; (80085c8 <USB_CoreReset+0x60>)
 800857c:	4293      	cmp	r3, r2
 800857e:	d901      	bls.n	8008584 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8008580:	2303      	movs	r3, #3
 8008582:	e01a      	b.n	80085ba <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	691b      	ldr	r3, [r3, #16]
 8008588:	2b00      	cmp	r3, #0
 800858a:	daf3      	bge.n	8008574 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800858c:	2300      	movs	r3, #0
 800858e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	691b      	ldr	r3, [r3, #16]
 8008594:	f043 0201 	orr.w	r2, r3, #1
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	3301      	adds	r3, #1
 80085a0:	60fb      	str	r3, [r7, #12]
 80085a2:	4a09      	ldr	r2, [pc, #36]	; (80085c8 <USB_CoreReset+0x60>)
 80085a4:	4293      	cmp	r3, r2
 80085a6:	d901      	bls.n	80085ac <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 80085a8:	2303      	movs	r3, #3
 80085aa:	e006      	b.n	80085ba <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	691b      	ldr	r3, [r3, #16]
 80085b0:	f003 0301 	and.w	r3, r3, #1
 80085b4:	2b01      	cmp	r3, #1
 80085b6:	d0f1      	beq.n	800859c <USB_CoreReset+0x34>

  return HAL_OK;
 80085b8:	2300      	movs	r3, #0
}
 80085ba:	4618      	mov	r0, r3
 80085bc:	3714      	adds	r7, #20
 80085be:	46bd      	mov	sp, r7
 80085c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c4:	4770      	bx	lr
 80085c6:	bf00      	nop
 80085c8:	00030d40 	.word	0x00030d40

080085cc <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80085cc:	b084      	sub	sp, #16
 80085ce:	b580      	push	{r7, lr}
 80085d0:	b084      	sub	sp, #16
 80085d2:	af00      	add	r7, sp, #0
 80085d4:	6078      	str	r0, [r7, #4]
 80085d6:	f107 001c 	add.w	r0, r7, #28
 80085da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80085e2:	68bb      	ldr	r3, [r7, #8]
 80085e4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80085e8:	461a      	mov	r2, r3
 80085ea:	2300      	movs	r3, #0
 80085ec:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085f2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085fe:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800860a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008616:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800861a:	2b00      	cmp	r3, #0
 800861c:	d018      	beq.n	8008650 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800861e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008620:	2b01      	cmp	r3, #1
 8008622:	d10a      	bne.n	800863a <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8008624:	68bb      	ldr	r3, [r7, #8]
 8008626:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	68ba      	ldr	r2, [r7, #8]
 800862e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008632:	f043 0304 	orr.w	r3, r3, #4
 8008636:	6013      	str	r3, [r2, #0]
 8008638:	e014      	b.n	8008664 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800863a:	68bb      	ldr	r3, [r7, #8]
 800863c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	68ba      	ldr	r2, [r7, #8]
 8008644:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008648:	f023 0304 	bic.w	r3, r3, #4
 800864c:	6013      	str	r3, [r2, #0]
 800864e:	e009      	b.n	8008664 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008650:	68bb      	ldr	r3, [r7, #8]
 8008652:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	68ba      	ldr	r2, [r7, #8]
 800865a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800865e:	f023 0304 	bic.w	r3, r3, #4
 8008662:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8008664:	2110      	movs	r1, #16
 8008666:	6878      	ldr	r0, [r7, #4]
 8008668:	f7ff fe82 	bl	8008370 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800866c:	6878      	ldr	r0, [r7, #4]
 800866e:	f7ff fea3 	bl	80083b8 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8008672:	2300      	movs	r3, #0
 8008674:	60fb      	str	r3, [r7, #12]
 8008676:	e015      	b.n	80086a4 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	015a      	lsls	r2, r3, #5
 800867c:	68bb      	ldr	r3, [r7, #8]
 800867e:	4413      	add	r3, r2
 8008680:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008684:	461a      	mov	r2, r3
 8008686:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800868a:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	015a      	lsls	r2, r3, #5
 8008690:	68bb      	ldr	r3, [r7, #8]
 8008692:	4413      	add	r3, r2
 8008694:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008698:	461a      	mov	r2, r3
 800869a:	2300      	movs	r3, #0
 800869c:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	3301      	adds	r3, #1
 80086a2:	60fb      	str	r3, [r7, #12]
 80086a4:	6a3b      	ldr	r3, [r7, #32]
 80086a6:	68fa      	ldr	r2, [r7, #12]
 80086a8:	429a      	cmp	r2, r3
 80086aa:	d3e5      	bcc.n	8008678 <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	2200      	movs	r2, #0
 80086b0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80086b8:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d00b      	beq.n	80086de <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80086cc:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	4a13      	ldr	r2, [pc, #76]	; (8008720 <USB_HostInit+0x154>)
 80086d2:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	4a13      	ldr	r2, [pc, #76]	; (8008724 <USB_HostInit+0x158>)
 80086d8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80086dc:	e009      	b.n	80086f2 <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	2280      	movs	r2, #128	; 0x80
 80086e2:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	4a10      	ldr	r2, [pc, #64]	; (8008728 <USB_HostInit+0x15c>)
 80086e8:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	4a0f      	ldr	r2, [pc, #60]	; (800872c <USB_HostInit+0x160>)
 80086ee:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80086f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d105      	bne.n	8008704 <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	699b      	ldr	r3, [r3, #24]
 80086fc:	f043 0210 	orr.w	r2, r3, #16
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	699a      	ldr	r2, [r3, #24]
 8008708:	4b09      	ldr	r3, [pc, #36]	; (8008730 <USB_HostInit+0x164>)
 800870a:	4313      	orrs	r3, r2
 800870c:	687a      	ldr	r2, [r7, #4]
 800870e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8008710:	2300      	movs	r3, #0
}
 8008712:	4618      	mov	r0, r3
 8008714:	3710      	adds	r7, #16
 8008716:	46bd      	mov	sp, r7
 8008718:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800871c:	b004      	add	sp, #16
 800871e:	4770      	bx	lr
 8008720:	01000200 	.word	0x01000200
 8008724:	00e00300 	.word	0x00e00300
 8008728:	00600080 	.word	0x00600080
 800872c:	004000e0 	.word	0x004000e0
 8008730:	a3200008 	.word	0xa3200008

08008734 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8008734:	b480      	push	{r7}
 8008736:	b085      	sub	sp, #20
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]
 800873c:	460b      	mov	r3, r1
 800873e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	68fa      	ldr	r2, [r7, #12]
 800874e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008752:	f023 0303 	bic.w	r3, r3, #3
 8008756:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800875e:	681a      	ldr	r2, [r3, #0]
 8008760:	78fb      	ldrb	r3, [r7, #3]
 8008762:	f003 0303 	and.w	r3, r3, #3
 8008766:	68f9      	ldr	r1, [r7, #12]
 8008768:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800876c:	4313      	orrs	r3, r2
 800876e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8008770:	78fb      	ldrb	r3, [r7, #3]
 8008772:	2b01      	cmp	r3, #1
 8008774:	d107      	bne.n	8008786 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800877c:	461a      	mov	r2, r3
 800877e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8008782:	6053      	str	r3, [r2, #4]
 8008784:	e009      	b.n	800879a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8008786:	78fb      	ldrb	r3, [r7, #3]
 8008788:	2b02      	cmp	r3, #2
 800878a:	d106      	bne.n	800879a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008792:	461a      	mov	r2, r3
 8008794:	f241 7370 	movw	r3, #6000	; 0x1770
 8008798:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800879a:	2300      	movs	r3, #0
}
 800879c:	4618      	mov	r0, r3
 800879e:	3714      	adds	r7, #20
 80087a0:	46bd      	mov	sp, r7
 80087a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a6:	4770      	bx	lr

080087a8 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80087a8:	b580      	push	{r7, lr}
 80087aa:	b084      	sub	sp, #16
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80087b4:	2300      	movs	r3, #0
 80087b6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80087c2:	68bb      	ldr	r3, [r7, #8]
 80087c4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80087c8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80087ca:	68bb      	ldr	r3, [r7, #8]
 80087cc:	68fa      	ldr	r2, [r7, #12]
 80087ce:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80087d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80087d6:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80087d8:	2064      	movs	r0, #100	; 0x64
 80087da:	f7f9 fd15 	bl	8002208 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80087de:	68bb      	ldr	r3, [r7, #8]
 80087e0:	68fa      	ldr	r2, [r7, #12]
 80087e2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80087e6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80087ea:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80087ec:	200a      	movs	r0, #10
 80087ee:	f7f9 fd0b 	bl	8002208 <HAL_Delay>

  return HAL_OK;
 80087f2:	2300      	movs	r3, #0
}
 80087f4:	4618      	mov	r0, r3
 80087f6:	3710      	adds	r7, #16
 80087f8:	46bd      	mov	sp, r7
 80087fa:	bd80      	pop	{r7, pc}

080087fc <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80087fc:	b480      	push	{r7}
 80087fe:	b085      	sub	sp, #20
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
 8008804:	460b      	mov	r3, r1
 8008806:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800880c:	2300      	movs	r3, #0
 800880e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800881a:	68bb      	ldr	r3, [r7, #8]
 800881c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8008820:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8008822:	68bb      	ldr	r3, [r7, #8]
 8008824:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008828:	2b00      	cmp	r3, #0
 800882a:	d109      	bne.n	8008840 <USB_DriveVbus+0x44>
 800882c:	78fb      	ldrb	r3, [r7, #3]
 800882e:	2b01      	cmp	r3, #1
 8008830:	d106      	bne.n	8008840 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8008832:	68bb      	ldr	r3, [r7, #8]
 8008834:	68fa      	ldr	r2, [r7, #12]
 8008836:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800883a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800883e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8008840:	68bb      	ldr	r3, [r7, #8]
 8008842:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008846:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800884a:	d109      	bne.n	8008860 <USB_DriveVbus+0x64>
 800884c:	78fb      	ldrb	r3, [r7, #3]
 800884e:	2b00      	cmp	r3, #0
 8008850:	d106      	bne.n	8008860 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8008852:	68bb      	ldr	r3, [r7, #8]
 8008854:	68fa      	ldr	r2, [r7, #12]
 8008856:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800885a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800885e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8008860:	2300      	movs	r3, #0
}
 8008862:	4618      	mov	r0, r3
 8008864:	3714      	adds	r7, #20
 8008866:	46bd      	mov	sp, r7
 8008868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886c:	4770      	bx	lr

0800886e <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800886e:	b480      	push	{r7}
 8008870:	b085      	sub	sp, #20
 8008872:	af00      	add	r7, sp, #0
 8008874:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800887a:	2300      	movs	r3, #0
 800887c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8008888:	68bb      	ldr	r3, [r7, #8]
 800888a:	0c5b      	lsrs	r3, r3, #17
 800888c:	f003 0303 	and.w	r3, r3, #3
}
 8008890:	4618      	mov	r0, r3
 8008892:	3714      	adds	r7, #20
 8008894:	46bd      	mov	sp, r7
 8008896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889a:	4770      	bx	lr

0800889c <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800889c:	b480      	push	{r7}
 800889e:	b085      	sub	sp, #20
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80088ae:	689b      	ldr	r3, [r3, #8]
 80088b0:	b29b      	uxth	r3, r3
}
 80088b2:	4618      	mov	r0, r3
 80088b4:	3714      	adds	r7, #20
 80088b6:	46bd      	mov	sp, r7
 80088b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088bc:	4770      	bx	lr
	...

080088c0 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b088      	sub	sp, #32
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
 80088c8:	4608      	mov	r0, r1
 80088ca:	4611      	mov	r1, r2
 80088cc:	461a      	mov	r2, r3
 80088ce:	4603      	mov	r3, r0
 80088d0:	70fb      	strb	r3, [r7, #3]
 80088d2:	460b      	mov	r3, r1
 80088d4:	70bb      	strb	r3, [r7, #2]
 80088d6:	4613      	mov	r3, r2
 80088d8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80088da:	2300      	movs	r3, #0
 80088dc:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80088e2:	78fb      	ldrb	r3, [r7, #3]
 80088e4:	015a      	lsls	r2, r3, #5
 80088e6:	693b      	ldr	r3, [r7, #16]
 80088e8:	4413      	add	r3, r2
 80088ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80088ee:	461a      	mov	r2, r3
 80088f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80088f4:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80088f6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80088fa:	2b03      	cmp	r3, #3
 80088fc:	d87e      	bhi.n	80089fc <USB_HC_Init+0x13c>
 80088fe:	a201      	add	r2, pc, #4	; (adr r2, 8008904 <USB_HC_Init+0x44>)
 8008900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008904:	08008915 	.word	0x08008915
 8008908:	080089bf 	.word	0x080089bf
 800890c:	08008915 	.word	0x08008915
 8008910:	08008981 	.word	0x08008981
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008914:	78fb      	ldrb	r3, [r7, #3]
 8008916:	015a      	lsls	r2, r3, #5
 8008918:	693b      	ldr	r3, [r7, #16]
 800891a:	4413      	add	r3, r2
 800891c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008920:	461a      	mov	r2, r3
 8008922:	f240 439d 	movw	r3, #1181	; 0x49d
 8008926:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8008928:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800892c:	2b00      	cmp	r3, #0
 800892e:	da10      	bge.n	8008952 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008930:	78fb      	ldrb	r3, [r7, #3]
 8008932:	015a      	lsls	r2, r3, #5
 8008934:	693b      	ldr	r3, [r7, #16]
 8008936:	4413      	add	r3, r2
 8008938:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800893c:	68db      	ldr	r3, [r3, #12]
 800893e:	78fa      	ldrb	r2, [r7, #3]
 8008940:	0151      	lsls	r1, r2, #5
 8008942:	693a      	ldr	r2, [r7, #16]
 8008944:	440a      	add	r2, r1
 8008946:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800894a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800894e:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8008950:	e057      	b.n	8008a02 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008956:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800895a:	2b00      	cmp	r3, #0
 800895c:	d051      	beq.n	8008a02 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800895e:	78fb      	ldrb	r3, [r7, #3]
 8008960:	015a      	lsls	r2, r3, #5
 8008962:	693b      	ldr	r3, [r7, #16]
 8008964:	4413      	add	r3, r2
 8008966:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800896a:	68db      	ldr	r3, [r3, #12]
 800896c:	78fa      	ldrb	r2, [r7, #3]
 800896e:	0151      	lsls	r1, r2, #5
 8008970:	693a      	ldr	r2, [r7, #16]
 8008972:	440a      	add	r2, r1
 8008974:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008978:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800897c:	60d3      	str	r3, [r2, #12]
      break;
 800897e:	e040      	b.n	8008a02 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008980:	78fb      	ldrb	r3, [r7, #3]
 8008982:	015a      	lsls	r2, r3, #5
 8008984:	693b      	ldr	r3, [r7, #16]
 8008986:	4413      	add	r3, r2
 8008988:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800898c:	461a      	mov	r2, r3
 800898e:	f240 639d 	movw	r3, #1693	; 0x69d
 8008992:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008994:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008998:	2b00      	cmp	r3, #0
 800899a:	da34      	bge.n	8008a06 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800899c:	78fb      	ldrb	r3, [r7, #3]
 800899e:	015a      	lsls	r2, r3, #5
 80089a0:	693b      	ldr	r3, [r7, #16]
 80089a2:	4413      	add	r3, r2
 80089a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80089a8:	68db      	ldr	r3, [r3, #12]
 80089aa:	78fa      	ldrb	r2, [r7, #3]
 80089ac:	0151      	lsls	r1, r2, #5
 80089ae:	693a      	ldr	r2, [r7, #16]
 80089b0:	440a      	add	r2, r1
 80089b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80089b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80089ba:	60d3      	str	r3, [r2, #12]
      }

      break;
 80089bc:	e023      	b.n	8008a06 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80089be:	78fb      	ldrb	r3, [r7, #3]
 80089c0:	015a      	lsls	r2, r3, #5
 80089c2:	693b      	ldr	r3, [r7, #16]
 80089c4:	4413      	add	r3, r2
 80089c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80089ca:	461a      	mov	r2, r3
 80089cc:	f240 2325 	movw	r3, #549	; 0x225
 80089d0:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80089d2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	da17      	bge.n	8008a0a <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80089da:	78fb      	ldrb	r3, [r7, #3]
 80089dc:	015a      	lsls	r2, r3, #5
 80089de:	693b      	ldr	r3, [r7, #16]
 80089e0:	4413      	add	r3, r2
 80089e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80089e6:	68db      	ldr	r3, [r3, #12]
 80089e8:	78fa      	ldrb	r2, [r7, #3]
 80089ea:	0151      	lsls	r1, r2, #5
 80089ec:	693a      	ldr	r2, [r7, #16]
 80089ee:	440a      	add	r2, r1
 80089f0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80089f4:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80089f8:	60d3      	str	r3, [r2, #12]
      }
      break;
 80089fa:	e006      	b.n	8008a0a <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80089fc:	2301      	movs	r3, #1
 80089fe:	77fb      	strb	r3, [r7, #31]
      break;
 8008a00:	e004      	b.n	8008a0c <USB_HC_Init+0x14c>
      break;
 8008a02:	bf00      	nop
 8008a04:	e002      	b.n	8008a0c <USB_HC_Init+0x14c>
      break;
 8008a06:	bf00      	nop
 8008a08:	e000      	b.n	8008a0c <USB_HC_Init+0x14c>
      break;
 8008a0a:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8008a0c:	693b      	ldr	r3, [r7, #16]
 8008a0e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008a12:	699a      	ldr	r2, [r3, #24]
 8008a14:	78fb      	ldrb	r3, [r7, #3]
 8008a16:	f003 030f 	and.w	r3, r3, #15
 8008a1a:	2101      	movs	r1, #1
 8008a1c:	fa01 f303 	lsl.w	r3, r1, r3
 8008a20:	6939      	ldr	r1, [r7, #16]
 8008a22:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008a26:	4313      	orrs	r3, r2
 8008a28:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	699b      	ldr	r3, [r3, #24]
 8008a2e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8008a36:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	da03      	bge.n	8008a46 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8008a3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008a42:	61bb      	str	r3, [r7, #24]
 8008a44:	e001      	b.n	8008a4a <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8008a46:	2300      	movs	r3, #0
 8008a48:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8008a4a:	6878      	ldr	r0, [r7, #4]
 8008a4c:	f7ff ff0f 	bl	800886e <USB_GetHostSpeed>
 8008a50:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8008a52:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008a56:	2b02      	cmp	r3, #2
 8008a58:	d106      	bne.n	8008a68 <USB_HC_Init+0x1a8>
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	2b02      	cmp	r3, #2
 8008a5e:	d003      	beq.n	8008a68 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8008a60:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008a64:	617b      	str	r3, [r7, #20]
 8008a66:	e001      	b.n	8008a6c <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8008a68:	2300      	movs	r3, #0
 8008a6a:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008a6c:	787b      	ldrb	r3, [r7, #1]
 8008a6e:	059b      	lsls	r3, r3, #22
 8008a70:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8008a74:	78bb      	ldrb	r3, [r7, #2]
 8008a76:	02db      	lsls	r3, r3, #11
 8008a78:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008a7c:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8008a7e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008a82:	049b      	lsls	r3, r3, #18
 8008a84:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8008a88:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008a8a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8008a8c:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8008a90:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008a92:	69bb      	ldr	r3, [r7, #24]
 8008a94:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008a96:	78fb      	ldrb	r3, [r7, #3]
 8008a98:	0159      	lsls	r1, r3, #5
 8008a9a:	693b      	ldr	r3, [r7, #16]
 8008a9c:	440b      	add	r3, r1
 8008a9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008aa2:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008aa4:	697b      	ldr	r3, [r7, #20]
 8008aa6:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008aa8:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8008aaa:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008aae:	2b03      	cmp	r3, #3
 8008ab0:	d10f      	bne.n	8008ad2 <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8008ab2:	78fb      	ldrb	r3, [r7, #3]
 8008ab4:	015a      	lsls	r2, r3, #5
 8008ab6:	693b      	ldr	r3, [r7, #16]
 8008ab8:	4413      	add	r3, r2
 8008aba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	78fa      	ldrb	r2, [r7, #3]
 8008ac2:	0151      	lsls	r1, r2, #5
 8008ac4:	693a      	ldr	r2, [r7, #16]
 8008ac6:	440a      	add	r2, r1
 8008ac8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008acc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008ad0:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8008ad2:	7ffb      	ldrb	r3, [r7, #31]
}
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	3720      	adds	r7, #32
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	bd80      	pop	{r7, pc}

08008adc <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b08c      	sub	sp, #48	; 0x30
 8008ae0:	af02      	add	r7, sp, #8
 8008ae2:	60f8      	str	r0, [r7, #12]
 8008ae4:	60b9      	str	r1, [r7, #8]
 8008ae6:	4613      	mov	r3, r2
 8008ae8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8008aee:	68bb      	ldr	r3, [r7, #8]
 8008af0:	785b      	ldrb	r3, [r3, #1]
 8008af2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8008af4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008af8:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008afe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d02d      	beq.n	8008b62 <USB_HC_StartXfer+0x86>
 8008b06:	68bb      	ldr	r3, [r7, #8]
 8008b08:	791b      	ldrb	r3, [r3, #4]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d129      	bne.n	8008b62 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8008b0e:	79fb      	ldrb	r3, [r7, #7]
 8008b10:	2b01      	cmp	r3, #1
 8008b12:	d117      	bne.n	8008b44 <USB_HC_StartXfer+0x68>
 8008b14:	68bb      	ldr	r3, [r7, #8]
 8008b16:	79db      	ldrb	r3, [r3, #7]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d003      	beq.n	8008b24 <USB_HC_StartXfer+0x48>
 8008b1c:	68bb      	ldr	r3, [r7, #8]
 8008b1e:	79db      	ldrb	r3, [r3, #7]
 8008b20:	2b02      	cmp	r3, #2
 8008b22:	d10f      	bne.n	8008b44 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8008b24:	69fb      	ldr	r3, [r7, #28]
 8008b26:	015a      	lsls	r2, r3, #5
 8008b28:	6a3b      	ldr	r3, [r7, #32]
 8008b2a:	4413      	add	r3, r2
 8008b2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b30:	68db      	ldr	r3, [r3, #12]
 8008b32:	69fa      	ldr	r2, [r7, #28]
 8008b34:	0151      	lsls	r1, r2, #5
 8008b36:	6a3a      	ldr	r2, [r7, #32]
 8008b38:	440a      	add	r2, r1
 8008b3a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008b3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b42:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8008b44:	79fb      	ldrb	r3, [r7, #7]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d10b      	bne.n	8008b62 <USB_HC_StartXfer+0x86>
 8008b4a:	68bb      	ldr	r3, [r7, #8]
 8008b4c:	795b      	ldrb	r3, [r3, #5]
 8008b4e:	2b01      	cmp	r3, #1
 8008b50:	d107      	bne.n	8008b62 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8008b52:	68bb      	ldr	r3, [r7, #8]
 8008b54:	785b      	ldrb	r3, [r3, #1]
 8008b56:	4619      	mov	r1, r3
 8008b58:	68f8      	ldr	r0, [r7, #12]
 8008b5a:	f000 fa2f 	bl	8008fbc <USB_DoPing>
      return HAL_OK;
 8008b5e:	2300      	movs	r3, #0
 8008b60:	e0f8      	b.n	8008d54 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8008b62:	68bb      	ldr	r3, [r7, #8]
 8008b64:	695b      	ldr	r3, [r3, #20]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d018      	beq.n	8008b9c <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8008b6a:	68bb      	ldr	r3, [r7, #8]
 8008b6c:	695b      	ldr	r3, [r3, #20]
 8008b6e:	68ba      	ldr	r2, [r7, #8]
 8008b70:	8912      	ldrh	r2, [r2, #8]
 8008b72:	4413      	add	r3, r2
 8008b74:	3b01      	subs	r3, #1
 8008b76:	68ba      	ldr	r2, [r7, #8]
 8008b78:	8912      	ldrh	r2, [r2, #8]
 8008b7a:	fbb3 f3f2 	udiv	r3, r3, r2
 8008b7e:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8008b80:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8008b82:	8b7b      	ldrh	r3, [r7, #26]
 8008b84:	429a      	cmp	r2, r3
 8008b86:	d90b      	bls.n	8008ba0 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8008b88:	8b7b      	ldrh	r3, [r7, #26]
 8008b8a:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008b8c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008b8e:	68ba      	ldr	r2, [r7, #8]
 8008b90:	8912      	ldrh	r2, [r2, #8]
 8008b92:	fb02 f203 	mul.w	r2, r2, r3
 8008b96:	68bb      	ldr	r3, [r7, #8]
 8008b98:	611a      	str	r2, [r3, #16]
 8008b9a:	e001      	b.n	8008ba0 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8008b9c:	2301      	movs	r3, #1
 8008b9e:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8008ba0:	68bb      	ldr	r3, [r7, #8]
 8008ba2:	78db      	ldrb	r3, [r3, #3]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d007      	beq.n	8008bb8 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008ba8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008baa:	68ba      	ldr	r2, [r7, #8]
 8008bac:	8912      	ldrh	r2, [r2, #8]
 8008bae:	fb02 f203 	mul.w	r2, r2, r3
 8008bb2:	68bb      	ldr	r3, [r7, #8]
 8008bb4:	611a      	str	r2, [r3, #16]
 8008bb6:	e003      	b.n	8008bc0 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8008bb8:	68bb      	ldr	r3, [r7, #8]
 8008bba:	695a      	ldr	r2, [r3, #20]
 8008bbc:	68bb      	ldr	r3, [r7, #8]
 8008bbe:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008bc0:	68bb      	ldr	r3, [r7, #8]
 8008bc2:	691b      	ldr	r3, [r3, #16]
 8008bc4:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008bc8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008bca:	04d9      	lsls	r1, r3, #19
 8008bcc:	4b63      	ldr	r3, [pc, #396]	; (8008d5c <USB_HC_StartXfer+0x280>)
 8008bce:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008bd0:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8008bd2:	68bb      	ldr	r3, [r7, #8]
 8008bd4:	7a9b      	ldrb	r3, [r3, #10]
 8008bd6:	075b      	lsls	r3, r3, #29
 8008bd8:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008bdc:	69f9      	ldr	r1, [r7, #28]
 8008bde:	0148      	lsls	r0, r1, #5
 8008be0:	6a39      	ldr	r1, [r7, #32]
 8008be2:	4401      	add	r1, r0
 8008be4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008be8:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008bea:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8008bec:	79fb      	ldrb	r3, [r7, #7]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d009      	beq.n	8008c06 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8008bf2:	68bb      	ldr	r3, [r7, #8]
 8008bf4:	68d9      	ldr	r1, [r3, #12]
 8008bf6:	69fb      	ldr	r3, [r7, #28]
 8008bf8:	015a      	lsls	r2, r3, #5
 8008bfa:	6a3b      	ldr	r3, [r7, #32]
 8008bfc:	4413      	add	r3, r2
 8008bfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c02:	460a      	mov	r2, r1
 8008c04:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8008c06:	6a3b      	ldr	r3, [r7, #32]
 8008c08:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008c0c:	689b      	ldr	r3, [r3, #8]
 8008c0e:	f003 0301 	and.w	r3, r3, #1
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	bf0c      	ite	eq
 8008c16:	2301      	moveq	r3, #1
 8008c18:	2300      	movne	r3, #0
 8008c1a:	b2db      	uxtb	r3, r3
 8008c1c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8008c1e:	69fb      	ldr	r3, [r7, #28]
 8008c20:	015a      	lsls	r2, r3, #5
 8008c22:	6a3b      	ldr	r3, [r7, #32]
 8008c24:	4413      	add	r3, r2
 8008c26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	69fa      	ldr	r2, [r7, #28]
 8008c2e:	0151      	lsls	r1, r2, #5
 8008c30:	6a3a      	ldr	r2, [r7, #32]
 8008c32:	440a      	add	r2, r1
 8008c34:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008c38:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008c3c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8008c3e:	69fb      	ldr	r3, [r7, #28]
 8008c40:	015a      	lsls	r2, r3, #5
 8008c42:	6a3b      	ldr	r3, [r7, #32]
 8008c44:	4413      	add	r3, r2
 8008c46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c4a:	681a      	ldr	r2, [r3, #0]
 8008c4c:	7e7b      	ldrb	r3, [r7, #25]
 8008c4e:	075b      	lsls	r3, r3, #29
 8008c50:	69f9      	ldr	r1, [r7, #28]
 8008c52:	0148      	lsls	r0, r1, #5
 8008c54:	6a39      	ldr	r1, [r7, #32]
 8008c56:	4401      	add	r1, r0
 8008c58:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8008c5c:	4313      	orrs	r3, r2
 8008c5e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8008c60:	69fb      	ldr	r3, [r7, #28]
 8008c62:	015a      	lsls	r2, r3, #5
 8008c64:	6a3b      	ldr	r3, [r7, #32]
 8008c66:	4413      	add	r3, r2
 8008c68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008c70:	693b      	ldr	r3, [r7, #16]
 8008c72:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008c76:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8008c78:	68bb      	ldr	r3, [r7, #8]
 8008c7a:	78db      	ldrb	r3, [r3, #3]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d004      	beq.n	8008c8a <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8008c80:	693b      	ldr	r3, [r7, #16]
 8008c82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c86:	613b      	str	r3, [r7, #16]
 8008c88:	e003      	b.n	8008c92 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8008c8a:	693b      	ldr	r3, [r7, #16]
 8008c8c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008c90:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008c92:	693b      	ldr	r3, [r7, #16]
 8008c94:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008c98:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8008c9a:	69fb      	ldr	r3, [r7, #28]
 8008c9c:	015a      	lsls	r2, r3, #5
 8008c9e:	6a3b      	ldr	r3, [r7, #32]
 8008ca0:	4413      	add	r3, r2
 8008ca2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ca6:	461a      	mov	r2, r3
 8008ca8:	693b      	ldr	r3, [r7, #16]
 8008caa:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8008cac:	79fb      	ldrb	r3, [r7, #7]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d001      	beq.n	8008cb6 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	e04e      	b.n	8008d54 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8008cb6:	68bb      	ldr	r3, [r7, #8]
 8008cb8:	78db      	ldrb	r3, [r3, #3]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d149      	bne.n	8008d52 <USB_HC_StartXfer+0x276>
 8008cbe:	68bb      	ldr	r3, [r7, #8]
 8008cc0:	695b      	ldr	r3, [r3, #20]
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d045      	beq.n	8008d52 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8008cc6:	68bb      	ldr	r3, [r7, #8]
 8008cc8:	79db      	ldrb	r3, [r3, #7]
 8008cca:	2b03      	cmp	r3, #3
 8008ccc:	d830      	bhi.n	8008d30 <USB_HC_StartXfer+0x254>
 8008cce:	a201      	add	r2, pc, #4	; (adr r2, 8008cd4 <USB_HC_StartXfer+0x1f8>)
 8008cd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cd4:	08008ce5 	.word	0x08008ce5
 8008cd8:	08008d09 	.word	0x08008d09
 8008cdc:	08008ce5 	.word	0x08008ce5
 8008ce0:	08008d09 	.word	0x08008d09
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008ce4:	68bb      	ldr	r3, [r7, #8]
 8008ce6:	695b      	ldr	r3, [r3, #20]
 8008ce8:	3303      	adds	r3, #3
 8008cea:	089b      	lsrs	r3, r3, #2
 8008cec:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8008cee:	8afa      	ldrh	r2, [r7, #22]
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cf4:	b29b      	uxth	r3, r3
 8008cf6:	429a      	cmp	r2, r3
 8008cf8:	d91c      	bls.n	8008d34 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	699b      	ldr	r3, [r3, #24]
 8008cfe:	f043 0220 	orr.w	r2, r3, #32
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	619a      	str	r2, [r3, #24]
        }
        break;
 8008d06:	e015      	b.n	8008d34 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008d08:	68bb      	ldr	r3, [r7, #8]
 8008d0a:	695b      	ldr	r3, [r3, #20]
 8008d0c:	3303      	adds	r3, #3
 8008d0e:	089b      	lsrs	r3, r3, #2
 8008d10:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8008d12:	8afa      	ldrh	r2, [r7, #22]
 8008d14:	6a3b      	ldr	r3, [r7, #32]
 8008d16:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008d1a:	691b      	ldr	r3, [r3, #16]
 8008d1c:	b29b      	uxth	r3, r3
 8008d1e:	429a      	cmp	r2, r3
 8008d20:	d90a      	bls.n	8008d38 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	699b      	ldr	r3, [r3, #24]
 8008d26:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	619a      	str	r2, [r3, #24]
        }
        break;
 8008d2e:	e003      	b.n	8008d38 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8008d30:	bf00      	nop
 8008d32:	e002      	b.n	8008d3a <USB_HC_StartXfer+0x25e>
        break;
 8008d34:	bf00      	nop
 8008d36:	e000      	b.n	8008d3a <USB_HC_StartXfer+0x25e>
        break;
 8008d38:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8008d3a:	68bb      	ldr	r3, [r7, #8]
 8008d3c:	68d9      	ldr	r1, [r3, #12]
 8008d3e:	68bb      	ldr	r3, [r7, #8]
 8008d40:	785a      	ldrb	r2, [r3, #1]
 8008d42:	68bb      	ldr	r3, [r7, #8]
 8008d44:	695b      	ldr	r3, [r3, #20]
 8008d46:	b29b      	uxth	r3, r3
 8008d48:	2000      	movs	r0, #0
 8008d4a:	9000      	str	r0, [sp, #0]
 8008d4c:	68f8      	ldr	r0, [r7, #12]
 8008d4e:	f7ff fb53 	bl	80083f8 <USB_WritePacket>
  }

  return HAL_OK;
 8008d52:	2300      	movs	r3, #0
}
 8008d54:	4618      	mov	r0, r3
 8008d56:	3728      	adds	r7, #40	; 0x28
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	bd80      	pop	{r7, pc}
 8008d5c:	1ff80000 	.word	0x1ff80000

08008d60 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008d60:	b480      	push	{r7}
 8008d62:	b085      	sub	sp, #20
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008d72:	695b      	ldr	r3, [r3, #20]
 8008d74:	b29b      	uxth	r3, r3
}
 8008d76:	4618      	mov	r0, r3
 8008d78:	3714      	adds	r7, #20
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d80:	4770      	bx	lr

08008d82 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8008d82:	b480      	push	{r7}
 8008d84:	b089      	sub	sp, #36	; 0x24
 8008d86:	af00      	add	r7, sp, #0
 8008d88:	6078      	str	r0, [r7, #4]
 8008d8a:	460b      	mov	r3, r1
 8008d8c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 8008d92:	78fb      	ldrb	r3, [r7, #3]
 8008d94:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 8008d96:	2300      	movs	r3, #0
 8008d98:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8008d9a:	697b      	ldr	r3, [r7, #20]
 8008d9c:	015a      	lsls	r2, r3, #5
 8008d9e:	69bb      	ldr	r3, [r7, #24]
 8008da0:	4413      	add	r3, r2
 8008da2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	0c9b      	lsrs	r3, r3, #18
 8008daa:	f003 0303 	and.w	r3, r3, #3
 8008dae:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8008db0:	697b      	ldr	r3, [r7, #20]
 8008db2:	015a      	lsls	r2, r3, #5
 8008db4:	69bb      	ldr	r3, [r7, #24]
 8008db6:	4413      	add	r3, r2
 8008db8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	0fdb      	lsrs	r3, r3, #31
 8008dc0:	f003 0301 	and.w	r3, r3, #1
 8008dc4:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	689b      	ldr	r3, [r3, #8]
 8008dca:	f003 0320 	and.w	r3, r3, #32
 8008dce:	2b20      	cmp	r3, #32
 8008dd0:	d104      	bne.n	8008ddc <USB_HC_Halt+0x5a>
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d101      	bne.n	8008ddc <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8008dd8:	2300      	movs	r3, #0
 8008dda:	e0e8      	b.n	8008fae <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8008ddc:	693b      	ldr	r3, [r7, #16]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d002      	beq.n	8008de8 <USB_HC_Halt+0x66>
 8008de2:	693b      	ldr	r3, [r7, #16]
 8008de4:	2b02      	cmp	r3, #2
 8008de6:	d173      	bne.n	8008ed0 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008de8:	697b      	ldr	r3, [r7, #20]
 8008dea:	015a      	lsls	r2, r3, #5
 8008dec:	69bb      	ldr	r3, [r7, #24]
 8008dee:	4413      	add	r3, r2
 8008df0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	697a      	ldr	r2, [r7, #20]
 8008df8:	0151      	lsls	r1, r2, #5
 8008dfa:	69ba      	ldr	r2, [r7, #24]
 8008dfc:	440a      	add	r2, r1
 8008dfe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008e02:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008e06:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	689b      	ldr	r3, [r3, #8]
 8008e0c:	f003 0320 	and.w	r3, r3, #32
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	f040 80cb 	bne.w	8008fac <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e1a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d143      	bne.n	8008eaa <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008e22:	697b      	ldr	r3, [r7, #20]
 8008e24:	015a      	lsls	r2, r3, #5
 8008e26:	69bb      	ldr	r3, [r7, #24]
 8008e28:	4413      	add	r3, r2
 8008e2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	697a      	ldr	r2, [r7, #20]
 8008e32:	0151      	lsls	r1, r2, #5
 8008e34:	69ba      	ldr	r2, [r7, #24]
 8008e36:	440a      	add	r2, r1
 8008e38:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008e3c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008e40:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008e42:	697b      	ldr	r3, [r7, #20]
 8008e44:	015a      	lsls	r2, r3, #5
 8008e46:	69bb      	ldr	r3, [r7, #24]
 8008e48:	4413      	add	r3, r2
 8008e4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	697a      	ldr	r2, [r7, #20]
 8008e52:	0151      	lsls	r1, r2, #5
 8008e54:	69ba      	ldr	r2, [r7, #24]
 8008e56:	440a      	add	r2, r1
 8008e58:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008e5c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008e60:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8008e62:	697b      	ldr	r3, [r7, #20]
 8008e64:	015a      	lsls	r2, r3, #5
 8008e66:	69bb      	ldr	r3, [r7, #24]
 8008e68:	4413      	add	r3, r2
 8008e6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	697a      	ldr	r2, [r7, #20]
 8008e72:	0151      	lsls	r1, r2, #5
 8008e74:	69ba      	ldr	r2, [r7, #24]
 8008e76:	440a      	add	r2, r1
 8008e78:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008e7c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008e80:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 8008e82:	69fb      	ldr	r3, [r7, #28]
 8008e84:	3301      	adds	r3, #1
 8008e86:	61fb      	str	r3, [r7, #28]
 8008e88:	69fb      	ldr	r3, [r7, #28]
 8008e8a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008e8e:	d81d      	bhi.n	8008ecc <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008e90:	697b      	ldr	r3, [r7, #20]
 8008e92:	015a      	lsls	r2, r3, #5
 8008e94:	69bb      	ldr	r3, [r7, #24]
 8008e96:	4413      	add	r3, r2
 8008e98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008ea2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008ea6:	d0ec      	beq.n	8008e82 <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008ea8:	e080      	b.n	8008fac <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008eaa:	697b      	ldr	r3, [r7, #20]
 8008eac:	015a      	lsls	r2, r3, #5
 8008eae:	69bb      	ldr	r3, [r7, #24]
 8008eb0:	4413      	add	r3, r2
 8008eb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	697a      	ldr	r2, [r7, #20]
 8008eba:	0151      	lsls	r1, r2, #5
 8008ebc:	69ba      	ldr	r2, [r7, #24]
 8008ebe:	440a      	add	r2, r1
 8008ec0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008ec4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008ec8:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008eca:	e06f      	b.n	8008fac <USB_HC_Halt+0x22a>
            break;
 8008ecc:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008ece:	e06d      	b.n	8008fac <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008ed0:	697b      	ldr	r3, [r7, #20]
 8008ed2:	015a      	lsls	r2, r3, #5
 8008ed4:	69bb      	ldr	r3, [r7, #24]
 8008ed6:	4413      	add	r3, r2
 8008ed8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	697a      	ldr	r2, [r7, #20]
 8008ee0:	0151      	lsls	r1, r2, #5
 8008ee2:	69ba      	ldr	r2, [r7, #24]
 8008ee4:	440a      	add	r2, r1
 8008ee6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008eea:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008eee:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8008ef0:	69bb      	ldr	r3, [r7, #24]
 8008ef2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008ef6:	691b      	ldr	r3, [r3, #16]
 8008ef8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d143      	bne.n	8008f88 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008f00:	697b      	ldr	r3, [r7, #20]
 8008f02:	015a      	lsls	r2, r3, #5
 8008f04:	69bb      	ldr	r3, [r7, #24]
 8008f06:	4413      	add	r3, r2
 8008f08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	697a      	ldr	r2, [r7, #20]
 8008f10:	0151      	lsls	r1, r2, #5
 8008f12:	69ba      	ldr	r2, [r7, #24]
 8008f14:	440a      	add	r2, r1
 8008f16:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008f1a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008f1e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008f20:	697b      	ldr	r3, [r7, #20]
 8008f22:	015a      	lsls	r2, r3, #5
 8008f24:	69bb      	ldr	r3, [r7, #24]
 8008f26:	4413      	add	r3, r2
 8008f28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	697a      	ldr	r2, [r7, #20]
 8008f30:	0151      	lsls	r1, r2, #5
 8008f32:	69ba      	ldr	r2, [r7, #24]
 8008f34:	440a      	add	r2, r1
 8008f36:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008f3a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008f3e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8008f40:	697b      	ldr	r3, [r7, #20]
 8008f42:	015a      	lsls	r2, r3, #5
 8008f44:	69bb      	ldr	r3, [r7, #24]
 8008f46:	4413      	add	r3, r2
 8008f48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	697a      	ldr	r2, [r7, #20]
 8008f50:	0151      	lsls	r1, r2, #5
 8008f52:	69ba      	ldr	r2, [r7, #24]
 8008f54:	440a      	add	r2, r1
 8008f56:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008f5a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008f5e:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8008f60:	69fb      	ldr	r3, [r7, #28]
 8008f62:	3301      	adds	r3, #1
 8008f64:	61fb      	str	r3, [r7, #28]
 8008f66:	69fb      	ldr	r3, [r7, #28]
 8008f68:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008f6c:	d81d      	bhi.n	8008faa <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008f6e:	697b      	ldr	r3, [r7, #20]
 8008f70:	015a      	lsls	r2, r3, #5
 8008f72:	69bb      	ldr	r3, [r7, #24]
 8008f74:	4413      	add	r3, r2
 8008f76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008f80:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008f84:	d0ec      	beq.n	8008f60 <USB_HC_Halt+0x1de>
 8008f86:	e011      	b.n	8008fac <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008f88:	697b      	ldr	r3, [r7, #20]
 8008f8a:	015a      	lsls	r2, r3, #5
 8008f8c:	69bb      	ldr	r3, [r7, #24]
 8008f8e:	4413      	add	r3, r2
 8008f90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	697a      	ldr	r2, [r7, #20]
 8008f98:	0151      	lsls	r1, r2, #5
 8008f9a:	69ba      	ldr	r2, [r7, #24]
 8008f9c:	440a      	add	r2, r1
 8008f9e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008fa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008fa6:	6013      	str	r3, [r2, #0]
 8008fa8:	e000      	b.n	8008fac <USB_HC_Halt+0x22a>
          break;
 8008faa:	bf00      	nop
    }
  }

  return HAL_OK;
 8008fac:	2300      	movs	r3, #0
}
 8008fae:	4618      	mov	r0, r3
 8008fb0:	3724      	adds	r7, #36	; 0x24
 8008fb2:	46bd      	mov	sp, r7
 8008fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb8:	4770      	bx	lr
	...

08008fbc <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8008fbc:	b480      	push	{r7}
 8008fbe:	b087      	sub	sp, #28
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	6078      	str	r0, [r7, #4]
 8008fc4:	460b      	mov	r3, r1
 8008fc6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8008fcc:	78fb      	ldrb	r3, [r7, #3]
 8008fce:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8008fd0:	2301      	movs	r3, #1
 8008fd2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	04da      	lsls	r2, r3, #19
 8008fd8:	4b15      	ldr	r3, [pc, #84]	; (8009030 <USB_DoPing+0x74>)
 8008fda:	4013      	ands	r3, r2
 8008fdc:	693a      	ldr	r2, [r7, #16]
 8008fde:	0151      	lsls	r1, r2, #5
 8008fe0:	697a      	ldr	r2, [r7, #20]
 8008fe2:	440a      	add	r2, r1
 8008fe4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008fe8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008fec:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8008fee:	693b      	ldr	r3, [r7, #16]
 8008ff0:	015a      	lsls	r2, r3, #5
 8008ff2:	697b      	ldr	r3, [r7, #20]
 8008ff4:	4413      	add	r3, r2
 8008ff6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008ffe:	68bb      	ldr	r3, [r7, #8]
 8009000:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009004:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009006:	68bb      	ldr	r3, [r7, #8]
 8009008:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800900c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800900e:	693b      	ldr	r3, [r7, #16]
 8009010:	015a      	lsls	r2, r3, #5
 8009012:	697b      	ldr	r3, [r7, #20]
 8009014:	4413      	add	r3, r2
 8009016:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800901a:	461a      	mov	r2, r3
 800901c:	68bb      	ldr	r3, [r7, #8]
 800901e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8009020:	2300      	movs	r3, #0
}
 8009022:	4618      	mov	r0, r3
 8009024:	371c      	adds	r7, #28
 8009026:	46bd      	mov	sp, r7
 8009028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902c:	4770      	bx	lr
 800902e:	bf00      	nop
 8009030:	1ff80000 	.word	0x1ff80000

08009034 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8009034:	b580      	push	{r7, lr}
 8009036:	b086      	sub	sp, #24
 8009038:	af00      	add	r7, sp, #0
 800903a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8009040:	2300      	movs	r3, #0
 8009042:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8009044:	6878      	ldr	r0, [r7, #4]
 8009046:	f7ff f935 	bl	80082b4 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800904a:	2110      	movs	r1, #16
 800904c:	6878      	ldr	r0, [r7, #4]
 800904e:	f7ff f98f 	bl	8008370 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8009052:	6878      	ldr	r0, [r7, #4]
 8009054:	f7ff f9b0 	bl	80083b8 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8009058:	2300      	movs	r3, #0
 800905a:	613b      	str	r3, [r7, #16]
 800905c:	e01f      	b.n	800909e <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800905e:	693b      	ldr	r3, [r7, #16]
 8009060:	015a      	lsls	r2, r3, #5
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	4413      	add	r3, r2
 8009066:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800906e:	68bb      	ldr	r3, [r7, #8]
 8009070:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009074:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8009076:	68bb      	ldr	r3, [r7, #8]
 8009078:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800907c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800907e:	68bb      	ldr	r3, [r7, #8]
 8009080:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009084:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8009086:	693b      	ldr	r3, [r7, #16]
 8009088:	015a      	lsls	r2, r3, #5
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	4413      	add	r3, r2
 800908e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009092:	461a      	mov	r2, r3
 8009094:	68bb      	ldr	r3, [r7, #8]
 8009096:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8009098:	693b      	ldr	r3, [r7, #16]
 800909a:	3301      	adds	r3, #1
 800909c:	613b      	str	r3, [r7, #16]
 800909e:	693b      	ldr	r3, [r7, #16]
 80090a0:	2b0f      	cmp	r3, #15
 80090a2:	d9dc      	bls.n	800905e <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80090a4:	2300      	movs	r3, #0
 80090a6:	613b      	str	r3, [r7, #16]
 80090a8:	e034      	b.n	8009114 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 80090aa:	693b      	ldr	r3, [r7, #16]
 80090ac:	015a      	lsls	r2, r3, #5
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	4413      	add	r3, r2
 80090b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 80090ba:	68bb      	ldr	r3, [r7, #8]
 80090bc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80090c0:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 80090c2:	68bb      	ldr	r3, [r7, #8]
 80090c4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80090c8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80090ca:	68bb      	ldr	r3, [r7, #8]
 80090cc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80090d0:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80090d2:	693b      	ldr	r3, [r7, #16]
 80090d4:	015a      	lsls	r2, r3, #5
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	4413      	add	r3, r2
 80090da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80090de:	461a      	mov	r2, r3
 80090e0:	68bb      	ldr	r3, [r7, #8]
 80090e2:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 80090e4:	697b      	ldr	r3, [r7, #20]
 80090e6:	3301      	adds	r3, #1
 80090e8:	617b      	str	r3, [r7, #20]
 80090ea:	697b      	ldr	r3, [r7, #20]
 80090ec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80090f0:	d80c      	bhi.n	800910c <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80090f2:	693b      	ldr	r3, [r7, #16]
 80090f4:	015a      	lsls	r2, r3, #5
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	4413      	add	r3, r2
 80090fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009104:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009108:	d0ec      	beq.n	80090e4 <USB_StopHost+0xb0>
 800910a:	e000      	b.n	800910e <USB_StopHost+0xda>
        break;
 800910c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800910e:	693b      	ldr	r3, [r7, #16]
 8009110:	3301      	adds	r3, #1
 8009112:	613b      	str	r3, [r7, #16]
 8009114:	693b      	ldr	r3, [r7, #16]
 8009116:	2b0f      	cmp	r3, #15
 8009118:	d9c7      	bls.n	80090aa <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009120:	461a      	mov	r2, r3
 8009122:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009126:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800912e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8009130:	6878      	ldr	r0, [r7, #4]
 8009132:	f7ff f8ae 	bl	8008292 <USB_EnableGlobalInt>

  return HAL_OK;
 8009136:	2300      	movs	r3, #0
}
 8009138:	4618      	mov	r0, r3
 800913a:	3718      	adds	r7, #24
 800913c:	46bd      	mov	sp, r7
 800913e:	bd80      	pop	{r7, pc}

08009140 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8009140:	b590      	push	{r4, r7, lr}
 8009142:	b089      	sub	sp, #36	; 0x24
 8009144:	af04      	add	r7, sp, #16
 8009146:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8009148:	2301      	movs	r3, #1
 800914a:	2202      	movs	r2, #2
 800914c:	2102      	movs	r1, #2
 800914e:	6878      	ldr	r0, [r7, #4]
 8009150:	f000 fc66 	bl	8009a20 <USBH_FindInterface>
 8009154:	4603      	mov	r3, r0
 8009156:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8009158:	7bfb      	ldrb	r3, [r7, #15]
 800915a:	2bff      	cmp	r3, #255	; 0xff
 800915c:	d002      	beq.n	8009164 <USBH_CDC_InterfaceInit+0x24>
 800915e:	7bfb      	ldrb	r3, [r7, #15]
 8009160:	2b01      	cmp	r3, #1
 8009162:	d901      	bls.n	8009168 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8009164:	2302      	movs	r3, #2
 8009166:	e13d      	b.n	80093e4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8009168:	7bfb      	ldrb	r3, [r7, #15]
 800916a:	4619      	mov	r1, r3
 800916c:	6878      	ldr	r0, [r7, #4]
 800916e:	f000 fc3b 	bl	80099e8 <USBH_SelectInterface>
 8009172:	4603      	mov	r3, r0
 8009174:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8009176:	7bbb      	ldrb	r3, [r7, #14]
 8009178:	2b00      	cmp	r3, #0
 800917a:	d001      	beq.n	8009180 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800917c:	2302      	movs	r3, #2
 800917e:	e131      	b.n	80093e4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8009186:	2050      	movs	r0, #80	; 0x50
 8009188:	f002 fa00 	bl	800b58c <malloc>
 800918c:	4603      	mov	r3, r0
 800918e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009196:	69db      	ldr	r3, [r3, #28]
 8009198:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800919a:	68bb      	ldr	r3, [r7, #8]
 800919c:	2b00      	cmp	r3, #0
 800919e:	d101      	bne.n	80091a4 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80091a0:	2302      	movs	r3, #2
 80091a2:	e11f      	b.n	80093e4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80091a4:	2250      	movs	r2, #80	; 0x50
 80091a6:	2100      	movs	r1, #0
 80091a8:	68b8      	ldr	r0, [r7, #8]
 80091aa:	f002 f9ff 	bl	800b5ac <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80091ae:	7bfb      	ldrb	r3, [r7, #15]
 80091b0:	687a      	ldr	r2, [r7, #4]
 80091b2:	211a      	movs	r1, #26
 80091b4:	fb01 f303 	mul.w	r3, r1, r3
 80091b8:	4413      	add	r3, r2
 80091ba:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80091be:	781b      	ldrb	r3, [r3, #0]
 80091c0:	b25b      	sxtb	r3, r3
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	da15      	bge.n	80091f2 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80091c6:	7bfb      	ldrb	r3, [r7, #15]
 80091c8:	687a      	ldr	r2, [r7, #4]
 80091ca:	211a      	movs	r1, #26
 80091cc:	fb01 f303 	mul.w	r3, r1, r3
 80091d0:	4413      	add	r3, r2
 80091d2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80091d6:	781a      	ldrb	r2, [r3, #0]
 80091d8:	68bb      	ldr	r3, [r7, #8]
 80091da:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80091dc:	7bfb      	ldrb	r3, [r7, #15]
 80091de:	687a      	ldr	r2, [r7, #4]
 80091e0:	211a      	movs	r1, #26
 80091e2:	fb01 f303 	mul.w	r3, r1, r3
 80091e6:	4413      	add	r3, r2
 80091e8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80091ec:	881a      	ldrh	r2, [r3, #0]
 80091ee:	68bb      	ldr	r3, [r7, #8]
 80091f0:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80091f2:	68bb      	ldr	r3, [r7, #8]
 80091f4:	785b      	ldrb	r3, [r3, #1]
 80091f6:	4619      	mov	r1, r3
 80091f8:	6878      	ldr	r0, [r7, #4]
 80091fa:	f001 fe32 	bl	800ae62 <USBH_AllocPipe>
 80091fe:	4603      	mov	r3, r0
 8009200:	461a      	mov	r2, r3
 8009202:	68bb      	ldr	r3, [r7, #8]
 8009204:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8009206:	68bb      	ldr	r3, [r7, #8]
 8009208:	7819      	ldrb	r1, [r3, #0]
 800920a:	68bb      	ldr	r3, [r7, #8]
 800920c:	7858      	ldrb	r0, [r3, #1]
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800921a:	68ba      	ldr	r2, [r7, #8]
 800921c:	8952      	ldrh	r2, [r2, #10]
 800921e:	9202      	str	r2, [sp, #8]
 8009220:	2203      	movs	r2, #3
 8009222:	9201      	str	r2, [sp, #4]
 8009224:	9300      	str	r3, [sp, #0]
 8009226:	4623      	mov	r3, r4
 8009228:	4602      	mov	r2, r0
 800922a:	6878      	ldr	r0, [r7, #4]
 800922c:	f001 fdea 	bl	800ae04 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8009230:	68bb      	ldr	r3, [r7, #8]
 8009232:	781b      	ldrb	r3, [r3, #0]
 8009234:	2200      	movs	r2, #0
 8009236:	4619      	mov	r1, r3
 8009238:	6878      	ldr	r0, [r7, #4]
 800923a:	f002 f8f9 	bl	800b430 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800923e:	2300      	movs	r3, #0
 8009240:	2200      	movs	r2, #0
 8009242:	210a      	movs	r1, #10
 8009244:	6878      	ldr	r0, [r7, #4]
 8009246:	f000 fbeb 	bl	8009a20 <USBH_FindInterface>
 800924a:	4603      	mov	r3, r0
 800924c:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800924e:	7bfb      	ldrb	r3, [r7, #15]
 8009250:	2bff      	cmp	r3, #255	; 0xff
 8009252:	d002      	beq.n	800925a <USBH_CDC_InterfaceInit+0x11a>
 8009254:	7bfb      	ldrb	r3, [r7, #15]
 8009256:	2b01      	cmp	r3, #1
 8009258:	d901      	bls.n	800925e <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800925a:	2302      	movs	r3, #2
 800925c:	e0c2      	b.n	80093e4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800925e:	7bfb      	ldrb	r3, [r7, #15]
 8009260:	687a      	ldr	r2, [r7, #4]
 8009262:	211a      	movs	r1, #26
 8009264:	fb01 f303 	mul.w	r3, r1, r3
 8009268:	4413      	add	r3, r2
 800926a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800926e:	781b      	ldrb	r3, [r3, #0]
 8009270:	b25b      	sxtb	r3, r3
 8009272:	2b00      	cmp	r3, #0
 8009274:	da16      	bge.n	80092a4 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009276:	7bfb      	ldrb	r3, [r7, #15]
 8009278:	687a      	ldr	r2, [r7, #4]
 800927a:	211a      	movs	r1, #26
 800927c:	fb01 f303 	mul.w	r3, r1, r3
 8009280:	4413      	add	r3, r2
 8009282:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009286:	781a      	ldrb	r2, [r3, #0]
 8009288:	68bb      	ldr	r3, [r7, #8]
 800928a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800928c:	7bfb      	ldrb	r3, [r7, #15]
 800928e:	687a      	ldr	r2, [r7, #4]
 8009290:	211a      	movs	r1, #26
 8009292:	fb01 f303 	mul.w	r3, r1, r3
 8009296:	4413      	add	r3, r2
 8009298:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800929c:	881a      	ldrh	r2, [r3, #0]
 800929e:	68bb      	ldr	r3, [r7, #8]
 80092a0:	835a      	strh	r2, [r3, #26]
 80092a2:	e015      	b.n	80092d0 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80092a4:	7bfb      	ldrb	r3, [r7, #15]
 80092a6:	687a      	ldr	r2, [r7, #4]
 80092a8:	211a      	movs	r1, #26
 80092aa:	fb01 f303 	mul.w	r3, r1, r3
 80092ae:	4413      	add	r3, r2
 80092b0:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80092b4:	781a      	ldrb	r2, [r3, #0]
 80092b6:	68bb      	ldr	r3, [r7, #8]
 80092b8:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80092ba:	7bfb      	ldrb	r3, [r7, #15]
 80092bc:	687a      	ldr	r2, [r7, #4]
 80092be:	211a      	movs	r1, #26
 80092c0:	fb01 f303 	mul.w	r3, r1, r3
 80092c4:	4413      	add	r3, r2
 80092c6:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80092ca:	881a      	ldrh	r2, [r3, #0]
 80092cc:	68bb      	ldr	r3, [r7, #8]
 80092ce:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 80092d0:	7bfb      	ldrb	r3, [r7, #15]
 80092d2:	687a      	ldr	r2, [r7, #4]
 80092d4:	211a      	movs	r1, #26
 80092d6:	fb01 f303 	mul.w	r3, r1, r3
 80092da:	4413      	add	r3, r2
 80092dc:	f203 3356 	addw	r3, r3, #854	; 0x356
 80092e0:	781b      	ldrb	r3, [r3, #0]
 80092e2:	b25b      	sxtb	r3, r3
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	da16      	bge.n	8009316 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80092e8:	7bfb      	ldrb	r3, [r7, #15]
 80092ea:	687a      	ldr	r2, [r7, #4]
 80092ec:	211a      	movs	r1, #26
 80092ee:	fb01 f303 	mul.w	r3, r1, r3
 80092f2:	4413      	add	r3, r2
 80092f4:	f203 3356 	addw	r3, r3, #854	; 0x356
 80092f8:	781a      	ldrb	r2, [r3, #0]
 80092fa:	68bb      	ldr	r3, [r7, #8]
 80092fc:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80092fe:	7bfb      	ldrb	r3, [r7, #15]
 8009300:	687a      	ldr	r2, [r7, #4]
 8009302:	211a      	movs	r1, #26
 8009304:	fb01 f303 	mul.w	r3, r1, r3
 8009308:	4413      	add	r3, r2
 800930a:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800930e:	881a      	ldrh	r2, [r3, #0]
 8009310:	68bb      	ldr	r3, [r7, #8]
 8009312:	835a      	strh	r2, [r3, #26]
 8009314:	e015      	b.n	8009342 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8009316:	7bfb      	ldrb	r3, [r7, #15]
 8009318:	687a      	ldr	r2, [r7, #4]
 800931a:	211a      	movs	r1, #26
 800931c:	fb01 f303 	mul.w	r3, r1, r3
 8009320:	4413      	add	r3, r2
 8009322:	f203 3356 	addw	r3, r3, #854	; 0x356
 8009326:	781a      	ldrb	r2, [r3, #0]
 8009328:	68bb      	ldr	r3, [r7, #8]
 800932a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800932c:	7bfb      	ldrb	r3, [r7, #15]
 800932e:	687a      	ldr	r2, [r7, #4]
 8009330:	211a      	movs	r1, #26
 8009332:	fb01 f303 	mul.w	r3, r1, r3
 8009336:	4413      	add	r3, r2
 8009338:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800933c:	881a      	ldrh	r2, [r3, #0]
 800933e:	68bb      	ldr	r3, [r7, #8]
 8009340:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8009342:	68bb      	ldr	r3, [r7, #8]
 8009344:	7b9b      	ldrb	r3, [r3, #14]
 8009346:	4619      	mov	r1, r3
 8009348:	6878      	ldr	r0, [r7, #4]
 800934a:	f001 fd8a 	bl	800ae62 <USBH_AllocPipe>
 800934e:	4603      	mov	r3, r0
 8009350:	461a      	mov	r2, r3
 8009352:	68bb      	ldr	r3, [r7, #8]
 8009354:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8009356:	68bb      	ldr	r3, [r7, #8]
 8009358:	7bdb      	ldrb	r3, [r3, #15]
 800935a:	4619      	mov	r1, r3
 800935c:	6878      	ldr	r0, [r7, #4]
 800935e:	f001 fd80 	bl	800ae62 <USBH_AllocPipe>
 8009362:	4603      	mov	r3, r0
 8009364:	461a      	mov	r2, r3
 8009366:	68bb      	ldr	r3, [r7, #8]
 8009368:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800936a:	68bb      	ldr	r3, [r7, #8]
 800936c:	7b59      	ldrb	r1, [r3, #13]
 800936e:	68bb      	ldr	r3, [r7, #8]
 8009370:	7b98      	ldrb	r0, [r3, #14]
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800937e:	68ba      	ldr	r2, [r7, #8]
 8009380:	8b12      	ldrh	r2, [r2, #24]
 8009382:	9202      	str	r2, [sp, #8]
 8009384:	2202      	movs	r2, #2
 8009386:	9201      	str	r2, [sp, #4]
 8009388:	9300      	str	r3, [sp, #0]
 800938a:	4623      	mov	r3, r4
 800938c:	4602      	mov	r2, r0
 800938e:	6878      	ldr	r0, [r7, #4]
 8009390:	f001 fd38 	bl	800ae04 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8009394:	68bb      	ldr	r3, [r7, #8]
 8009396:	7b19      	ldrb	r1, [r3, #12]
 8009398:	68bb      	ldr	r3, [r7, #8]
 800939a:	7bd8      	ldrb	r0, [r3, #15]
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80093a8:	68ba      	ldr	r2, [r7, #8]
 80093aa:	8b52      	ldrh	r2, [r2, #26]
 80093ac:	9202      	str	r2, [sp, #8]
 80093ae:	2202      	movs	r2, #2
 80093b0:	9201      	str	r2, [sp, #4]
 80093b2:	9300      	str	r3, [sp, #0]
 80093b4:	4623      	mov	r3, r4
 80093b6:	4602      	mov	r2, r0
 80093b8:	6878      	ldr	r0, [r7, #4]
 80093ba:	f001 fd23 	bl	800ae04 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80093be:	68bb      	ldr	r3, [r7, #8]
 80093c0:	2200      	movs	r2, #0
 80093c2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80093c6:	68bb      	ldr	r3, [r7, #8]
 80093c8:	7b5b      	ldrb	r3, [r3, #13]
 80093ca:	2200      	movs	r2, #0
 80093cc:	4619      	mov	r1, r3
 80093ce:	6878      	ldr	r0, [r7, #4]
 80093d0:	f002 f82e 	bl	800b430 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80093d4:	68bb      	ldr	r3, [r7, #8]
 80093d6:	7b1b      	ldrb	r3, [r3, #12]
 80093d8:	2200      	movs	r2, #0
 80093da:	4619      	mov	r1, r3
 80093dc:	6878      	ldr	r0, [r7, #4]
 80093de:	f002 f827 	bl	800b430 <USBH_LL_SetToggle>

  return USBH_OK;
 80093e2:	2300      	movs	r3, #0
}
 80093e4:	4618      	mov	r0, r3
 80093e6:	3714      	adds	r7, #20
 80093e8:	46bd      	mov	sp, r7
 80093ea:	bd90      	pop	{r4, r7, pc}

080093ec <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80093ec:	b580      	push	{r7, lr}
 80093ee:	b084      	sub	sp, #16
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80093fa:	69db      	ldr	r3, [r3, #28]
 80093fc:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	781b      	ldrb	r3, [r3, #0]
 8009402:	2b00      	cmp	r3, #0
 8009404:	d00e      	beq.n	8009424 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	781b      	ldrb	r3, [r3, #0]
 800940a:	4619      	mov	r1, r3
 800940c:	6878      	ldr	r0, [r7, #4]
 800940e:	f001 fd18 	bl	800ae42 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	781b      	ldrb	r3, [r3, #0]
 8009416:	4619      	mov	r1, r3
 8009418:	6878      	ldr	r0, [r7, #4]
 800941a:	f001 fd43 	bl	800aea4 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	2200      	movs	r2, #0
 8009422:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	7b1b      	ldrb	r3, [r3, #12]
 8009428:	2b00      	cmp	r3, #0
 800942a:	d00e      	beq.n	800944a <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	7b1b      	ldrb	r3, [r3, #12]
 8009430:	4619      	mov	r1, r3
 8009432:	6878      	ldr	r0, [r7, #4]
 8009434:	f001 fd05 	bl	800ae42 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	7b1b      	ldrb	r3, [r3, #12]
 800943c:	4619      	mov	r1, r3
 800943e:	6878      	ldr	r0, [r7, #4]
 8009440:	f001 fd30 	bl	800aea4 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	2200      	movs	r2, #0
 8009448:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	7b5b      	ldrb	r3, [r3, #13]
 800944e:	2b00      	cmp	r3, #0
 8009450:	d00e      	beq.n	8009470 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	7b5b      	ldrb	r3, [r3, #13]
 8009456:	4619      	mov	r1, r3
 8009458:	6878      	ldr	r0, [r7, #4]
 800945a:	f001 fcf2 	bl	800ae42 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	7b5b      	ldrb	r3, [r3, #13]
 8009462:	4619      	mov	r1, r3
 8009464:	6878      	ldr	r0, [r7, #4]
 8009466:	f001 fd1d 	bl	800aea4 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	2200      	movs	r2, #0
 800946e:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009476:	69db      	ldr	r3, [r3, #28]
 8009478:	2b00      	cmp	r3, #0
 800947a:	d00b      	beq.n	8009494 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009482:	69db      	ldr	r3, [r3, #28]
 8009484:	4618      	mov	r0, r3
 8009486:	f002 f889 	bl	800b59c <free>
    phost->pActiveClass->pData = 0U;
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009490:	2200      	movs	r2, #0
 8009492:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8009494:	2300      	movs	r3, #0
}
 8009496:	4618      	mov	r0, r3
 8009498:	3710      	adds	r7, #16
 800949a:	46bd      	mov	sp, r7
 800949c:	bd80      	pop	{r7, pc}

0800949e <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800949e:	b580      	push	{r7, lr}
 80094a0:	b084      	sub	sp, #16
 80094a2:	af00      	add	r7, sp, #0
 80094a4:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80094ac:	69db      	ldr	r3, [r3, #28]
 80094ae:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	3340      	adds	r3, #64	; 0x40
 80094b4:	4619      	mov	r1, r3
 80094b6:	6878      	ldr	r0, [r7, #4]
 80094b8:	f000 f8b1 	bl	800961e <GetLineCoding>
 80094bc:	4603      	mov	r3, r0
 80094be:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80094c0:	7afb      	ldrb	r3, [r7, #11]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d105      	bne.n	80094d2 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80094cc:	2102      	movs	r1, #2
 80094ce:	6878      	ldr	r0, [r7, #4]
 80094d0:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80094d2:	7afb      	ldrb	r3, [r7, #11]
}
 80094d4:	4618      	mov	r0, r3
 80094d6:	3710      	adds	r7, #16
 80094d8:	46bd      	mov	sp, r7
 80094da:	bd80      	pop	{r7, pc}

080094dc <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80094dc:	b580      	push	{r7, lr}
 80094de:	b084      	sub	sp, #16
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80094e4:	2301      	movs	r3, #1
 80094e6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80094e8:	2300      	movs	r3, #0
 80094ea:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80094f2:	69db      	ldr	r3, [r3, #28]
 80094f4:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80094f6:	68bb      	ldr	r3, [r7, #8]
 80094f8:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80094fc:	2b04      	cmp	r3, #4
 80094fe:	d877      	bhi.n	80095f0 <USBH_CDC_Process+0x114>
 8009500:	a201      	add	r2, pc, #4	; (adr r2, 8009508 <USBH_CDC_Process+0x2c>)
 8009502:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009506:	bf00      	nop
 8009508:	0800951d 	.word	0x0800951d
 800950c:	08009523 	.word	0x08009523
 8009510:	08009553 	.word	0x08009553
 8009514:	080095c7 	.word	0x080095c7
 8009518:	080095d5 	.word	0x080095d5
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800951c:	2300      	movs	r3, #0
 800951e:	73fb      	strb	r3, [r7, #15]
      break;
 8009520:	e06d      	b.n	80095fe <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8009522:	68bb      	ldr	r3, [r7, #8]
 8009524:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009526:	4619      	mov	r1, r3
 8009528:	6878      	ldr	r0, [r7, #4]
 800952a:	f000 f897 	bl	800965c <SetLineCoding>
 800952e:	4603      	mov	r3, r0
 8009530:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009532:	7bbb      	ldrb	r3, [r7, #14]
 8009534:	2b00      	cmp	r3, #0
 8009536:	d104      	bne.n	8009542 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8009538:	68bb      	ldr	r3, [r7, #8]
 800953a:	2202      	movs	r2, #2
 800953c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8009540:	e058      	b.n	80095f4 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8009542:	7bbb      	ldrb	r3, [r7, #14]
 8009544:	2b01      	cmp	r3, #1
 8009546:	d055      	beq.n	80095f4 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8009548:	68bb      	ldr	r3, [r7, #8]
 800954a:	2204      	movs	r2, #4
 800954c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8009550:	e050      	b.n	80095f4 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8009552:	68bb      	ldr	r3, [r7, #8]
 8009554:	3340      	adds	r3, #64	; 0x40
 8009556:	4619      	mov	r1, r3
 8009558:	6878      	ldr	r0, [r7, #4]
 800955a:	f000 f860 	bl	800961e <GetLineCoding>
 800955e:	4603      	mov	r3, r0
 8009560:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009562:	7bbb      	ldrb	r3, [r7, #14]
 8009564:	2b00      	cmp	r3, #0
 8009566:	d126      	bne.n	80095b6 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8009568:	68bb      	ldr	r3, [r7, #8]
 800956a:	2200      	movs	r2, #0
 800956c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8009570:	68bb      	ldr	r3, [r7, #8]
 8009572:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8009576:	68bb      	ldr	r3, [r7, #8]
 8009578:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800957a:	791b      	ldrb	r3, [r3, #4]
 800957c:	429a      	cmp	r2, r3
 800957e:	d13b      	bne.n	80095f8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8009580:	68bb      	ldr	r3, [r7, #8]
 8009582:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8009586:	68bb      	ldr	r3, [r7, #8]
 8009588:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800958a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800958c:	429a      	cmp	r2, r3
 800958e:	d133      	bne.n	80095f8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8009590:	68bb      	ldr	r3, [r7, #8]
 8009592:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8009596:	68bb      	ldr	r3, [r7, #8]
 8009598:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800959a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800959c:	429a      	cmp	r2, r3
 800959e:	d12b      	bne.n	80095f8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80095a0:	68bb      	ldr	r3, [r7, #8]
 80095a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80095a4:	68bb      	ldr	r3, [r7, #8]
 80095a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80095a8:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80095aa:	429a      	cmp	r2, r3
 80095ac:	d124      	bne.n	80095f8 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80095ae:	6878      	ldr	r0, [r7, #4]
 80095b0:	f000 f958 	bl	8009864 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80095b4:	e020      	b.n	80095f8 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80095b6:	7bbb      	ldrb	r3, [r7, #14]
 80095b8:	2b01      	cmp	r3, #1
 80095ba:	d01d      	beq.n	80095f8 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80095bc:	68bb      	ldr	r3, [r7, #8]
 80095be:	2204      	movs	r2, #4
 80095c0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80095c4:	e018      	b.n	80095f8 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80095c6:	6878      	ldr	r0, [r7, #4]
 80095c8:	f000 f867 	bl	800969a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80095cc:	6878      	ldr	r0, [r7, #4]
 80095ce:	f000 f8da 	bl	8009786 <CDC_ProcessReception>
      break;
 80095d2:	e014      	b.n	80095fe <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80095d4:	2100      	movs	r1, #0
 80095d6:	6878      	ldr	r0, [r7, #4]
 80095d8:	f000 ffe3 	bl	800a5a2 <USBH_ClrFeature>
 80095dc:	4603      	mov	r3, r0
 80095de:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80095e0:	7bbb      	ldrb	r3, [r7, #14]
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d10a      	bne.n	80095fc <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80095e6:	68bb      	ldr	r3, [r7, #8]
 80095e8:	2200      	movs	r2, #0
 80095ea:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 80095ee:	e005      	b.n	80095fc <USBH_CDC_Process+0x120>

    default:
      break;
 80095f0:	bf00      	nop
 80095f2:	e004      	b.n	80095fe <USBH_CDC_Process+0x122>
      break;
 80095f4:	bf00      	nop
 80095f6:	e002      	b.n	80095fe <USBH_CDC_Process+0x122>
      break;
 80095f8:	bf00      	nop
 80095fa:	e000      	b.n	80095fe <USBH_CDC_Process+0x122>
      break;
 80095fc:	bf00      	nop

  }

  return status;
 80095fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8009600:	4618      	mov	r0, r3
 8009602:	3710      	adds	r7, #16
 8009604:	46bd      	mov	sp, r7
 8009606:	bd80      	pop	{r7, pc}

08009608 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8009608:	b480      	push	{r7}
 800960a:	b083      	sub	sp, #12
 800960c:	af00      	add	r7, sp, #0
 800960e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8009610:	2300      	movs	r3, #0
}
 8009612:	4618      	mov	r0, r3
 8009614:	370c      	adds	r7, #12
 8009616:	46bd      	mov	sp, r7
 8009618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961c:	4770      	bx	lr

0800961e <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800961e:	b580      	push	{r7, lr}
 8009620:	b082      	sub	sp, #8
 8009622:	af00      	add	r7, sp, #0
 8009624:	6078      	str	r0, [r7, #4]
 8009626:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	22a1      	movs	r2, #161	; 0xa1
 800962c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	2221      	movs	r2, #33	; 0x21
 8009632:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	2200      	movs	r2, #0
 8009638:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	2200      	movs	r2, #0
 800963e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	2207      	movs	r2, #7
 8009644:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8009646:	683b      	ldr	r3, [r7, #0]
 8009648:	2207      	movs	r2, #7
 800964a:	4619      	mov	r1, r3
 800964c:	6878      	ldr	r0, [r7, #4]
 800964e:	f001 f988 	bl	800a962 <USBH_CtlReq>
 8009652:	4603      	mov	r3, r0
}
 8009654:	4618      	mov	r0, r3
 8009656:	3708      	adds	r7, #8
 8009658:	46bd      	mov	sp, r7
 800965a:	bd80      	pop	{r7, pc}

0800965c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800965c:	b580      	push	{r7, lr}
 800965e:	b082      	sub	sp, #8
 8009660:	af00      	add	r7, sp, #0
 8009662:	6078      	str	r0, [r7, #4]
 8009664:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	2221      	movs	r2, #33	; 0x21
 800966a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	2220      	movs	r2, #32
 8009670:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	2200      	movs	r2, #0
 8009676:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	2200      	movs	r2, #0
 800967c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	2207      	movs	r2, #7
 8009682:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8009684:	683b      	ldr	r3, [r7, #0]
 8009686:	2207      	movs	r2, #7
 8009688:	4619      	mov	r1, r3
 800968a:	6878      	ldr	r0, [r7, #4]
 800968c:	f001 f969 	bl	800a962 <USBH_CtlReq>
 8009690:	4603      	mov	r3, r0
}
 8009692:	4618      	mov	r0, r3
 8009694:	3708      	adds	r7, #8
 8009696:	46bd      	mov	sp, r7
 8009698:	bd80      	pop	{r7, pc}

0800969a <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800969a:	b580      	push	{r7, lr}
 800969c:	b086      	sub	sp, #24
 800969e:	af02      	add	r7, sp, #8
 80096a0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80096a8:	69db      	ldr	r3, [r3, #28]
 80096aa:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80096ac:	2300      	movs	r3, #0
 80096ae:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80096b6:	2b01      	cmp	r3, #1
 80096b8:	d002      	beq.n	80096c0 <CDC_ProcessTransmission+0x26>
 80096ba:	2b02      	cmp	r3, #2
 80096bc:	d023      	beq.n	8009706 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80096be:	e05e      	b.n	800977e <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096c4:	68fa      	ldr	r2, [r7, #12]
 80096c6:	8b12      	ldrh	r2, [r2, #24]
 80096c8:	4293      	cmp	r3, r2
 80096ca:	d90b      	bls.n	80096e4 <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	69d9      	ldr	r1, [r3, #28]
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	8b1a      	ldrh	r2, [r3, #24]
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	7b5b      	ldrb	r3, [r3, #13]
 80096d8:	2001      	movs	r0, #1
 80096da:	9000      	str	r0, [sp, #0]
 80096dc:	6878      	ldr	r0, [r7, #4]
 80096de:	f001 fb4e 	bl	800ad7e <USBH_BulkSendData>
 80096e2:	e00b      	b.n	80096fc <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 80096ec:	b29a      	uxth	r2, r3
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	7b5b      	ldrb	r3, [r3, #13]
 80096f2:	2001      	movs	r0, #1
 80096f4:	9000      	str	r0, [sp, #0]
 80096f6:	6878      	ldr	r0, [r7, #4]
 80096f8:	f001 fb41 	bl	800ad7e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	2202      	movs	r2, #2
 8009700:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8009704:	e03b      	b.n	800977e <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	7b5b      	ldrb	r3, [r3, #13]
 800970a:	4619      	mov	r1, r3
 800970c:	6878      	ldr	r0, [r7, #4]
 800970e:	f001 fe65 	bl	800b3dc <USBH_LL_GetURBState>
 8009712:	4603      	mov	r3, r0
 8009714:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8009716:	7afb      	ldrb	r3, [r7, #11]
 8009718:	2b01      	cmp	r3, #1
 800971a:	d128      	bne.n	800976e <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009720:	68fa      	ldr	r2, [r7, #12]
 8009722:	8b12      	ldrh	r2, [r2, #24]
 8009724:	4293      	cmp	r3, r2
 8009726:	d90e      	bls.n	8009746 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800972c:	68fa      	ldr	r2, [r7, #12]
 800972e:	8b12      	ldrh	r2, [r2, #24]
 8009730:	1a9a      	subs	r2, r3, r2
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	69db      	ldr	r3, [r3, #28]
 800973a:	68fa      	ldr	r2, [r7, #12]
 800973c:	8b12      	ldrh	r2, [r2, #24]
 800973e:	441a      	add	r2, r3
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	61da      	str	r2, [r3, #28]
 8009744:	e002      	b.n	800974c <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	2200      	movs	r2, #0
 800974a:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009750:	2b00      	cmp	r3, #0
 8009752:	d004      	beq.n	800975e <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	2201      	movs	r2, #1
 8009758:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800975c:	e00e      	b.n	800977c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	2200      	movs	r2, #0
 8009762:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8009766:	6878      	ldr	r0, [r7, #4]
 8009768:	f000 f868 	bl	800983c <USBH_CDC_TransmitCallback>
      break;
 800976c:	e006      	b.n	800977c <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800976e:	7afb      	ldrb	r3, [r7, #11]
 8009770:	2b02      	cmp	r3, #2
 8009772:	d103      	bne.n	800977c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	2201      	movs	r2, #1
 8009778:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800977c:	bf00      	nop
  }
}
 800977e:	bf00      	nop
 8009780:	3710      	adds	r7, #16
 8009782:	46bd      	mov	sp, r7
 8009784:	bd80      	pop	{r7, pc}

08009786 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8009786:	b580      	push	{r7, lr}
 8009788:	b086      	sub	sp, #24
 800978a:	af00      	add	r7, sp, #0
 800978c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009794:	69db      	ldr	r3, [r3, #28]
 8009796:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009798:	2300      	movs	r3, #0
 800979a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800979c:	697b      	ldr	r3, [r7, #20]
 800979e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80097a2:	2b03      	cmp	r3, #3
 80097a4:	d002      	beq.n	80097ac <CDC_ProcessReception+0x26>
 80097a6:	2b04      	cmp	r3, #4
 80097a8:	d00e      	beq.n	80097c8 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80097aa:	e043      	b.n	8009834 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 80097ac:	697b      	ldr	r3, [r7, #20]
 80097ae:	6a19      	ldr	r1, [r3, #32]
 80097b0:	697b      	ldr	r3, [r7, #20]
 80097b2:	8b5a      	ldrh	r2, [r3, #26]
 80097b4:	697b      	ldr	r3, [r7, #20]
 80097b6:	7b1b      	ldrb	r3, [r3, #12]
 80097b8:	6878      	ldr	r0, [r7, #4]
 80097ba:	f001 fb05 	bl	800adc8 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80097be:	697b      	ldr	r3, [r7, #20]
 80097c0:	2204      	movs	r2, #4
 80097c2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80097c6:	e035      	b.n	8009834 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80097c8:	697b      	ldr	r3, [r7, #20]
 80097ca:	7b1b      	ldrb	r3, [r3, #12]
 80097cc:	4619      	mov	r1, r3
 80097ce:	6878      	ldr	r0, [r7, #4]
 80097d0:	f001 fe04 	bl	800b3dc <USBH_LL_GetURBState>
 80097d4:	4603      	mov	r3, r0
 80097d6:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80097d8:	7cfb      	ldrb	r3, [r7, #19]
 80097da:	2b01      	cmp	r3, #1
 80097dc:	d129      	bne.n	8009832 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80097de:	697b      	ldr	r3, [r7, #20]
 80097e0:	7b1b      	ldrb	r3, [r3, #12]
 80097e2:	4619      	mov	r1, r3
 80097e4:	6878      	ldr	r0, [r7, #4]
 80097e6:	f001 fd67 	bl	800b2b8 <USBH_LL_GetLastXferSize>
 80097ea:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80097ec:	697b      	ldr	r3, [r7, #20]
 80097ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097f0:	68fa      	ldr	r2, [r7, #12]
 80097f2:	429a      	cmp	r2, r3
 80097f4:	d016      	beq.n	8009824 <CDC_ProcessReception+0x9e>
 80097f6:	697b      	ldr	r3, [r7, #20]
 80097f8:	8b5b      	ldrh	r3, [r3, #26]
 80097fa:	461a      	mov	r2, r3
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	4293      	cmp	r3, r2
 8009800:	d910      	bls.n	8009824 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8009802:	697b      	ldr	r3, [r7, #20]
 8009804:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	1ad2      	subs	r2, r2, r3
 800980a:	697b      	ldr	r3, [r7, #20]
 800980c:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800980e:	697b      	ldr	r3, [r7, #20]
 8009810:	6a1a      	ldr	r2, [r3, #32]
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	441a      	add	r2, r3
 8009816:	697b      	ldr	r3, [r7, #20]
 8009818:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800981a:	697b      	ldr	r3, [r7, #20]
 800981c:	2203      	movs	r2, #3
 800981e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8009822:	e006      	b.n	8009832 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8009824:	697b      	ldr	r3, [r7, #20]
 8009826:	2200      	movs	r2, #0
 8009828:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800982c:	6878      	ldr	r0, [r7, #4]
 800982e:	f000 f80f 	bl	8009850 <USBH_CDC_ReceiveCallback>
      break;
 8009832:	bf00      	nop
  }
}
 8009834:	bf00      	nop
 8009836:	3718      	adds	r7, #24
 8009838:	46bd      	mov	sp, r7
 800983a:	bd80      	pop	{r7, pc}

0800983c <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800983c:	b480      	push	{r7}
 800983e:	b083      	sub	sp, #12
 8009840:	af00      	add	r7, sp, #0
 8009842:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009844:	bf00      	nop
 8009846:	370c      	adds	r7, #12
 8009848:	46bd      	mov	sp, r7
 800984a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984e:	4770      	bx	lr

08009850 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8009850:	b480      	push	{r7}
 8009852:	b083      	sub	sp, #12
 8009854:	af00      	add	r7, sp, #0
 8009856:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009858:	bf00      	nop
 800985a:	370c      	adds	r7, #12
 800985c:	46bd      	mov	sp, r7
 800985e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009862:	4770      	bx	lr

08009864 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8009864:	b480      	push	{r7}
 8009866:	b083      	sub	sp, #12
 8009868:	af00      	add	r7, sp, #0
 800986a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800986c:	bf00      	nop
 800986e:	370c      	adds	r7, #12
 8009870:	46bd      	mov	sp, r7
 8009872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009876:	4770      	bx	lr

08009878 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8009878:	b580      	push	{r7, lr}
 800987a:	b084      	sub	sp, #16
 800987c:	af00      	add	r7, sp, #0
 800987e:	60f8      	str	r0, [r7, #12]
 8009880:	60b9      	str	r1, [r7, #8]
 8009882:	4613      	mov	r3, r2
 8009884:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	2b00      	cmp	r3, #0
 800988a:	d101      	bne.n	8009890 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800988c:	2302      	movs	r3, #2
 800988e:	e029      	b.n	80098e4 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	79fa      	ldrb	r2, [r7, #7]
 8009894:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	2200      	movs	r2, #0
 800989c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	2200      	movs	r2, #0
 80098a4:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 80098a8:	68f8      	ldr	r0, [r7, #12]
 80098aa:	f000 f81f 	bl	80098ec <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	2200      	movs	r2, #0
 80098b2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	2200      	movs	r2, #0
 80098ba:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	2200      	movs	r2, #0
 80098c2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	2200      	movs	r2, #0
 80098ca:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80098ce:	68bb      	ldr	r3, [r7, #8]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d003      	beq.n	80098dc <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	68ba      	ldr	r2, [r7, #8]
 80098d8:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 80098dc:	68f8      	ldr	r0, [r7, #12]
 80098de:	f001 fc37 	bl	800b150 <USBH_LL_Init>

  return USBH_OK;
 80098e2:	2300      	movs	r3, #0
}
 80098e4:	4618      	mov	r0, r3
 80098e6:	3710      	adds	r7, #16
 80098e8:	46bd      	mov	sp, r7
 80098ea:	bd80      	pop	{r7, pc}

080098ec <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80098ec:	b480      	push	{r7}
 80098ee:	b085      	sub	sp, #20
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80098f4:	2300      	movs	r3, #0
 80098f6:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80098f8:	2300      	movs	r3, #0
 80098fa:	60fb      	str	r3, [r7, #12]
 80098fc:	e009      	b.n	8009912 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80098fe:	687a      	ldr	r2, [r7, #4]
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	33e0      	adds	r3, #224	; 0xe0
 8009904:	009b      	lsls	r3, r3, #2
 8009906:	4413      	add	r3, r2
 8009908:	2200      	movs	r2, #0
 800990a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	3301      	adds	r3, #1
 8009910:	60fb      	str	r3, [r7, #12]
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	2b0e      	cmp	r3, #14
 8009916:	d9f2      	bls.n	80098fe <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009918:	2300      	movs	r3, #0
 800991a:	60fb      	str	r3, [r7, #12]
 800991c:	e009      	b.n	8009932 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800991e:	687a      	ldr	r2, [r7, #4]
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	4413      	add	r3, r2
 8009924:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009928:	2200      	movs	r2, #0
 800992a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	3301      	adds	r3, #1
 8009930:	60fb      	str	r3, [r7, #12]
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009938:	d3f1      	bcc.n	800991e <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	2200      	movs	r2, #0
 800993e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	2200      	movs	r2, #0
 8009944:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	2201      	movs	r2, #1
 800994a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	2200      	movs	r2, #0
 8009950:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	2201      	movs	r2, #1
 8009958:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	2240      	movs	r2, #64	; 0x40
 800995e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	2200      	movs	r2, #0
 8009964:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	2200      	movs	r2, #0
 800996a:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	2201      	movs	r2, #1
 8009972:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	2200      	movs	r2, #0
 800997a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	2200      	movs	r2, #0
 8009982:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8009986:	2300      	movs	r3, #0
}
 8009988:	4618      	mov	r0, r3
 800998a:	3714      	adds	r7, #20
 800998c:	46bd      	mov	sp, r7
 800998e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009992:	4770      	bx	lr

08009994 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8009994:	b480      	push	{r7}
 8009996:	b085      	sub	sp, #20
 8009998:	af00      	add	r7, sp, #0
 800999a:	6078      	str	r0, [r7, #4]
 800999c:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800999e:	2300      	movs	r3, #0
 80099a0:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80099a2:	683b      	ldr	r3, [r7, #0]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d016      	beq.n	80099d6 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d10e      	bne.n	80099d0 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80099b8:	1c59      	adds	r1, r3, #1
 80099ba:	687a      	ldr	r2, [r7, #4]
 80099bc:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 80099c0:	687a      	ldr	r2, [r7, #4]
 80099c2:	33de      	adds	r3, #222	; 0xde
 80099c4:	6839      	ldr	r1, [r7, #0]
 80099c6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80099ca:	2300      	movs	r3, #0
 80099cc:	73fb      	strb	r3, [r7, #15]
 80099ce:	e004      	b.n	80099da <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80099d0:	2302      	movs	r3, #2
 80099d2:	73fb      	strb	r3, [r7, #15]
 80099d4:	e001      	b.n	80099da <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80099d6:	2302      	movs	r3, #2
 80099d8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80099da:	7bfb      	ldrb	r3, [r7, #15]
}
 80099dc:	4618      	mov	r0, r3
 80099de:	3714      	adds	r7, #20
 80099e0:	46bd      	mov	sp, r7
 80099e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e6:	4770      	bx	lr

080099e8 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80099e8:	b480      	push	{r7}
 80099ea:	b085      	sub	sp, #20
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	6078      	str	r0, [r7, #4]
 80099f0:	460b      	mov	r3, r1
 80099f2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80099f4:	2300      	movs	r3, #0
 80099f6:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 80099fe:	78fa      	ldrb	r2, [r7, #3]
 8009a00:	429a      	cmp	r2, r3
 8009a02:	d204      	bcs.n	8009a0e <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	78fa      	ldrb	r2, [r7, #3]
 8009a08:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8009a0c:	e001      	b.n	8009a12 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8009a0e:	2302      	movs	r3, #2
 8009a10:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009a12:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a14:	4618      	mov	r0, r3
 8009a16:	3714      	adds	r7, #20
 8009a18:	46bd      	mov	sp, r7
 8009a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a1e:	4770      	bx	lr

08009a20 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8009a20:	b480      	push	{r7}
 8009a22:	b087      	sub	sp, #28
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	6078      	str	r0, [r7, #4]
 8009a28:	4608      	mov	r0, r1
 8009a2a:	4611      	mov	r1, r2
 8009a2c:	461a      	mov	r2, r3
 8009a2e:	4603      	mov	r3, r0
 8009a30:	70fb      	strb	r3, [r7, #3]
 8009a32:	460b      	mov	r3, r1
 8009a34:	70bb      	strb	r3, [r7, #2]
 8009a36:	4613      	mov	r3, r2
 8009a38:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8009a3a:	2300      	movs	r3, #0
 8009a3c:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8009a3e:	2300      	movs	r3, #0
 8009a40:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8009a48:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009a4a:	e025      	b.n	8009a98 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8009a4c:	7dfb      	ldrb	r3, [r7, #23]
 8009a4e:	221a      	movs	r2, #26
 8009a50:	fb02 f303 	mul.w	r3, r2, r3
 8009a54:	3308      	adds	r3, #8
 8009a56:	68fa      	ldr	r2, [r7, #12]
 8009a58:	4413      	add	r3, r2
 8009a5a:	3302      	adds	r3, #2
 8009a5c:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009a5e:	693b      	ldr	r3, [r7, #16]
 8009a60:	795b      	ldrb	r3, [r3, #5]
 8009a62:	78fa      	ldrb	r2, [r7, #3]
 8009a64:	429a      	cmp	r2, r3
 8009a66:	d002      	beq.n	8009a6e <USBH_FindInterface+0x4e>
 8009a68:	78fb      	ldrb	r3, [r7, #3]
 8009a6a:	2bff      	cmp	r3, #255	; 0xff
 8009a6c:	d111      	bne.n	8009a92 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009a6e:	693b      	ldr	r3, [r7, #16]
 8009a70:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009a72:	78ba      	ldrb	r2, [r7, #2]
 8009a74:	429a      	cmp	r2, r3
 8009a76:	d002      	beq.n	8009a7e <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009a78:	78bb      	ldrb	r3, [r7, #2]
 8009a7a:	2bff      	cmp	r3, #255	; 0xff
 8009a7c:	d109      	bne.n	8009a92 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009a7e:	693b      	ldr	r3, [r7, #16]
 8009a80:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009a82:	787a      	ldrb	r2, [r7, #1]
 8009a84:	429a      	cmp	r2, r3
 8009a86:	d002      	beq.n	8009a8e <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009a88:	787b      	ldrb	r3, [r7, #1]
 8009a8a:	2bff      	cmp	r3, #255	; 0xff
 8009a8c:	d101      	bne.n	8009a92 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8009a8e:	7dfb      	ldrb	r3, [r7, #23]
 8009a90:	e006      	b.n	8009aa0 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8009a92:	7dfb      	ldrb	r3, [r7, #23]
 8009a94:	3301      	adds	r3, #1
 8009a96:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009a98:	7dfb      	ldrb	r3, [r7, #23]
 8009a9a:	2b01      	cmp	r3, #1
 8009a9c:	d9d6      	bls.n	8009a4c <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8009a9e:	23ff      	movs	r3, #255	; 0xff
}
 8009aa0:	4618      	mov	r0, r3
 8009aa2:	371c      	adds	r7, #28
 8009aa4:	46bd      	mov	sp, r7
 8009aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aaa:	4770      	bx	lr

08009aac <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8009aac:	b580      	push	{r7, lr}
 8009aae:	b082      	sub	sp, #8
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8009ab4:	6878      	ldr	r0, [r7, #4]
 8009ab6:	f001 fb87 	bl	800b1c8 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8009aba:	2101      	movs	r1, #1
 8009abc:	6878      	ldr	r0, [r7, #4]
 8009abe:	f001 fca0 	bl	800b402 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8009ac2:	2300      	movs	r3, #0
}
 8009ac4:	4618      	mov	r0, r3
 8009ac6:	3708      	adds	r7, #8
 8009ac8:	46bd      	mov	sp, r7
 8009aca:	bd80      	pop	{r7, pc}

08009acc <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8009acc:	b580      	push	{r7, lr}
 8009ace:	b088      	sub	sp, #32
 8009ad0:	af04      	add	r7, sp, #16
 8009ad2:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8009ad4:	2302      	movs	r3, #2
 8009ad6:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8009ad8:	2300      	movs	r3, #0
 8009ada:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8009ae2:	b2db      	uxtb	r3, r3
 8009ae4:	2b01      	cmp	r3, #1
 8009ae6:	d102      	bne.n	8009aee <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	2203      	movs	r2, #3
 8009aec:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	781b      	ldrb	r3, [r3, #0]
 8009af2:	b2db      	uxtb	r3, r3
 8009af4:	2b0b      	cmp	r3, #11
 8009af6:	f200 81b3 	bhi.w	8009e60 <USBH_Process+0x394>
 8009afa:	a201      	add	r2, pc, #4	; (adr r2, 8009b00 <USBH_Process+0x34>)
 8009afc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b00:	08009b31 	.word	0x08009b31
 8009b04:	08009b63 	.word	0x08009b63
 8009b08:	08009bcb 	.word	0x08009bcb
 8009b0c:	08009dfb 	.word	0x08009dfb
 8009b10:	08009e61 	.word	0x08009e61
 8009b14:	08009c6f 	.word	0x08009c6f
 8009b18:	08009da1 	.word	0x08009da1
 8009b1c:	08009ca5 	.word	0x08009ca5
 8009b20:	08009cc5 	.word	0x08009cc5
 8009b24:	08009ce5 	.word	0x08009ce5
 8009b28:	08009d13 	.word	0x08009d13
 8009b2c:	08009de3 	.word	0x08009de3
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8009b36:	b2db      	uxtb	r3, r3
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	f000 8193 	beq.w	8009e64 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	2201      	movs	r2, #1
 8009b42:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8009b44:	20c8      	movs	r0, #200	; 0xc8
 8009b46:	f001 fca3 	bl	800b490 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8009b4a:	6878      	ldr	r0, [r7, #4]
 8009b4c:	f001 fb99 	bl	800b282 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	2200      	movs	r2, #0
 8009b54:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	2200      	movs	r2, #0
 8009b5c:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8009b60:	e180      	b.n	8009e64 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8009b68:	2b01      	cmp	r3, #1
 8009b6a:	d107      	bne.n	8009b7c <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	2200      	movs	r2, #0
 8009b70:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	2202      	movs	r2, #2
 8009b78:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009b7a:	e182      	b.n	8009e82 <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8009b82:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009b86:	d914      	bls.n	8009bb2 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8009b8e:	3301      	adds	r3, #1
 8009b90:	b2da      	uxtb	r2, r3
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8009b9e:	2b03      	cmp	r3, #3
 8009ba0:	d903      	bls.n	8009baa <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	220d      	movs	r2, #13
 8009ba6:	701a      	strb	r2, [r3, #0]
      break;
 8009ba8:	e16b      	b.n	8009e82 <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	2200      	movs	r2, #0
 8009bae:	701a      	strb	r2, [r3, #0]
      break;
 8009bb0:	e167      	b.n	8009e82 <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8009bb8:	f103 020a 	add.w	r2, r3, #10
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8009bc2:	200a      	movs	r0, #10
 8009bc4:	f001 fc64 	bl	800b490 <USBH_Delay>
      break;
 8009bc8:	e15b      	b.n	8009e82 <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d005      	beq.n	8009be0 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009bda:	2104      	movs	r1, #4
 8009bdc:	6878      	ldr	r0, [r7, #4]
 8009bde:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8009be0:	2064      	movs	r0, #100	; 0x64
 8009be2:	f001 fc55 	bl	800b490 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8009be6:	6878      	ldr	r0, [r7, #4]
 8009be8:	f001 fb24 	bl	800b234 <USBH_LL_GetSpeed>
 8009bec:	4603      	mov	r3, r0
 8009bee:	461a      	mov	r2, r3
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	2205      	movs	r2, #5
 8009bfa:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8009bfc:	2100      	movs	r1, #0
 8009bfe:	6878      	ldr	r0, [r7, #4]
 8009c00:	f001 f92f 	bl	800ae62 <USBH_AllocPipe>
 8009c04:	4603      	mov	r3, r0
 8009c06:	461a      	mov	r2, r3
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8009c0c:	2180      	movs	r1, #128	; 0x80
 8009c0e:	6878      	ldr	r0, [r7, #4]
 8009c10:	f001 f927 	bl	800ae62 <USBH_AllocPipe>
 8009c14:	4603      	mov	r3, r0
 8009c16:	461a      	mov	r2, r3
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	7919      	ldrb	r1, [r3, #4]
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009c2c:	687a      	ldr	r2, [r7, #4]
 8009c2e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009c30:	b292      	uxth	r2, r2
 8009c32:	9202      	str	r2, [sp, #8]
 8009c34:	2200      	movs	r2, #0
 8009c36:	9201      	str	r2, [sp, #4]
 8009c38:	9300      	str	r3, [sp, #0]
 8009c3a:	4603      	mov	r3, r0
 8009c3c:	2280      	movs	r2, #128	; 0x80
 8009c3e:	6878      	ldr	r0, [r7, #4]
 8009c40:	f001 f8e0 	bl	800ae04 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	7959      	ldrb	r1, [r3, #5]
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009c54:	687a      	ldr	r2, [r7, #4]
 8009c56:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009c58:	b292      	uxth	r2, r2
 8009c5a:	9202      	str	r2, [sp, #8]
 8009c5c:	2200      	movs	r2, #0
 8009c5e:	9201      	str	r2, [sp, #4]
 8009c60:	9300      	str	r3, [sp, #0]
 8009c62:	4603      	mov	r3, r0
 8009c64:	2200      	movs	r2, #0
 8009c66:	6878      	ldr	r0, [r7, #4]
 8009c68:	f001 f8cc 	bl	800ae04 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009c6c:	e109      	b.n	8009e82 <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8009c6e:	6878      	ldr	r0, [r7, #4]
 8009c70:	f000 f90c 	bl	8009e8c <USBH_HandleEnum>
 8009c74:	4603      	mov	r3, r0
 8009c76:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8009c78:	7bbb      	ldrb	r3, [r7, #14]
 8009c7a:	b2db      	uxtb	r3, r3
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	f040 80f3 	bne.w	8009e68 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	2200      	movs	r2, #0
 8009c86:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8009c90:	2b01      	cmp	r3, #1
 8009c92:	d103      	bne.n	8009c9c <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	2208      	movs	r2, #8
 8009c98:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8009c9a:	e0e5      	b.n	8009e68 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	2207      	movs	r2, #7
 8009ca0:	701a      	strb	r2, [r3, #0]
      break;
 8009ca2:	e0e1      	b.n	8009e68 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	f000 80de 	beq.w	8009e6c <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009cb6:	2101      	movs	r1, #1
 8009cb8:	6878      	ldr	r0, [r7, #4]
 8009cba:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	2208      	movs	r2, #8
 8009cc0:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8009cc2:	e0d3      	b.n	8009e6c <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8009cca:	b29b      	uxth	r3, r3
 8009ccc:	4619      	mov	r1, r3
 8009cce:	6878      	ldr	r0, [r7, #4]
 8009cd0:	f000 fc20 	bl	800a514 <USBH_SetCfg>
 8009cd4:	4603      	mov	r3, r0
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	f040 80ca 	bne.w	8009e70 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	2209      	movs	r2, #9
 8009ce0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009ce2:	e0c5      	b.n	8009e70 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8009cea:	f003 0320 	and.w	r3, r3, #32
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d00b      	beq.n	8009d0a <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8009cf2:	2101      	movs	r1, #1
 8009cf4:	6878      	ldr	r0, [r7, #4]
 8009cf6:	f000 fc30 	bl	800a55a <USBH_SetFeature>
 8009cfa:	4603      	mov	r3, r0
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	f040 80b9 	bne.w	8009e74 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	220a      	movs	r2, #10
 8009d06:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009d08:	e0b4      	b.n	8009e74 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	220a      	movs	r2, #10
 8009d0e:	701a      	strb	r2, [r3, #0]
      break;
 8009d10:	e0b0      	b.n	8009e74 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	f000 80ad 	beq.w	8009e78 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	2200      	movs	r2, #0
 8009d22:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009d26:	2300      	movs	r3, #0
 8009d28:	73fb      	strb	r3, [r7, #15]
 8009d2a:	e016      	b.n	8009d5a <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8009d2c:	7bfa      	ldrb	r2, [r7, #15]
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	32de      	adds	r2, #222	; 0xde
 8009d32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d36:	791a      	ldrb	r2, [r3, #4]
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8009d3e:	429a      	cmp	r2, r3
 8009d40:	d108      	bne.n	8009d54 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 8009d42:	7bfa      	ldrb	r2, [r7, #15]
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	32de      	adds	r2, #222	; 0xde
 8009d48:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8009d52:	e005      	b.n	8009d60 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009d54:	7bfb      	ldrb	r3, [r7, #15]
 8009d56:	3301      	adds	r3, #1
 8009d58:	73fb      	strb	r3, [r7, #15]
 8009d5a:	7bfb      	ldrb	r3, [r7, #15]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d0e5      	beq.n	8009d2c <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d016      	beq.n	8009d98 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009d70:	689b      	ldr	r3, [r3, #8]
 8009d72:	6878      	ldr	r0, [r7, #4]
 8009d74:	4798      	blx	r3
 8009d76:	4603      	mov	r3, r0
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d109      	bne.n	8009d90 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	2206      	movs	r2, #6
 8009d80:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009d88:	2103      	movs	r1, #3
 8009d8a:	6878      	ldr	r0, [r7, #4]
 8009d8c:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009d8e:	e073      	b.n	8009e78 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	220d      	movs	r2, #13
 8009d94:	701a      	strb	r2, [r3, #0]
      break;
 8009d96:	e06f      	b.n	8009e78 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	220d      	movs	r2, #13
 8009d9c:	701a      	strb	r2, [r3, #0]
      break;
 8009d9e:	e06b      	b.n	8009e78 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d017      	beq.n	8009dda <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009db0:	691b      	ldr	r3, [r3, #16]
 8009db2:	6878      	ldr	r0, [r7, #4]
 8009db4:	4798      	blx	r3
 8009db6:	4603      	mov	r3, r0
 8009db8:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8009dba:	7bbb      	ldrb	r3, [r7, #14]
 8009dbc:	b2db      	uxtb	r3, r3
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d103      	bne.n	8009dca <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	220b      	movs	r2, #11
 8009dc6:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009dc8:	e058      	b.n	8009e7c <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 8009dca:	7bbb      	ldrb	r3, [r7, #14]
 8009dcc:	b2db      	uxtb	r3, r3
 8009dce:	2b02      	cmp	r3, #2
 8009dd0:	d154      	bne.n	8009e7c <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	220d      	movs	r2, #13
 8009dd6:	701a      	strb	r2, [r3, #0]
      break;
 8009dd8:	e050      	b.n	8009e7c <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	220d      	movs	r2, #13
 8009dde:	701a      	strb	r2, [r3, #0]
      break;
 8009de0:	e04c      	b.n	8009e7c <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d049      	beq.n	8009e80 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009df2:	695b      	ldr	r3, [r3, #20]
 8009df4:	6878      	ldr	r0, [r7, #4]
 8009df6:	4798      	blx	r3
      }
      break;
 8009df8:	e042      	b.n	8009e80 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	2200      	movs	r2, #0
 8009dfe:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8009e02:	6878      	ldr	r0, [r7, #4]
 8009e04:	f7ff fd72 	bl	80098ec <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d009      	beq.n	8009e26 <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009e18:	68db      	ldr	r3, [r3, #12]
 8009e1a:	6878      	ldr	r0, [r7, #4]
 8009e1c:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	2200      	movs	r2, #0
 8009e22:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d005      	beq.n	8009e3c <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009e36:	2105      	movs	r1, #5
 8009e38:	6878      	ldr	r0, [r7, #4]
 8009e3a:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8009e42:	b2db      	uxtb	r3, r3
 8009e44:	2b01      	cmp	r3, #1
 8009e46:	d107      	bne.n	8009e58 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	2200      	movs	r2, #0
 8009e4c:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8009e50:	6878      	ldr	r0, [r7, #4]
 8009e52:	f7ff fe2b 	bl	8009aac <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009e56:	e014      	b.n	8009e82 <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 8009e58:	6878      	ldr	r0, [r7, #4]
 8009e5a:	f001 f9b5 	bl	800b1c8 <USBH_LL_Start>
      break;
 8009e5e:	e010      	b.n	8009e82 <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 8009e60:	bf00      	nop
 8009e62:	e00e      	b.n	8009e82 <USBH_Process+0x3b6>
      break;
 8009e64:	bf00      	nop
 8009e66:	e00c      	b.n	8009e82 <USBH_Process+0x3b6>
      break;
 8009e68:	bf00      	nop
 8009e6a:	e00a      	b.n	8009e82 <USBH_Process+0x3b6>
    break;
 8009e6c:	bf00      	nop
 8009e6e:	e008      	b.n	8009e82 <USBH_Process+0x3b6>
      break;
 8009e70:	bf00      	nop
 8009e72:	e006      	b.n	8009e82 <USBH_Process+0x3b6>
      break;
 8009e74:	bf00      	nop
 8009e76:	e004      	b.n	8009e82 <USBH_Process+0x3b6>
      break;
 8009e78:	bf00      	nop
 8009e7a:	e002      	b.n	8009e82 <USBH_Process+0x3b6>
      break;
 8009e7c:	bf00      	nop
 8009e7e:	e000      	b.n	8009e82 <USBH_Process+0x3b6>
      break;
 8009e80:	bf00      	nop
  }
  return USBH_OK;
 8009e82:	2300      	movs	r3, #0
}
 8009e84:	4618      	mov	r0, r3
 8009e86:	3710      	adds	r7, #16
 8009e88:	46bd      	mov	sp, r7
 8009e8a:	bd80      	pop	{r7, pc}

08009e8c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8009e8c:	b580      	push	{r7, lr}
 8009e8e:	b088      	sub	sp, #32
 8009e90:	af04      	add	r7, sp, #16
 8009e92:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8009e94:	2301      	movs	r3, #1
 8009e96:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8009e98:	2301      	movs	r3, #1
 8009e9a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	785b      	ldrb	r3, [r3, #1]
 8009ea0:	2b07      	cmp	r3, #7
 8009ea2:	f200 81c1 	bhi.w	800a228 <USBH_HandleEnum+0x39c>
 8009ea6:	a201      	add	r2, pc, #4	; (adr r2, 8009eac <USBH_HandleEnum+0x20>)
 8009ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009eac:	08009ecd 	.word	0x08009ecd
 8009eb0:	08009f8b 	.word	0x08009f8b
 8009eb4:	08009ff5 	.word	0x08009ff5
 8009eb8:	0800a083 	.word	0x0800a083
 8009ebc:	0800a0ed 	.word	0x0800a0ed
 8009ec0:	0800a15d 	.word	0x0800a15d
 8009ec4:	0800a1a3 	.word	0x0800a1a3
 8009ec8:	0800a1e9 	.word	0x0800a1e9
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8009ecc:	2108      	movs	r1, #8
 8009ece:	6878      	ldr	r0, [r7, #4]
 8009ed0:	f000 fa50 	bl	800a374 <USBH_Get_DevDesc>
 8009ed4:	4603      	mov	r3, r0
 8009ed6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009ed8:	7bbb      	ldrb	r3, [r7, #14]
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d130      	bne.n	8009f40 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	2201      	movs	r2, #1
 8009eec:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	7919      	ldrb	r1, [r3, #4]
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8009efe:	687a      	ldr	r2, [r7, #4]
 8009f00:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8009f02:	b292      	uxth	r2, r2
 8009f04:	9202      	str	r2, [sp, #8]
 8009f06:	2200      	movs	r2, #0
 8009f08:	9201      	str	r2, [sp, #4]
 8009f0a:	9300      	str	r3, [sp, #0]
 8009f0c:	4603      	mov	r3, r0
 8009f0e:	2280      	movs	r2, #128	; 0x80
 8009f10:	6878      	ldr	r0, [r7, #4]
 8009f12:	f000 ff77 	bl	800ae04 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	7959      	ldrb	r1, [r3, #5]
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8009f26:	687a      	ldr	r2, [r7, #4]
 8009f28:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009f2a:	b292      	uxth	r2, r2
 8009f2c:	9202      	str	r2, [sp, #8]
 8009f2e:	2200      	movs	r2, #0
 8009f30:	9201      	str	r2, [sp, #4]
 8009f32:	9300      	str	r3, [sp, #0]
 8009f34:	4603      	mov	r3, r0
 8009f36:	2200      	movs	r2, #0
 8009f38:	6878      	ldr	r0, [r7, #4]
 8009f3a:	f000 ff63 	bl	800ae04 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8009f3e:	e175      	b.n	800a22c <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009f40:	7bbb      	ldrb	r3, [r7, #14]
 8009f42:	2b03      	cmp	r3, #3
 8009f44:	f040 8172 	bne.w	800a22c <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009f4e:	3301      	adds	r3, #1
 8009f50:	b2da      	uxtb	r2, r3
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009f5e:	2b03      	cmp	r3, #3
 8009f60:	d903      	bls.n	8009f6a <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	220d      	movs	r2, #13
 8009f66:	701a      	strb	r2, [r3, #0]
      break;
 8009f68:	e160      	b.n	800a22c <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	795b      	ldrb	r3, [r3, #5]
 8009f6e:	4619      	mov	r1, r3
 8009f70:	6878      	ldr	r0, [r7, #4]
 8009f72:	f000 ff97 	bl	800aea4 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	791b      	ldrb	r3, [r3, #4]
 8009f7a:	4619      	mov	r1, r3
 8009f7c:	6878      	ldr	r0, [r7, #4]
 8009f7e:	f000 ff91 	bl	800aea4 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	2200      	movs	r2, #0
 8009f86:	701a      	strb	r2, [r3, #0]
      break;
 8009f88:	e150      	b.n	800a22c <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8009f8a:	2112      	movs	r1, #18
 8009f8c:	6878      	ldr	r0, [r7, #4]
 8009f8e:	f000 f9f1 	bl	800a374 <USBH_Get_DevDesc>
 8009f92:	4603      	mov	r3, r0
 8009f94:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009f96:	7bbb      	ldrb	r3, [r7, #14]
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d103      	bne.n	8009fa4 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	2202      	movs	r2, #2
 8009fa0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009fa2:	e145      	b.n	800a230 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009fa4:	7bbb      	ldrb	r3, [r7, #14]
 8009fa6:	2b03      	cmp	r3, #3
 8009fa8:	f040 8142 	bne.w	800a230 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009fb2:	3301      	adds	r3, #1
 8009fb4:	b2da      	uxtb	r2, r3
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009fc2:	2b03      	cmp	r3, #3
 8009fc4:	d903      	bls.n	8009fce <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	220d      	movs	r2, #13
 8009fca:	701a      	strb	r2, [r3, #0]
      break;
 8009fcc:	e130      	b.n	800a230 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	795b      	ldrb	r3, [r3, #5]
 8009fd2:	4619      	mov	r1, r3
 8009fd4:	6878      	ldr	r0, [r7, #4]
 8009fd6:	f000 ff65 	bl	800aea4 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	791b      	ldrb	r3, [r3, #4]
 8009fde:	4619      	mov	r1, r3
 8009fe0:	6878      	ldr	r0, [r7, #4]
 8009fe2:	f000 ff5f 	bl	800aea4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	2200      	movs	r2, #0
 8009fea:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	2200      	movs	r2, #0
 8009ff0:	701a      	strb	r2, [r3, #0]
      break;
 8009ff2:	e11d      	b.n	800a230 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8009ff4:	2101      	movs	r1, #1
 8009ff6:	6878      	ldr	r0, [r7, #4]
 8009ff8:	f000 fa68 	bl	800a4cc <USBH_SetAddress>
 8009ffc:	4603      	mov	r3, r0
 8009ffe:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a000:	7bbb      	ldrb	r3, [r7, #14]
 800a002:	2b00      	cmp	r3, #0
 800a004:	d132      	bne.n	800a06c <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800a006:	2002      	movs	r0, #2
 800a008:	f001 fa42 	bl	800b490 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	2201      	movs	r2, #1
 800a010:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	2203      	movs	r2, #3
 800a018:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	7919      	ldrb	r1, [r3, #4]
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800a02a:	687a      	ldr	r2, [r7, #4]
 800a02c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800a02e:	b292      	uxth	r2, r2
 800a030:	9202      	str	r2, [sp, #8]
 800a032:	2200      	movs	r2, #0
 800a034:	9201      	str	r2, [sp, #4]
 800a036:	9300      	str	r3, [sp, #0]
 800a038:	4603      	mov	r3, r0
 800a03a:	2280      	movs	r2, #128	; 0x80
 800a03c:	6878      	ldr	r0, [r7, #4]
 800a03e:	f000 fee1 	bl	800ae04 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	7959      	ldrb	r1, [r3, #5]
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800a052:	687a      	ldr	r2, [r7, #4]
 800a054:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a056:	b292      	uxth	r2, r2
 800a058:	9202      	str	r2, [sp, #8]
 800a05a:	2200      	movs	r2, #0
 800a05c:	9201      	str	r2, [sp, #4]
 800a05e:	9300      	str	r3, [sp, #0]
 800a060:	4603      	mov	r3, r0
 800a062:	2200      	movs	r2, #0
 800a064:	6878      	ldr	r0, [r7, #4]
 800a066:	f000 fecd 	bl	800ae04 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800a06a:	e0e3      	b.n	800a234 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a06c:	7bbb      	ldrb	r3, [r7, #14]
 800a06e:	2b03      	cmp	r3, #3
 800a070:	f040 80e0 	bne.w	800a234 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	220d      	movs	r2, #13
 800a078:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	2200      	movs	r2, #0
 800a07e:	705a      	strb	r2, [r3, #1]
      break;
 800a080:	e0d8      	b.n	800a234 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800a082:	2109      	movs	r1, #9
 800a084:	6878      	ldr	r0, [r7, #4]
 800a086:	f000 f99d 	bl	800a3c4 <USBH_Get_CfgDesc>
 800a08a:	4603      	mov	r3, r0
 800a08c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a08e:	7bbb      	ldrb	r3, [r7, #14]
 800a090:	2b00      	cmp	r3, #0
 800a092:	d103      	bne.n	800a09c <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	2204      	movs	r2, #4
 800a098:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a09a:	e0cd      	b.n	800a238 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a09c:	7bbb      	ldrb	r3, [r7, #14]
 800a09e:	2b03      	cmp	r3, #3
 800a0a0:	f040 80ca 	bne.w	800a238 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a0aa:	3301      	adds	r3, #1
 800a0ac:	b2da      	uxtb	r2, r3
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a0ba:	2b03      	cmp	r3, #3
 800a0bc:	d903      	bls.n	800a0c6 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	220d      	movs	r2, #13
 800a0c2:	701a      	strb	r2, [r3, #0]
      break;
 800a0c4:	e0b8      	b.n	800a238 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	795b      	ldrb	r3, [r3, #5]
 800a0ca:	4619      	mov	r1, r3
 800a0cc:	6878      	ldr	r0, [r7, #4]
 800a0ce:	f000 fee9 	bl	800aea4 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	791b      	ldrb	r3, [r3, #4]
 800a0d6:	4619      	mov	r1, r3
 800a0d8:	6878      	ldr	r0, [r7, #4]
 800a0da:	f000 fee3 	bl	800aea4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	2200      	movs	r2, #0
 800a0e2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	2200      	movs	r2, #0
 800a0e8:	701a      	strb	r2, [r3, #0]
      break;
 800a0ea:	e0a5      	b.n	800a238 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800a0f2:	4619      	mov	r1, r3
 800a0f4:	6878      	ldr	r0, [r7, #4]
 800a0f6:	f000 f965 	bl	800a3c4 <USBH_Get_CfgDesc>
 800a0fa:	4603      	mov	r3, r0
 800a0fc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a0fe:	7bbb      	ldrb	r3, [r7, #14]
 800a100:	2b00      	cmp	r3, #0
 800a102:	d103      	bne.n	800a10c <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	2205      	movs	r2, #5
 800a108:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a10a:	e097      	b.n	800a23c <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a10c:	7bbb      	ldrb	r3, [r7, #14]
 800a10e:	2b03      	cmp	r3, #3
 800a110:	f040 8094 	bne.w	800a23c <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a11a:	3301      	adds	r3, #1
 800a11c:	b2da      	uxtb	r2, r3
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a12a:	2b03      	cmp	r3, #3
 800a12c:	d903      	bls.n	800a136 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	220d      	movs	r2, #13
 800a132:	701a      	strb	r2, [r3, #0]
      break;
 800a134:	e082      	b.n	800a23c <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	795b      	ldrb	r3, [r3, #5]
 800a13a:	4619      	mov	r1, r3
 800a13c:	6878      	ldr	r0, [r7, #4]
 800a13e:	f000 feb1 	bl	800aea4 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	791b      	ldrb	r3, [r3, #4]
 800a146:	4619      	mov	r1, r3
 800a148:	6878      	ldr	r0, [r7, #4]
 800a14a:	f000 feab 	bl	800aea4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	2200      	movs	r2, #0
 800a152:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	2200      	movs	r2, #0
 800a158:	701a      	strb	r2, [r3, #0]
      break;
 800a15a:	e06f      	b.n	800a23c <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800a162:	2b00      	cmp	r3, #0
 800a164:	d019      	beq.n	800a19a <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800a172:	23ff      	movs	r3, #255	; 0xff
 800a174:	6878      	ldr	r0, [r7, #4]
 800a176:	f000 f949 	bl	800a40c <USBH_Get_StringDesc>
 800a17a:	4603      	mov	r3, r0
 800a17c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a17e:	7bbb      	ldrb	r3, [r7, #14]
 800a180:	2b00      	cmp	r3, #0
 800a182:	d103      	bne.n	800a18c <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	2206      	movs	r2, #6
 800a188:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800a18a:	e059      	b.n	800a240 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a18c:	7bbb      	ldrb	r3, [r7, #14]
 800a18e:	2b03      	cmp	r3, #3
 800a190:	d156      	bne.n	800a240 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	2206      	movs	r2, #6
 800a196:	705a      	strb	r2, [r3, #1]
      break;
 800a198:	e052      	b.n	800a240 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	2206      	movs	r2, #6
 800a19e:	705a      	strb	r2, [r3, #1]
      break;
 800a1a0:	e04e      	b.n	800a240 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d019      	beq.n	800a1e0 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800a1b8:	23ff      	movs	r3, #255	; 0xff
 800a1ba:	6878      	ldr	r0, [r7, #4]
 800a1bc:	f000 f926 	bl	800a40c <USBH_Get_StringDesc>
 800a1c0:	4603      	mov	r3, r0
 800a1c2:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a1c4:	7bbb      	ldrb	r3, [r7, #14]
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d103      	bne.n	800a1d2 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	2207      	movs	r2, #7
 800a1ce:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800a1d0:	e038      	b.n	800a244 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a1d2:	7bbb      	ldrb	r3, [r7, #14]
 800a1d4:	2b03      	cmp	r3, #3
 800a1d6:	d135      	bne.n	800a244 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	2207      	movs	r2, #7
 800a1dc:	705a      	strb	r2, [r3, #1]
      break;
 800a1de:	e031      	b.n	800a244 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	2207      	movs	r2, #7
 800a1e4:	705a      	strb	r2, [r3, #1]
      break;
 800a1e6:	e02d      	b.n	800a244 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d017      	beq.n	800a222 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800a1fe:	23ff      	movs	r3, #255	; 0xff
 800a200:	6878      	ldr	r0, [r7, #4]
 800a202:	f000 f903 	bl	800a40c <USBH_Get_StringDesc>
 800a206:	4603      	mov	r3, r0
 800a208:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a20a:	7bbb      	ldrb	r3, [r7, #14]
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d102      	bne.n	800a216 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800a210:	2300      	movs	r3, #0
 800a212:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800a214:	e018      	b.n	800a248 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a216:	7bbb      	ldrb	r3, [r7, #14]
 800a218:	2b03      	cmp	r3, #3
 800a21a:	d115      	bne.n	800a248 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800a21c:	2300      	movs	r3, #0
 800a21e:	73fb      	strb	r3, [r7, #15]
      break;
 800a220:	e012      	b.n	800a248 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800a222:	2300      	movs	r3, #0
 800a224:	73fb      	strb	r3, [r7, #15]
      break;
 800a226:	e00f      	b.n	800a248 <USBH_HandleEnum+0x3bc>

    default:
      break;
 800a228:	bf00      	nop
 800a22a:	e00e      	b.n	800a24a <USBH_HandleEnum+0x3be>
      break;
 800a22c:	bf00      	nop
 800a22e:	e00c      	b.n	800a24a <USBH_HandleEnum+0x3be>
      break;
 800a230:	bf00      	nop
 800a232:	e00a      	b.n	800a24a <USBH_HandleEnum+0x3be>
      break;
 800a234:	bf00      	nop
 800a236:	e008      	b.n	800a24a <USBH_HandleEnum+0x3be>
      break;
 800a238:	bf00      	nop
 800a23a:	e006      	b.n	800a24a <USBH_HandleEnum+0x3be>
      break;
 800a23c:	bf00      	nop
 800a23e:	e004      	b.n	800a24a <USBH_HandleEnum+0x3be>
      break;
 800a240:	bf00      	nop
 800a242:	e002      	b.n	800a24a <USBH_HandleEnum+0x3be>
      break;
 800a244:	bf00      	nop
 800a246:	e000      	b.n	800a24a <USBH_HandleEnum+0x3be>
      break;
 800a248:	bf00      	nop
  }
  return Status;
 800a24a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a24c:	4618      	mov	r0, r3
 800a24e:	3710      	adds	r7, #16
 800a250:	46bd      	mov	sp, r7
 800a252:	bd80      	pop	{r7, pc}

0800a254 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800a254:	b480      	push	{r7}
 800a256:	b083      	sub	sp, #12
 800a258:	af00      	add	r7, sp, #0
 800a25a:	6078      	str	r0, [r7, #4]
 800a25c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	683a      	ldr	r2, [r7, #0]
 800a262:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800a266:	bf00      	nop
 800a268:	370c      	adds	r7, #12
 800a26a:	46bd      	mov	sp, r7
 800a26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a270:	4770      	bx	lr

0800a272 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800a272:	b580      	push	{r7, lr}
 800a274:	b082      	sub	sp, #8
 800a276:	af00      	add	r7, sp, #0
 800a278:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a280:	1c5a      	adds	r2, r3, #1
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800a288:	6878      	ldr	r0, [r7, #4]
 800a28a:	f000 f804 	bl	800a296 <USBH_HandleSof>
}
 800a28e:	bf00      	nop
 800a290:	3708      	adds	r7, #8
 800a292:	46bd      	mov	sp, r7
 800a294:	bd80      	pop	{r7, pc}

0800a296 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800a296:	b580      	push	{r7, lr}
 800a298:	b082      	sub	sp, #8
 800a29a:	af00      	add	r7, sp, #0
 800a29c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	781b      	ldrb	r3, [r3, #0]
 800a2a2:	b2db      	uxtb	r3, r3
 800a2a4:	2b0b      	cmp	r3, #11
 800a2a6:	d10a      	bne.n	800a2be <USBH_HandleSof+0x28>
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d005      	beq.n	800a2be <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a2b8:	699b      	ldr	r3, [r3, #24]
 800a2ba:	6878      	ldr	r0, [r7, #4]
 800a2bc:	4798      	blx	r3
  }
}
 800a2be:	bf00      	nop
 800a2c0:	3708      	adds	r7, #8
 800a2c2:	46bd      	mov	sp, r7
 800a2c4:	bd80      	pop	{r7, pc}

0800a2c6 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800a2c6:	b480      	push	{r7}
 800a2c8:	b083      	sub	sp, #12
 800a2ca:	af00      	add	r7, sp, #0
 800a2cc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	2201      	movs	r2, #1
 800a2d2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800a2d6:	bf00      	nop
}
 800a2d8:	370c      	adds	r7, #12
 800a2da:	46bd      	mov	sp, r7
 800a2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e0:	4770      	bx	lr

0800a2e2 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800a2e2:	b480      	push	{r7}
 800a2e4:	b083      	sub	sp, #12
 800a2e6:	af00      	add	r7, sp, #0
 800a2e8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	2200      	movs	r2, #0
 800a2ee:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800a2f2:	bf00      	nop
}
 800a2f4:	370c      	adds	r7, #12
 800a2f6:	46bd      	mov	sp, r7
 800a2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2fc:	4770      	bx	lr

0800a2fe <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800a2fe:	b480      	push	{r7}
 800a300:	b083      	sub	sp, #12
 800a302:	af00      	add	r7, sp, #0
 800a304:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	2201      	movs	r2, #1
 800a30a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	2200      	movs	r2, #0
 800a312:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	2200      	movs	r2, #0
 800a31a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800a31e:	2300      	movs	r3, #0
}
 800a320:	4618      	mov	r0, r3
 800a322:	370c      	adds	r7, #12
 800a324:	46bd      	mov	sp, r7
 800a326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a32a:	4770      	bx	lr

0800a32c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800a32c:	b580      	push	{r7, lr}
 800a32e:	b082      	sub	sp, #8
 800a330:	af00      	add	r7, sp, #0
 800a332:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	2201      	movs	r2, #1
 800a338:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	2200      	movs	r2, #0
 800a340:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	2200      	movs	r2, #0
 800a348:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800a34c:	6878      	ldr	r0, [r7, #4]
 800a34e:	f000 ff56 	bl	800b1fe <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	791b      	ldrb	r3, [r3, #4]
 800a356:	4619      	mov	r1, r3
 800a358:	6878      	ldr	r0, [r7, #4]
 800a35a:	f000 fda3 	bl	800aea4 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	795b      	ldrb	r3, [r3, #5]
 800a362:	4619      	mov	r1, r3
 800a364:	6878      	ldr	r0, [r7, #4]
 800a366:	f000 fd9d 	bl	800aea4 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800a36a:	2300      	movs	r3, #0
}
 800a36c:	4618      	mov	r0, r3
 800a36e:	3708      	adds	r7, #8
 800a370:	46bd      	mov	sp, r7
 800a372:	bd80      	pop	{r7, pc}

0800a374 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800a374:	b580      	push	{r7, lr}
 800a376:	b086      	sub	sp, #24
 800a378:	af02      	add	r7, sp, #8
 800a37a:	6078      	str	r0, [r7, #4]
 800a37c:	460b      	mov	r3, r1
 800a37e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800a386:	78fb      	ldrb	r3, [r7, #3]
 800a388:	b29b      	uxth	r3, r3
 800a38a:	9300      	str	r3, [sp, #0]
 800a38c:	4613      	mov	r3, r2
 800a38e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a392:	2100      	movs	r1, #0
 800a394:	6878      	ldr	r0, [r7, #4]
 800a396:	f000 f864 	bl	800a462 <USBH_GetDescriptor>
 800a39a:	4603      	mov	r3, r0
 800a39c:	73fb      	strb	r3, [r7, #15]
 800a39e:	7bfb      	ldrb	r3, [r7, #15]
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d10a      	bne.n	800a3ba <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	f203 3026 	addw	r0, r3, #806	; 0x326
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a3b0:	78fa      	ldrb	r2, [r7, #3]
 800a3b2:	b292      	uxth	r2, r2
 800a3b4:	4619      	mov	r1, r3
 800a3b6:	f000 f918 	bl	800a5ea <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800a3ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3bc:	4618      	mov	r0, r3
 800a3be:	3710      	adds	r7, #16
 800a3c0:	46bd      	mov	sp, r7
 800a3c2:	bd80      	pop	{r7, pc}

0800a3c4 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800a3c4:	b580      	push	{r7, lr}
 800a3c6:	b086      	sub	sp, #24
 800a3c8:	af02      	add	r7, sp, #8
 800a3ca:	6078      	str	r0, [r7, #4]
 800a3cc:	460b      	mov	r3, r1
 800a3ce:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	331c      	adds	r3, #28
 800a3d4:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800a3d6:	887b      	ldrh	r3, [r7, #2]
 800a3d8:	9300      	str	r3, [sp, #0]
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a3e0:	2100      	movs	r1, #0
 800a3e2:	6878      	ldr	r0, [r7, #4]
 800a3e4:	f000 f83d 	bl	800a462 <USBH_GetDescriptor>
 800a3e8:	4603      	mov	r3, r0
 800a3ea:	72fb      	strb	r3, [r7, #11]
 800a3ec:	7afb      	ldrb	r3, [r7, #11]
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d107      	bne.n	800a402 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800a3f8:	887a      	ldrh	r2, [r7, #2]
 800a3fa:	68f9      	ldr	r1, [r7, #12]
 800a3fc:	4618      	mov	r0, r3
 800a3fe:	f000 f964 	bl	800a6ca <USBH_ParseCfgDesc>
  }

  return status;
 800a402:	7afb      	ldrb	r3, [r7, #11]
}
 800a404:	4618      	mov	r0, r3
 800a406:	3710      	adds	r7, #16
 800a408:	46bd      	mov	sp, r7
 800a40a:	bd80      	pop	{r7, pc}

0800a40c <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800a40c:	b580      	push	{r7, lr}
 800a40e:	b088      	sub	sp, #32
 800a410:	af02      	add	r7, sp, #8
 800a412:	60f8      	str	r0, [r7, #12]
 800a414:	607a      	str	r2, [r7, #4]
 800a416:	461a      	mov	r2, r3
 800a418:	460b      	mov	r3, r1
 800a41a:	72fb      	strb	r3, [r7, #11]
 800a41c:	4613      	mov	r3, r2
 800a41e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800a420:	7afb      	ldrb	r3, [r7, #11]
 800a422:	b29b      	uxth	r3, r3
 800a424:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800a428:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800a430:	893b      	ldrh	r3, [r7, #8]
 800a432:	9300      	str	r3, [sp, #0]
 800a434:	460b      	mov	r3, r1
 800a436:	2100      	movs	r1, #0
 800a438:	68f8      	ldr	r0, [r7, #12]
 800a43a:	f000 f812 	bl	800a462 <USBH_GetDescriptor>
 800a43e:	4603      	mov	r3, r0
 800a440:	75fb      	strb	r3, [r7, #23]
 800a442:	7dfb      	ldrb	r3, [r7, #23]
 800a444:	2b00      	cmp	r3, #0
 800a446:	d107      	bne.n	800a458 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a44e:	893a      	ldrh	r2, [r7, #8]
 800a450:	6879      	ldr	r1, [r7, #4]
 800a452:	4618      	mov	r0, r3
 800a454:	f000 fa37 	bl	800a8c6 <USBH_ParseStringDesc>
  }

  return status;
 800a458:	7dfb      	ldrb	r3, [r7, #23]
}
 800a45a:	4618      	mov	r0, r3
 800a45c:	3718      	adds	r7, #24
 800a45e:	46bd      	mov	sp, r7
 800a460:	bd80      	pop	{r7, pc}

0800a462 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800a462:	b580      	push	{r7, lr}
 800a464:	b084      	sub	sp, #16
 800a466:	af00      	add	r7, sp, #0
 800a468:	60f8      	str	r0, [r7, #12]
 800a46a:	607b      	str	r3, [r7, #4]
 800a46c:	460b      	mov	r3, r1
 800a46e:	72fb      	strb	r3, [r7, #11]
 800a470:	4613      	mov	r3, r2
 800a472:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	789b      	ldrb	r3, [r3, #2]
 800a478:	2b01      	cmp	r3, #1
 800a47a:	d11c      	bne.n	800a4b6 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800a47c:	7afb      	ldrb	r3, [r7, #11]
 800a47e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a482:	b2da      	uxtb	r2, r3
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	2206      	movs	r2, #6
 800a48c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	893a      	ldrh	r2, [r7, #8]
 800a492:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800a494:	893b      	ldrh	r3, [r7, #8]
 800a496:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800a49a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a49e:	d104      	bne.n	800a4aa <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	f240 4209 	movw	r2, #1033	; 0x409
 800a4a6:	829a      	strh	r2, [r3, #20]
 800a4a8:	e002      	b.n	800a4b0 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	2200      	movs	r2, #0
 800a4ae:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	8b3a      	ldrh	r2, [r7, #24]
 800a4b4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800a4b6:	8b3b      	ldrh	r3, [r7, #24]
 800a4b8:	461a      	mov	r2, r3
 800a4ba:	6879      	ldr	r1, [r7, #4]
 800a4bc:	68f8      	ldr	r0, [r7, #12]
 800a4be:	f000 fa50 	bl	800a962 <USBH_CtlReq>
 800a4c2:	4603      	mov	r3, r0
}
 800a4c4:	4618      	mov	r0, r3
 800a4c6:	3710      	adds	r7, #16
 800a4c8:	46bd      	mov	sp, r7
 800a4ca:	bd80      	pop	{r7, pc}

0800a4cc <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800a4cc:	b580      	push	{r7, lr}
 800a4ce:	b082      	sub	sp, #8
 800a4d0:	af00      	add	r7, sp, #0
 800a4d2:	6078      	str	r0, [r7, #4]
 800a4d4:	460b      	mov	r3, r1
 800a4d6:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	789b      	ldrb	r3, [r3, #2]
 800a4dc:	2b01      	cmp	r3, #1
 800a4de:	d10f      	bne.n	800a500 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	2200      	movs	r2, #0
 800a4e4:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	2205      	movs	r2, #5
 800a4ea:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800a4ec:	78fb      	ldrb	r3, [r7, #3]
 800a4ee:	b29a      	uxth	r2, r3
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	2200      	movs	r2, #0
 800a4f8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	2200      	movs	r2, #0
 800a4fe:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800a500:	2200      	movs	r2, #0
 800a502:	2100      	movs	r1, #0
 800a504:	6878      	ldr	r0, [r7, #4]
 800a506:	f000 fa2c 	bl	800a962 <USBH_CtlReq>
 800a50a:	4603      	mov	r3, r0
}
 800a50c:	4618      	mov	r0, r3
 800a50e:	3708      	adds	r7, #8
 800a510:	46bd      	mov	sp, r7
 800a512:	bd80      	pop	{r7, pc}

0800a514 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800a514:	b580      	push	{r7, lr}
 800a516:	b082      	sub	sp, #8
 800a518:	af00      	add	r7, sp, #0
 800a51a:	6078      	str	r0, [r7, #4]
 800a51c:	460b      	mov	r3, r1
 800a51e:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	789b      	ldrb	r3, [r3, #2]
 800a524:	2b01      	cmp	r3, #1
 800a526:	d10e      	bne.n	800a546 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	2200      	movs	r2, #0
 800a52c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	2209      	movs	r2, #9
 800a532:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	887a      	ldrh	r2, [r7, #2]
 800a538:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	2200      	movs	r2, #0
 800a53e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	2200      	movs	r2, #0
 800a544:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800a546:	2200      	movs	r2, #0
 800a548:	2100      	movs	r1, #0
 800a54a:	6878      	ldr	r0, [r7, #4]
 800a54c:	f000 fa09 	bl	800a962 <USBH_CtlReq>
 800a550:	4603      	mov	r3, r0
}
 800a552:	4618      	mov	r0, r3
 800a554:	3708      	adds	r7, #8
 800a556:	46bd      	mov	sp, r7
 800a558:	bd80      	pop	{r7, pc}

0800a55a <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800a55a:	b580      	push	{r7, lr}
 800a55c:	b082      	sub	sp, #8
 800a55e:	af00      	add	r7, sp, #0
 800a560:	6078      	str	r0, [r7, #4]
 800a562:	460b      	mov	r3, r1
 800a564:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	789b      	ldrb	r3, [r3, #2]
 800a56a:	2b01      	cmp	r3, #1
 800a56c:	d10f      	bne.n	800a58e <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	2200      	movs	r2, #0
 800a572:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	2203      	movs	r2, #3
 800a578:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800a57a:	78fb      	ldrb	r3, [r7, #3]
 800a57c:	b29a      	uxth	r2, r3
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	2200      	movs	r2, #0
 800a586:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	2200      	movs	r2, #0
 800a58c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800a58e:	2200      	movs	r2, #0
 800a590:	2100      	movs	r1, #0
 800a592:	6878      	ldr	r0, [r7, #4]
 800a594:	f000 f9e5 	bl	800a962 <USBH_CtlReq>
 800a598:	4603      	mov	r3, r0
}
 800a59a:	4618      	mov	r0, r3
 800a59c:	3708      	adds	r7, #8
 800a59e:	46bd      	mov	sp, r7
 800a5a0:	bd80      	pop	{r7, pc}

0800a5a2 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800a5a2:	b580      	push	{r7, lr}
 800a5a4:	b082      	sub	sp, #8
 800a5a6:	af00      	add	r7, sp, #0
 800a5a8:	6078      	str	r0, [r7, #4]
 800a5aa:	460b      	mov	r3, r1
 800a5ac:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	789b      	ldrb	r3, [r3, #2]
 800a5b2:	2b01      	cmp	r3, #1
 800a5b4:	d10f      	bne.n	800a5d6 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	2202      	movs	r2, #2
 800a5ba:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	2201      	movs	r2, #1
 800a5c0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	2200      	movs	r2, #0
 800a5c6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800a5c8:	78fb      	ldrb	r3, [r7, #3]
 800a5ca:	b29a      	uxth	r2, r3
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	2200      	movs	r2, #0
 800a5d4:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800a5d6:	2200      	movs	r2, #0
 800a5d8:	2100      	movs	r1, #0
 800a5da:	6878      	ldr	r0, [r7, #4]
 800a5dc:	f000 f9c1 	bl	800a962 <USBH_CtlReq>
 800a5e0:	4603      	mov	r3, r0
}
 800a5e2:	4618      	mov	r0, r3
 800a5e4:	3708      	adds	r7, #8
 800a5e6:	46bd      	mov	sp, r7
 800a5e8:	bd80      	pop	{r7, pc}

0800a5ea <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800a5ea:	b480      	push	{r7}
 800a5ec:	b085      	sub	sp, #20
 800a5ee:	af00      	add	r7, sp, #0
 800a5f0:	60f8      	str	r0, [r7, #12]
 800a5f2:	60b9      	str	r1, [r7, #8]
 800a5f4:	4613      	mov	r3, r2
 800a5f6:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800a5f8:	68bb      	ldr	r3, [r7, #8]
 800a5fa:	781a      	ldrb	r2, [r3, #0]
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800a600:	68bb      	ldr	r3, [r7, #8]
 800a602:	785a      	ldrb	r2, [r3, #1]
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800a608:	68bb      	ldr	r3, [r7, #8]
 800a60a:	3302      	adds	r3, #2
 800a60c:	781b      	ldrb	r3, [r3, #0]
 800a60e:	b29a      	uxth	r2, r3
 800a610:	68bb      	ldr	r3, [r7, #8]
 800a612:	3303      	adds	r3, #3
 800a614:	781b      	ldrb	r3, [r3, #0]
 800a616:	b29b      	uxth	r3, r3
 800a618:	021b      	lsls	r3, r3, #8
 800a61a:	b29b      	uxth	r3, r3
 800a61c:	4313      	orrs	r3, r2
 800a61e:	b29a      	uxth	r2, r3
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800a624:	68bb      	ldr	r3, [r7, #8]
 800a626:	791a      	ldrb	r2, [r3, #4]
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800a62c:	68bb      	ldr	r3, [r7, #8]
 800a62e:	795a      	ldrb	r2, [r3, #5]
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800a634:	68bb      	ldr	r3, [r7, #8]
 800a636:	799a      	ldrb	r2, [r3, #6]
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800a63c:	68bb      	ldr	r3, [r7, #8]
 800a63e:	79da      	ldrb	r2, [r3, #7]
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800a644:	88fb      	ldrh	r3, [r7, #6]
 800a646:	2b08      	cmp	r3, #8
 800a648:	d939      	bls.n	800a6be <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800a64a:	68bb      	ldr	r3, [r7, #8]
 800a64c:	3308      	adds	r3, #8
 800a64e:	781b      	ldrb	r3, [r3, #0]
 800a650:	b29a      	uxth	r2, r3
 800a652:	68bb      	ldr	r3, [r7, #8]
 800a654:	3309      	adds	r3, #9
 800a656:	781b      	ldrb	r3, [r3, #0]
 800a658:	b29b      	uxth	r3, r3
 800a65a:	021b      	lsls	r3, r3, #8
 800a65c:	b29b      	uxth	r3, r3
 800a65e:	4313      	orrs	r3, r2
 800a660:	b29a      	uxth	r2, r3
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800a666:	68bb      	ldr	r3, [r7, #8]
 800a668:	330a      	adds	r3, #10
 800a66a:	781b      	ldrb	r3, [r3, #0]
 800a66c:	b29a      	uxth	r2, r3
 800a66e:	68bb      	ldr	r3, [r7, #8]
 800a670:	330b      	adds	r3, #11
 800a672:	781b      	ldrb	r3, [r3, #0]
 800a674:	b29b      	uxth	r3, r3
 800a676:	021b      	lsls	r3, r3, #8
 800a678:	b29b      	uxth	r3, r3
 800a67a:	4313      	orrs	r3, r2
 800a67c:	b29a      	uxth	r2, r3
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800a682:	68bb      	ldr	r3, [r7, #8]
 800a684:	330c      	adds	r3, #12
 800a686:	781b      	ldrb	r3, [r3, #0]
 800a688:	b29a      	uxth	r2, r3
 800a68a:	68bb      	ldr	r3, [r7, #8]
 800a68c:	330d      	adds	r3, #13
 800a68e:	781b      	ldrb	r3, [r3, #0]
 800a690:	b29b      	uxth	r3, r3
 800a692:	021b      	lsls	r3, r3, #8
 800a694:	b29b      	uxth	r3, r3
 800a696:	4313      	orrs	r3, r2
 800a698:	b29a      	uxth	r2, r3
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800a69e:	68bb      	ldr	r3, [r7, #8]
 800a6a0:	7b9a      	ldrb	r2, [r3, #14]
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800a6a6:	68bb      	ldr	r3, [r7, #8]
 800a6a8:	7bda      	ldrb	r2, [r3, #15]
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800a6ae:	68bb      	ldr	r3, [r7, #8]
 800a6b0:	7c1a      	ldrb	r2, [r3, #16]
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800a6b6:	68bb      	ldr	r3, [r7, #8]
 800a6b8:	7c5a      	ldrb	r2, [r3, #17]
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	745a      	strb	r2, [r3, #17]
  }
}
 800a6be:	bf00      	nop
 800a6c0:	3714      	adds	r7, #20
 800a6c2:	46bd      	mov	sp, r7
 800a6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c8:	4770      	bx	lr

0800a6ca <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800a6ca:	b580      	push	{r7, lr}
 800a6cc:	b08a      	sub	sp, #40	; 0x28
 800a6ce:	af00      	add	r7, sp, #0
 800a6d0:	60f8      	str	r0, [r7, #12]
 800a6d2:	60b9      	str	r1, [r7, #8]
 800a6d4:	4613      	mov	r3, r2
 800a6d6:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800a6d8:	68bb      	ldr	r3, [r7, #8]
 800a6da:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800a6dc:	2300      	movs	r3, #0
 800a6de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800a6e2:	2300      	movs	r3, #0
 800a6e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800a6e8:	68bb      	ldr	r3, [r7, #8]
 800a6ea:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800a6ec:	68bb      	ldr	r3, [r7, #8]
 800a6ee:	781a      	ldrb	r2, [r3, #0]
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800a6f4:	68bb      	ldr	r3, [r7, #8]
 800a6f6:	785a      	ldrb	r2, [r3, #1]
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800a6fc:	68bb      	ldr	r3, [r7, #8]
 800a6fe:	3302      	adds	r3, #2
 800a700:	781b      	ldrb	r3, [r3, #0]
 800a702:	b29a      	uxth	r2, r3
 800a704:	68bb      	ldr	r3, [r7, #8]
 800a706:	3303      	adds	r3, #3
 800a708:	781b      	ldrb	r3, [r3, #0]
 800a70a:	b29b      	uxth	r3, r3
 800a70c:	021b      	lsls	r3, r3, #8
 800a70e:	b29b      	uxth	r3, r3
 800a710:	4313      	orrs	r3, r2
 800a712:	b29a      	uxth	r2, r3
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800a718:	68bb      	ldr	r3, [r7, #8]
 800a71a:	791a      	ldrb	r2, [r3, #4]
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800a720:	68bb      	ldr	r3, [r7, #8]
 800a722:	795a      	ldrb	r2, [r3, #5]
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800a728:	68bb      	ldr	r3, [r7, #8]
 800a72a:	799a      	ldrb	r2, [r3, #6]
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800a730:	68bb      	ldr	r3, [r7, #8]
 800a732:	79da      	ldrb	r2, [r3, #7]
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800a738:	68bb      	ldr	r3, [r7, #8]
 800a73a:	7a1a      	ldrb	r2, [r3, #8]
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800a740:	88fb      	ldrh	r3, [r7, #6]
 800a742:	2b09      	cmp	r3, #9
 800a744:	d95f      	bls.n	800a806 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800a746:	2309      	movs	r3, #9
 800a748:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800a74a:	2300      	movs	r3, #0
 800a74c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a74e:	e051      	b.n	800a7f4 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a750:	f107 0316 	add.w	r3, r7, #22
 800a754:	4619      	mov	r1, r3
 800a756:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a758:	f000 f8e8 	bl	800a92c <USBH_GetNextDesc>
 800a75c:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800a75e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a760:	785b      	ldrb	r3, [r3, #1]
 800a762:	2b04      	cmp	r3, #4
 800a764:	d146      	bne.n	800a7f4 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800a766:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a76a:	221a      	movs	r2, #26
 800a76c:	fb02 f303 	mul.w	r3, r2, r3
 800a770:	3308      	adds	r3, #8
 800a772:	68fa      	ldr	r2, [r7, #12]
 800a774:	4413      	add	r3, r2
 800a776:	3302      	adds	r3, #2
 800a778:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800a77a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a77c:	69f8      	ldr	r0, [r7, #28]
 800a77e:	f000 f846 	bl	800a80e <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800a782:	2300      	movs	r3, #0
 800a784:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800a788:	2300      	movs	r3, #0
 800a78a:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a78c:	e022      	b.n	800a7d4 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a78e:	f107 0316 	add.w	r3, r7, #22
 800a792:	4619      	mov	r1, r3
 800a794:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a796:	f000 f8c9 	bl	800a92c <USBH_GetNextDesc>
 800a79a:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800a79c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a79e:	785b      	ldrb	r3, [r3, #1]
 800a7a0:	2b05      	cmp	r3, #5
 800a7a2:	d117      	bne.n	800a7d4 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800a7a4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a7a8:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800a7ac:	3201      	adds	r2, #1
 800a7ae:	00d2      	lsls	r2, r2, #3
 800a7b0:	211a      	movs	r1, #26
 800a7b2:	fb01 f303 	mul.w	r3, r1, r3
 800a7b6:	4413      	add	r3, r2
 800a7b8:	3308      	adds	r3, #8
 800a7ba:	68fa      	ldr	r2, [r7, #12]
 800a7bc:	4413      	add	r3, r2
 800a7be:	3304      	adds	r3, #4
 800a7c0:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800a7c2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a7c4:	69b8      	ldr	r0, [r7, #24]
 800a7c6:	f000 f851 	bl	800a86c <USBH_ParseEPDesc>
            ep_ix++;
 800a7ca:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800a7ce:	3301      	adds	r3, #1
 800a7d0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a7d4:	69fb      	ldr	r3, [r7, #28]
 800a7d6:	791b      	ldrb	r3, [r3, #4]
 800a7d8:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800a7dc:	429a      	cmp	r2, r3
 800a7de:	d204      	bcs.n	800a7ea <USBH_ParseCfgDesc+0x120>
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	885a      	ldrh	r2, [r3, #2]
 800a7e4:	8afb      	ldrh	r3, [r7, #22]
 800a7e6:	429a      	cmp	r2, r3
 800a7e8:	d8d1      	bhi.n	800a78e <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800a7ea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a7ee:	3301      	adds	r3, #1
 800a7f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a7f4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a7f8:	2b01      	cmp	r3, #1
 800a7fa:	d804      	bhi.n	800a806 <USBH_ParseCfgDesc+0x13c>
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	885a      	ldrh	r2, [r3, #2]
 800a800:	8afb      	ldrh	r3, [r7, #22]
 800a802:	429a      	cmp	r2, r3
 800a804:	d8a4      	bhi.n	800a750 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800a806:	bf00      	nop
 800a808:	3728      	adds	r7, #40	; 0x28
 800a80a:	46bd      	mov	sp, r7
 800a80c:	bd80      	pop	{r7, pc}

0800a80e <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800a80e:	b480      	push	{r7}
 800a810:	b083      	sub	sp, #12
 800a812:	af00      	add	r7, sp, #0
 800a814:	6078      	str	r0, [r7, #4]
 800a816:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800a818:	683b      	ldr	r3, [r7, #0]
 800a81a:	781a      	ldrb	r2, [r3, #0]
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800a820:	683b      	ldr	r3, [r7, #0]
 800a822:	785a      	ldrb	r2, [r3, #1]
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800a828:	683b      	ldr	r3, [r7, #0]
 800a82a:	789a      	ldrb	r2, [r3, #2]
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800a830:	683b      	ldr	r3, [r7, #0]
 800a832:	78da      	ldrb	r2, [r3, #3]
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800a838:	683b      	ldr	r3, [r7, #0]
 800a83a:	791a      	ldrb	r2, [r3, #4]
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800a840:	683b      	ldr	r3, [r7, #0]
 800a842:	795a      	ldrb	r2, [r3, #5]
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800a848:	683b      	ldr	r3, [r7, #0]
 800a84a:	799a      	ldrb	r2, [r3, #6]
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800a850:	683b      	ldr	r3, [r7, #0]
 800a852:	79da      	ldrb	r2, [r3, #7]
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800a858:	683b      	ldr	r3, [r7, #0]
 800a85a:	7a1a      	ldrb	r2, [r3, #8]
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	721a      	strb	r2, [r3, #8]
}
 800a860:	bf00      	nop
 800a862:	370c      	adds	r7, #12
 800a864:	46bd      	mov	sp, r7
 800a866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a86a:	4770      	bx	lr

0800a86c <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800a86c:	b480      	push	{r7}
 800a86e:	b083      	sub	sp, #12
 800a870:	af00      	add	r7, sp, #0
 800a872:	6078      	str	r0, [r7, #4]
 800a874:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800a876:	683b      	ldr	r3, [r7, #0]
 800a878:	781a      	ldrb	r2, [r3, #0]
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800a87e:	683b      	ldr	r3, [r7, #0]
 800a880:	785a      	ldrb	r2, [r3, #1]
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800a886:	683b      	ldr	r3, [r7, #0]
 800a888:	789a      	ldrb	r2, [r3, #2]
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800a88e:	683b      	ldr	r3, [r7, #0]
 800a890:	78da      	ldrb	r2, [r3, #3]
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800a896:	683b      	ldr	r3, [r7, #0]
 800a898:	3304      	adds	r3, #4
 800a89a:	781b      	ldrb	r3, [r3, #0]
 800a89c:	b29a      	uxth	r2, r3
 800a89e:	683b      	ldr	r3, [r7, #0]
 800a8a0:	3305      	adds	r3, #5
 800a8a2:	781b      	ldrb	r3, [r3, #0]
 800a8a4:	b29b      	uxth	r3, r3
 800a8a6:	021b      	lsls	r3, r3, #8
 800a8a8:	b29b      	uxth	r3, r3
 800a8aa:	4313      	orrs	r3, r2
 800a8ac:	b29a      	uxth	r2, r3
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800a8b2:	683b      	ldr	r3, [r7, #0]
 800a8b4:	799a      	ldrb	r2, [r3, #6]
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	719a      	strb	r2, [r3, #6]
}
 800a8ba:	bf00      	nop
 800a8bc:	370c      	adds	r7, #12
 800a8be:	46bd      	mov	sp, r7
 800a8c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c4:	4770      	bx	lr

0800a8c6 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800a8c6:	b480      	push	{r7}
 800a8c8:	b087      	sub	sp, #28
 800a8ca:	af00      	add	r7, sp, #0
 800a8cc:	60f8      	str	r0, [r7, #12]
 800a8ce:	60b9      	str	r1, [r7, #8]
 800a8d0:	4613      	mov	r3, r2
 800a8d2:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	3301      	adds	r3, #1
 800a8d8:	781b      	ldrb	r3, [r3, #0]
 800a8da:	2b03      	cmp	r3, #3
 800a8dc:	d120      	bne.n	800a920 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	781b      	ldrb	r3, [r3, #0]
 800a8e2:	1e9a      	subs	r2, r3, #2
 800a8e4:	88fb      	ldrh	r3, [r7, #6]
 800a8e6:	4293      	cmp	r3, r2
 800a8e8:	bf28      	it	cs
 800a8ea:	4613      	movcs	r3, r2
 800a8ec:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	3302      	adds	r3, #2
 800a8f2:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800a8f4:	2300      	movs	r3, #0
 800a8f6:	82fb      	strh	r3, [r7, #22]
 800a8f8:	e00b      	b.n	800a912 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800a8fa:	8afb      	ldrh	r3, [r7, #22]
 800a8fc:	68fa      	ldr	r2, [r7, #12]
 800a8fe:	4413      	add	r3, r2
 800a900:	781a      	ldrb	r2, [r3, #0]
 800a902:	68bb      	ldr	r3, [r7, #8]
 800a904:	701a      	strb	r2, [r3, #0]
      pdest++;
 800a906:	68bb      	ldr	r3, [r7, #8]
 800a908:	3301      	adds	r3, #1
 800a90a:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800a90c:	8afb      	ldrh	r3, [r7, #22]
 800a90e:	3302      	adds	r3, #2
 800a910:	82fb      	strh	r3, [r7, #22]
 800a912:	8afa      	ldrh	r2, [r7, #22]
 800a914:	8abb      	ldrh	r3, [r7, #20]
 800a916:	429a      	cmp	r2, r3
 800a918:	d3ef      	bcc.n	800a8fa <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800a91a:	68bb      	ldr	r3, [r7, #8]
 800a91c:	2200      	movs	r2, #0
 800a91e:	701a      	strb	r2, [r3, #0]
  }
}
 800a920:	bf00      	nop
 800a922:	371c      	adds	r7, #28
 800a924:	46bd      	mov	sp, r7
 800a926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a92a:	4770      	bx	lr

0800a92c <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800a92c:	b480      	push	{r7}
 800a92e:	b085      	sub	sp, #20
 800a930:	af00      	add	r7, sp, #0
 800a932:	6078      	str	r0, [r7, #4]
 800a934:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800a936:	683b      	ldr	r3, [r7, #0]
 800a938:	881a      	ldrh	r2, [r3, #0]
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	781b      	ldrb	r3, [r3, #0]
 800a93e:	b29b      	uxth	r3, r3
 800a940:	4413      	add	r3, r2
 800a942:	b29a      	uxth	r2, r3
 800a944:	683b      	ldr	r3, [r7, #0]
 800a946:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	781b      	ldrb	r3, [r3, #0]
 800a94c:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	4413      	add	r3, r2
 800a952:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a954:	68fb      	ldr	r3, [r7, #12]
}
 800a956:	4618      	mov	r0, r3
 800a958:	3714      	adds	r7, #20
 800a95a:	46bd      	mov	sp, r7
 800a95c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a960:	4770      	bx	lr

0800a962 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800a962:	b580      	push	{r7, lr}
 800a964:	b086      	sub	sp, #24
 800a966:	af00      	add	r7, sp, #0
 800a968:	60f8      	str	r0, [r7, #12]
 800a96a:	60b9      	str	r1, [r7, #8]
 800a96c:	4613      	mov	r3, r2
 800a96e:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800a970:	2301      	movs	r3, #1
 800a972:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	789b      	ldrb	r3, [r3, #2]
 800a978:	2b01      	cmp	r3, #1
 800a97a:	d002      	beq.n	800a982 <USBH_CtlReq+0x20>
 800a97c:	2b02      	cmp	r3, #2
 800a97e:	d00f      	beq.n	800a9a0 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800a980:	e027      	b.n	800a9d2 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	68ba      	ldr	r2, [r7, #8]
 800a986:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	88fa      	ldrh	r2, [r7, #6]
 800a98c:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	2201      	movs	r2, #1
 800a992:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	2202      	movs	r2, #2
 800a998:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800a99a:	2301      	movs	r3, #1
 800a99c:	75fb      	strb	r3, [r7, #23]
      break;
 800a99e:	e018      	b.n	800a9d2 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800a9a0:	68f8      	ldr	r0, [r7, #12]
 800a9a2:	f000 f81b 	bl	800a9dc <USBH_HandleControl>
 800a9a6:	4603      	mov	r3, r0
 800a9a8:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800a9aa:	7dfb      	ldrb	r3, [r7, #23]
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d002      	beq.n	800a9b6 <USBH_CtlReq+0x54>
 800a9b0:	7dfb      	ldrb	r3, [r7, #23]
 800a9b2:	2b03      	cmp	r3, #3
 800a9b4:	d106      	bne.n	800a9c4 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	2201      	movs	r2, #1
 800a9ba:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	2200      	movs	r2, #0
 800a9c0:	761a      	strb	r2, [r3, #24]
      break;
 800a9c2:	e005      	b.n	800a9d0 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800a9c4:	7dfb      	ldrb	r3, [r7, #23]
 800a9c6:	2b02      	cmp	r3, #2
 800a9c8:	d102      	bne.n	800a9d0 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	2201      	movs	r2, #1
 800a9ce:	709a      	strb	r2, [r3, #2]
      break;
 800a9d0:	bf00      	nop
  }
  return status;
 800a9d2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a9d4:	4618      	mov	r0, r3
 800a9d6:	3718      	adds	r7, #24
 800a9d8:	46bd      	mov	sp, r7
 800a9da:	bd80      	pop	{r7, pc}

0800a9dc <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800a9dc:	b580      	push	{r7, lr}
 800a9de:	b086      	sub	sp, #24
 800a9e0:	af02      	add	r7, sp, #8
 800a9e2:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800a9e4:	2301      	movs	r3, #1
 800a9e6:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a9e8:	2300      	movs	r3, #0
 800a9ea:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	7e1b      	ldrb	r3, [r3, #24]
 800a9f0:	3b01      	subs	r3, #1
 800a9f2:	2b0a      	cmp	r3, #10
 800a9f4:	f200 8156 	bhi.w	800aca4 <USBH_HandleControl+0x2c8>
 800a9f8:	a201      	add	r2, pc, #4	; (adr r2, 800aa00 <USBH_HandleControl+0x24>)
 800a9fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9fe:	bf00      	nop
 800aa00:	0800aa2d 	.word	0x0800aa2d
 800aa04:	0800aa47 	.word	0x0800aa47
 800aa08:	0800aab1 	.word	0x0800aab1
 800aa0c:	0800aad7 	.word	0x0800aad7
 800aa10:	0800ab0f 	.word	0x0800ab0f
 800aa14:	0800ab39 	.word	0x0800ab39
 800aa18:	0800ab8b 	.word	0x0800ab8b
 800aa1c:	0800abad 	.word	0x0800abad
 800aa20:	0800abe9 	.word	0x0800abe9
 800aa24:	0800ac0f 	.word	0x0800ac0f
 800aa28:	0800ac4d 	.word	0x0800ac4d
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	f103 0110 	add.w	r1, r3, #16
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	795b      	ldrb	r3, [r3, #5]
 800aa36:	461a      	mov	r2, r3
 800aa38:	6878      	ldr	r0, [r7, #4]
 800aa3a:	f000 f943 	bl	800acc4 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	2202      	movs	r2, #2
 800aa42:	761a      	strb	r2, [r3, #24]
      break;
 800aa44:	e139      	b.n	800acba <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	795b      	ldrb	r3, [r3, #5]
 800aa4a:	4619      	mov	r1, r3
 800aa4c:	6878      	ldr	r0, [r7, #4]
 800aa4e:	f000 fcc5 	bl	800b3dc <USBH_LL_GetURBState>
 800aa52:	4603      	mov	r3, r0
 800aa54:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800aa56:	7bbb      	ldrb	r3, [r7, #14]
 800aa58:	2b01      	cmp	r3, #1
 800aa5a:	d11e      	bne.n	800aa9a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	7c1b      	ldrb	r3, [r3, #16]
 800aa60:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800aa64:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	8adb      	ldrh	r3, [r3, #22]
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d00a      	beq.n	800aa84 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800aa6e:	7b7b      	ldrb	r3, [r7, #13]
 800aa70:	2b80      	cmp	r3, #128	; 0x80
 800aa72:	d103      	bne.n	800aa7c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	2203      	movs	r2, #3
 800aa78:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800aa7a:	e115      	b.n	800aca8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	2205      	movs	r2, #5
 800aa80:	761a      	strb	r2, [r3, #24]
      break;
 800aa82:	e111      	b.n	800aca8 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800aa84:	7b7b      	ldrb	r3, [r7, #13]
 800aa86:	2b80      	cmp	r3, #128	; 0x80
 800aa88:	d103      	bne.n	800aa92 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	2209      	movs	r2, #9
 800aa8e:	761a      	strb	r2, [r3, #24]
      break;
 800aa90:	e10a      	b.n	800aca8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	2207      	movs	r2, #7
 800aa96:	761a      	strb	r2, [r3, #24]
      break;
 800aa98:	e106      	b.n	800aca8 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800aa9a:	7bbb      	ldrb	r3, [r7, #14]
 800aa9c:	2b04      	cmp	r3, #4
 800aa9e:	d003      	beq.n	800aaa8 <USBH_HandleControl+0xcc>
 800aaa0:	7bbb      	ldrb	r3, [r7, #14]
 800aaa2:	2b02      	cmp	r3, #2
 800aaa4:	f040 8100 	bne.w	800aca8 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	220b      	movs	r2, #11
 800aaac:	761a      	strb	r2, [r3, #24]
      break;
 800aaae:	e0fb      	b.n	800aca8 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800aab6:	b29a      	uxth	r2, r3
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	6899      	ldr	r1, [r3, #8]
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	899a      	ldrh	r2, [r3, #12]
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	791b      	ldrb	r3, [r3, #4]
 800aac8:	6878      	ldr	r0, [r7, #4]
 800aaca:	f000 f93a 	bl	800ad42 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	2204      	movs	r2, #4
 800aad2:	761a      	strb	r2, [r3, #24]
      break;
 800aad4:	e0f1      	b.n	800acba <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	791b      	ldrb	r3, [r3, #4]
 800aada:	4619      	mov	r1, r3
 800aadc:	6878      	ldr	r0, [r7, #4]
 800aade:	f000 fc7d 	bl	800b3dc <USBH_LL_GetURBState>
 800aae2:	4603      	mov	r3, r0
 800aae4:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800aae6:	7bbb      	ldrb	r3, [r7, #14]
 800aae8:	2b01      	cmp	r3, #1
 800aaea:	d102      	bne.n	800aaf2 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	2209      	movs	r2, #9
 800aaf0:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800aaf2:	7bbb      	ldrb	r3, [r7, #14]
 800aaf4:	2b05      	cmp	r3, #5
 800aaf6:	d102      	bne.n	800aafe <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800aaf8:	2303      	movs	r3, #3
 800aafa:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800aafc:	e0d6      	b.n	800acac <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800aafe:	7bbb      	ldrb	r3, [r7, #14]
 800ab00:	2b04      	cmp	r3, #4
 800ab02:	f040 80d3 	bne.w	800acac <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	220b      	movs	r2, #11
 800ab0a:	761a      	strb	r2, [r3, #24]
      break;
 800ab0c:	e0ce      	b.n	800acac <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	6899      	ldr	r1, [r3, #8]
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	899a      	ldrh	r2, [r3, #12]
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	795b      	ldrb	r3, [r3, #5]
 800ab1a:	2001      	movs	r0, #1
 800ab1c:	9000      	str	r0, [sp, #0]
 800ab1e:	6878      	ldr	r0, [r7, #4]
 800ab20:	f000 f8ea 	bl	800acf8 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ab2a:	b29a      	uxth	r2, r3
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	2206      	movs	r2, #6
 800ab34:	761a      	strb	r2, [r3, #24]
      break;
 800ab36:	e0c0      	b.n	800acba <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	795b      	ldrb	r3, [r3, #5]
 800ab3c:	4619      	mov	r1, r3
 800ab3e:	6878      	ldr	r0, [r7, #4]
 800ab40:	f000 fc4c 	bl	800b3dc <USBH_LL_GetURBState>
 800ab44:	4603      	mov	r3, r0
 800ab46:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800ab48:	7bbb      	ldrb	r3, [r7, #14]
 800ab4a:	2b01      	cmp	r3, #1
 800ab4c:	d103      	bne.n	800ab56 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	2207      	movs	r2, #7
 800ab52:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800ab54:	e0ac      	b.n	800acb0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800ab56:	7bbb      	ldrb	r3, [r7, #14]
 800ab58:	2b05      	cmp	r3, #5
 800ab5a:	d105      	bne.n	800ab68 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	220c      	movs	r2, #12
 800ab60:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800ab62:	2303      	movs	r3, #3
 800ab64:	73fb      	strb	r3, [r7, #15]
      break;
 800ab66:	e0a3      	b.n	800acb0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800ab68:	7bbb      	ldrb	r3, [r7, #14]
 800ab6a:	2b02      	cmp	r3, #2
 800ab6c:	d103      	bne.n	800ab76 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	2205      	movs	r2, #5
 800ab72:	761a      	strb	r2, [r3, #24]
      break;
 800ab74:	e09c      	b.n	800acb0 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800ab76:	7bbb      	ldrb	r3, [r7, #14]
 800ab78:	2b04      	cmp	r3, #4
 800ab7a:	f040 8099 	bne.w	800acb0 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	220b      	movs	r2, #11
 800ab82:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800ab84:	2302      	movs	r3, #2
 800ab86:	73fb      	strb	r3, [r7, #15]
      break;
 800ab88:	e092      	b.n	800acb0 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	791b      	ldrb	r3, [r3, #4]
 800ab8e:	2200      	movs	r2, #0
 800ab90:	2100      	movs	r1, #0
 800ab92:	6878      	ldr	r0, [r7, #4]
 800ab94:	f000 f8d5 	bl	800ad42 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ab9e:	b29a      	uxth	r2, r3
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	2208      	movs	r2, #8
 800aba8:	761a      	strb	r2, [r3, #24]

      break;
 800abaa:	e086      	b.n	800acba <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	791b      	ldrb	r3, [r3, #4]
 800abb0:	4619      	mov	r1, r3
 800abb2:	6878      	ldr	r0, [r7, #4]
 800abb4:	f000 fc12 	bl	800b3dc <USBH_LL_GetURBState>
 800abb8:	4603      	mov	r3, r0
 800abba:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800abbc:	7bbb      	ldrb	r3, [r7, #14]
 800abbe:	2b01      	cmp	r3, #1
 800abc0:	d105      	bne.n	800abce <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	220d      	movs	r2, #13
 800abc6:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800abc8:	2300      	movs	r3, #0
 800abca:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800abcc:	e072      	b.n	800acb4 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800abce:	7bbb      	ldrb	r3, [r7, #14]
 800abd0:	2b04      	cmp	r3, #4
 800abd2:	d103      	bne.n	800abdc <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	220b      	movs	r2, #11
 800abd8:	761a      	strb	r2, [r3, #24]
      break;
 800abda:	e06b      	b.n	800acb4 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800abdc:	7bbb      	ldrb	r3, [r7, #14]
 800abde:	2b05      	cmp	r3, #5
 800abe0:	d168      	bne.n	800acb4 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800abe2:	2303      	movs	r3, #3
 800abe4:	73fb      	strb	r3, [r7, #15]
      break;
 800abe6:	e065      	b.n	800acb4 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	795b      	ldrb	r3, [r3, #5]
 800abec:	2201      	movs	r2, #1
 800abee:	9200      	str	r2, [sp, #0]
 800abf0:	2200      	movs	r2, #0
 800abf2:	2100      	movs	r1, #0
 800abf4:	6878      	ldr	r0, [r7, #4]
 800abf6:	f000 f87f 	bl	800acf8 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ac00:	b29a      	uxth	r2, r3
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	220a      	movs	r2, #10
 800ac0a:	761a      	strb	r2, [r3, #24]
      break;
 800ac0c:	e055      	b.n	800acba <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	795b      	ldrb	r3, [r3, #5]
 800ac12:	4619      	mov	r1, r3
 800ac14:	6878      	ldr	r0, [r7, #4]
 800ac16:	f000 fbe1 	bl	800b3dc <USBH_LL_GetURBState>
 800ac1a:	4603      	mov	r3, r0
 800ac1c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800ac1e:	7bbb      	ldrb	r3, [r7, #14]
 800ac20:	2b01      	cmp	r3, #1
 800ac22:	d105      	bne.n	800ac30 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800ac24:	2300      	movs	r3, #0
 800ac26:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	220d      	movs	r2, #13
 800ac2c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800ac2e:	e043      	b.n	800acb8 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800ac30:	7bbb      	ldrb	r3, [r7, #14]
 800ac32:	2b02      	cmp	r3, #2
 800ac34:	d103      	bne.n	800ac3e <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	2209      	movs	r2, #9
 800ac3a:	761a      	strb	r2, [r3, #24]
      break;
 800ac3c:	e03c      	b.n	800acb8 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800ac3e:	7bbb      	ldrb	r3, [r7, #14]
 800ac40:	2b04      	cmp	r3, #4
 800ac42:	d139      	bne.n	800acb8 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	220b      	movs	r2, #11
 800ac48:	761a      	strb	r2, [r3, #24]
      break;
 800ac4a:	e035      	b.n	800acb8 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	7e5b      	ldrb	r3, [r3, #25]
 800ac50:	3301      	adds	r3, #1
 800ac52:	b2da      	uxtb	r2, r3
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	765a      	strb	r2, [r3, #25]
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	7e5b      	ldrb	r3, [r3, #25]
 800ac5c:	2b02      	cmp	r3, #2
 800ac5e:	d806      	bhi.n	800ac6e <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	2201      	movs	r2, #1
 800ac64:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	2201      	movs	r2, #1
 800ac6a:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800ac6c:	e025      	b.n	800acba <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ac74:	2106      	movs	r1, #6
 800ac76:	6878      	ldr	r0, [r7, #4]
 800ac78:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	2200      	movs	r2, #0
 800ac7e:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	795b      	ldrb	r3, [r3, #5]
 800ac84:	4619      	mov	r1, r3
 800ac86:	6878      	ldr	r0, [r7, #4]
 800ac88:	f000 f90c 	bl	800aea4 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	791b      	ldrb	r3, [r3, #4]
 800ac90:	4619      	mov	r1, r3
 800ac92:	6878      	ldr	r0, [r7, #4]
 800ac94:	f000 f906 	bl	800aea4 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	2200      	movs	r2, #0
 800ac9c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800ac9e:	2302      	movs	r3, #2
 800aca0:	73fb      	strb	r3, [r7, #15]
      break;
 800aca2:	e00a      	b.n	800acba <USBH_HandleControl+0x2de>

    default:
      break;
 800aca4:	bf00      	nop
 800aca6:	e008      	b.n	800acba <USBH_HandleControl+0x2de>
      break;
 800aca8:	bf00      	nop
 800acaa:	e006      	b.n	800acba <USBH_HandleControl+0x2de>
      break;
 800acac:	bf00      	nop
 800acae:	e004      	b.n	800acba <USBH_HandleControl+0x2de>
      break;
 800acb0:	bf00      	nop
 800acb2:	e002      	b.n	800acba <USBH_HandleControl+0x2de>
      break;
 800acb4:	bf00      	nop
 800acb6:	e000      	b.n	800acba <USBH_HandleControl+0x2de>
      break;
 800acb8:	bf00      	nop
  }

  return status;
 800acba:	7bfb      	ldrb	r3, [r7, #15]
}
 800acbc:	4618      	mov	r0, r3
 800acbe:	3710      	adds	r7, #16
 800acc0:	46bd      	mov	sp, r7
 800acc2:	bd80      	pop	{r7, pc}

0800acc4 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800acc4:	b580      	push	{r7, lr}
 800acc6:	b088      	sub	sp, #32
 800acc8:	af04      	add	r7, sp, #16
 800acca:	60f8      	str	r0, [r7, #12]
 800accc:	60b9      	str	r1, [r7, #8]
 800acce:	4613      	mov	r3, r2
 800acd0:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800acd2:	79f9      	ldrb	r1, [r7, #7]
 800acd4:	2300      	movs	r3, #0
 800acd6:	9303      	str	r3, [sp, #12]
 800acd8:	2308      	movs	r3, #8
 800acda:	9302      	str	r3, [sp, #8]
 800acdc:	68bb      	ldr	r3, [r7, #8]
 800acde:	9301      	str	r3, [sp, #4]
 800ace0:	2300      	movs	r3, #0
 800ace2:	9300      	str	r3, [sp, #0]
 800ace4:	2300      	movs	r3, #0
 800ace6:	2200      	movs	r2, #0
 800ace8:	68f8      	ldr	r0, [r7, #12]
 800acea:	f000 fb46 	bl	800b37a <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800acee:	2300      	movs	r3, #0
}
 800acf0:	4618      	mov	r0, r3
 800acf2:	3710      	adds	r7, #16
 800acf4:	46bd      	mov	sp, r7
 800acf6:	bd80      	pop	{r7, pc}

0800acf8 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800acf8:	b580      	push	{r7, lr}
 800acfa:	b088      	sub	sp, #32
 800acfc:	af04      	add	r7, sp, #16
 800acfe:	60f8      	str	r0, [r7, #12]
 800ad00:	60b9      	str	r1, [r7, #8]
 800ad02:	4611      	mov	r1, r2
 800ad04:	461a      	mov	r2, r3
 800ad06:	460b      	mov	r3, r1
 800ad08:	80fb      	strh	r3, [r7, #6]
 800ad0a:	4613      	mov	r3, r2
 800ad0c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d001      	beq.n	800ad1c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800ad18:	2300      	movs	r3, #0
 800ad1a:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800ad1c:	7979      	ldrb	r1, [r7, #5]
 800ad1e:	7e3b      	ldrb	r3, [r7, #24]
 800ad20:	9303      	str	r3, [sp, #12]
 800ad22:	88fb      	ldrh	r3, [r7, #6]
 800ad24:	9302      	str	r3, [sp, #8]
 800ad26:	68bb      	ldr	r3, [r7, #8]
 800ad28:	9301      	str	r3, [sp, #4]
 800ad2a:	2301      	movs	r3, #1
 800ad2c:	9300      	str	r3, [sp, #0]
 800ad2e:	2300      	movs	r3, #0
 800ad30:	2200      	movs	r2, #0
 800ad32:	68f8      	ldr	r0, [r7, #12]
 800ad34:	f000 fb21 	bl	800b37a <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800ad38:	2300      	movs	r3, #0
}
 800ad3a:	4618      	mov	r0, r3
 800ad3c:	3710      	adds	r7, #16
 800ad3e:	46bd      	mov	sp, r7
 800ad40:	bd80      	pop	{r7, pc}

0800ad42 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800ad42:	b580      	push	{r7, lr}
 800ad44:	b088      	sub	sp, #32
 800ad46:	af04      	add	r7, sp, #16
 800ad48:	60f8      	str	r0, [r7, #12]
 800ad4a:	60b9      	str	r1, [r7, #8]
 800ad4c:	4611      	mov	r1, r2
 800ad4e:	461a      	mov	r2, r3
 800ad50:	460b      	mov	r3, r1
 800ad52:	80fb      	strh	r3, [r7, #6]
 800ad54:	4613      	mov	r3, r2
 800ad56:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800ad58:	7979      	ldrb	r1, [r7, #5]
 800ad5a:	2300      	movs	r3, #0
 800ad5c:	9303      	str	r3, [sp, #12]
 800ad5e:	88fb      	ldrh	r3, [r7, #6]
 800ad60:	9302      	str	r3, [sp, #8]
 800ad62:	68bb      	ldr	r3, [r7, #8]
 800ad64:	9301      	str	r3, [sp, #4]
 800ad66:	2301      	movs	r3, #1
 800ad68:	9300      	str	r3, [sp, #0]
 800ad6a:	2300      	movs	r3, #0
 800ad6c:	2201      	movs	r2, #1
 800ad6e:	68f8      	ldr	r0, [r7, #12]
 800ad70:	f000 fb03 	bl	800b37a <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800ad74:	2300      	movs	r3, #0

}
 800ad76:	4618      	mov	r0, r3
 800ad78:	3710      	adds	r7, #16
 800ad7a:	46bd      	mov	sp, r7
 800ad7c:	bd80      	pop	{r7, pc}

0800ad7e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800ad7e:	b580      	push	{r7, lr}
 800ad80:	b088      	sub	sp, #32
 800ad82:	af04      	add	r7, sp, #16
 800ad84:	60f8      	str	r0, [r7, #12]
 800ad86:	60b9      	str	r1, [r7, #8]
 800ad88:	4611      	mov	r1, r2
 800ad8a:	461a      	mov	r2, r3
 800ad8c:	460b      	mov	r3, r1
 800ad8e:	80fb      	strh	r3, [r7, #6]
 800ad90:	4613      	mov	r3, r2
 800ad92:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d001      	beq.n	800ada2 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800ad9e:	2300      	movs	r3, #0
 800ada0:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800ada2:	7979      	ldrb	r1, [r7, #5]
 800ada4:	7e3b      	ldrb	r3, [r7, #24]
 800ada6:	9303      	str	r3, [sp, #12]
 800ada8:	88fb      	ldrh	r3, [r7, #6]
 800adaa:	9302      	str	r3, [sp, #8]
 800adac:	68bb      	ldr	r3, [r7, #8]
 800adae:	9301      	str	r3, [sp, #4]
 800adb0:	2301      	movs	r3, #1
 800adb2:	9300      	str	r3, [sp, #0]
 800adb4:	2302      	movs	r3, #2
 800adb6:	2200      	movs	r2, #0
 800adb8:	68f8      	ldr	r0, [r7, #12]
 800adba:	f000 fade 	bl	800b37a <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800adbe:	2300      	movs	r3, #0
}
 800adc0:	4618      	mov	r0, r3
 800adc2:	3710      	adds	r7, #16
 800adc4:	46bd      	mov	sp, r7
 800adc6:	bd80      	pop	{r7, pc}

0800adc8 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800adc8:	b580      	push	{r7, lr}
 800adca:	b088      	sub	sp, #32
 800adcc:	af04      	add	r7, sp, #16
 800adce:	60f8      	str	r0, [r7, #12]
 800add0:	60b9      	str	r1, [r7, #8]
 800add2:	4611      	mov	r1, r2
 800add4:	461a      	mov	r2, r3
 800add6:	460b      	mov	r3, r1
 800add8:	80fb      	strh	r3, [r7, #6]
 800adda:	4613      	mov	r3, r2
 800addc:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800adde:	7979      	ldrb	r1, [r7, #5]
 800ade0:	2300      	movs	r3, #0
 800ade2:	9303      	str	r3, [sp, #12]
 800ade4:	88fb      	ldrh	r3, [r7, #6]
 800ade6:	9302      	str	r3, [sp, #8]
 800ade8:	68bb      	ldr	r3, [r7, #8]
 800adea:	9301      	str	r3, [sp, #4]
 800adec:	2301      	movs	r3, #1
 800adee:	9300      	str	r3, [sp, #0]
 800adf0:	2302      	movs	r3, #2
 800adf2:	2201      	movs	r2, #1
 800adf4:	68f8      	ldr	r0, [r7, #12]
 800adf6:	f000 fac0 	bl	800b37a <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800adfa:	2300      	movs	r3, #0
}
 800adfc:	4618      	mov	r0, r3
 800adfe:	3710      	adds	r7, #16
 800ae00:	46bd      	mov	sp, r7
 800ae02:	bd80      	pop	{r7, pc}

0800ae04 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800ae04:	b580      	push	{r7, lr}
 800ae06:	b086      	sub	sp, #24
 800ae08:	af04      	add	r7, sp, #16
 800ae0a:	6078      	str	r0, [r7, #4]
 800ae0c:	4608      	mov	r0, r1
 800ae0e:	4611      	mov	r1, r2
 800ae10:	461a      	mov	r2, r3
 800ae12:	4603      	mov	r3, r0
 800ae14:	70fb      	strb	r3, [r7, #3]
 800ae16:	460b      	mov	r3, r1
 800ae18:	70bb      	strb	r3, [r7, #2]
 800ae1a:	4613      	mov	r3, r2
 800ae1c:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800ae1e:	7878      	ldrb	r0, [r7, #1]
 800ae20:	78ba      	ldrb	r2, [r7, #2]
 800ae22:	78f9      	ldrb	r1, [r7, #3]
 800ae24:	8b3b      	ldrh	r3, [r7, #24]
 800ae26:	9302      	str	r3, [sp, #8]
 800ae28:	7d3b      	ldrb	r3, [r7, #20]
 800ae2a:	9301      	str	r3, [sp, #4]
 800ae2c:	7c3b      	ldrb	r3, [r7, #16]
 800ae2e:	9300      	str	r3, [sp, #0]
 800ae30:	4603      	mov	r3, r0
 800ae32:	6878      	ldr	r0, [r7, #4]
 800ae34:	f000 fa53 	bl	800b2de <USBH_LL_OpenPipe>

  return USBH_OK;
 800ae38:	2300      	movs	r3, #0
}
 800ae3a:	4618      	mov	r0, r3
 800ae3c:	3708      	adds	r7, #8
 800ae3e:	46bd      	mov	sp, r7
 800ae40:	bd80      	pop	{r7, pc}

0800ae42 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800ae42:	b580      	push	{r7, lr}
 800ae44:	b082      	sub	sp, #8
 800ae46:	af00      	add	r7, sp, #0
 800ae48:	6078      	str	r0, [r7, #4]
 800ae4a:	460b      	mov	r3, r1
 800ae4c:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800ae4e:	78fb      	ldrb	r3, [r7, #3]
 800ae50:	4619      	mov	r1, r3
 800ae52:	6878      	ldr	r0, [r7, #4]
 800ae54:	f000 fa72 	bl	800b33c <USBH_LL_ClosePipe>

  return USBH_OK;
 800ae58:	2300      	movs	r3, #0
}
 800ae5a:	4618      	mov	r0, r3
 800ae5c:	3708      	adds	r7, #8
 800ae5e:	46bd      	mov	sp, r7
 800ae60:	bd80      	pop	{r7, pc}

0800ae62 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800ae62:	b580      	push	{r7, lr}
 800ae64:	b084      	sub	sp, #16
 800ae66:	af00      	add	r7, sp, #0
 800ae68:	6078      	str	r0, [r7, #4]
 800ae6a:	460b      	mov	r3, r1
 800ae6c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800ae6e:	6878      	ldr	r0, [r7, #4]
 800ae70:	f000 f836 	bl	800aee0 <USBH_GetFreePipe>
 800ae74:	4603      	mov	r3, r0
 800ae76:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800ae78:	89fb      	ldrh	r3, [r7, #14]
 800ae7a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ae7e:	4293      	cmp	r3, r2
 800ae80:	d00a      	beq.n	800ae98 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800ae82:	78fa      	ldrb	r2, [r7, #3]
 800ae84:	89fb      	ldrh	r3, [r7, #14]
 800ae86:	f003 030f 	and.w	r3, r3, #15
 800ae8a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ae8e:	6879      	ldr	r1, [r7, #4]
 800ae90:	33e0      	adds	r3, #224	; 0xe0
 800ae92:	009b      	lsls	r3, r3, #2
 800ae94:	440b      	add	r3, r1
 800ae96:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800ae98:	89fb      	ldrh	r3, [r7, #14]
 800ae9a:	b2db      	uxtb	r3, r3
}
 800ae9c:	4618      	mov	r0, r3
 800ae9e:	3710      	adds	r7, #16
 800aea0:	46bd      	mov	sp, r7
 800aea2:	bd80      	pop	{r7, pc}

0800aea4 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800aea4:	b480      	push	{r7}
 800aea6:	b083      	sub	sp, #12
 800aea8:	af00      	add	r7, sp, #0
 800aeaa:	6078      	str	r0, [r7, #4]
 800aeac:	460b      	mov	r3, r1
 800aeae:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800aeb0:	78fb      	ldrb	r3, [r7, #3]
 800aeb2:	2b0a      	cmp	r3, #10
 800aeb4:	d80d      	bhi.n	800aed2 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800aeb6:	78fb      	ldrb	r3, [r7, #3]
 800aeb8:	687a      	ldr	r2, [r7, #4]
 800aeba:	33e0      	adds	r3, #224	; 0xe0
 800aebc:	009b      	lsls	r3, r3, #2
 800aebe:	4413      	add	r3, r2
 800aec0:	685a      	ldr	r2, [r3, #4]
 800aec2:	78fb      	ldrb	r3, [r7, #3]
 800aec4:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800aec8:	6879      	ldr	r1, [r7, #4]
 800aeca:	33e0      	adds	r3, #224	; 0xe0
 800aecc:	009b      	lsls	r3, r3, #2
 800aece:	440b      	add	r3, r1
 800aed0:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800aed2:	2300      	movs	r3, #0
}
 800aed4:	4618      	mov	r0, r3
 800aed6:	370c      	adds	r7, #12
 800aed8:	46bd      	mov	sp, r7
 800aeda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aede:	4770      	bx	lr

0800aee0 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800aee0:	b480      	push	{r7}
 800aee2:	b085      	sub	sp, #20
 800aee4:	af00      	add	r7, sp, #0
 800aee6:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800aee8:	2300      	movs	r3, #0
 800aeea:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800aeec:	2300      	movs	r3, #0
 800aeee:	73fb      	strb	r3, [r7, #15]
 800aef0:	e00f      	b.n	800af12 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800aef2:	7bfb      	ldrb	r3, [r7, #15]
 800aef4:	687a      	ldr	r2, [r7, #4]
 800aef6:	33e0      	adds	r3, #224	; 0xe0
 800aef8:	009b      	lsls	r3, r3, #2
 800aefa:	4413      	add	r3, r2
 800aefc:	685b      	ldr	r3, [r3, #4]
 800aefe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800af02:	2b00      	cmp	r3, #0
 800af04:	d102      	bne.n	800af0c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800af06:	7bfb      	ldrb	r3, [r7, #15]
 800af08:	b29b      	uxth	r3, r3
 800af0a:	e007      	b.n	800af1c <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800af0c:	7bfb      	ldrb	r3, [r7, #15]
 800af0e:	3301      	adds	r3, #1
 800af10:	73fb      	strb	r3, [r7, #15]
 800af12:	7bfb      	ldrb	r3, [r7, #15]
 800af14:	2b0a      	cmp	r3, #10
 800af16:	d9ec      	bls.n	800aef2 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800af18:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800af1c:	4618      	mov	r0, r3
 800af1e:	3714      	adds	r7, #20
 800af20:	46bd      	mov	sp, r7
 800af22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af26:	4770      	bx	lr

0800af28 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800af28:	b580      	push	{r7, lr}
 800af2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800af2c:	2201      	movs	r2, #1
 800af2e:	490e      	ldr	r1, [pc, #56]	; (800af68 <MX_USB_HOST_Init+0x40>)
 800af30:	480e      	ldr	r0, [pc, #56]	; (800af6c <MX_USB_HOST_Init+0x44>)
 800af32:	f7fe fca1 	bl	8009878 <USBH_Init>
 800af36:	4603      	mov	r3, r0
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d001      	beq.n	800af40 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800af3c:	f7f6 f8af 	bl	800109e <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800af40:	490b      	ldr	r1, [pc, #44]	; (800af70 <MX_USB_HOST_Init+0x48>)
 800af42:	480a      	ldr	r0, [pc, #40]	; (800af6c <MX_USB_HOST_Init+0x44>)
 800af44:	f7fe fd26 	bl	8009994 <USBH_RegisterClass>
 800af48:	4603      	mov	r3, r0
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d001      	beq.n	800af52 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800af4e:	f7f6 f8a6 	bl	800109e <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800af52:	4806      	ldr	r0, [pc, #24]	; (800af6c <MX_USB_HOST_Init+0x44>)
 800af54:	f7fe fdaa 	bl	8009aac <USBH_Start>
 800af58:	4603      	mov	r3, r0
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d001      	beq.n	800af62 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800af5e:	f7f6 f89e 	bl	800109e <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800af62:	bf00      	nop
 800af64:	bd80      	pop	{r7, pc}
 800af66:	bf00      	nop
 800af68:	0800af89 	.word	0x0800af89
 800af6c:	20000684 	.word	0x20000684
 800af70:	20000014 	.word	0x20000014

0800af74 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800af74:	b580      	push	{r7, lr}
 800af76:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800af78:	4802      	ldr	r0, [pc, #8]	; (800af84 <MX_USB_HOST_Process+0x10>)
 800af7a:	f7fe fda7 	bl	8009acc <USBH_Process>
}
 800af7e:	bf00      	nop
 800af80:	bd80      	pop	{r7, pc}
 800af82:	bf00      	nop
 800af84:	20000684 	.word	0x20000684

0800af88 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800af88:	b480      	push	{r7}
 800af8a:	b083      	sub	sp, #12
 800af8c:	af00      	add	r7, sp, #0
 800af8e:	6078      	str	r0, [r7, #4]
 800af90:	460b      	mov	r3, r1
 800af92:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800af94:	78fb      	ldrb	r3, [r7, #3]
 800af96:	3b01      	subs	r3, #1
 800af98:	2b04      	cmp	r3, #4
 800af9a:	d819      	bhi.n	800afd0 <USBH_UserProcess+0x48>
 800af9c:	a201      	add	r2, pc, #4	; (adr r2, 800afa4 <USBH_UserProcess+0x1c>)
 800af9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afa2:	bf00      	nop
 800afa4:	0800afd1 	.word	0x0800afd1
 800afa8:	0800afc1 	.word	0x0800afc1
 800afac:	0800afd1 	.word	0x0800afd1
 800afb0:	0800afc9 	.word	0x0800afc9
 800afb4:	0800afb9 	.word	0x0800afb9
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800afb8:	4b09      	ldr	r3, [pc, #36]	; (800afe0 <USBH_UserProcess+0x58>)
 800afba:	2203      	movs	r2, #3
 800afbc:	701a      	strb	r2, [r3, #0]
  break;
 800afbe:	e008      	b.n	800afd2 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800afc0:	4b07      	ldr	r3, [pc, #28]	; (800afe0 <USBH_UserProcess+0x58>)
 800afc2:	2202      	movs	r2, #2
 800afc4:	701a      	strb	r2, [r3, #0]
  break;
 800afc6:	e004      	b.n	800afd2 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800afc8:	4b05      	ldr	r3, [pc, #20]	; (800afe0 <USBH_UserProcess+0x58>)
 800afca:	2201      	movs	r2, #1
 800afcc:	701a      	strb	r2, [r3, #0]
  break;
 800afce:	e000      	b.n	800afd2 <USBH_UserProcess+0x4a>

  default:
  break;
 800afd0:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800afd2:	bf00      	nop
 800afd4:	370c      	adds	r7, #12
 800afd6:	46bd      	mov	sp, r7
 800afd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afdc:	4770      	bx	lr
 800afde:	bf00      	nop
 800afe0:	200000c8 	.word	0x200000c8

0800afe4 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800afe4:	b580      	push	{r7, lr}
 800afe6:	b08a      	sub	sp, #40	; 0x28
 800afe8:	af00      	add	r7, sp, #0
 800afea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800afec:	f107 0314 	add.w	r3, r7, #20
 800aff0:	2200      	movs	r2, #0
 800aff2:	601a      	str	r2, [r3, #0]
 800aff4:	605a      	str	r2, [r3, #4]
 800aff6:	609a      	str	r2, [r3, #8]
 800aff8:	60da      	str	r2, [r3, #12]
 800affa:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b004:	d147      	bne.n	800b096 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b006:	2300      	movs	r3, #0
 800b008:	613b      	str	r3, [r7, #16]
 800b00a:	4b25      	ldr	r3, [pc, #148]	; (800b0a0 <HAL_HCD_MspInit+0xbc>)
 800b00c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b00e:	4a24      	ldr	r2, [pc, #144]	; (800b0a0 <HAL_HCD_MspInit+0xbc>)
 800b010:	f043 0301 	orr.w	r3, r3, #1
 800b014:	6313      	str	r3, [r2, #48]	; 0x30
 800b016:	4b22      	ldr	r3, [pc, #136]	; (800b0a0 <HAL_HCD_MspInit+0xbc>)
 800b018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b01a:	f003 0301 	and.w	r3, r3, #1
 800b01e:	613b      	str	r3, [r7, #16]
 800b020:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800b022:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b026:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b028:	2300      	movs	r3, #0
 800b02a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b02c:	2300      	movs	r3, #0
 800b02e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800b030:	f107 0314 	add.w	r3, r7, #20
 800b034:	4619      	mov	r1, r3
 800b036:	481b      	ldr	r0, [pc, #108]	; (800b0a4 <HAL_HCD_MspInit+0xc0>)
 800b038:	f7f7 fe26 	bl	8002c88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800b03c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800b040:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b042:	2302      	movs	r3, #2
 800b044:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b046:	2300      	movs	r3, #0
 800b048:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b04a:	2300      	movs	r3, #0
 800b04c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b04e:	230a      	movs	r3, #10
 800b050:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b052:	f107 0314 	add.w	r3, r7, #20
 800b056:	4619      	mov	r1, r3
 800b058:	4812      	ldr	r0, [pc, #72]	; (800b0a4 <HAL_HCD_MspInit+0xc0>)
 800b05a:	f7f7 fe15 	bl	8002c88 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b05e:	4b10      	ldr	r3, [pc, #64]	; (800b0a0 <HAL_HCD_MspInit+0xbc>)
 800b060:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b062:	4a0f      	ldr	r2, [pc, #60]	; (800b0a0 <HAL_HCD_MspInit+0xbc>)
 800b064:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b068:	6353      	str	r3, [r2, #52]	; 0x34
 800b06a:	2300      	movs	r3, #0
 800b06c:	60fb      	str	r3, [r7, #12]
 800b06e:	4b0c      	ldr	r3, [pc, #48]	; (800b0a0 <HAL_HCD_MspInit+0xbc>)
 800b070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b072:	4a0b      	ldr	r2, [pc, #44]	; (800b0a0 <HAL_HCD_MspInit+0xbc>)
 800b074:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b078:	6453      	str	r3, [r2, #68]	; 0x44
 800b07a:	4b09      	ldr	r3, [pc, #36]	; (800b0a0 <HAL_HCD_MspInit+0xbc>)
 800b07c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b07e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b082:	60fb      	str	r3, [r7, #12]
 800b084:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800b086:	2200      	movs	r2, #0
 800b088:	2100      	movs	r1, #0
 800b08a:	2043      	movs	r0, #67	; 0x43
 800b08c:	f7f7 f9bb 	bl	8002406 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b090:	2043      	movs	r0, #67	; 0x43
 800b092:	f7f7 f9d4 	bl	800243e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b096:	bf00      	nop
 800b098:	3728      	adds	r7, #40	; 0x28
 800b09a:	46bd      	mov	sp, r7
 800b09c:	bd80      	pop	{r7, pc}
 800b09e:	bf00      	nop
 800b0a0:	40023800 	.word	0x40023800
 800b0a4:	40020000 	.word	0x40020000

0800b0a8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800b0a8:	b580      	push	{r7, lr}
 800b0aa:	b082      	sub	sp, #8
 800b0ac:	af00      	add	r7, sp, #0
 800b0ae:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b0b6:	4618      	mov	r0, r3
 800b0b8:	f7ff f8db 	bl	800a272 <USBH_LL_IncTimer>
}
 800b0bc:	bf00      	nop
 800b0be:	3708      	adds	r7, #8
 800b0c0:	46bd      	mov	sp, r7
 800b0c2:	bd80      	pop	{r7, pc}

0800b0c4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b0c4:	b580      	push	{r7, lr}
 800b0c6:	b082      	sub	sp, #8
 800b0c8:	af00      	add	r7, sp, #0
 800b0ca:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b0d2:	4618      	mov	r0, r3
 800b0d4:	f7ff f913 	bl	800a2fe <USBH_LL_Connect>
}
 800b0d8:	bf00      	nop
 800b0da:	3708      	adds	r7, #8
 800b0dc:	46bd      	mov	sp, r7
 800b0de:	bd80      	pop	{r7, pc}

0800b0e0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b0e0:	b580      	push	{r7, lr}
 800b0e2:	b082      	sub	sp, #8
 800b0e4:	af00      	add	r7, sp, #0
 800b0e6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b0ee:	4618      	mov	r0, r3
 800b0f0:	f7ff f91c 	bl	800a32c <USBH_LL_Disconnect>
}
 800b0f4:	bf00      	nop
 800b0f6:	3708      	adds	r7, #8
 800b0f8:	46bd      	mov	sp, r7
 800b0fa:	bd80      	pop	{r7, pc}

0800b0fc <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800b0fc:	b480      	push	{r7}
 800b0fe:	b083      	sub	sp, #12
 800b100:	af00      	add	r7, sp, #0
 800b102:	6078      	str	r0, [r7, #4]
 800b104:	460b      	mov	r3, r1
 800b106:	70fb      	strb	r3, [r7, #3]
 800b108:	4613      	mov	r3, r2
 800b10a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800b10c:	bf00      	nop
 800b10e:	370c      	adds	r7, #12
 800b110:	46bd      	mov	sp, r7
 800b112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b116:	4770      	bx	lr

0800b118 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b118:	b580      	push	{r7, lr}
 800b11a:	b082      	sub	sp, #8
 800b11c:	af00      	add	r7, sp, #0
 800b11e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b126:	4618      	mov	r0, r3
 800b128:	f7ff f8cd 	bl	800a2c6 <USBH_LL_PortEnabled>
}
 800b12c:	bf00      	nop
 800b12e:	3708      	adds	r7, #8
 800b130:	46bd      	mov	sp, r7
 800b132:	bd80      	pop	{r7, pc}

0800b134 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b134:	b580      	push	{r7, lr}
 800b136:	b082      	sub	sp, #8
 800b138:	af00      	add	r7, sp, #0
 800b13a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b142:	4618      	mov	r0, r3
 800b144:	f7ff f8cd 	bl	800a2e2 <USBH_LL_PortDisabled>
}
 800b148:	bf00      	nop
 800b14a:	3708      	adds	r7, #8
 800b14c:	46bd      	mov	sp, r7
 800b14e:	bd80      	pop	{r7, pc}

0800b150 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800b150:	b580      	push	{r7, lr}
 800b152:	b082      	sub	sp, #8
 800b154:	af00      	add	r7, sp, #0
 800b156:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800b15e:	2b01      	cmp	r3, #1
 800b160:	d12a      	bne.n	800b1b8 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800b162:	4a18      	ldr	r2, [pc, #96]	; (800b1c4 <USBH_LL_Init+0x74>)
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	4a15      	ldr	r2, [pc, #84]	; (800b1c4 <USBH_LL_Init+0x74>)
 800b16e:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b172:	4b14      	ldr	r3, [pc, #80]	; (800b1c4 <USBH_LL_Init+0x74>)
 800b174:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800b178:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800b17a:	4b12      	ldr	r3, [pc, #72]	; (800b1c4 <USBH_LL_Init+0x74>)
 800b17c:	2208      	movs	r2, #8
 800b17e:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800b180:	4b10      	ldr	r3, [pc, #64]	; (800b1c4 <USBH_LL_Init+0x74>)
 800b182:	2201      	movs	r2, #1
 800b184:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b186:	4b0f      	ldr	r3, [pc, #60]	; (800b1c4 <USBH_LL_Init+0x74>)
 800b188:	2200      	movs	r2, #0
 800b18a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800b18c:	4b0d      	ldr	r3, [pc, #52]	; (800b1c4 <USBH_LL_Init+0x74>)
 800b18e:	2202      	movs	r2, #2
 800b190:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b192:	4b0c      	ldr	r3, [pc, #48]	; (800b1c4 <USBH_LL_Init+0x74>)
 800b194:	2200      	movs	r2, #0
 800b196:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800b198:	480a      	ldr	r0, [pc, #40]	; (800b1c4 <USBH_LL_Init+0x74>)
 800b19a:	f7f7 ff2a 	bl	8002ff2 <HAL_HCD_Init>
 800b19e:	4603      	mov	r3, r0
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d001      	beq.n	800b1a8 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800b1a4:	f7f5 ff7b 	bl	800109e <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800b1a8:	4806      	ldr	r0, [pc, #24]	; (800b1c4 <USBH_LL_Init+0x74>)
 800b1aa:	f7f8 fb0e 	bl	80037ca <HAL_HCD_GetCurrentFrame>
 800b1ae:	4603      	mov	r3, r0
 800b1b0:	4619      	mov	r1, r3
 800b1b2:	6878      	ldr	r0, [r7, #4]
 800b1b4:	f7ff f84e 	bl	800a254 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800b1b8:	2300      	movs	r3, #0
}
 800b1ba:	4618      	mov	r0, r3
 800b1bc:	3708      	adds	r7, #8
 800b1be:	46bd      	mov	sp, r7
 800b1c0:	bd80      	pop	{r7, pc}
 800b1c2:	bf00      	nop
 800b1c4:	20000a5c 	.word	0x20000a5c

0800b1c8 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800b1c8:	b580      	push	{r7, lr}
 800b1ca:	b084      	sub	sp, #16
 800b1cc:	af00      	add	r7, sp, #0
 800b1ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b1d0:	2300      	movs	r3, #0
 800b1d2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b1d4:	2300      	movs	r3, #0
 800b1d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b1de:	4618      	mov	r0, r3
 800b1e0:	f7f8 fa7d 	bl	80036de <HAL_HCD_Start>
 800b1e4:	4603      	mov	r3, r0
 800b1e6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b1e8:	7bfb      	ldrb	r3, [r7, #15]
 800b1ea:	4618      	mov	r0, r3
 800b1ec:	f000 f95c 	bl	800b4a8 <USBH_Get_USB_Status>
 800b1f0:	4603      	mov	r3, r0
 800b1f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b1f4:	7bbb      	ldrb	r3, [r7, #14]
}
 800b1f6:	4618      	mov	r0, r3
 800b1f8:	3710      	adds	r7, #16
 800b1fa:	46bd      	mov	sp, r7
 800b1fc:	bd80      	pop	{r7, pc}

0800b1fe <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800b1fe:	b580      	push	{r7, lr}
 800b200:	b084      	sub	sp, #16
 800b202:	af00      	add	r7, sp, #0
 800b204:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b206:	2300      	movs	r3, #0
 800b208:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b20a:	2300      	movs	r3, #0
 800b20c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b214:	4618      	mov	r0, r3
 800b216:	f7f8 fa85 	bl	8003724 <HAL_HCD_Stop>
 800b21a:	4603      	mov	r3, r0
 800b21c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b21e:	7bfb      	ldrb	r3, [r7, #15]
 800b220:	4618      	mov	r0, r3
 800b222:	f000 f941 	bl	800b4a8 <USBH_Get_USB_Status>
 800b226:	4603      	mov	r3, r0
 800b228:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b22a:	7bbb      	ldrb	r3, [r7, #14]
}
 800b22c:	4618      	mov	r0, r3
 800b22e:	3710      	adds	r7, #16
 800b230:	46bd      	mov	sp, r7
 800b232:	bd80      	pop	{r7, pc}

0800b234 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800b234:	b580      	push	{r7, lr}
 800b236:	b084      	sub	sp, #16
 800b238:	af00      	add	r7, sp, #0
 800b23a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800b23c:	2301      	movs	r3, #1
 800b23e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b246:	4618      	mov	r0, r3
 800b248:	f7f8 facd 	bl	80037e6 <HAL_HCD_GetCurrentSpeed>
 800b24c:	4603      	mov	r3, r0
 800b24e:	2b02      	cmp	r3, #2
 800b250:	d00c      	beq.n	800b26c <USBH_LL_GetSpeed+0x38>
 800b252:	2b02      	cmp	r3, #2
 800b254:	d80d      	bhi.n	800b272 <USBH_LL_GetSpeed+0x3e>
 800b256:	2b00      	cmp	r3, #0
 800b258:	d002      	beq.n	800b260 <USBH_LL_GetSpeed+0x2c>
 800b25a:	2b01      	cmp	r3, #1
 800b25c:	d003      	beq.n	800b266 <USBH_LL_GetSpeed+0x32>
 800b25e:	e008      	b.n	800b272 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800b260:	2300      	movs	r3, #0
 800b262:	73fb      	strb	r3, [r7, #15]
    break;
 800b264:	e008      	b.n	800b278 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800b266:	2301      	movs	r3, #1
 800b268:	73fb      	strb	r3, [r7, #15]
    break;
 800b26a:	e005      	b.n	800b278 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800b26c:	2302      	movs	r3, #2
 800b26e:	73fb      	strb	r3, [r7, #15]
    break;
 800b270:	e002      	b.n	800b278 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800b272:	2301      	movs	r3, #1
 800b274:	73fb      	strb	r3, [r7, #15]
    break;
 800b276:	bf00      	nop
  }
  return  speed;
 800b278:	7bfb      	ldrb	r3, [r7, #15]
}
 800b27a:	4618      	mov	r0, r3
 800b27c:	3710      	adds	r7, #16
 800b27e:	46bd      	mov	sp, r7
 800b280:	bd80      	pop	{r7, pc}

0800b282 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800b282:	b580      	push	{r7, lr}
 800b284:	b084      	sub	sp, #16
 800b286:	af00      	add	r7, sp, #0
 800b288:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b28a:	2300      	movs	r3, #0
 800b28c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b28e:	2300      	movs	r3, #0
 800b290:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b298:	4618      	mov	r0, r3
 800b29a:	f7f8 fa60 	bl	800375e <HAL_HCD_ResetPort>
 800b29e:	4603      	mov	r3, r0
 800b2a0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b2a2:	7bfb      	ldrb	r3, [r7, #15]
 800b2a4:	4618      	mov	r0, r3
 800b2a6:	f000 f8ff 	bl	800b4a8 <USBH_Get_USB_Status>
 800b2aa:	4603      	mov	r3, r0
 800b2ac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b2ae:	7bbb      	ldrb	r3, [r7, #14]
}
 800b2b0:	4618      	mov	r0, r3
 800b2b2:	3710      	adds	r7, #16
 800b2b4:	46bd      	mov	sp, r7
 800b2b6:	bd80      	pop	{r7, pc}

0800b2b8 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b2b8:	b580      	push	{r7, lr}
 800b2ba:	b082      	sub	sp, #8
 800b2bc:	af00      	add	r7, sp, #0
 800b2be:	6078      	str	r0, [r7, #4]
 800b2c0:	460b      	mov	r3, r1
 800b2c2:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b2ca:	78fa      	ldrb	r2, [r7, #3]
 800b2cc:	4611      	mov	r1, r2
 800b2ce:	4618      	mov	r0, r3
 800b2d0:	f7f8 fa67 	bl	80037a2 <HAL_HCD_HC_GetXferCount>
 800b2d4:	4603      	mov	r3, r0
}
 800b2d6:	4618      	mov	r0, r3
 800b2d8:	3708      	adds	r7, #8
 800b2da:	46bd      	mov	sp, r7
 800b2dc:	bd80      	pop	{r7, pc}

0800b2de <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b2de:	b590      	push	{r4, r7, lr}
 800b2e0:	b089      	sub	sp, #36	; 0x24
 800b2e2:	af04      	add	r7, sp, #16
 800b2e4:	6078      	str	r0, [r7, #4]
 800b2e6:	4608      	mov	r0, r1
 800b2e8:	4611      	mov	r1, r2
 800b2ea:	461a      	mov	r2, r3
 800b2ec:	4603      	mov	r3, r0
 800b2ee:	70fb      	strb	r3, [r7, #3]
 800b2f0:	460b      	mov	r3, r1
 800b2f2:	70bb      	strb	r3, [r7, #2]
 800b2f4:	4613      	mov	r3, r2
 800b2f6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b2f8:	2300      	movs	r3, #0
 800b2fa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b2fc:	2300      	movs	r3, #0
 800b2fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800b306:	787c      	ldrb	r4, [r7, #1]
 800b308:	78ba      	ldrb	r2, [r7, #2]
 800b30a:	78f9      	ldrb	r1, [r7, #3]
 800b30c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b30e:	9302      	str	r3, [sp, #8]
 800b310:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b314:	9301      	str	r3, [sp, #4]
 800b316:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b31a:	9300      	str	r3, [sp, #0]
 800b31c:	4623      	mov	r3, r4
 800b31e:	f7f7 feca 	bl	80030b6 <HAL_HCD_HC_Init>
 800b322:	4603      	mov	r3, r0
 800b324:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800b326:	7bfb      	ldrb	r3, [r7, #15]
 800b328:	4618      	mov	r0, r3
 800b32a:	f000 f8bd 	bl	800b4a8 <USBH_Get_USB_Status>
 800b32e:	4603      	mov	r3, r0
 800b330:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b332:	7bbb      	ldrb	r3, [r7, #14]
}
 800b334:	4618      	mov	r0, r3
 800b336:	3714      	adds	r7, #20
 800b338:	46bd      	mov	sp, r7
 800b33a:	bd90      	pop	{r4, r7, pc}

0800b33c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b33c:	b580      	push	{r7, lr}
 800b33e:	b084      	sub	sp, #16
 800b340:	af00      	add	r7, sp, #0
 800b342:	6078      	str	r0, [r7, #4]
 800b344:	460b      	mov	r3, r1
 800b346:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b348:	2300      	movs	r3, #0
 800b34a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b34c:	2300      	movs	r3, #0
 800b34e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b356:	78fa      	ldrb	r2, [r7, #3]
 800b358:	4611      	mov	r1, r2
 800b35a:	4618      	mov	r0, r3
 800b35c:	f7f7 ff3a 	bl	80031d4 <HAL_HCD_HC_Halt>
 800b360:	4603      	mov	r3, r0
 800b362:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b364:	7bfb      	ldrb	r3, [r7, #15]
 800b366:	4618      	mov	r0, r3
 800b368:	f000 f89e 	bl	800b4a8 <USBH_Get_USB_Status>
 800b36c:	4603      	mov	r3, r0
 800b36e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b370:	7bbb      	ldrb	r3, [r7, #14]
}
 800b372:	4618      	mov	r0, r3
 800b374:	3710      	adds	r7, #16
 800b376:	46bd      	mov	sp, r7
 800b378:	bd80      	pop	{r7, pc}

0800b37a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800b37a:	b590      	push	{r4, r7, lr}
 800b37c:	b089      	sub	sp, #36	; 0x24
 800b37e:	af04      	add	r7, sp, #16
 800b380:	6078      	str	r0, [r7, #4]
 800b382:	4608      	mov	r0, r1
 800b384:	4611      	mov	r1, r2
 800b386:	461a      	mov	r2, r3
 800b388:	4603      	mov	r3, r0
 800b38a:	70fb      	strb	r3, [r7, #3]
 800b38c:	460b      	mov	r3, r1
 800b38e:	70bb      	strb	r3, [r7, #2]
 800b390:	4613      	mov	r3, r2
 800b392:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b394:	2300      	movs	r3, #0
 800b396:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b398:	2300      	movs	r3, #0
 800b39a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800b3a2:	787c      	ldrb	r4, [r7, #1]
 800b3a4:	78ba      	ldrb	r2, [r7, #2]
 800b3a6:	78f9      	ldrb	r1, [r7, #3]
 800b3a8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800b3ac:	9303      	str	r3, [sp, #12]
 800b3ae:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b3b0:	9302      	str	r3, [sp, #8]
 800b3b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3b4:	9301      	str	r3, [sp, #4]
 800b3b6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b3ba:	9300      	str	r3, [sp, #0]
 800b3bc:	4623      	mov	r3, r4
 800b3be:	f7f7 ff2d 	bl	800321c <HAL_HCD_HC_SubmitRequest>
 800b3c2:	4603      	mov	r3, r0
 800b3c4:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800b3c6:	7bfb      	ldrb	r3, [r7, #15]
 800b3c8:	4618      	mov	r0, r3
 800b3ca:	f000 f86d 	bl	800b4a8 <USBH_Get_USB_Status>
 800b3ce:	4603      	mov	r3, r0
 800b3d0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b3d2:	7bbb      	ldrb	r3, [r7, #14]
}
 800b3d4:	4618      	mov	r0, r3
 800b3d6:	3714      	adds	r7, #20
 800b3d8:	46bd      	mov	sp, r7
 800b3da:	bd90      	pop	{r4, r7, pc}

0800b3dc <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b3dc:	b580      	push	{r7, lr}
 800b3de:	b082      	sub	sp, #8
 800b3e0:	af00      	add	r7, sp, #0
 800b3e2:	6078      	str	r0, [r7, #4]
 800b3e4:	460b      	mov	r3, r1
 800b3e6:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b3ee:	78fa      	ldrb	r2, [r7, #3]
 800b3f0:	4611      	mov	r1, r2
 800b3f2:	4618      	mov	r0, r3
 800b3f4:	f7f8 f9c1 	bl	800377a <HAL_HCD_HC_GetURBState>
 800b3f8:	4603      	mov	r3, r0
}
 800b3fa:	4618      	mov	r0, r3
 800b3fc:	3708      	adds	r7, #8
 800b3fe:	46bd      	mov	sp, r7
 800b400:	bd80      	pop	{r7, pc}

0800b402 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800b402:	b580      	push	{r7, lr}
 800b404:	b082      	sub	sp, #8
 800b406:	af00      	add	r7, sp, #0
 800b408:	6078      	str	r0, [r7, #4]
 800b40a:	460b      	mov	r3, r1
 800b40c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800b414:	2b01      	cmp	r3, #1
 800b416:	d103      	bne.n	800b420 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800b418:	78fb      	ldrb	r3, [r7, #3]
 800b41a:	4618      	mov	r0, r3
 800b41c:	f000 f870 	bl	800b500 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800b420:	20c8      	movs	r0, #200	; 0xc8
 800b422:	f7f6 fef1 	bl	8002208 <HAL_Delay>
  return USBH_OK;
 800b426:	2300      	movs	r3, #0
}
 800b428:	4618      	mov	r0, r3
 800b42a:	3708      	adds	r7, #8
 800b42c:	46bd      	mov	sp, r7
 800b42e:	bd80      	pop	{r7, pc}

0800b430 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800b430:	b480      	push	{r7}
 800b432:	b085      	sub	sp, #20
 800b434:	af00      	add	r7, sp, #0
 800b436:	6078      	str	r0, [r7, #4]
 800b438:	460b      	mov	r3, r1
 800b43a:	70fb      	strb	r3, [r7, #3]
 800b43c:	4613      	mov	r3, r2
 800b43e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b446:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800b448:	78fb      	ldrb	r3, [r7, #3]
 800b44a:	68fa      	ldr	r2, [r7, #12]
 800b44c:	212c      	movs	r1, #44	; 0x2c
 800b44e:	fb01 f303 	mul.w	r3, r1, r3
 800b452:	4413      	add	r3, r2
 800b454:	333b      	adds	r3, #59	; 0x3b
 800b456:	781b      	ldrb	r3, [r3, #0]
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d009      	beq.n	800b470 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800b45c:	78fb      	ldrb	r3, [r7, #3]
 800b45e:	68fa      	ldr	r2, [r7, #12]
 800b460:	212c      	movs	r1, #44	; 0x2c
 800b462:	fb01 f303 	mul.w	r3, r1, r3
 800b466:	4413      	add	r3, r2
 800b468:	3354      	adds	r3, #84	; 0x54
 800b46a:	78ba      	ldrb	r2, [r7, #2]
 800b46c:	701a      	strb	r2, [r3, #0]
 800b46e:	e008      	b.n	800b482 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800b470:	78fb      	ldrb	r3, [r7, #3]
 800b472:	68fa      	ldr	r2, [r7, #12]
 800b474:	212c      	movs	r1, #44	; 0x2c
 800b476:	fb01 f303 	mul.w	r3, r1, r3
 800b47a:	4413      	add	r3, r2
 800b47c:	3355      	adds	r3, #85	; 0x55
 800b47e:	78ba      	ldrb	r2, [r7, #2]
 800b480:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800b482:	2300      	movs	r3, #0
}
 800b484:	4618      	mov	r0, r3
 800b486:	3714      	adds	r7, #20
 800b488:	46bd      	mov	sp, r7
 800b48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b48e:	4770      	bx	lr

0800b490 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800b490:	b580      	push	{r7, lr}
 800b492:	b082      	sub	sp, #8
 800b494:	af00      	add	r7, sp, #0
 800b496:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800b498:	6878      	ldr	r0, [r7, #4]
 800b49a:	f7f6 feb5 	bl	8002208 <HAL_Delay>
}
 800b49e:	bf00      	nop
 800b4a0:	3708      	adds	r7, #8
 800b4a2:	46bd      	mov	sp, r7
 800b4a4:	bd80      	pop	{r7, pc}
	...

0800b4a8 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b4a8:	b480      	push	{r7}
 800b4aa:	b085      	sub	sp, #20
 800b4ac:	af00      	add	r7, sp, #0
 800b4ae:	4603      	mov	r3, r0
 800b4b0:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b4b2:	2300      	movs	r3, #0
 800b4b4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b4b6:	79fb      	ldrb	r3, [r7, #7]
 800b4b8:	2b03      	cmp	r3, #3
 800b4ba:	d817      	bhi.n	800b4ec <USBH_Get_USB_Status+0x44>
 800b4bc:	a201      	add	r2, pc, #4	; (adr r2, 800b4c4 <USBH_Get_USB_Status+0x1c>)
 800b4be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4c2:	bf00      	nop
 800b4c4:	0800b4d5 	.word	0x0800b4d5
 800b4c8:	0800b4db 	.word	0x0800b4db
 800b4cc:	0800b4e1 	.word	0x0800b4e1
 800b4d0:	0800b4e7 	.word	0x0800b4e7
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800b4d4:	2300      	movs	r3, #0
 800b4d6:	73fb      	strb	r3, [r7, #15]
    break;
 800b4d8:	e00b      	b.n	800b4f2 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800b4da:	2302      	movs	r3, #2
 800b4dc:	73fb      	strb	r3, [r7, #15]
    break;
 800b4de:	e008      	b.n	800b4f2 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800b4e0:	2301      	movs	r3, #1
 800b4e2:	73fb      	strb	r3, [r7, #15]
    break;
 800b4e4:	e005      	b.n	800b4f2 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800b4e6:	2302      	movs	r3, #2
 800b4e8:	73fb      	strb	r3, [r7, #15]
    break;
 800b4ea:	e002      	b.n	800b4f2 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800b4ec:	2302      	movs	r3, #2
 800b4ee:	73fb      	strb	r3, [r7, #15]
    break;
 800b4f0:	bf00      	nop
  }
  return usb_status;
 800b4f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4f4:	4618      	mov	r0, r3
 800b4f6:	3714      	adds	r7, #20
 800b4f8:	46bd      	mov	sp, r7
 800b4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4fe:	4770      	bx	lr

0800b500 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800b500:	b580      	push	{r7, lr}
 800b502:	b084      	sub	sp, #16
 800b504:	af00      	add	r7, sp, #0
 800b506:	4603      	mov	r3, r0
 800b508:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800b50a:	79fb      	ldrb	r3, [r7, #7]
 800b50c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800b50e:	79fb      	ldrb	r3, [r7, #7]
 800b510:	2b00      	cmp	r3, #0
 800b512:	d102      	bne.n	800b51a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800b514:	2300      	movs	r3, #0
 800b516:	73fb      	strb	r3, [r7, #15]
 800b518:	e001      	b.n	800b51e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800b51a:	2301      	movs	r3, #1
 800b51c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800b51e:	7bfb      	ldrb	r3, [r7, #15]
 800b520:	461a      	mov	r2, r3
 800b522:	2101      	movs	r1, #1
 800b524:	4803      	ldr	r0, [pc, #12]	; (800b534 <MX_DriverVbusFS+0x34>)
 800b526:	f7f7 fd4b 	bl	8002fc0 <HAL_GPIO_WritePin>
}
 800b52a:	bf00      	nop
 800b52c:	3710      	adds	r7, #16
 800b52e:	46bd      	mov	sp, r7
 800b530:	bd80      	pop	{r7, pc}
 800b532:	bf00      	nop
 800b534:	40020800 	.word	0x40020800

0800b538 <__errno>:
 800b538:	4b01      	ldr	r3, [pc, #4]	; (800b540 <__errno+0x8>)
 800b53a:	6818      	ldr	r0, [r3, #0]
 800b53c:	4770      	bx	lr
 800b53e:	bf00      	nop
 800b540:	20000034 	.word	0x20000034

0800b544 <__libc_init_array>:
 800b544:	b570      	push	{r4, r5, r6, lr}
 800b546:	4d0d      	ldr	r5, [pc, #52]	; (800b57c <__libc_init_array+0x38>)
 800b548:	4c0d      	ldr	r4, [pc, #52]	; (800b580 <__libc_init_array+0x3c>)
 800b54a:	1b64      	subs	r4, r4, r5
 800b54c:	10a4      	asrs	r4, r4, #2
 800b54e:	2600      	movs	r6, #0
 800b550:	42a6      	cmp	r6, r4
 800b552:	d109      	bne.n	800b568 <__libc_init_array+0x24>
 800b554:	4d0b      	ldr	r5, [pc, #44]	; (800b584 <__libc_init_array+0x40>)
 800b556:	4c0c      	ldr	r4, [pc, #48]	; (800b588 <__libc_init_array+0x44>)
 800b558:	f000 f8f8 	bl	800b74c <_init>
 800b55c:	1b64      	subs	r4, r4, r5
 800b55e:	10a4      	asrs	r4, r4, #2
 800b560:	2600      	movs	r6, #0
 800b562:	42a6      	cmp	r6, r4
 800b564:	d105      	bne.n	800b572 <__libc_init_array+0x2e>
 800b566:	bd70      	pop	{r4, r5, r6, pc}
 800b568:	f855 3b04 	ldr.w	r3, [r5], #4
 800b56c:	4798      	blx	r3
 800b56e:	3601      	adds	r6, #1
 800b570:	e7ee      	b.n	800b550 <__libc_init_array+0xc>
 800b572:	f855 3b04 	ldr.w	r3, [r5], #4
 800b576:	4798      	blx	r3
 800b578:	3601      	adds	r6, #1
 800b57a:	e7f2      	b.n	800b562 <__libc_init_array+0x1e>
 800b57c:	0800b8f0 	.word	0x0800b8f0
 800b580:	0800b8f0 	.word	0x0800b8f0
 800b584:	0800b8f0 	.word	0x0800b8f0
 800b588:	0800b8f4 	.word	0x0800b8f4

0800b58c <malloc>:
 800b58c:	4b02      	ldr	r3, [pc, #8]	; (800b598 <malloc+0xc>)
 800b58e:	4601      	mov	r1, r0
 800b590:	6818      	ldr	r0, [r3, #0]
 800b592:	f000 b863 	b.w	800b65c <_malloc_r>
 800b596:	bf00      	nop
 800b598:	20000034 	.word	0x20000034

0800b59c <free>:
 800b59c:	4b02      	ldr	r3, [pc, #8]	; (800b5a8 <free+0xc>)
 800b59e:	4601      	mov	r1, r0
 800b5a0:	6818      	ldr	r0, [r3, #0]
 800b5a2:	f000 b80b 	b.w	800b5bc <_free_r>
 800b5a6:	bf00      	nop
 800b5a8:	20000034 	.word	0x20000034

0800b5ac <memset>:
 800b5ac:	4402      	add	r2, r0
 800b5ae:	4603      	mov	r3, r0
 800b5b0:	4293      	cmp	r3, r2
 800b5b2:	d100      	bne.n	800b5b6 <memset+0xa>
 800b5b4:	4770      	bx	lr
 800b5b6:	f803 1b01 	strb.w	r1, [r3], #1
 800b5ba:	e7f9      	b.n	800b5b0 <memset+0x4>

0800b5bc <_free_r>:
 800b5bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b5be:	2900      	cmp	r1, #0
 800b5c0:	d048      	beq.n	800b654 <_free_r+0x98>
 800b5c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b5c6:	9001      	str	r0, [sp, #4]
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	f1a1 0404 	sub.w	r4, r1, #4
 800b5ce:	bfb8      	it	lt
 800b5d0:	18e4      	addlt	r4, r4, r3
 800b5d2:	f000 f8ad 	bl	800b730 <__malloc_lock>
 800b5d6:	4a20      	ldr	r2, [pc, #128]	; (800b658 <_free_r+0x9c>)
 800b5d8:	9801      	ldr	r0, [sp, #4]
 800b5da:	6813      	ldr	r3, [r2, #0]
 800b5dc:	4615      	mov	r5, r2
 800b5de:	b933      	cbnz	r3, 800b5ee <_free_r+0x32>
 800b5e0:	6063      	str	r3, [r4, #4]
 800b5e2:	6014      	str	r4, [r2, #0]
 800b5e4:	b003      	add	sp, #12
 800b5e6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b5ea:	f000 b8a7 	b.w	800b73c <__malloc_unlock>
 800b5ee:	42a3      	cmp	r3, r4
 800b5f0:	d90b      	bls.n	800b60a <_free_r+0x4e>
 800b5f2:	6821      	ldr	r1, [r4, #0]
 800b5f4:	1862      	adds	r2, r4, r1
 800b5f6:	4293      	cmp	r3, r2
 800b5f8:	bf04      	itt	eq
 800b5fa:	681a      	ldreq	r2, [r3, #0]
 800b5fc:	685b      	ldreq	r3, [r3, #4]
 800b5fe:	6063      	str	r3, [r4, #4]
 800b600:	bf04      	itt	eq
 800b602:	1852      	addeq	r2, r2, r1
 800b604:	6022      	streq	r2, [r4, #0]
 800b606:	602c      	str	r4, [r5, #0]
 800b608:	e7ec      	b.n	800b5e4 <_free_r+0x28>
 800b60a:	461a      	mov	r2, r3
 800b60c:	685b      	ldr	r3, [r3, #4]
 800b60e:	b10b      	cbz	r3, 800b614 <_free_r+0x58>
 800b610:	42a3      	cmp	r3, r4
 800b612:	d9fa      	bls.n	800b60a <_free_r+0x4e>
 800b614:	6811      	ldr	r1, [r2, #0]
 800b616:	1855      	adds	r5, r2, r1
 800b618:	42a5      	cmp	r5, r4
 800b61a:	d10b      	bne.n	800b634 <_free_r+0x78>
 800b61c:	6824      	ldr	r4, [r4, #0]
 800b61e:	4421      	add	r1, r4
 800b620:	1854      	adds	r4, r2, r1
 800b622:	42a3      	cmp	r3, r4
 800b624:	6011      	str	r1, [r2, #0]
 800b626:	d1dd      	bne.n	800b5e4 <_free_r+0x28>
 800b628:	681c      	ldr	r4, [r3, #0]
 800b62a:	685b      	ldr	r3, [r3, #4]
 800b62c:	6053      	str	r3, [r2, #4]
 800b62e:	4421      	add	r1, r4
 800b630:	6011      	str	r1, [r2, #0]
 800b632:	e7d7      	b.n	800b5e4 <_free_r+0x28>
 800b634:	d902      	bls.n	800b63c <_free_r+0x80>
 800b636:	230c      	movs	r3, #12
 800b638:	6003      	str	r3, [r0, #0]
 800b63a:	e7d3      	b.n	800b5e4 <_free_r+0x28>
 800b63c:	6825      	ldr	r5, [r4, #0]
 800b63e:	1961      	adds	r1, r4, r5
 800b640:	428b      	cmp	r3, r1
 800b642:	bf04      	itt	eq
 800b644:	6819      	ldreq	r1, [r3, #0]
 800b646:	685b      	ldreq	r3, [r3, #4]
 800b648:	6063      	str	r3, [r4, #4]
 800b64a:	bf04      	itt	eq
 800b64c:	1949      	addeq	r1, r1, r5
 800b64e:	6021      	streq	r1, [r4, #0]
 800b650:	6054      	str	r4, [r2, #4]
 800b652:	e7c7      	b.n	800b5e4 <_free_r+0x28>
 800b654:	b003      	add	sp, #12
 800b656:	bd30      	pop	{r4, r5, pc}
 800b658:	200000cc 	.word	0x200000cc

0800b65c <_malloc_r>:
 800b65c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b65e:	1ccd      	adds	r5, r1, #3
 800b660:	f025 0503 	bic.w	r5, r5, #3
 800b664:	3508      	adds	r5, #8
 800b666:	2d0c      	cmp	r5, #12
 800b668:	bf38      	it	cc
 800b66a:	250c      	movcc	r5, #12
 800b66c:	2d00      	cmp	r5, #0
 800b66e:	4606      	mov	r6, r0
 800b670:	db01      	blt.n	800b676 <_malloc_r+0x1a>
 800b672:	42a9      	cmp	r1, r5
 800b674:	d903      	bls.n	800b67e <_malloc_r+0x22>
 800b676:	230c      	movs	r3, #12
 800b678:	6033      	str	r3, [r6, #0]
 800b67a:	2000      	movs	r0, #0
 800b67c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b67e:	f000 f857 	bl	800b730 <__malloc_lock>
 800b682:	4921      	ldr	r1, [pc, #132]	; (800b708 <_malloc_r+0xac>)
 800b684:	680a      	ldr	r2, [r1, #0]
 800b686:	4614      	mov	r4, r2
 800b688:	b99c      	cbnz	r4, 800b6b2 <_malloc_r+0x56>
 800b68a:	4f20      	ldr	r7, [pc, #128]	; (800b70c <_malloc_r+0xb0>)
 800b68c:	683b      	ldr	r3, [r7, #0]
 800b68e:	b923      	cbnz	r3, 800b69a <_malloc_r+0x3e>
 800b690:	4621      	mov	r1, r4
 800b692:	4630      	mov	r0, r6
 800b694:	f000 f83c 	bl	800b710 <_sbrk_r>
 800b698:	6038      	str	r0, [r7, #0]
 800b69a:	4629      	mov	r1, r5
 800b69c:	4630      	mov	r0, r6
 800b69e:	f000 f837 	bl	800b710 <_sbrk_r>
 800b6a2:	1c43      	adds	r3, r0, #1
 800b6a4:	d123      	bne.n	800b6ee <_malloc_r+0x92>
 800b6a6:	230c      	movs	r3, #12
 800b6a8:	6033      	str	r3, [r6, #0]
 800b6aa:	4630      	mov	r0, r6
 800b6ac:	f000 f846 	bl	800b73c <__malloc_unlock>
 800b6b0:	e7e3      	b.n	800b67a <_malloc_r+0x1e>
 800b6b2:	6823      	ldr	r3, [r4, #0]
 800b6b4:	1b5b      	subs	r3, r3, r5
 800b6b6:	d417      	bmi.n	800b6e8 <_malloc_r+0x8c>
 800b6b8:	2b0b      	cmp	r3, #11
 800b6ba:	d903      	bls.n	800b6c4 <_malloc_r+0x68>
 800b6bc:	6023      	str	r3, [r4, #0]
 800b6be:	441c      	add	r4, r3
 800b6c0:	6025      	str	r5, [r4, #0]
 800b6c2:	e004      	b.n	800b6ce <_malloc_r+0x72>
 800b6c4:	6863      	ldr	r3, [r4, #4]
 800b6c6:	42a2      	cmp	r2, r4
 800b6c8:	bf0c      	ite	eq
 800b6ca:	600b      	streq	r3, [r1, #0]
 800b6cc:	6053      	strne	r3, [r2, #4]
 800b6ce:	4630      	mov	r0, r6
 800b6d0:	f000 f834 	bl	800b73c <__malloc_unlock>
 800b6d4:	f104 000b 	add.w	r0, r4, #11
 800b6d8:	1d23      	adds	r3, r4, #4
 800b6da:	f020 0007 	bic.w	r0, r0, #7
 800b6de:	1ac2      	subs	r2, r0, r3
 800b6e0:	d0cc      	beq.n	800b67c <_malloc_r+0x20>
 800b6e2:	1a1b      	subs	r3, r3, r0
 800b6e4:	50a3      	str	r3, [r4, r2]
 800b6e6:	e7c9      	b.n	800b67c <_malloc_r+0x20>
 800b6e8:	4622      	mov	r2, r4
 800b6ea:	6864      	ldr	r4, [r4, #4]
 800b6ec:	e7cc      	b.n	800b688 <_malloc_r+0x2c>
 800b6ee:	1cc4      	adds	r4, r0, #3
 800b6f0:	f024 0403 	bic.w	r4, r4, #3
 800b6f4:	42a0      	cmp	r0, r4
 800b6f6:	d0e3      	beq.n	800b6c0 <_malloc_r+0x64>
 800b6f8:	1a21      	subs	r1, r4, r0
 800b6fa:	4630      	mov	r0, r6
 800b6fc:	f000 f808 	bl	800b710 <_sbrk_r>
 800b700:	3001      	adds	r0, #1
 800b702:	d1dd      	bne.n	800b6c0 <_malloc_r+0x64>
 800b704:	e7cf      	b.n	800b6a6 <_malloc_r+0x4a>
 800b706:	bf00      	nop
 800b708:	200000cc 	.word	0x200000cc
 800b70c:	200000d0 	.word	0x200000d0

0800b710 <_sbrk_r>:
 800b710:	b538      	push	{r3, r4, r5, lr}
 800b712:	4d06      	ldr	r5, [pc, #24]	; (800b72c <_sbrk_r+0x1c>)
 800b714:	2300      	movs	r3, #0
 800b716:	4604      	mov	r4, r0
 800b718:	4608      	mov	r0, r1
 800b71a:	602b      	str	r3, [r5, #0]
 800b71c:	f7f5 ff1a 	bl	8001554 <_sbrk>
 800b720:	1c43      	adds	r3, r0, #1
 800b722:	d102      	bne.n	800b72a <_sbrk_r+0x1a>
 800b724:	682b      	ldr	r3, [r5, #0]
 800b726:	b103      	cbz	r3, 800b72a <_sbrk_r+0x1a>
 800b728:	6023      	str	r3, [r4, #0]
 800b72a:	bd38      	pop	{r3, r4, r5, pc}
 800b72c:	20000d60 	.word	0x20000d60

0800b730 <__malloc_lock>:
 800b730:	4801      	ldr	r0, [pc, #4]	; (800b738 <__malloc_lock+0x8>)
 800b732:	f000 b809 	b.w	800b748 <__retarget_lock_acquire_recursive>
 800b736:	bf00      	nop
 800b738:	20000d68 	.word	0x20000d68

0800b73c <__malloc_unlock>:
 800b73c:	4801      	ldr	r0, [pc, #4]	; (800b744 <__malloc_unlock+0x8>)
 800b73e:	f000 b804 	b.w	800b74a <__retarget_lock_release_recursive>
 800b742:	bf00      	nop
 800b744:	20000d68 	.word	0x20000d68

0800b748 <__retarget_lock_acquire_recursive>:
 800b748:	4770      	bx	lr

0800b74a <__retarget_lock_release_recursive>:
 800b74a:	4770      	bx	lr

0800b74c <_init>:
 800b74c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b74e:	bf00      	nop
 800b750:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b752:	bc08      	pop	{r3}
 800b754:	469e      	mov	lr, r3
 800b756:	4770      	bx	lr

0800b758 <_fini>:
 800b758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b75a:	bf00      	nop
 800b75c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b75e:	bc08      	pop	{r3}
 800b760:	469e      	mov	lr, r3
 800b762:	4770      	bx	lr
