
CapTouch.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ccf0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d8  0800ce80  0800ce80  0001ce80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d058  0800d058  0002009c  2**0
                  CONTENTS
  4 .ARM          00000008  0800d058  0800d058  0001d058  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d060  0800d060  0002009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d060  0800d060  0001d060  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d064  0800d064  0001d064  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  0800d068  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002009c  2**0
                  CONTENTS
 10 .bss          00000da0  2000009c  2000009c  0002009c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000e3c  20000e3c  0002009c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000264d6  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004b58  00000000  00000000  000465a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001a10  00000000  00000000  0004b100  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000018b8  00000000  00000000  0004cb10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026105  00000000  00000000  0004e3c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000227b5  00000000  00000000  000744cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d6df7  00000000  00000000  00096c82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0016da79  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007724  00000000  00000000  0016dacc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000009c 	.word	0x2000009c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ce68 	.word	0x0800ce68

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000a0 	.word	0x200000a0
 80001cc:	0800ce68 	.word	0x0800ce68

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpun>:
 8000b1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b24:	d102      	bne.n	8000b2c <__aeabi_dcmpun+0x10>
 8000b26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b2a:	d10a      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x20>
 8000b36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b3a:	d102      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	f04f 0001 	mov.w	r0, #1
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_d2uiz>:
 8000b48:	004a      	lsls	r2, r1, #1
 8000b4a:	d211      	bcs.n	8000b70 <__aeabi_d2uiz+0x28>
 8000b4c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b50:	d211      	bcs.n	8000b76 <__aeabi_d2uiz+0x2e>
 8000b52:	d50d      	bpl.n	8000b70 <__aeabi_d2uiz+0x28>
 8000b54:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b5c:	d40e      	bmi.n	8000b7c <__aeabi_d2uiz+0x34>
 8000b5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b6e:	4770      	bx	lr
 8000b70:	f04f 0000 	mov.w	r0, #0
 8000b74:	4770      	bx	lr
 8000b76:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_d2uiz+0x3a>
 8000b7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0000 	mov.w	r0, #0
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_uldivmod>:
 8000b88:	b953      	cbnz	r3, 8000ba0 <__aeabi_uldivmod+0x18>
 8000b8a:	b94a      	cbnz	r2, 8000ba0 <__aeabi_uldivmod+0x18>
 8000b8c:	2900      	cmp	r1, #0
 8000b8e:	bf08      	it	eq
 8000b90:	2800      	cmpeq	r0, #0
 8000b92:	bf1c      	itt	ne
 8000b94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b9c:	f000 b96e 	b.w	8000e7c <__aeabi_idiv0>
 8000ba0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ba4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ba8:	f000 f806 	bl	8000bb8 <__udivmoddi4>
 8000bac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bb4:	b004      	add	sp, #16
 8000bb6:	4770      	bx	lr

08000bb8 <__udivmoddi4>:
 8000bb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bbc:	9d08      	ldr	r5, [sp, #32]
 8000bbe:	4604      	mov	r4, r0
 8000bc0:	468c      	mov	ip, r1
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	f040 8083 	bne.w	8000cce <__udivmoddi4+0x116>
 8000bc8:	428a      	cmp	r2, r1
 8000bca:	4617      	mov	r7, r2
 8000bcc:	d947      	bls.n	8000c5e <__udivmoddi4+0xa6>
 8000bce:	fab2 f282 	clz	r2, r2
 8000bd2:	b142      	cbz	r2, 8000be6 <__udivmoddi4+0x2e>
 8000bd4:	f1c2 0020 	rsb	r0, r2, #32
 8000bd8:	fa24 f000 	lsr.w	r0, r4, r0
 8000bdc:	4091      	lsls	r1, r2
 8000bde:	4097      	lsls	r7, r2
 8000be0:	ea40 0c01 	orr.w	ip, r0, r1
 8000be4:	4094      	lsls	r4, r2
 8000be6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000bea:	0c23      	lsrs	r3, r4, #16
 8000bec:	fbbc f6f8 	udiv	r6, ip, r8
 8000bf0:	fa1f fe87 	uxth.w	lr, r7
 8000bf4:	fb08 c116 	mls	r1, r8, r6, ip
 8000bf8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bfc:	fb06 f10e 	mul.w	r1, r6, lr
 8000c00:	4299      	cmp	r1, r3
 8000c02:	d909      	bls.n	8000c18 <__udivmoddi4+0x60>
 8000c04:	18fb      	adds	r3, r7, r3
 8000c06:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c0a:	f080 8119 	bcs.w	8000e40 <__udivmoddi4+0x288>
 8000c0e:	4299      	cmp	r1, r3
 8000c10:	f240 8116 	bls.w	8000e40 <__udivmoddi4+0x288>
 8000c14:	3e02      	subs	r6, #2
 8000c16:	443b      	add	r3, r7
 8000c18:	1a5b      	subs	r3, r3, r1
 8000c1a:	b2a4      	uxth	r4, r4
 8000c1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c20:	fb08 3310 	mls	r3, r8, r0, r3
 8000c24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c28:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c2c:	45a6      	cmp	lr, r4
 8000c2e:	d909      	bls.n	8000c44 <__udivmoddi4+0x8c>
 8000c30:	193c      	adds	r4, r7, r4
 8000c32:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c36:	f080 8105 	bcs.w	8000e44 <__udivmoddi4+0x28c>
 8000c3a:	45a6      	cmp	lr, r4
 8000c3c:	f240 8102 	bls.w	8000e44 <__udivmoddi4+0x28c>
 8000c40:	3802      	subs	r0, #2
 8000c42:	443c      	add	r4, r7
 8000c44:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c48:	eba4 040e 	sub.w	r4, r4, lr
 8000c4c:	2600      	movs	r6, #0
 8000c4e:	b11d      	cbz	r5, 8000c58 <__udivmoddi4+0xa0>
 8000c50:	40d4      	lsrs	r4, r2
 8000c52:	2300      	movs	r3, #0
 8000c54:	e9c5 4300 	strd	r4, r3, [r5]
 8000c58:	4631      	mov	r1, r6
 8000c5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c5e:	b902      	cbnz	r2, 8000c62 <__udivmoddi4+0xaa>
 8000c60:	deff      	udf	#255	; 0xff
 8000c62:	fab2 f282 	clz	r2, r2
 8000c66:	2a00      	cmp	r2, #0
 8000c68:	d150      	bne.n	8000d0c <__udivmoddi4+0x154>
 8000c6a:	1bcb      	subs	r3, r1, r7
 8000c6c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c70:	fa1f f887 	uxth.w	r8, r7
 8000c74:	2601      	movs	r6, #1
 8000c76:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c7a:	0c21      	lsrs	r1, r4, #16
 8000c7c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c84:	fb08 f30c 	mul.w	r3, r8, ip
 8000c88:	428b      	cmp	r3, r1
 8000c8a:	d907      	bls.n	8000c9c <__udivmoddi4+0xe4>
 8000c8c:	1879      	adds	r1, r7, r1
 8000c8e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000c92:	d202      	bcs.n	8000c9a <__udivmoddi4+0xe2>
 8000c94:	428b      	cmp	r3, r1
 8000c96:	f200 80e9 	bhi.w	8000e6c <__udivmoddi4+0x2b4>
 8000c9a:	4684      	mov	ip, r0
 8000c9c:	1ac9      	subs	r1, r1, r3
 8000c9e:	b2a3      	uxth	r3, r4
 8000ca0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ca4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ca8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cac:	fb08 f800 	mul.w	r8, r8, r0
 8000cb0:	45a0      	cmp	r8, r4
 8000cb2:	d907      	bls.n	8000cc4 <__udivmoddi4+0x10c>
 8000cb4:	193c      	adds	r4, r7, r4
 8000cb6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cba:	d202      	bcs.n	8000cc2 <__udivmoddi4+0x10a>
 8000cbc:	45a0      	cmp	r8, r4
 8000cbe:	f200 80d9 	bhi.w	8000e74 <__udivmoddi4+0x2bc>
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	eba4 0408 	sub.w	r4, r4, r8
 8000cc8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ccc:	e7bf      	b.n	8000c4e <__udivmoddi4+0x96>
 8000cce:	428b      	cmp	r3, r1
 8000cd0:	d909      	bls.n	8000ce6 <__udivmoddi4+0x12e>
 8000cd2:	2d00      	cmp	r5, #0
 8000cd4:	f000 80b1 	beq.w	8000e3a <__udivmoddi4+0x282>
 8000cd8:	2600      	movs	r6, #0
 8000cda:	e9c5 0100 	strd	r0, r1, [r5]
 8000cde:	4630      	mov	r0, r6
 8000ce0:	4631      	mov	r1, r6
 8000ce2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce6:	fab3 f683 	clz	r6, r3
 8000cea:	2e00      	cmp	r6, #0
 8000cec:	d14a      	bne.n	8000d84 <__udivmoddi4+0x1cc>
 8000cee:	428b      	cmp	r3, r1
 8000cf0:	d302      	bcc.n	8000cf8 <__udivmoddi4+0x140>
 8000cf2:	4282      	cmp	r2, r0
 8000cf4:	f200 80b8 	bhi.w	8000e68 <__udivmoddi4+0x2b0>
 8000cf8:	1a84      	subs	r4, r0, r2
 8000cfa:	eb61 0103 	sbc.w	r1, r1, r3
 8000cfe:	2001      	movs	r0, #1
 8000d00:	468c      	mov	ip, r1
 8000d02:	2d00      	cmp	r5, #0
 8000d04:	d0a8      	beq.n	8000c58 <__udivmoddi4+0xa0>
 8000d06:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d0a:	e7a5      	b.n	8000c58 <__udivmoddi4+0xa0>
 8000d0c:	f1c2 0320 	rsb	r3, r2, #32
 8000d10:	fa20 f603 	lsr.w	r6, r0, r3
 8000d14:	4097      	lsls	r7, r2
 8000d16:	fa01 f002 	lsl.w	r0, r1, r2
 8000d1a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d1e:	40d9      	lsrs	r1, r3
 8000d20:	4330      	orrs	r0, r6
 8000d22:	0c03      	lsrs	r3, r0, #16
 8000d24:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d28:	fa1f f887 	uxth.w	r8, r7
 8000d2c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d30:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d34:	fb06 f108 	mul.w	r1, r6, r8
 8000d38:	4299      	cmp	r1, r3
 8000d3a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d3e:	d909      	bls.n	8000d54 <__udivmoddi4+0x19c>
 8000d40:	18fb      	adds	r3, r7, r3
 8000d42:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000d46:	f080 808d 	bcs.w	8000e64 <__udivmoddi4+0x2ac>
 8000d4a:	4299      	cmp	r1, r3
 8000d4c:	f240 808a 	bls.w	8000e64 <__udivmoddi4+0x2ac>
 8000d50:	3e02      	subs	r6, #2
 8000d52:	443b      	add	r3, r7
 8000d54:	1a5b      	subs	r3, r3, r1
 8000d56:	b281      	uxth	r1, r0
 8000d58:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d5c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d60:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d64:	fb00 f308 	mul.w	r3, r0, r8
 8000d68:	428b      	cmp	r3, r1
 8000d6a:	d907      	bls.n	8000d7c <__udivmoddi4+0x1c4>
 8000d6c:	1879      	adds	r1, r7, r1
 8000d6e:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000d72:	d273      	bcs.n	8000e5c <__udivmoddi4+0x2a4>
 8000d74:	428b      	cmp	r3, r1
 8000d76:	d971      	bls.n	8000e5c <__udivmoddi4+0x2a4>
 8000d78:	3802      	subs	r0, #2
 8000d7a:	4439      	add	r1, r7
 8000d7c:	1acb      	subs	r3, r1, r3
 8000d7e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d82:	e778      	b.n	8000c76 <__udivmoddi4+0xbe>
 8000d84:	f1c6 0c20 	rsb	ip, r6, #32
 8000d88:	fa03 f406 	lsl.w	r4, r3, r6
 8000d8c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d90:	431c      	orrs	r4, r3
 8000d92:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d96:	fa01 f306 	lsl.w	r3, r1, r6
 8000d9a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d9e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000da2:	431f      	orrs	r7, r3
 8000da4:	0c3b      	lsrs	r3, r7, #16
 8000da6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000daa:	fa1f f884 	uxth.w	r8, r4
 8000dae:	fb0e 1119 	mls	r1, lr, r9, r1
 8000db2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000db6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dba:	458a      	cmp	sl, r1
 8000dbc:	fa02 f206 	lsl.w	r2, r2, r6
 8000dc0:	fa00 f306 	lsl.w	r3, r0, r6
 8000dc4:	d908      	bls.n	8000dd8 <__udivmoddi4+0x220>
 8000dc6:	1861      	adds	r1, r4, r1
 8000dc8:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000dcc:	d248      	bcs.n	8000e60 <__udivmoddi4+0x2a8>
 8000dce:	458a      	cmp	sl, r1
 8000dd0:	d946      	bls.n	8000e60 <__udivmoddi4+0x2a8>
 8000dd2:	f1a9 0902 	sub.w	r9, r9, #2
 8000dd6:	4421      	add	r1, r4
 8000dd8:	eba1 010a 	sub.w	r1, r1, sl
 8000ddc:	b2bf      	uxth	r7, r7
 8000dde:	fbb1 f0fe 	udiv	r0, r1, lr
 8000de2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000de6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000dea:	fb00 f808 	mul.w	r8, r0, r8
 8000dee:	45b8      	cmp	r8, r7
 8000df0:	d907      	bls.n	8000e02 <__udivmoddi4+0x24a>
 8000df2:	19e7      	adds	r7, r4, r7
 8000df4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000df8:	d22e      	bcs.n	8000e58 <__udivmoddi4+0x2a0>
 8000dfa:	45b8      	cmp	r8, r7
 8000dfc:	d92c      	bls.n	8000e58 <__udivmoddi4+0x2a0>
 8000dfe:	3802      	subs	r0, #2
 8000e00:	4427      	add	r7, r4
 8000e02:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e06:	eba7 0708 	sub.w	r7, r7, r8
 8000e0a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e0e:	454f      	cmp	r7, r9
 8000e10:	46c6      	mov	lr, r8
 8000e12:	4649      	mov	r1, r9
 8000e14:	d31a      	bcc.n	8000e4c <__udivmoddi4+0x294>
 8000e16:	d017      	beq.n	8000e48 <__udivmoddi4+0x290>
 8000e18:	b15d      	cbz	r5, 8000e32 <__udivmoddi4+0x27a>
 8000e1a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e1e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e22:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e26:	40f2      	lsrs	r2, r6
 8000e28:	ea4c 0202 	orr.w	r2, ip, r2
 8000e2c:	40f7      	lsrs	r7, r6
 8000e2e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e32:	2600      	movs	r6, #0
 8000e34:	4631      	mov	r1, r6
 8000e36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e3a:	462e      	mov	r6, r5
 8000e3c:	4628      	mov	r0, r5
 8000e3e:	e70b      	b.n	8000c58 <__udivmoddi4+0xa0>
 8000e40:	4606      	mov	r6, r0
 8000e42:	e6e9      	b.n	8000c18 <__udivmoddi4+0x60>
 8000e44:	4618      	mov	r0, r3
 8000e46:	e6fd      	b.n	8000c44 <__udivmoddi4+0x8c>
 8000e48:	4543      	cmp	r3, r8
 8000e4a:	d2e5      	bcs.n	8000e18 <__udivmoddi4+0x260>
 8000e4c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e50:	eb69 0104 	sbc.w	r1, r9, r4
 8000e54:	3801      	subs	r0, #1
 8000e56:	e7df      	b.n	8000e18 <__udivmoddi4+0x260>
 8000e58:	4608      	mov	r0, r1
 8000e5a:	e7d2      	b.n	8000e02 <__udivmoddi4+0x24a>
 8000e5c:	4660      	mov	r0, ip
 8000e5e:	e78d      	b.n	8000d7c <__udivmoddi4+0x1c4>
 8000e60:	4681      	mov	r9, r0
 8000e62:	e7b9      	b.n	8000dd8 <__udivmoddi4+0x220>
 8000e64:	4666      	mov	r6, ip
 8000e66:	e775      	b.n	8000d54 <__udivmoddi4+0x19c>
 8000e68:	4630      	mov	r0, r6
 8000e6a:	e74a      	b.n	8000d02 <__udivmoddi4+0x14a>
 8000e6c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e70:	4439      	add	r1, r7
 8000e72:	e713      	b.n	8000c9c <__udivmoddi4+0xe4>
 8000e74:	3802      	subs	r0, #2
 8000e76:	443c      	add	r4, r7
 8000e78:	e724      	b.n	8000cc4 <__udivmoddi4+0x10c>
 8000e7a:	bf00      	nop

08000e7c <__aeabi_idiv0>:
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop

08000e80 <visInit>:




void visInit()
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0

	// 4 parallel output LED strips needs 18% overhead during TX
	// 8 parallel output LED strips overhead is 8us of 30us period which is 28% - see the debug output PD15/13

	// If you need more parallel LED strips, increase the WS2812_BUFFER_COUNT value
	for( i = 0; i < WS2812_BUFFER_COUNT; i++)
 8000e86:	2300      	movs	r3, #0
 8000e88:	71fb      	strb	r3, [r7, #7]
 8000e8a:	e02b      	b.n	8000ee4 <visInit+0x64>
	{

		// Set output channel/pin, GPIO_PIN_0 = 0, for GPIO_PIN_5 = 5 - this has to correspond to WS2812B_PINS
		ws2812b.item[i].channel = 1;
 8000e8c:	79fb      	ldrb	r3, [r7, #7]
 8000e8e:	4a1a      	ldr	r2, [pc, #104]	; (8000ef8 <visInit+0x78>)
 8000e90:	011b      	lsls	r3, r3, #4
 8000e92:	4413      	add	r3, r2
 8000e94:	330c      	adds	r3, #12
 8000e96:	2201      	movs	r2, #1
 8000e98:	701a      	strb	r2, [r3, #0]

		// Every even output line has second frameBuffer2 with different effect
		if(i % 2 == 0)
 8000e9a:	79fb      	ldrb	r3, [r7, #7]
 8000e9c:	f003 0301 	and.w	r3, r3, #1
 8000ea0:	b2db      	uxtb	r3, r3
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d10e      	bne.n	8000ec4 <visInit+0x44>
		{
			// Your RGB framebuffer
			ws2812b.item[i].frameBufferPointer = frameBuffer;
 8000ea6:	79fb      	ldrb	r3, [r7, #7]
 8000ea8:	4a13      	ldr	r2, [pc, #76]	; (8000ef8 <visInit+0x78>)
 8000eaa:	011b      	lsls	r3, r3, #4
 8000eac:	4413      	add	r3, r2
 8000eae:	4a13      	ldr	r2, [pc, #76]	; (8000efc <visInit+0x7c>)
 8000eb0:	601a      	str	r2, [r3, #0]
			// RAW size of framebuffer
			ws2812b.item[i].frameBufferSize = sizeof(frameBuffer);
 8000eb2:	79fb      	ldrb	r3, [r7, #7]
 8000eb4:	4a10      	ldr	r2, [pc, #64]	; (8000ef8 <visInit+0x78>)
 8000eb6:	011b      	lsls	r3, r3, #4
 8000eb8:	4413      	add	r3, r2
 8000eba:	3304      	adds	r3, #4
 8000ebc:	f44f 7210 	mov.w	r2, #576	; 0x240
 8000ec0:	601a      	str	r2, [r3, #0]
 8000ec2:	e00c      	b.n	8000ede <visInit+0x5e>
		} else {
			ws2812b.item[i].frameBufferPointer = frameBuffer2;
 8000ec4:	79fb      	ldrb	r3, [r7, #7]
 8000ec6:	4a0c      	ldr	r2, [pc, #48]	; (8000ef8 <visInit+0x78>)
 8000ec8:	011b      	lsls	r3, r3, #4
 8000eca:	4413      	add	r3, r2
 8000ecc:	4a0c      	ldr	r2, [pc, #48]	; (8000f00 <visInit+0x80>)
 8000ece:	601a      	str	r2, [r3, #0]
			ws2812b.item[i].frameBufferSize = sizeof(frameBuffer2);
 8000ed0:	79fb      	ldrb	r3, [r7, #7]
 8000ed2:	4a09      	ldr	r2, [pc, #36]	; (8000ef8 <visInit+0x78>)
 8000ed4:	011b      	lsls	r3, r3, #4
 8000ed6:	4413      	add	r3, r2
 8000ed8:	3304      	adds	r3, #4
 8000eda:	223c      	movs	r2, #60	; 0x3c
 8000edc:	601a      	str	r2, [r3, #0]
	for( i = 0; i < WS2812_BUFFER_COUNT; i++)
 8000ede:	79fb      	ldrb	r3, [r7, #7]
 8000ee0:	3301      	adds	r3, #1
 8000ee2:	71fb      	strb	r3, [r7, #7]
 8000ee4:	79fb      	ldrb	r3, [r7, #7]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d0d0      	beq.n	8000e8c <visInit+0xc>
		}

	}


	ws2812b_init();
 8000eea:	f001 fc67 	bl	80027bc <ws2812b_init>
}
 8000eee:	bf00      	nop
 8000ef0:	3708      	adds	r7, #8
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	20000104 	.word	0x20000104
 8000efc:	20000120 	.word	0x20000120
 8000f00:	200000c8 	.word	0x200000c8

08000f04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f04:	b590      	push	{r4, r7, lr}
 8000f06:	b099      	sub	sp, #100	; 0x64
 8000f08:	af04      	add	r7, sp, #16
	uint8_t bufTouch1[2];
	uint8_t bufTouch2[2];
	uint16_t capTouch[3];
	uint16_t oldCapTouch[3];
	uint8_t gridLoc[2];
	uint8_t UART1_rxBuffer[12] = {0};
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	627b      	str	r3, [r7, #36]	; 0x24
 8000f0e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f12:	2200      	movs	r2, #0
 8000f14:	601a      	str	r2, [r3, #0]
 8000f16:	605a      	str	r2, [r3, #4]
	//float val0;
	uint8_t newTouch = 0;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f1e:	f001 fc87 	bl	8002830 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f22:	f000 f8ad 	bl	8001080 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f26:	f000 fa83 	bl	8001430 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000f2a:	f000 f913 	bl	8001154 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000f2e:	f000 f93f 	bl	80011b0 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000f32:	f000 f96d 	bl	8001210 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000f36:	f00a fdfd 	bl	800bb34 <MX_USB_HOST_Init>
  MX_USART2_UART_Init();
 8000f3a:	f000 fa2f 	bl	800139c <MX_USART2_UART_Init>
  MX_DMA_Init();
 8000f3e:	f000 fa57 	bl	80013f0 <MX_DMA_Init>
  MX_TIM1_Init();
 8000f42:	f000 f99b 	bl	800127c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  visInit();
 8000f46:	f7ff ff9b 	bl	8000e80 <visInit>
  MPR121_init(MPR121_ADDR0);
 8000f4a:	23b8      	movs	r3, #184	; 0xb8
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f000 fb8f 	bl	8001670 <MPR121_init>
  MPR121_init(MPR121_ADDR1);
 8000f52:	23b6      	movs	r3, #182	; 0xb6
 8000f54:	4618      	mov	r0, r3
 8000f56:	f000 fb8b 	bl	8001670 <MPR121_init>
  MPR121_init(MPR121_ADDR2);
 8000f5a:	23b4      	movs	r3, #180	; 0xb4
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f000 fb87 	bl	8001670 <MPR121_init>

  while (1)
  {

	//bufTouch0[0] = REG_TOUCH0;
	ret0 = HAL_I2C_Master_Transmit(&hi2c1, MPR121_ADDR0, bufTouch0, 1, HAL_MAX_DELAY);
 8000f62:	23b8      	movs	r3, #184	; 0xb8
 8000f64:	b299      	uxth	r1, r3
 8000f66:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8000f6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f6e:	9300      	str	r3, [sp, #0]
 8000f70:	2301      	movs	r3, #1
 8000f72:	483f      	ldr	r0, [pc, #252]	; (8001070 <main+0x16c>)
 8000f74:	f004 fa78 	bl	8005468 <HAL_I2C_Master_Transmit>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
	ret0 = HAL_I2C_Mem_Read(&hi2c1, MPR121_ADDR0, REG_TOUCH0, I2C_MEMADD_SIZE_8BIT, bufTouch0, 2, HAL_MAX_DELAY);
 8000f7e:	23b8      	movs	r3, #184	; 0xb8
 8000f80:	b299      	uxth	r1, r3
 8000f82:	2300      	movs	r3, #0
 8000f84:	b29a      	uxth	r2, r3
 8000f86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f8a:	9302      	str	r3, [sp, #8]
 8000f8c:	2302      	movs	r3, #2
 8000f8e:	9301      	str	r3, [sp, #4]
 8000f90:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000f94:	9300      	str	r3, [sp, #0]
 8000f96:	2301      	movs	r3, #1
 8000f98:	4835      	ldr	r0, [pc, #212]	; (8001070 <main+0x16c>)
 8000f9a:	f004 fc5d 	bl	8005858 <HAL_I2C_Mem_Read>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
	ret0 = HAL_I2C_Mem_Read(&hi2c1, MPR121_ADDR1, REG_TOUCH0, I2C_MEMADD_SIZE_8BIT, bufTouch1, 2, HAL_MAX_DELAY);
 8000fa4:	23b6      	movs	r3, #182	; 0xb6
 8000fa6:	b299      	uxth	r1, r3
 8000fa8:	2300      	movs	r3, #0
 8000faa:	b29a      	uxth	r2, r3
 8000fac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000fb0:	9302      	str	r3, [sp, #8]
 8000fb2:	2302      	movs	r3, #2
 8000fb4:	9301      	str	r3, [sp, #4]
 8000fb6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000fba:	9300      	str	r3, [sp, #0]
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	482c      	ldr	r0, [pc, #176]	; (8001070 <main+0x16c>)
 8000fc0:	f004 fc4a 	bl	8005858 <HAL_I2C_Mem_Read>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
	ret0 = HAL_I2C_Mem_Read(&hi2c1, MPR121_ADDR2, REG_TOUCH0, I2C_MEMADD_SIZE_8BIT, bufTouch2, 2, HAL_MAX_DELAY);
 8000fca:	23b4      	movs	r3, #180	; 0xb4
 8000fcc:	b299      	uxth	r1, r3
 8000fce:	2300      	movs	r3, #0
 8000fd0:	b29a      	uxth	r2, r3
 8000fd2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000fd6:	9302      	str	r3, [sp, #8]
 8000fd8:	2302      	movs	r3, #2
 8000fda:	9301      	str	r3, [sp, #4]
 8000fdc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000fe0:	9300      	str	r3, [sp, #0]
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	4822      	ldr	r0, [pc, #136]	; (8001070 <main+0x16c>)
 8000fe6:	f004 fc37 	bl	8005858 <HAL_I2C_Mem_Read>
 8000fea:	4603      	mov	r3, r0
 8000fec:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8000ff0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
	memcpy(capTouch, bufTouch0, 2*sizeof(uint8_t));
 8000ff4:	87bb      	strh	r3, [r7, #60]	; 0x3c
	memcpy(capTouch+1, bufTouch1, 2*sizeof(uint8_t));
 8000ff6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000ffa:	3302      	adds	r3, #2
 8000ffc:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8001000:	801a      	strh	r2, [r3, #0]
	memcpy(capTouch+2, bufTouch2, 2*sizeof(uint8_t));
 8001002:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001006:	3304      	adds	r3, #4
 8001008:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800100c:	801a      	strh	r2, [r3, #0]
		//tester = 10;
	} else {

		//sprintf((char*)bufTouch0, "%u\r\n", (unsigned int)val0);
	}
	newTouch = determinePixel(capTouch, gridLoc);
 800100e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001012:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001016:	4611      	mov	r1, r2
 8001018:	4618      	mov	r0, r3
 800101a:	f000 fc41 	bl	80018a0 <determinePixel>
 800101e:	4603      	mov	r3, r0
 8001020:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	//visHandle(capTouch, gridLoc, newTouch);
	uint8_t data[] = "HELLO WORLD \r\n";
 8001024:	4b13      	ldr	r3, [pc, #76]	; (8001074 <main+0x170>)
 8001026:	f107 0414 	add.w	r4, r7, #20
 800102a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800102c:	c407      	stmia	r4!, {r0, r1, r2}
 800102e:	8023      	strh	r3, [r4, #0]
 8001030:	3402      	adds	r4, #2
 8001032:	0c1b      	lsrs	r3, r3, #16
 8001034:	7023      	strb	r3, [r4, #0]
	//HAL_UART_Transmit (&huart2, data, sizeof (data), 10);
	//ret0 = HAL_UART_Receive (&huart2, UART1_rxBuffer, 12, 5000);

	if (newTouch == 1) {
 8001036:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800103a:	2b01      	cmp	r3, #1
 800103c:	d112      	bne.n	8001064 <main+0x160>
		char buffer[20];
		sprintf(buffer, "x: %i, y: %i\r\n", gridLoc[0], gridLoc[1]);
 800103e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001042:	461a      	mov	r2, r3
 8001044:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8001048:	4638      	mov	r0, r7
 800104a:	490b      	ldr	r1, [pc, #44]	; (8001078 <main+0x174>)
 800104c:	f00b f976 	bl	800c33c <siprintf>
		ret0 = HAL_UART_Transmit(&huart2, buffer, sizeof(buffer), HAL_MAX_DELAY);
 8001050:	4639      	mov	r1, r7
 8001052:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001056:	2214      	movs	r2, #20
 8001058:	4808      	ldr	r0, [pc, #32]	; (800107c <main+0x178>)
 800105a:	f007 fbf6 	bl	800884a <HAL_UART_Transmit>
 800105e:	4603      	mov	r3, r0
 8001060:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
	}
	HAL_Delay(250);
 8001064:	20fa      	movs	r0, #250	; 0xfa
 8001066:	f001 fc55 	bl	8002914 <HAL_Delay>
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 800106a:	f00a fd89 	bl	800bb80 <MX_USB_HOST_Process>
  {
 800106e:	e778      	b.n	8000f62 <main+0x5e>
 8001070:	20000360 	.word	0x20000360
 8001074:	0800ce90 	.word	0x0800ce90
 8001078:	0800ce80 	.word	0x0800ce80
 800107c:	200004b4 	.word	0x200004b4

08001080 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b094      	sub	sp, #80	; 0x50
 8001084:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001086:	f107 0320 	add.w	r3, r7, #32
 800108a:	2230      	movs	r2, #48	; 0x30
 800108c:	2100      	movs	r1, #0
 800108e:	4618      	mov	r0, r3
 8001090:	f00b f892 	bl	800c1b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001094:	f107 030c 	add.w	r3, r7, #12
 8001098:	2200      	movs	r2, #0
 800109a:	601a      	str	r2, [r3, #0]
 800109c:	605a      	str	r2, [r3, #4]
 800109e:	609a      	str	r2, [r3, #8]
 80010a0:	60da      	str	r2, [r3, #12]
 80010a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010a4:	2300      	movs	r3, #0
 80010a6:	60bb      	str	r3, [r7, #8]
 80010a8:	4b28      	ldr	r3, [pc, #160]	; (800114c <SystemClock_Config+0xcc>)
 80010aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ac:	4a27      	ldr	r2, [pc, #156]	; (800114c <SystemClock_Config+0xcc>)
 80010ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010b2:	6413      	str	r3, [r2, #64]	; 0x40
 80010b4:	4b25      	ldr	r3, [pc, #148]	; (800114c <SystemClock_Config+0xcc>)
 80010b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010bc:	60bb      	str	r3, [r7, #8]
 80010be:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010c0:	2300      	movs	r3, #0
 80010c2:	607b      	str	r3, [r7, #4]
 80010c4:	4b22      	ldr	r3, [pc, #136]	; (8001150 <SystemClock_Config+0xd0>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a21      	ldr	r2, [pc, #132]	; (8001150 <SystemClock_Config+0xd0>)
 80010ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010ce:	6013      	str	r3, [r2, #0]
 80010d0:	4b1f      	ldr	r3, [pc, #124]	; (8001150 <SystemClock_Config+0xd0>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010d8:	607b      	str	r3, [r7, #4]
 80010da:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010dc:	2301      	movs	r3, #1
 80010de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010e4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010e6:	2302      	movs	r3, #2
 80010e8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010ea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80010ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80010f0:	2308      	movs	r3, #8
 80010f2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80010f4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80010f8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010fa:	2302      	movs	r3, #2
 80010fc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80010fe:	2307      	movs	r3, #7
 8001100:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001102:	f107 0320 	add.w	r3, r7, #32
 8001106:	4618      	mov	r0, r3
 8001108:	f005 fe4a 	bl	8006da0 <HAL_RCC_OscConfig>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001112:	f000 fc59 	bl	80019c8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001116:	230f      	movs	r3, #15
 8001118:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800111a:	2302      	movs	r3, #2
 800111c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800111e:	2300      	movs	r3, #0
 8001120:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001122:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001126:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001128:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800112c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800112e:	f107 030c 	add.w	r3, r7, #12
 8001132:	2105      	movs	r1, #5
 8001134:	4618      	mov	r0, r3
 8001136:	f006 f8ab 	bl	8007290 <HAL_RCC_ClockConfig>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001140:	f000 fc42 	bl	80019c8 <Error_Handler>
  }
}
 8001144:	bf00      	nop
 8001146:	3750      	adds	r7, #80	; 0x50
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	40023800 	.word	0x40023800
 8001150:	40007000 	.word	0x40007000

08001154 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001158:	4b12      	ldr	r3, [pc, #72]	; (80011a4 <MX_I2C1_Init+0x50>)
 800115a:	4a13      	ldr	r2, [pc, #76]	; (80011a8 <MX_I2C1_Init+0x54>)
 800115c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800115e:	4b11      	ldr	r3, [pc, #68]	; (80011a4 <MX_I2C1_Init+0x50>)
 8001160:	4a12      	ldr	r2, [pc, #72]	; (80011ac <MX_I2C1_Init+0x58>)
 8001162:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001164:	4b0f      	ldr	r3, [pc, #60]	; (80011a4 <MX_I2C1_Init+0x50>)
 8001166:	2200      	movs	r2, #0
 8001168:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800116a:	4b0e      	ldr	r3, [pc, #56]	; (80011a4 <MX_I2C1_Init+0x50>)
 800116c:	2200      	movs	r2, #0
 800116e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001170:	4b0c      	ldr	r3, [pc, #48]	; (80011a4 <MX_I2C1_Init+0x50>)
 8001172:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001176:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001178:	4b0a      	ldr	r3, [pc, #40]	; (80011a4 <MX_I2C1_Init+0x50>)
 800117a:	2200      	movs	r2, #0
 800117c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800117e:	4b09      	ldr	r3, [pc, #36]	; (80011a4 <MX_I2C1_Init+0x50>)
 8001180:	2200      	movs	r2, #0
 8001182:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001184:	4b07      	ldr	r3, [pc, #28]	; (80011a4 <MX_I2C1_Init+0x50>)
 8001186:	2200      	movs	r2, #0
 8001188:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800118a:	4b06      	ldr	r3, [pc, #24]	; (80011a4 <MX_I2C1_Init+0x50>)
 800118c:	2200      	movs	r2, #0
 800118e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001190:	4804      	ldr	r0, [pc, #16]	; (80011a4 <MX_I2C1_Init+0x50>)
 8001192:	f004 f825 	bl	80051e0 <HAL_I2C_Init>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d001      	beq.n	80011a0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800119c:	f000 fc14 	bl	80019c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011a0:	bf00      	nop
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	20000360 	.word	0x20000360
 80011a8:	40005400 	.word	0x40005400
 80011ac:	000186a0 	.word	0x000186a0

080011b0 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80011b4:	4b13      	ldr	r3, [pc, #76]	; (8001204 <MX_I2S3_Init+0x54>)
 80011b6:	4a14      	ldr	r2, [pc, #80]	; (8001208 <MX_I2S3_Init+0x58>)
 80011b8:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80011ba:	4b12      	ldr	r3, [pc, #72]	; (8001204 <MX_I2S3_Init+0x54>)
 80011bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011c0:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80011c2:	4b10      	ldr	r3, [pc, #64]	; (8001204 <MX_I2S3_Init+0x54>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80011c8:	4b0e      	ldr	r3, [pc, #56]	; (8001204 <MX_I2S3_Init+0x54>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80011ce:	4b0d      	ldr	r3, [pc, #52]	; (8001204 <MX_I2S3_Init+0x54>)
 80011d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011d4:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80011d6:	4b0b      	ldr	r3, [pc, #44]	; (8001204 <MX_I2S3_Init+0x54>)
 80011d8:	4a0c      	ldr	r2, [pc, #48]	; (800120c <MX_I2S3_Init+0x5c>)
 80011da:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80011dc:	4b09      	ldr	r3, [pc, #36]	; (8001204 <MX_I2S3_Init+0x54>)
 80011de:	2200      	movs	r2, #0
 80011e0:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80011e2:	4b08      	ldr	r3, [pc, #32]	; (8001204 <MX_I2S3_Init+0x54>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80011e8:	4b06      	ldr	r3, [pc, #24]	; (8001204 <MX_I2S3_Init+0x54>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80011ee:	4805      	ldr	r0, [pc, #20]	; (8001204 <MX_I2S3_Init+0x54>)
 80011f0:	f005 f936 	bl	8006460 <HAL_I2S_Init>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80011fa:	f000 fbe5 	bl	80019c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80011fe:	bf00      	nop
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	200004f8 	.word	0x200004f8
 8001208:	40003c00 	.word	0x40003c00
 800120c:	00017700 	.word	0x00017700

08001210 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001214:	4b17      	ldr	r3, [pc, #92]	; (8001274 <MX_SPI1_Init+0x64>)
 8001216:	4a18      	ldr	r2, [pc, #96]	; (8001278 <MX_SPI1_Init+0x68>)
 8001218:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800121a:	4b16      	ldr	r3, [pc, #88]	; (8001274 <MX_SPI1_Init+0x64>)
 800121c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001220:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001222:	4b14      	ldr	r3, [pc, #80]	; (8001274 <MX_SPI1_Init+0x64>)
 8001224:	2200      	movs	r2, #0
 8001226:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001228:	4b12      	ldr	r3, [pc, #72]	; (8001274 <MX_SPI1_Init+0x64>)
 800122a:	2200      	movs	r2, #0
 800122c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800122e:	4b11      	ldr	r3, [pc, #68]	; (8001274 <MX_SPI1_Init+0x64>)
 8001230:	2200      	movs	r2, #0
 8001232:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001234:	4b0f      	ldr	r3, [pc, #60]	; (8001274 <MX_SPI1_Init+0x64>)
 8001236:	2200      	movs	r2, #0
 8001238:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800123a:	4b0e      	ldr	r3, [pc, #56]	; (8001274 <MX_SPI1_Init+0x64>)
 800123c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001240:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001242:	4b0c      	ldr	r3, [pc, #48]	; (8001274 <MX_SPI1_Init+0x64>)
 8001244:	2200      	movs	r2, #0
 8001246:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001248:	4b0a      	ldr	r3, [pc, #40]	; (8001274 <MX_SPI1_Init+0x64>)
 800124a:	2200      	movs	r2, #0
 800124c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800124e:	4b09      	ldr	r3, [pc, #36]	; (8001274 <MX_SPI1_Init+0x64>)
 8001250:	2200      	movs	r2, #0
 8001252:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001254:	4b07      	ldr	r3, [pc, #28]	; (8001274 <MX_SPI1_Init+0x64>)
 8001256:	2200      	movs	r2, #0
 8001258:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800125a:	4b06      	ldr	r3, [pc, #24]	; (8001274 <MX_SPI1_Init+0x64>)
 800125c:	220a      	movs	r2, #10
 800125e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001260:	4804      	ldr	r0, [pc, #16]	; (8001274 <MX_SPI1_Init+0x64>)
 8001262:	f006 fb51 	bl	8007908 <HAL_SPI_Init>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d001      	beq.n	8001270 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800126c:	f000 fbac 	bl	80019c8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001270:	bf00      	nop
 8001272:	bd80      	pop	{r7, pc}
 8001274:	2000045c 	.word	0x2000045c
 8001278:	40013000 	.word	0x40013000

0800127c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b092      	sub	sp, #72	; 0x48
 8001280:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001282:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001286:	2200      	movs	r2, #0
 8001288:	601a      	str	r2, [r3, #0]
 800128a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800128c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001290:	2200      	movs	r2, #0
 8001292:	601a      	str	r2, [r3, #0]
 8001294:	605a      	str	r2, [r3, #4]
 8001296:	609a      	str	r2, [r3, #8]
 8001298:	60da      	str	r2, [r3, #12]
 800129a:	611a      	str	r2, [r3, #16]
 800129c:	615a      	str	r2, [r3, #20]
 800129e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80012a0:	1d3b      	adds	r3, r7, #4
 80012a2:	2220      	movs	r2, #32
 80012a4:	2100      	movs	r1, #0
 80012a6:	4618      	mov	r0, r3
 80012a8:	f00a ff86 	bl	800c1b8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80012ac:	4b39      	ldr	r3, [pc, #228]	; (8001394 <MX_TIM1_Init+0x118>)
 80012ae:	4a3a      	ldr	r2, [pc, #232]	; (8001398 <MX_TIM1_Init+0x11c>)
 80012b0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80012b2:	4b38      	ldr	r3, [pc, #224]	; (8001394 <MX_TIM1_Init+0x118>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012b8:	4b36      	ldr	r3, [pc, #216]	; (8001394 <MX_TIM1_Init+0x118>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80012be:	4b35      	ldr	r3, [pc, #212]	; (8001394 <MX_TIM1_Init+0x118>)
 80012c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012c4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012c6:	4b33      	ldr	r3, [pc, #204]	; (8001394 <MX_TIM1_Init+0x118>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80012cc:	4b31      	ldr	r3, [pc, #196]	; (8001394 <MX_TIM1_Init+0x118>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012d2:	4b30      	ldr	r3, [pc, #192]	; (8001394 <MX_TIM1_Init+0x118>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80012d8:	482e      	ldr	r0, [pc, #184]	; (8001394 <MX_TIM1_Init+0x118>)
 80012da:	f006 fc07 	bl	8007aec <HAL_TIM_PWM_Init>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d001      	beq.n	80012e8 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 80012e4:	f000 fb70 	bl	80019c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012e8:	2300      	movs	r3, #0
 80012ea:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012ec:	2300      	movs	r3, #0
 80012ee:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80012f0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80012f4:	4619      	mov	r1, r3
 80012f6:	4827      	ldr	r0, [pc, #156]	; (8001394 <MX_TIM1_Init+0x118>)
 80012f8:	f007 f978 	bl	80085ec <HAL_TIMEx_MasterConfigSynchronization>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8001302:	f000 fb61 	bl	80019c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001306:	2360      	movs	r3, #96	; 0x60
 8001308:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800130a:	2300      	movs	r3, #0
 800130c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800130e:	2300      	movs	r3, #0
 8001310:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001312:	2300      	movs	r3, #0
 8001314:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001316:	2300      	movs	r3, #0
 8001318:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800131a:	2300      	movs	r3, #0
 800131c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800131e:	2300      	movs	r3, #0
 8001320:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001322:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001326:	2200      	movs	r2, #0
 8001328:	4619      	mov	r1, r3
 800132a:	481a      	ldr	r0, [pc, #104]	; (8001394 <MX_TIM1_Init+0x118>)
 800132c:	f006 fdfe 	bl	8007f2c <HAL_TIM_PWM_ConfigChannel>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8001336:	f000 fb47 	bl	80019c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800133a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800133e:	2204      	movs	r2, #4
 8001340:	4619      	mov	r1, r3
 8001342:	4814      	ldr	r0, [pc, #80]	; (8001394 <MX_TIM1_Init+0x118>)
 8001344:	f006 fdf2 	bl	8007f2c <HAL_TIM_PWM_ConfigChannel>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 800134e:	f000 fb3b 	bl	80019c8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001352:	2300      	movs	r3, #0
 8001354:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001356:	2300      	movs	r3, #0
 8001358:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800135a:	2300      	movs	r3, #0
 800135c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800135e:	2300      	movs	r3, #0
 8001360:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001362:	2300      	movs	r3, #0
 8001364:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001366:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800136a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800136c:	2300      	movs	r3, #0
 800136e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001370:	1d3b      	adds	r3, r7, #4
 8001372:	4619      	mov	r1, r3
 8001374:	4807      	ldr	r0, [pc, #28]	; (8001394 <MX_TIM1_Init+0x118>)
 8001376:	f007 f9b5 	bl	80086e4 <HAL_TIMEx_ConfigBreakDeadTime>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8001380:	f000 fb22 	bl	80019c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001384:	4803      	ldr	r0, [pc, #12]	; (8001394 <MX_TIM1_Init+0x118>)
 8001386:	f000 fcbb 	bl	8001d00 <HAL_TIM_MspPostInit>

}
 800138a:	bf00      	nop
 800138c:	3748      	adds	r7, #72	; 0x48
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	20000414 	.word	0x20000414
 8001398:	40010000 	.word	0x40010000

0800139c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013a0:	4b11      	ldr	r3, [pc, #68]	; (80013e8 <MX_USART2_UART_Init+0x4c>)
 80013a2:	4a12      	ldr	r2, [pc, #72]	; (80013ec <MX_USART2_UART_Init+0x50>)
 80013a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80013a6:	4b10      	ldr	r3, [pc, #64]	; (80013e8 <MX_USART2_UART_Init+0x4c>)
 80013a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013ae:	4b0e      	ldr	r3, [pc, #56]	; (80013e8 <MX_USART2_UART_Init+0x4c>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013b4:	4b0c      	ldr	r3, [pc, #48]	; (80013e8 <MX_USART2_UART_Init+0x4c>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013ba:	4b0b      	ldr	r3, [pc, #44]	; (80013e8 <MX_USART2_UART_Init+0x4c>)
 80013bc:	2200      	movs	r2, #0
 80013be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013c0:	4b09      	ldr	r3, [pc, #36]	; (80013e8 <MX_USART2_UART_Init+0x4c>)
 80013c2:	220c      	movs	r2, #12
 80013c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013c6:	4b08      	ldr	r3, [pc, #32]	; (80013e8 <MX_USART2_UART_Init+0x4c>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013cc:	4b06      	ldr	r3, [pc, #24]	; (80013e8 <MX_USART2_UART_Init+0x4c>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013d2:	4805      	ldr	r0, [pc, #20]	; (80013e8 <MX_USART2_UART_Init+0x4c>)
 80013d4:	f007 f9ec 	bl	80087b0 <HAL_UART_Init>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80013de:	f000 faf3 	bl	80019c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013e2:	bf00      	nop
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	200004b4 	.word	0x200004b4
 80013ec:	40004400 	.word	0x40004400

080013f0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80013f6:	2300      	movs	r3, #0
 80013f8:	607b      	str	r3, [r7, #4]
 80013fa:	4b0c      	ldr	r3, [pc, #48]	; (800142c <MX_DMA_Init+0x3c>)
 80013fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fe:	4a0b      	ldr	r2, [pc, #44]	; (800142c <MX_DMA_Init+0x3c>)
 8001400:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001404:	6313      	str	r3, [r2, #48]	; 0x30
 8001406:	4b09      	ldr	r3, [pc, #36]	; (800142c <MX_DMA_Init+0x3c>)
 8001408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800140e:	607b      	str	r3, [r7, #4]
 8001410:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8001412:	2200      	movs	r2, #0
 8001414:	2100      	movs	r1, #0
 8001416:	2045      	movs	r0, #69	; 0x45
 8001418:	f001 fb7b 	bl	8002b12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 800141c:	2045      	movs	r0, #69	; 0x45
 800141e:	f001 fb94 	bl	8002b4a <HAL_NVIC_EnableIRQ>

}
 8001422:	bf00      	nop
 8001424:	3708      	adds	r7, #8
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	40023800 	.word	0x40023800

08001430 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b08c      	sub	sp, #48	; 0x30
 8001434:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001436:	f107 031c 	add.w	r3, r7, #28
 800143a:	2200      	movs	r2, #0
 800143c:	601a      	str	r2, [r3, #0]
 800143e:	605a      	str	r2, [r3, #4]
 8001440:	609a      	str	r2, [r3, #8]
 8001442:	60da      	str	r2, [r3, #12]
 8001444:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001446:	2300      	movs	r3, #0
 8001448:	61bb      	str	r3, [r7, #24]
 800144a:	4b74      	ldr	r3, [pc, #464]	; (800161c <MX_GPIO_Init+0x1ec>)
 800144c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144e:	4a73      	ldr	r2, [pc, #460]	; (800161c <MX_GPIO_Init+0x1ec>)
 8001450:	f043 0310 	orr.w	r3, r3, #16
 8001454:	6313      	str	r3, [r2, #48]	; 0x30
 8001456:	4b71      	ldr	r3, [pc, #452]	; (800161c <MX_GPIO_Init+0x1ec>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145a:	f003 0310 	and.w	r3, r3, #16
 800145e:	61bb      	str	r3, [r7, #24]
 8001460:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001462:	2300      	movs	r3, #0
 8001464:	617b      	str	r3, [r7, #20]
 8001466:	4b6d      	ldr	r3, [pc, #436]	; (800161c <MX_GPIO_Init+0x1ec>)
 8001468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146a:	4a6c      	ldr	r2, [pc, #432]	; (800161c <MX_GPIO_Init+0x1ec>)
 800146c:	f043 0304 	orr.w	r3, r3, #4
 8001470:	6313      	str	r3, [r2, #48]	; 0x30
 8001472:	4b6a      	ldr	r3, [pc, #424]	; (800161c <MX_GPIO_Init+0x1ec>)
 8001474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001476:	f003 0304 	and.w	r3, r3, #4
 800147a:	617b      	str	r3, [r7, #20]
 800147c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800147e:	2300      	movs	r3, #0
 8001480:	613b      	str	r3, [r7, #16]
 8001482:	4b66      	ldr	r3, [pc, #408]	; (800161c <MX_GPIO_Init+0x1ec>)
 8001484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001486:	4a65      	ldr	r2, [pc, #404]	; (800161c <MX_GPIO_Init+0x1ec>)
 8001488:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800148c:	6313      	str	r3, [r2, #48]	; 0x30
 800148e:	4b63      	ldr	r3, [pc, #396]	; (800161c <MX_GPIO_Init+0x1ec>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001492:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001496:	613b      	str	r3, [r7, #16]
 8001498:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800149a:	2300      	movs	r3, #0
 800149c:	60fb      	str	r3, [r7, #12]
 800149e:	4b5f      	ldr	r3, [pc, #380]	; (800161c <MX_GPIO_Init+0x1ec>)
 80014a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a2:	4a5e      	ldr	r2, [pc, #376]	; (800161c <MX_GPIO_Init+0x1ec>)
 80014a4:	f043 0301 	orr.w	r3, r3, #1
 80014a8:	6313      	str	r3, [r2, #48]	; 0x30
 80014aa:	4b5c      	ldr	r3, [pc, #368]	; (800161c <MX_GPIO_Init+0x1ec>)
 80014ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ae:	f003 0301 	and.w	r3, r3, #1
 80014b2:	60fb      	str	r3, [r7, #12]
 80014b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014b6:	2300      	movs	r3, #0
 80014b8:	60bb      	str	r3, [r7, #8]
 80014ba:	4b58      	ldr	r3, [pc, #352]	; (800161c <MX_GPIO_Init+0x1ec>)
 80014bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014be:	4a57      	ldr	r2, [pc, #348]	; (800161c <MX_GPIO_Init+0x1ec>)
 80014c0:	f043 0302 	orr.w	r3, r3, #2
 80014c4:	6313      	str	r3, [r2, #48]	; 0x30
 80014c6:	4b55      	ldr	r3, [pc, #340]	; (800161c <MX_GPIO_Init+0x1ec>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ca:	f003 0302 	and.w	r3, r3, #2
 80014ce:	60bb      	str	r3, [r7, #8]
 80014d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014d2:	2300      	movs	r3, #0
 80014d4:	607b      	str	r3, [r7, #4]
 80014d6:	4b51      	ldr	r3, [pc, #324]	; (800161c <MX_GPIO_Init+0x1ec>)
 80014d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014da:	4a50      	ldr	r2, [pc, #320]	; (800161c <MX_GPIO_Init+0x1ec>)
 80014dc:	f043 0308 	orr.w	r3, r3, #8
 80014e0:	6313      	str	r3, [r2, #48]	; 0x30
 80014e2:	4b4e      	ldr	r3, [pc, #312]	; (800161c <MX_GPIO_Init+0x1ec>)
 80014e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e6:	f003 0308 	and.w	r3, r3, #8
 80014ea:	607b      	str	r3, [r7, #4]
 80014ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80014ee:	2200      	movs	r2, #0
 80014f0:	2108      	movs	r1, #8
 80014f2:	484b      	ldr	r0, [pc, #300]	; (8001620 <MX_GPIO_Init+0x1f0>)
 80014f4:	f002 f8ea 	bl	80036cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80014f8:	2201      	movs	r2, #1
 80014fa:	2101      	movs	r1, #1
 80014fc:	4849      	ldr	r0, [pc, #292]	; (8001624 <MX_GPIO_Init+0x1f4>)
 80014fe:	f002 f8e5 	bl	80036cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8001502:	2200      	movs	r2, #0
 8001504:	2102      	movs	r1, #2
 8001506:	4847      	ldr	r0, [pc, #284]	; (8001624 <MX_GPIO_Init+0x1f4>)
 8001508:	f002 f8e0 	bl	80036cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800150c:	2200      	movs	r2, #0
 800150e:	f24f 0110 	movw	r1, #61456	; 0xf010
 8001512:	4845      	ldr	r0, [pc, #276]	; (8001628 <MX_GPIO_Init+0x1f8>)
 8001514:	f002 f8da 	bl	80036cc <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8001518:	2308      	movs	r3, #8
 800151a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800151c:	2301      	movs	r3, #1
 800151e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001520:	2300      	movs	r3, #0
 8001522:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001524:	2300      	movs	r3, #0
 8001526:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8001528:	f107 031c 	add.w	r3, r7, #28
 800152c:	4619      	mov	r1, r3
 800152e:	483c      	ldr	r0, [pc, #240]	; (8001620 <MX_GPIO_Init+0x1f0>)
 8001530:	f001 ff30 	bl	8003394 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin PC1 */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|GPIO_PIN_1;
 8001534:	2303      	movs	r3, #3
 8001536:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001538:	2301      	movs	r3, #1
 800153a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153c:	2300      	movs	r3, #0
 800153e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001540:	2300      	movs	r3, #0
 8001542:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001544:	f107 031c 	add.w	r3, r7, #28
 8001548:	4619      	mov	r1, r3
 800154a:	4836      	ldr	r0, [pc, #216]	; (8001624 <MX_GPIO_Init+0x1f4>)
 800154c:	f001 ff22 	bl	8003394 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001550:	2308      	movs	r3, #8
 8001552:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001554:	2302      	movs	r3, #2
 8001556:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001558:	2300      	movs	r3, #0
 800155a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800155c:	2300      	movs	r3, #0
 800155e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001560:	2305      	movs	r3, #5
 8001562:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001564:	f107 031c 	add.w	r3, r7, #28
 8001568:	4619      	mov	r1, r3
 800156a:	482e      	ldr	r0, [pc, #184]	; (8001624 <MX_GPIO_Init+0x1f4>)
 800156c:	f001 ff12 	bl	8003394 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001570:	2301      	movs	r3, #1
 8001572:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001574:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001578:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157a:	2300      	movs	r3, #0
 800157c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800157e:	f107 031c 	add.w	r3, r7, #28
 8001582:	4619      	mov	r1, r3
 8001584:	4829      	ldr	r0, [pc, #164]	; (800162c <MX_GPIO_Init+0x1fc>)
 8001586:	f001 ff05 	bl	8003394 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800158a:	2304      	movs	r3, #4
 800158c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800158e:	2300      	movs	r3, #0
 8001590:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001592:	2300      	movs	r3, #0
 8001594:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001596:	f107 031c 	add.w	r3, r7, #28
 800159a:	4619      	mov	r1, r3
 800159c:	4824      	ldr	r0, [pc, #144]	; (8001630 <MX_GPIO_Init+0x200>)
 800159e:	f001 fef9 	bl	8003394 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80015a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a8:	2302      	movs	r3, #2
 80015aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ac:	2300      	movs	r3, #0
 80015ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b0:	2300      	movs	r3, #0
 80015b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80015b4:	2305      	movs	r3, #5
 80015b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80015b8:	f107 031c 	add.w	r3, r7, #28
 80015bc:	4619      	mov	r1, r3
 80015be:	481c      	ldr	r0, [pc, #112]	; (8001630 <MX_GPIO_Init+0x200>)
 80015c0:	f001 fee8 	bl	8003394 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80015c4:	f24f 0310 	movw	r3, #61456	; 0xf010
 80015c8:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ca:	2301      	movs	r3, #1
 80015cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ce:	2300      	movs	r3, #0
 80015d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d2:	2300      	movs	r3, #0
 80015d4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015d6:	f107 031c 	add.w	r3, r7, #28
 80015da:	4619      	mov	r1, r3
 80015dc:	4812      	ldr	r0, [pc, #72]	; (8001628 <MX_GPIO_Init+0x1f8>)
 80015de:	f001 fed9 	bl	8003394 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80015e2:	2320      	movs	r3, #32
 80015e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015e6:	2300      	movs	r3, #0
 80015e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ea:	2300      	movs	r3, #0
 80015ec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80015ee:	f107 031c 	add.w	r3, r7, #28
 80015f2:	4619      	mov	r1, r3
 80015f4:	480c      	ldr	r0, [pc, #48]	; (8001628 <MX_GPIO_Init+0x1f8>)
 80015f6:	f001 fecd 	bl	8003394 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80015fa:	2302      	movs	r3, #2
 80015fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80015fe:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001602:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001604:	2300      	movs	r3, #0
 8001606:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001608:	f107 031c 	add.w	r3, r7, #28
 800160c:	4619      	mov	r1, r3
 800160e:	4804      	ldr	r0, [pc, #16]	; (8001620 <MX_GPIO_Init+0x1f0>)
 8001610:	f001 fec0 	bl	8003394 <HAL_GPIO_Init>

}
 8001614:	bf00      	nop
 8001616:	3730      	adds	r7, #48	; 0x30
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	40023800 	.word	0x40023800
 8001620:	40021000 	.word	0x40021000
 8001624:	40020800 	.word	0x40020800
 8001628:	40020c00 	.word	0x40020c00
 800162c:	40020000 	.word	0x40020000
 8001630:	40020400 	.word	0x40020400

08001634 <IIC_ByteWrite>:

/* USER CODE BEGIN 4 */

void IIC_ByteWrite(uint8_t dev_addr, uint8_t reg_addr, uint8_t data) {
 8001634:	b580      	push	{r7, lr}
 8001636:	b086      	sub	sp, #24
 8001638:	af04      	add	r7, sp, #16
 800163a:	4603      	mov	r3, r0
 800163c:	71fb      	strb	r3, [r7, #7]
 800163e:	460b      	mov	r3, r1
 8001640:	71bb      	strb	r3, [r7, #6]
 8001642:	4613      	mov	r3, r2
 8001644:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Write(&hi2c1, dev_addr, reg_addr, I2C_MEMADD_SIZE_8BIT, (uint8_t*)(&data), 1, HAL_MAX_DELAY);
 8001646:	79fb      	ldrb	r3, [r7, #7]
 8001648:	b299      	uxth	r1, r3
 800164a:	79bb      	ldrb	r3, [r7, #6]
 800164c:	b29a      	uxth	r2, r3
 800164e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001652:	9302      	str	r3, [sp, #8]
 8001654:	2301      	movs	r3, #1
 8001656:	9301      	str	r3, [sp, #4]
 8001658:	1d7b      	adds	r3, r7, #5
 800165a:	9300      	str	r3, [sp, #0]
 800165c:	2301      	movs	r3, #1
 800165e:	4803      	ldr	r0, [pc, #12]	; (800166c <IIC_ByteWrite+0x38>)
 8001660:	f004 f800 	bl	8005664 <HAL_I2C_Mem_Write>
}
 8001664:	bf00      	nop
 8001666:	3708      	adds	r7, #8
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	20000360 	.word	0x20000360

08001670 <MPR121_init>:

void MPR121_init(uint8_t addr) {
 8001670:	b580      	push	{r7, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	af00      	add	r7, sp, #0
 8001676:	4603      	mov	r3, r0
 8001678:	71fb      	strb	r3, [r7, #7]
  //Reset MPR121 if not reset correctly

	IIC_ByteWrite(addr ,0x80,0x63);  //Soft reset
 800167a:	79fb      	ldrb	r3, [r7, #7]
 800167c:	2263      	movs	r2, #99	; 0x63
 800167e:	2180      	movs	r1, #128	; 0x80
 8001680:	4618      	mov	r0, r3
 8001682:	f7ff ffd7 	bl	8001634 <IIC_ByteWrite>
	IIC_ByteWrite(addr ,0x5E,0x00);  //Stop mode
 8001686:	79fb      	ldrb	r3, [r7, #7]
 8001688:	2200      	movs	r2, #0
 800168a:	215e      	movs	r1, #94	; 0x5e
 800168c:	4618      	mov	r0, r3
 800168e:	f7ff ffd1 	bl	8001634 <IIC_ByteWrite>

	  //touch pad baseline filter
	  //rising
	IIC_ByteWrite(addr ,0x2B,0x01); // MAX HALF DELTA Rising
 8001692:	79fb      	ldrb	r3, [r7, #7]
 8001694:	2201      	movs	r2, #1
 8001696:	212b      	movs	r1, #43	; 0x2b
 8001698:	4618      	mov	r0, r3
 800169a:	f7ff ffcb 	bl	8001634 <IIC_ByteWrite>
	IIC_ByteWrite(addr ,0x2C,0x01); // NOISE HALF DELTA Rising
 800169e:	79fb      	ldrb	r3, [r7, #7]
 80016a0:	2201      	movs	r2, #1
 80016a2:	212c      	movs	r1, #44	; 0x2c
 80016a4:	4618      	mov	r0, r3
 80016a6:	f7ff ffc5 	bl	8001634 <IIC_ByteWrite>
	IIC_ByteWrite(addr ,0x2D,0x0E); // NOISE COUNT LIMIT Rising
 80016aa:	79fb      	ldrb	r3, [r7, #7]
 80016ac:	220e      	movs	r2, #14
 80016ae:	212d      	movs	r1, #45	; 0x2d
 80016b0:	4618      	mov	r0, r3
 80016b2:	f7ff ffbf 	bl	8001634 <IIC_ByteWrite>
	IIC_ByteWrite(addr ,0x2E,0x00); // DELAY LIMIT Rising
 80016b6:	79fb      	ldrb	r3, [r7, #7]
 80016b8:	2200      	movs	r2, #0
 80016ba:	212e      	movs	r1, #46	; 0x2e
 80016bc:	4618      	mov	r0, r3
 80016be:	f7ff ffb9 	bl	8001634 <IIC_ByteWrite>

	  //falling
	IIC_ByteWrite(addr ,0x2F,0x01); // MAX HALF DELTA Falling
 80016c2:	79fb      	ldrb	r3, [r7, #7]
 80016c4:	2201      	movs	r2, #1
 80016c6:	212f      	movs	r1, #47	; 0x2f
 80016c8:	4618      	mov	r0, r3
 80016ca:	f7ff ffb3 	bl	8001634 <IIC_ByteWrite>
	IIC_ByteWrite(addr ,0x30,0x05); // NOISE HALF DELTA Falling
 80016ce:	79fb      	ldrb	r3, [r7, #7]
 80016d0:	2205      	movs	r2, #5
 80016d2:	2130      	movs	r1, #48	; 0x30
 80016d4:	4618      	mov	r0, r3
 80016d6:	f7ff ffad 	bl	8001634 <IIC_ByteWrite>
	IIC_ByteWrite(addr ,0x31,0x01); // NOISE COUNT LIMIT Falling
 80016da:	79fb      	ldrb	r3, [r7, #7]
 80016dc:	2201      	movs	r2, #1
 80016de:	2131      	movs	r1, #49	; 0x31
 80016e0:	4618      	mov	r0, r3
 80016e2:	f7ff ffa7 	bl	8001634 <IIC_ByteWrite>
	IIC_ByteWrite(addr ,0x32,0x00); // DELAY LIMIT Falling
 80016e6:	79fb      	ldrb	r3, [r7, #7]
 80016e8:	2200      	movs	r2, #0
 80016ea:	2132      	movs	r1, #50	; 0x32
 80016ec:	4618      	mov	r0, r3
 80016ee:	f7ff ffa1 	bl	8001634 <IIC_ByteWrite>

	  //touched
	IIC_ByteWrite(addr ,0x33,0x00); // Noise half delta touched
 80016f2:	79fb      	ldrb	r3, [r7, #7]
 80016f4:	2200      	movs	r2, #0
 80016f6:	2133      	movs	r1, #51	; 0x33
 80016f8:	4618      	mov	r0, r3
 80016fa:	f7ff ff9b 	bl	8001634 <IIC_ByteWrite>
	IIC_ByteWrite(addr ,0x34,0x00); // Noise counts touched
 80016fe:	79fb      	ldrb	r3, [r7, #7]
 8001700:	2200      	movs	r2, #0
 8001702:	2134      	movs	r1, #52	; 0x34
 8001704:	4618      	mov	r0, r3
 8001706:	f7ff ff95 	bl	8001634 <IIC_ByteWrite>
	IIC_ByteWrite(addr ,0x35,0x00); // Filter delay touched
 800170a:	79fb      	ldrb	r3, [r7, #7]
 800170c:	2200      	movs	r2, #0
 800170e:	2135      	movs	r1, #53	; 0x35
 8001710:	4618      	mov	r0, r3
 8001712:	f7ff ff8f 	bl	8001634 <IIC_ByteWrite>

	  //Touch pad threshold
	IIC_ByteWrite(addr ,0x41,TouchThre); // ELE0 TOUCH THRESHOLD
 8001716:	79fb      	ldrb	r3, [r7, #7]
 8001718:	22ff      	movs	r2, #255	; 0xff
 800171a:	2141      	movs	r1, #65	; 0x41
 800171c:	4618      	mov	r0, r3
 800171e:	f7ff ff89 	bl	8001634 <IIC_ByteWrite>
	IIC_ByteWrite(addr ,0x42,ReleaThre); // ELE0 RELEASE THRESHOLD
 8001722:	79fb      	ldrb	r3, [r7, #7]
 8001724:	22fa      	movs	r2, #250	; 0xfa
 8001726:	2142      	movs	r1, #66	; 0x42
 8001728:	4618      	mov	r0, r3
 800172a:	f7ff ff83 	bl	8001634 <IIC_ByteWrite>
	IIC_ByteWrite(addr ,0x43,TouchThre); // ELE1 TOUCH THRESHOLD
 800172e:	79fb      	ldrb	r3, [r7, #7]
 8001730:	22ff      	movs	r2, #255	; 0xff
 8001732:	2143      	movs	r1, #67	; 0x43
 8001734:	4618      	mov	r0, r3
 8001736:	f7ff ff7d 	bl	8001634 <IIC_ByteWrite>
	IIC_ByteWrite(addr ,0x44,ReleaThre); // ELE1 RELEASE THRESHOLD
 800173a:	79fb      	ldrb	r3, [r7, #7]
 800173c:	22fa      	movs	r2, #250	; 0xfa
 800173e:	2144      	movs	r1, #68	; 0x44
 8001740:	4618      	mov	r0, r3
 8001742:	f7ff ff77 	bl	8001634 <IIC_ByteWrite>
	IIC_ByteWrite(addr ,0x45,TouchThre); // ELE2 TOUCH THRESHOLD
 8001746:	79fb      	ldrb	r3, [r7, #7]
 8001748:	22ff      	movs	r2, #255	; 0xff
 800174a:	2145      	movs	r1, #69	; 0x45
 800174c:	4618      	mov	r0, r3
 800174e:	f7ff ff71 	bl	8001634 <IIC_ByteWrite>
	IIC_ByteWrite(addr ,0x46,ReleaThre); // ELE2 RELEASE THRESHOLD
 8001752:	79fb      	ldrb	r3, [r7, #7]
 8001754:	22fa      	movs	r2, #250	; 0xfa
 8001756:	2146      	movs	r1, #70	; 0x46
 8001758:	4618      	mov	r0, r3
 800175a:	f7ff ff6b 	bl	8001634 <IIC_ByteWrite>
	IIC_ByteWrite(addr ,0x47,TouchThre); // ELE3 TOUCH THRESHOLD
 800175e:	79fb      	ldrb	r3, [r7, #7]
 8001760:	22ff      	movs	r2, #255	; 0xff
 8001762:	2147      	movs	r1, #71	; 0x47
 8001764:	4618      	mov	r0, r3
 8001766:	f7ff ff65 	bl	8001634 <IIC_ByteWrite>
	IIC_ByteWrite(addr ,0x48,ReleaThre); // ELE3 RELEASE THRESHOLD
 800176a:	79fb      	ldrb	r3, [r7, #7]
 800176c:	22fa      	movs	r2, #250	; 0xfa
 800176e:	2148      	movs	r1, #72	; 0x48
 8001770:	4618      	mov	r0, r3
 8001772:	f7ff ff5f 	bl	8001634 <IIC_ByteWrite>
	IIC_ByteWrite(addr ,0x49,TouchThre); // ELE4 TOUCH THRESHOLD
 8001776:	79fb      	ldrb	r3, [r7, #7]
 8001778:	22ff      	movs	r2, #255	; 0xff
 800177a:	2149      	movs	r1, #73	; 0x49
 800177c:	4618      	mov	r0, r3
 800177e:	f7ff ff59 	bl	8001634 <IIC_ByteWrite>
	IIC_ByteWrite(addr ,0x4A,ReleaThre); // ELE4 RELEASE THRESHOLD
 8001782:	79fb      	ldrb	r3, [r7, #7]
 8001784:	22fa      	movs	r2, #250	; 0xfa
 8001786:	214a      	movs	r1, #74	; 0x4a
 8001788:	4618      	mov	r0, r3
 800178a:	f7ff ff53 	bl	8001634 <IIC_ByteWrite>
	IIC_ByteWrite(addr ,0x4B,TouchThre); // ELE5 TOUCH THRESHOLD
 800178e:	79fb      	ldrb	r3, [r7, #7]
 8001790:	22ff      	movs	r2, #255	; 0xff
 8001792:	214b      	movs	r1, #75	; 0x4b
 8001794:	4618      	mov	r0, r3
 8001796:	f7ff ff4d 	bl	8001634 <IIC_ByteWrite>
	IIC_ByteWrite(addr ,0x4C,ReleaThre); // ELE5 RELEASE THRESHOLD
 800179a:	79fb      	ldrb	r3, [r7, #7]
 800179c:	22fa      	movs	r2, #250	; 0xfa
 800179e:	214c      	movs	r1, #76	; 0x4c
 80017a0:	4618      	mov	r0, r3
 80017a2:	f7ff ff47 	bl	8001634 <IIC_ByteWrite>
	IIC_ByteWrite(addr ,0x4D,TouchThre); // ELE6 TOUCH THRESHOLD
 80017a6:	79fb      	ldrb	r3, [r7, #7]
 80017a8:	22ff      	movs	r2, #255	; 0xff
 80017aa:	214d      	movs	r1, #77	; 0x4d
 80017ac:	4618      	mov	r0, r3
 80017ae:	f7ff ff41 	bl	8001634 <IIC_ByteWrite>
	IIC_ByteWrite(addr ,0x4E,ReleaThre); // ELE6 RELEASE THRESHOLD
 80017b2:	79fb      	ldrb	r3, [r7, #7]
 80017b4:	22fa      	movs	r2, #250	; 0xfa
 80017b6:	214e      	movs	r1, #78	; 0x4e
 80017b8:	4618      	mov	r0, r3
 80017ba:	f7ff ff3b 	bl	8001634 <IIC_ByteWrite>
	IIC_ByteWrite(addr ,0x4F,TouchThre); // ELE7 TOUCH THRESHOLD
 80017be:	79fb      	ldrb	r3, [r7, #7]
 80017c0:	22ff      	movs	r2, #255	; 0xff
 80017c2:	214f      	movs	r1, #79	; 0x4f
 80017c4:	4618      	mov	r0, r3
 80017c6:	f7ff ff35 	bl	8001634 <IIC_ByteWrite>
	IIC_ByteWrite(addr ,0x50,ReleaThre); // ELE7 RELEASE THRESHOLD
 80017ca:	79fb      	ldrb	r3, [r7, #7]
 80017cc:	22fa      	movs	r2, #250	; 0xfa
 80017ce:	2150      	movs	r1, #80	; 0x50
 80017d0:	4618      	mov	r0, r3
 80017d2:	f7ff ff2f 	bl	8001634 <IIC_ByteWrite>
	IIC_ByteWrite(addr ,0x51,TouchThre); // ELE8 TOUCH THRESHOLD
 80017d6:	79fb      	ldrb	r3, [r7, #7]
 80017d8:	22ff      	movs	r2, #255	; 0xff
 80017da:	2151      	movs	r1, #81	; 0x51
 80017dc:	4618      	mov	r0, r3
 80017de:	f7ff ff29 	bl	8001634 <IIC_ByteWrite>
	IIC_ByteWrite(addr ,0x52,ReleaThre); // ELE8 RELEASE THRESHOLD
 80017e2:	79fb      	ldrb	r3, [r7, #7]
 80017e4:	22fa      	movs	r2, #250	; 0xfa
 80017e6:	2152      	movs	r1, #82	; 0x52
 80017e8:	4618      	mov	r0, r3
 80017ea:	f7ff ff23 	bl	8001634 <IIC_ByteWrite>
	IIC_ByteWrite(addr ,0x53,TouchThre); // ELE9 TOUCH THRESHOLD
 80017ee:	79fb      	ldrb	r3, [r7, #7]
 80017f0:	22ff      	movs	r2, #255	; 0xff
 80017f2:	2153      	movs	r1, #83	; 0x53
 80017f4:	4618      	mov	r0, r3
 80017f6:	f7ff ff1d 	bl	8001634 <IIC_ByteWrite>
	IIC_ByteWrite(addr ,0x54,ReleaThre); // ELE9 RELEASE THRESHOLD
 80017fa:	79fb      	ldrb	r3, [r7, #7]
 80017fc:	22fa      	movs	r2, #250	; 0xfa
 80017fe:	2154      	movs	r1, #84	; 0x54
 8001800:	4618      	mov	r0, r3
 8001802:	f7ff ff17 	bl	8001634 <IIC_ByteWrite>
	IIC_ByteWrite(addr ,0x55,TouchThre); // ELE10 TOUCH THRESHOLD
 8001806:	79fb      	ldrb	r3, [r7, #7]
 8001808:	22ff      	movs	r2, #255	; 0xff
 800180a:	2155      	movs	r1, #85	; 0x55
 800180c:	4618      	mov	r0, r3
 800180e:	f7ff ff11 	bl	8001634 <IIC_ByteWrite>
	IIC_ByteWrite(addr ,0x56,ReleaThre); // ELE10 RELEASE THRESHOLD
 8001812:	79fb      	ldrb	r3, [r7, #7]
 8001814:	22fa      	movs	r2, #250	; 0xfa
 8001816:	2156      	movs	r1, #86	; 0x56
 8001818:	4618      	mov	r0, r3
 800181a:	f7ff ff0b 	bl	8001634 <IIC_ByteWrite>
	IIC_ByteWrite(addr ,0x57,TouchThre); // ELE11 TOUCH THRESHOLD
 800181e:	79fb      	ldrb	r3, [r7, #7]
 8001820:	22ff      	movs	r2, #255	; 0xff
 8001822:	2157      	movs	r1, #87	; 0x57
 8001824:	4618      	mov	r0, r3
 8001826:	f7ff ff05 	bl	8001634 <IIC_ByteWrite>
	IIC_ByteWrite(addr ,0x58,ReleaThre); // ELE11 RELEASE THRESHOLD
 800182a:	79fb      	ldrb	r3, [r7, #7]
 800182c:	22fa      	movs	r2, #250	; 0xfa
 800182e:	2158      	movs	r1, #88	; 0x58
 8001830:	4618      	mov	r0, r3
 8001832:	f7ff feff 	bl	8001634 <IIC_ByteWrite>

	  //touch /release debounce

	IIC_ByteWrite(addr ,0x5B,0x00);
 8001836:	79fb      	ldrb	r3, [r7, #7]
 8001838:	2200      	movs	r2, #0
 800183a:	215b      	movs	r1, #91	; 0x5b
 800183c:	4618      	mov	r0, r3
 800183e:	f7ff fef9 	bl	8001634 <IIC_ByteWrite>

	  // response time = SFI(10) X ESI(8ms) = 80ms

	IIC_ByteWrite(addr ,0x5D,0x13);
 8001842:	79fb      	ldrb	r3, [r7, #7]
 8001844:	2213      	movs	r2, #19
 8001846:	215d      	movs	r1, #93	; 0x5d
 8001848:	4618      	mov	r0, r3
 800184a:	f7ff fef3 	bl	8001634 <IIC_ByteWrite>

	  //FFI=18

	IIC_ByteWrite(addr ,0x5C,0x80);
 800184e:	79fb      	ldrb	r3, [r7, #7]
 8001850:	2280      	movs	r2, #128	; 0x80
 8001852:	215c      	movs	r1, #92	; 0x5c
 8001854:	4618      	mov	r0, r3
 8001856:	f7ff feed 	bl	8001634 <IIC_ByteWrite>

	  //Auto configuration

	IIC_ByteWrite(addr ,0x7B,0x8F);
 800185a:	79fb      	ldrb	r3, [r7, #7]
 800185c:	228f      	movs	r2, #143	; 0x8f
 800185e:	217b      	movs	r1, #123	; 0x7b
 8001860:	4618      	mov	r0, r3
 8001862:	f7ff fee7 	bl	8001634 <IIC_ByteWrite>

	  // charge to 70% of Vdd , high sensitivity

	IIC_ByteWrite(addr ,0x7D,0xE4);
 8001866:	79fb      	ldrb	r3, [r7, #7]
 8001868:	22e4      	movs	r2, #228	; 0xe4
 800186a:	217d      	movs	r1, #125	; 0x7d
 800186c:	4618      	mov	r0, r3
 800186e:	f7ff fee1 	bl	8001634 <IIC_ByteWrite>
	IIC_ByteWrite(addr ,0x7E,0x94);
 8001872:	79fb      	ldrb	r3, [r7, #7]
 8001874:	2294      	movs	r2, #148	; 0x94
 8001876:	217e      	movs	r1, #126	; 0x7e
 8001878:	4618      	mov	r0, r3
 800187a:	f7ff fedb 	bl	8001634 <IIC_ByteWrite>
	IIC_ByteWrite(addr ,0x7F,0xCD);
 800187e:	79fb      	ldrb	r3, [r7, #7]
 8001880:	22cd      	movs	r2, #205	; 0xcd
 8001882:	217f      	movs	r1, #127	; 0x7f
 8001884:	4618      	mov	r0, r3
 8001886:	f7ff fed5 	bl	8001634 <IIC_ByteWrite>

	  // 12 electrodes enabled

	IIC_ByteWrite(addr ,0x5E,0xCC);
 800188a:	79fb      	ldrb	r3, [r7, #7]
 800188c:	22cc      	movs	r2, #204	; 0xcc
 800188e:	215e      	movs	r1, #94	; 0x5e
 8001890:	4618      	mov	r0, r3
 8001892:	f7ff fecf 	bl	8001634 <IIC_ByteWrite>

}
 8001896:	bf00      	nop
 8001898:	3708      	adds	r7, #8
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
	...

080018a0 <determinePixel>:

// Returns a 2 wide array of which pixel was touched on the board
// Input is the concatenated version of each capacitive touch board
uint8_t determinePixel(uint16_t* input, uint8_t* pixelSelected) {
 80018a0:	b5b0      	push	{r4, r5, r7, lr}
 80018a2:	b086      	sub	sp, #24
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
 80018a8:	6039      	str	r1, [r7, #0]
	if ((input[0] & 0x0FFF) == 0 | (((input[2] & 0x0FFF)) << 12 | (input[1] & 0x0FFF)) == 0)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	881b      	ldrh	r3, [r3, #0]
 80018ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	bf0c      	ite	eq
 80018b6:	2301      	moveq	r3, #1
 80018b8:	2300      	movne	r3, #0
 80018ba:	b2da      	uxtb	r2, r3
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	3304      	adds	r3, #4
 80018c0:	881b      	ldrh	r3, [r3, #0]
 80018c2:	0319      	lsls	r1, r3, #12
 80018c4:	4b3f      	ldr	r3, [pc, #252]	; (80019c4 <determinePixel+0x124>)
 80018c6:	400b      	ands	r3, r1
 80018c8:	6879      	ldr	r1, [r7, #4]
 80018ca:	3102      	adds	r1, #2
 80018cc:	8809      	ldrh	r1, [r1, #0]
 80018ce:	f3c1 010b 	ubfx	r1, r1, #0, #12
 80018d2:	430b      	orrs	r3, r1
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	bf0c      	ite	eq
 80018d8:	2301      	moveq	r3, #1
 80018da:	2300      	movne	r3, #0
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	4313      	orrs	r3, r2
 80018e0:	b2db      	uxtb	r3, r3
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d001      	beq.n	80018ea <determinePixel+0x4a>
			return 0;
 80018e6:	2300      	movs	r3, #0
 80018e8:	e067      	b.n	80019ba <determinePixel+0x11a>
	uint16_t log2X = log2(input[0] & 0x0FFF);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	881b      	ldrh	r3, [r3, #0]
 80018ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018f2:	4618      	mov	r0, r3
 80018f4:	f7fe fe0e 	bl	8000514 <__aeabi_i2d>
 80018f8:	4602      	mov	r2, r0
 80018fa:	460b      	mov	r3, r1
 80018fc:	ec43 2b10 	vmov	d0, r2, r3
 8001900:	f00b f892 	bl	800ca28 <log2>
 8001904:	ec53 2b10 	vmov	r2, r3, d0
 8001908:	4610      	mov	r0, r2
 800190a:	4619      	mov	r1, r3
 800190c:	f7ff f91c 	bl	8000b48 <__aeabi_d2uiz>
 8001910:	4603      	mov	r3, r0
 8001912:	82fb      	strh	r3, [r7, #22]
	// X is a power of 2
	if (ceil(log2X) == floor(log2X)) {
 8001914:	8afb      	ldrh	r3, [r7, #22]
 8001916:	4618      	mov	r0, r3
 8001918:	f7fe fdec 	bl	80004f4 <__aeabi_ui2d>
 800191c:	4604      	mov	r4, r0
 800191e:	460d      	mov	r5, r1
 8001920:	8afb      	ldrh	r3, [r7, #22]
 8001922:	4618      	mov	r0, r3
 8001924:	f7fe fde6 	bl	80004f4 <__aeabi_ui2d>
 8001928:	4602      	mov	r2, r0
 800192a:	460b      	mov	r3, r1
 800192c:	4620      	mov	r0, r4
 800192e:	4629      	mov	r1, r5
 8001930:	f7ff f8c2 	bl	8000ab8 <__aeabi_dcmpeq>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	d035      	beq.n	80019a6 <determinePixel+0x106>
		pixelSelected[0] = log2X;
 800193a:	8afb      	ldrh	r3, [r7, #22]
 800193c:	b2da      	uxtb	r2, r3
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	701a      	strb	r2, [r3, #0]
	} else
		return 0;
	uint32_t yInput = ((input[2] & 0x0FFF)) << 12 | (input[1] & 0x0FFF);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	3304      	adds	r3, #4
 8001946:	881b      	ldrh	r3, [r3, #0]
 8001948:	031a      	lsls	r2, r3, #12
 800194a:	4b1e      	ldr	r3, [pc, #120]	; (80019c4 <determinePixel+0x124>)
 800194c:	4013      	ands	r3, r2
 800194e:	687a      	ldr	r2, [r7, #4]
 8001950:	3202      	adds	r2, #2
 8001952:	8812      	ldrh	r2, [r2, #0]
 8001954:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8001958:	4313      	orrs	r3, r2
 800195a:	613b      	str	r3, [r7, #16]
	uint16_t log2Y = log2(yInput);
 800195c:	6938      	ldr	r0, [r7, #16]
 800195e:	f7fe fdc9 	bl	80004f4 <__aeabi_ui2d>
 8001962:	4602      	mov	r2, r0
 8001964:	460b      	mov	r3, r1
 8001966:	ec43 2b10 	vmov	d0, r2, r3
 800196a:	f00b f85d 	bl	800ca28 <log2>
 800196e:	ec53 2b10 	vmov	r2, r3, d0
 8001972:	4610      	mov	r0, r2
 8001974:	4619      	mov	r1, r3
 8001976:	f7ff f8e7 	bl	8000b48 <__aeabi_d2uiz>
 800197a:	4603      	mov	r3, r0
 800197c:	81fb      	strh	r3, [r7, #14]
	if (ceil(log2Y) == floor (log2Y))  {
 800197e:	89fb      	ldrh	r3, [r7, #14]
 8001980:	4618      	mov	r0, r3
 8001982:	f7fe fdb7 	bl	80004f4 <__aeabi_ui2d>
 8001986:	4604      	mov	r4, r0
 8001988:	460d      	mov	r5, r1
 800198a:	89fb      	ldrh	r3, [r7, #14]
 800198c:	4618      	mov	r0, r3
 800198e:	f7fe fdb1 	bl	80004f4 <__aeabi_ui2d>
 8001992:	4602      	mov	r2, r0
 8001994:	460b      	mov	r3, r1
 8001996:	4620      	mov	r0, r4
 8001998:	4629      	mov	r1, r5
 800199a:	f7ff f88d 	bl	8000ab8 <__aeabi_dcmpeq>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d102      	bne.n	80019aa <determinePixel+0x10a>
 80019a4:	e008      	b.n	80019b8 <determinePixel+0x118>
		return 0;
 80019a6:	2300      	movs	r3, #0
 80019a8:	e007      	b.n	80019ba <determinePixel+0x11a>
		pixelSelected[1] = log2Y;
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	3301      	adds	r3, #1
 80019ae:	89fa      	ldrh	r2, [r7, #14]
 80019b0:	b2d2      	uxtb	r2, r2
 80019b2:	701a      	strb	r2, [r3, #0]
	} else
		return 0;
	return 1;
 80019b4:	2301      	movs	r3, #1
 80019b6:	e000      	b.n	80019ba <determinePixel+0x11a>
		return 0;
 80019b8:	2300      	movs	r3, #0
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	3718      	adds	r7, #24
 80019be:	46bd      	mov	sp, r7
 80019c0:	bdb0      	pop	{r4, r5, r7, pc}
 80019c2:	bf00      	nop
 80019c4:	00fff000 	.word	0x00fff000

080019c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019cc:	b672      	cpsid	i
}
 80019ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019d0:	e7fe      	b.n	80019d0 <Error_Handler+0x8>
	...

080019d4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019da:	2300      	movs	r3, #0
 80019dc:	607b      	str	r3, [r7, #4]
 80019de:	4b10      	ldr	r3, [pc, #64]	; (8001a20 <HAL_MspInit+0x4c>)
 80019e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019e2:	4a0f      	ldr	r2, [pc, #60]	; (8001a20 <HAL_MspInit+0x4c>)
 80019e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019e8:	6453      	str	r3, [r2, #68]	; 0x44
 80019ea:	4b0d      	ldr	r3, [pc, #52]	; (8001a20 <HAL_MspInit+0x4c>)
 80019ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019f2:	607b      	str	r3, [r7, #4]
 80019f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019f6:	2300      	movs	r3, #0
 80019f8:	603b      	str	r3, [r7, #0]
 80019fa:	4b09      	ldr	r3, [pc, #36]	; (8001a20 <HAL_MspInit+0x4c>)
 80019fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019fe:	4a08      	ldr	r2, [pc, #32]	; (8001a20 <HAL_MspInit+0x4c>)
 8001a00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a04:	6413      	str	r3, [r2, #64]	; 0x40
 8001a06:	4b06      	ldr	r3, [pc, #24]	; (8001a20 <HAL_MspInit+0x4c>)
 8001a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a0e:	603b      	str	r3, [r7, #0]
 8001a10:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001a12:	2007      	movs	r0, #7
 8001a14:	f001 f872 	bl	8002afc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a18:	bf00      	nop
 8001a1a:	3708      	adds	r7, #8
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	40023800 	.word	0x40023800

08001a24 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b08a      	sub	sp, #40	; 0x28
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a2c:	f107 0314 	add.w	r3, r7, #20
 8001a30:	2200      	movs	r2, #0
 8001a32:	601a      	str	r2, [r3, #0]
 8001a34:	605a      	str	r2, [r3, #4]
 8001a36:	609a      	str	r2, [r3, #8]
 8001a38:	60da      	str	r2, [r3, #12]
 8001a3a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a19      	ldr	r2, [pc, #100]	; (8001aa8 <HAL_I2C_MspInit+0x84>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d12c      	bne.n	8001aa0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a46:	2300      	movs	r3, #0
 8001a48:	613b      	str	r3, [r7, #16]
 8001a4a:	4b18      	ldr	r3, [pc, #96]	; (8001aac <HAL_I2C_MspInit+0x88>)
 8001a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4e:	4a17      	ldr	r2, [pc, #92]	; (8001aac <HAL_I2C_MspInit+0x88>)
 8001a50:	f043 0302 	orr.w	r3, r3, #2
 8001a54:	6313      	str	r3, [r2, #48]	; 0x30
 8001a56:	4b15      	ldr	r3, [pc, #84]	; (8001aac <HAL_I2C_MspInit+0x88>)
 8001a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5a:	f003 0302 	and.w	r3, r3, #2
 8001a5e:	613b      	str	r3, [r7, #16]
 8001a60:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001a62:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001a66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a68:	2312      	movs	r3, #18
 8001a6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a70:	2300      	movs	r3, #0
 8001a72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a74:	2304      	movs	r3, #4
 8001a76:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a78:	f107 0314 	add.w	r3, r7, #20
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	480c      	ldr	r0, [pc, #48]	; (8001ab0 <HAL_I2C_MspInit+0x8c>)
 8001a80:	f001 fc88 	bl	8003394 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a84:	2300      	movs	r3, #0
 8001a86:	60fb      	str	r3, [r7, #12]
 8001a88:	4b08      	ldr	r3, [pc, #32]	; (8001aac <HAL_I2C_MspInit+0x88>)
 8001a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8c:	4a07      	ldr	r2, [pc, #28]	; (8001aac <HAL_I2C_MspInit+0x88>)
 8001a8e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a92:	6413      	str	r3, [r2, #64]	; 0x40
 8001a94:	4b05      	ldr	r3, [pc, #20]	; (8001aac <HAL_I2C_MspInit+0x88>)
 8001a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a9c:	60fb      	str	r3, [r7, #12]
 8001a9e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001aa0:	bf00      	nop
 8001aa2:	3728      	adds	r7, #40	; 0x28
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	40005400 	.word	0x40005400
 8001aac:	40023800 	.word	0x40023800
 8001ab0:	40020400 	.word	0x40020400

08001ab4 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b08e      	sub	sp, #56	; 0x38
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001abc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	601a      	str	r2, [r3, #0]
 8001ac4:	605a      	str	r2, [r3, #4]
 8001ac6:	609a      	str	r2, [r3, #8]
 8001ac8:	60da      	str	r2, [r3, #12]
 8001aca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001acc:	f107 0314 	add.w	r3, r7, #20
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	601a      	str	r2, [r3, #0]
 8001ad4:	605a      	str	r2, [r3, #4]
 8001ad6:	609a      	str	r2, [r3, #8]
 8001ad8:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a31      	ldr	r2, [pc, #196]	; (8001ba4 <HAL_I2S_MspInit+0xf0>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d15a      	bne.n	8001b9a <HAL_I2S_MspInit+0xe6>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8001ae8:	23c0      	movs	r3, #192	; 0xc0
 8001aea:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001aec:	2302      	movs	r3, #2
 8001aee:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001af0:	f107 0314 	add.w	r3, r7, #20
 8001af4:	4618      	mov	r0, r3
 8001af6:	f005 fdc7 	bl	8007688 <HAL_RCCEx_PeriphCLKConfig>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d001      	beq.n	8001b04 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8001b00:	f7ff ff62 	bl	80019c8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001b04:	2300      	movs	r3, #0
 8001b06:	613b      	str	r3, [r7, #16]
 8001b08:	4b27      	ldr	r3, [pc, #156]	; (8001ba8 <HAL_I2S_MspInit+0xf4>)
 8001b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0c:	4a26      	ldr	r2, [pc, #152]	; (8001ba8 <HAL_I2S_MspInit+0xf4>)
 8001b0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b12:	6413      	str	r3, [r2, #64]	; 0x40
 8001b14:	4b24      	ldr	r3, [pc, #144]	; (8001ba8 <HAL_I2S_MspInit+0xf4>)
 8001b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b1c:	613b      	str	r3, [r7, #16]
 8001b1e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b20:	2300      	movs	r3, #0
 8001b22:	60fb      	str	r3, [r7, #12]
 8001b24:	4b20      	ldr	r3, [pc, #128]	; (8001ba8 <HAL_I2S_MspInit+0xf4>)
 8001b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b28:	4a1f      	ldr	r2, [pc, #124]	; (8001ba8 <HAL_I2S_MspInit+0xf4>)
 8001b2a:	f043 0301 	orr.w	r3, r3, #1
 8001b2e:	6313      	str	r3, [r2, #48]	; 0x30
 8001b30:	4b1d      	ldr	r3, [pc, #116]	; (8001ba8 <HAL_I2S_MspInit+0xf4>)
 8001b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b34:	f003 0301 	and.w	r3, r3, #1
 8001b38:	60fb      	str	r3, [r7, #12]
 8001b3a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	60bb      	str	r3, [r7, #8]
 8001b40:	4b19      	ldr	r3, [pc, #100]	; (8001ba8 <HAL_I2S_MspInit+0xf4>)
 8001b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b44:	4a18      	ldr	r2, [pc, #96]	; (8001ba8 <HAL_I2S_MspInit+0xf4>)
 8001b46:	f043 0304 	orr.w	r3, r3, #4
 8001b4a:	6313      	str	r3, [r2, #48]	; 0x30
 8001b4c:	4b16      	ldr	r3, [pc, #88]	; (8001ba8 <HAL_I2S_MspInit+0xf4>)
 8001b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b50:	f003 0304 	and.w	r3, r3, #4
 8001b54:	60bb      	str	r3, [r7, #8]
 8001b56:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001b58:	2310      	movs	r3, #16
 8001b5a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b5c:	2302      	movs	r3, #2
 8001b5e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b60:	2300      	movs	r3, #0
 8001b62:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b64:	2300      	movs	r3, #0
 8001b66:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001b68:	2306      	movs	r3, #6
 8001b6a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001b6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b70:	4619      	mov	r1, r3
 8001b72:	480e      	ldr	r0, [pc, #56]	; (8001bac <HAL_I2S_MspInit+0xf8>)
 8001b74:	f001 fc0e 	bl	8003394 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001b78:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001b7c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b7e:	2302      	movs	r3, #2
 8001b80:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b82:	2300      	movs	r3, #0
 8001b84:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b86:	2300      	movs	r3, #0
 8001b88:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001b8a:	2306      	movs	r3, #6
 8001b8c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b92:	4619      	mov	r1, r3
 8001b94:	4806      	ldr	r0, [pc, #24]	; (8001bb0 <HAL_I2S_MspInit+0xfc>)
 8001b96:	f001 fbfd 	bl	8003394 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001b9a:	bf00      	nop
 8001b9c:	3738      	adds	r7, #56	; 0x38
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	40003c00 	.word	0x40003c00
 8001ba8:	40023800 	.word	0x40023800
 8001bac:	40020000 	.word	0x40020000
 8001bb0:	40020800 	.word	0x40020800

08001bb4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b08a      	sub	sp, #40	; 0x28
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bbc:	f107 0314 	add.w	r3, r7, #20
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	601a      	str	r2, [r3, #0]
 8001bc4:	605a      	str	r2, [r3, #4]
 8001bc6:	609a      	str	r2, [r3, #8]
 8001bc8:	60da      	str	r2, [r3, #12]
 8001bca:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a19      	ldr	r2, [pc, #100]	; (8001c38 <HAL_SPI_MspInit+0x84>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d12b      	bne.n	8001c2e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	613b      	str	r3, [r7, #16]
 8001bda:	4b18      	ldr	r3, [pc, #96]	; (8001c3c <HAL_SPI_MspInit+0x88>)
 8001bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bde:	4a17      	ldr	r2, [pc, #92]	; (8001c3c <HAL_SPI_MspInit+0x88>)
 8001be0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001be4:	6453      	str	r3, [r2, #68]	; 0x44
 8001be6:	4b15      	ldr	r3, [pc, #84]	; (8001c3c <HAL_SPI_MspInit+0x88>)
 8001be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001bee:	613b      	str	r3, [r7, #16]
 8001bf0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	60fb      	str	r3, [r7, #12]
 8001bf6:	4b11      	ldr	r3, [pc, #68]	; (8001c3c <HAL_SPI_MspInit+0x88>)
 8001bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfa:	4a10      	ldr	r2, [pc, #64]	; (8001c3c <HAL_SPI_MspInit+0x88>)
 8001bfc:	f043 0301 	orr.w	r3, r3, #1
 8001c00:	6313      	str	r3, [r2, #48]	; 0x30
 8001c02:	4b0e      	ldr	r3, [pc, #56]	; (8001c3c <HAL_SPI_MspInit+0x88>)
 8001c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c06:	f003 0301 	and.w	r3, r3, #1
 8001c0a:	60fb      	str	r3, [r7, #12]
 8001c0c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001c0e:	23e0      	movs	r3, #224	; 0xe0
 8001c10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c12:	2302      	movs	r3, #2
 8001c14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c16:	2300      	movs	r3, #0
 8001c18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001c1e:	2305      	movs	r3, #5
 8001c20:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c22:	f107 0314 	add.w	r3, r7, #20
 8001c26:	4619      	mov	r1, r3
 8001c28:	4805      	ldr	r0, [pc, #20]	; (8001c40 <HAL_SPI_MspInit+0x8c>)
 8001c2a:	f001 fbb3 	bl	8003394 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001c2e:	bf00      	nop
 8001c30:	3728      	adds	r7, #40	; 0x28
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	40013000 	.word	0x40013000
 8001c3c:	40023800 	.word	0x40023800
 8001c40:	40020000 	.word	0x40020000

08001c44 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b084      	sub	sp, #16
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a27      	ldr	r2, [pc, #156]	; (8001cf0 <HAL_TIM_PWM_MspInit+0xac>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d148      	bne.n	8001ce8 <HAL_TIM_PWM_MspInit+0xa4>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c56:	2300      	movs	r3, #0
 8001c58:	60fb      	str	r3, [r7, #12]
 8001c5a:	4b26      	ldr	r3, [pc, #152]	; (8001cf4 <HAL_TIM_PWM_MspInit+0xb0>)
 8001c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c5e:	4a25      	ldr	r2, [pc, #148]	; (8001cf4 <HAL_TIM_PWM_MspInit+0xb0>)
 8001c60:	f043 0301 	orr.w	r3, r3, #1
 8001c64:	6453      	str	r3, [r2, #68]	; 0x44
 8001c66:	4b23      	ldr	r3, [pc, #140]	; (8001cf4 <HAL_TIM_PWM_MspInit+0xb0>)
 8001c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c6a:	f003 0301 	and.w	r3, r3, #1
 8001c6e:	60fb      	str	r3, [r7, #12]
 8001c70:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1_CH2_CH3 Init */
    hdma_tim1_ch1_ch2_ch3.Instance = DMA2_Stream6;
 8001c72:	4b21      	ldr	r3, [pc, #132]	; (8001cf8 <HAL_TIM_PWM_MspInit+0xb4>)
 8001c74:	4a21      	ldr	r2, [pc, #132]	; (8001cfc <HAL_TIM_PWM_MspInit+0xb8>)
 8001c76:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1_ch2_ch3.Init.Channel = DMA_CHANNEL_0;
 8001c78:	4b1f      	ldr	r3, [pc, #124]	; (8001cf8 <HAL_TIM_PWM_MspInit+0xb4>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1_ch2_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001c7e:	4b1e      	ldr	r3, [pc, #120]	; (8001cf8 <HAL_TIM_PWM_MspInit+0xb4>)
 8001c80:	2240      	movs	r2, #64	; 0x40
 8001c82:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1_ch2_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c84:	4b1c      	ldr	r3, [pc, #112]	; (8001cf8 <HAL_TIM_PWM_MspInit+0xb4>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1_ch2_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8001c8a:	4b1b      	ldr	r3, [pc, #108]	; (8001cf8 <HAL_TIM_PWM_MspInit+0xb4>)
 8001c8c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c90:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1_ch2_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001c92:	4b19      	ldr	r3, [pc, #100]	; (8001cf8 <HAL_TIM_PWM_MspInit+0xb4>)
 8001c94:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001c98:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1_ch2_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001c9a:	4b17      	ldr	r3, [pc, #92]	; (8001cf8 <HAL_TIM_PWM_MspInit+0xb4>)
 8001c9c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ca0:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1_ch2_ch3.Init.Mode = DMA_NORMAL;
 8001ca2:	4b15      	ldr	r3, [pc, #84]	; (8001cf8 <HAL_TIM_PWM_MspInit+0xb4>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1_ch2_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8001ca8:	4b13      	ldr	r3, [pc, #76]	; (8001cf8 <HAL_TIM_PWM_MspInit+0xb4>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1_ch2_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001cae:	4b12      	ldr	r3, [pc, #72]	; (8001cf8 <HAL_TIM_PWM_MspInit+0xb4>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1_ch2_ch3) != HAL_OK)
 8001cb4:	4810      	ldr	r0, [pc, #64]	; (8001cf8 <HAL_TIM_PWM_MspInit+0xb4>)
 8001cb6:	f000 ff63 	bl	8002b80 <HAL_DMA_Init>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d001      	beq.n	8001cc4 <HAL_TIM_PWM_MspInit+0x80>
    {
      Error_Handler();
 8001cc0:	f7ff fe82 	bl	80019c8 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1_ch2_ch3);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	4a0c      	ldr	r2, [pc, #48]	; (8001cf8 <HAL_TIM_PWM_MspInit+0xb4>)
 8001cc8:	625a      	str	r2, [r3, #36]	; 0x24
 8001cca:	4a0b      	ldr	r2, [pc, #44]	; (8001cf8 <HAL_TIM_PWM_MspInit+0xb4>)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC2],hdma_tim1_ch1_ch2_ch3);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	4a09      	ldr	r2, [pc, #36]	; (8001cf8 <HAL_TIM_PWM_MspInit+0xb4>)
 8001cd4:	629a      	str	r2, [r3, #40]	; 0x28
 8001cd6:	4a08      	ldr	r2, [pc, #32]	; (8001cf8 <HAL_TIM_PWM_MspInit+0xb4>)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim1_ch1_ch2_ch3);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	4a06      	ldr	r2, [pc, #24]	; (8001cf8 <HAL_TIM_PWM_MspInit+0xb4>)
 8001ce0:	62da      	str	r2, [r3, #44]	; 0x2c
 8001ce2:	4a05      	ldr	r2, [pc, #20]	; (8001cf8 <HAL_TIM_PWM_MspInit+0xb4>)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001ce8:	bf00      	nop
 8001cea:	3710      	adds	r7, #16
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	40010000 	.word	0x40010000
 8001cf4:	40023800 	.word	0x40023800
 8001cf8:	200003b4 	.word	0x200003b4
 8001cfc:	400264a0 	.word	0x400264a0

08001d00 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b088      	sub	sp, #32
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d08:	f107 030c 	add.w	r3, r7, #12
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	601a      	str	r2, [r3, #0]
 8001d10:	605a      	str	r2, [r3, #4]
 8001d12:	609a      	str	r2, [r3, #8]
 8001d14:	60da      	str	r2, [r3, #12]
 8001d16:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a12      	ldr	r2, [pc, #72]	; (8001d68 <HAL_TIM_MspPostInit+0x68>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d11e      	bne.n	8001d60 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d22:	2300      	movs	r3, #0
 8001d24:	60bb      	str	r3, [r7, #8]
 8001d26:	4b11      	ldr	r3, [pc, #68]	; (8001d6c <HAL_TIM_MspPostInit+0x6c>)
 8001d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2a:	4a10      	ldr	r2, [pc, #64]	; (8001d6c <HAL_TIM_MspPostInit+0x6c>)
 8001d2c:	f043 0310 	orr.w	r3, r3, #16
 8001d30:	6313      	str	r3, [r2, #48]	; 0x30
 8001d32:	4b0e      	ldr	r3, [pc, #56]	; (8001d6c <HAL_TIM_MspPostInit+0x6c>)
 8001d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d36:	f003 0310 	and.w	r3, r3, #16
 8001d3a:	60bb      	str	r3, [r7, #8]
 8001d3c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8001d3e:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8001d42:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d44:	2302      	movs	r3, #2
 8001d46:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001d50:	2301      	movs	r3, #1
 8001d52:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d54:	f107 030c 	add.w	r3, r7, #12
 8001d58:	4619      	mov	r1, r3
 8001d5a:	4805      	ldr	r0, [pc, #20]	; (8001d70 <HAL_TIM_MspPostInit+0x70>)
 8001d5c:	f001 fb1a 	bl	8003394 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001d60:	bf00      	nop
 8001d62:	3720      	adds	r7, #32
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	40010000 	.word	0x40010000
 8001d6c:	40023800 	.word	0x40023800
 8001d70:	40021000 	.word	0x40021000

08001d74 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b08a      	sub	sp, #40	; 0x28
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d7c:	f107 0314 	add.w	r3, r7, #20
 8001d80:	2200      	movs	r2, #0
 8001d82:	601a      	str	r2, [r3, #0]
 8001d84:	605a      	str	r2, [r3, #4]
 8001d86:	609a      	str	r2, [r3, #8]
 8001d88:	60da      	str	r2, [r3, #12]
 8001d8a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a19      	ldr	r2, [pc, #100]	; (8001df8 <HAL_UART_MspInit+0x84>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d12b      	bne.n	8001dee <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d96:	2300      	movs	r3, #0
 8001d98:	613b      	str	r3, [r7, #16]
 8001d9a:	4b18      	ldr	r3, [pc, #96]	; (8001dfc <HAL_UART_MspInit+0x88>)
 8001d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d9e:	4a17      	ldr	r2, [pc, #92]	; (8001dfc <HAL_UART_MspInit+0x88>)
 8001da0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001da4:	6413      	str	r3, [r2, #64]	; 0x40
 8001da6:	4b15      	ldr	r3, [pc, #84]	; (8001dfc <HAL_UART_MspInit+0x88>)
 8001da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001daa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dae:	613b      	str	r3, [r7, #16]
 8001db0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001db2:	2300      	movs	r3, #0
 8001db4:	60fb      	str	r3, [r7, #12]
 8001db6:	4b11      	ldr	r3, [pc, #68]	; (8001dfc <HAL_UART_MspInit+0x88>)
 8001db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dba:	4a10      	ldr	r2, [pc, #64]	; (8001dfc <HAL_UART_MspInit+0x88>)
 8001dbc:	f043 0301 	orr.w	r3, r3, #1
 8001dc0:	6313      	str	r3, [r2, #48]	; 0x30
 8001dc2:	4b0e      	ldr	r3, [pc, #56]	; (8001dfc <HAL_UART_MspInit+0x88>)
 8001dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc6:	f003 0301 	and.w	r3, r3, #1
 8001dca:	60fb      	str	r3, [r7, #12]
 8001dcc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001dce:	230c      	movs	r3, #12
 8001dd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dd2:	2302      	movs	r3, #2
 8001dd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dda:	2303      	movs	r3, #3
 8001ddc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001dde:	2307      	movs	r3, #7
 8001de0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001de2:	f107 0314 	add.w	r3, r7, #20
 8001de6:	4619      	mov	r1, r3
 8001de8:	4805      	ldr	r0, [pc, #20]	; (8001e00 <HAL_UART_MspInit+0x8c>)
 8001dea:	f001 fad3 	bl	8003394 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001dee:	bf00      	nop
 8001df0:	3728      	adds	r7, #40	; 0x28
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	40004400 	.word	0x40004400
 8001dfc:	40023800 	.word	0x40023800
 8001e00:	40020000 	.word	0x40020000

08001e04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e04:	b480      	push	{r7}
 8001e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e08:	e7fe      	b.n	8001e08 <NMI_Handler+0x4>

08001e0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e0a:	b480      	push	{r7}
 8001e0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e0e:	e7fe      	b.n	8001e0e <HardFault_Handler+0x4>

08001e10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e10:	b480      	push	{r7}
 8001e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e14:	e7fe      	b.n	8001e14 <MemManage_Handler+0x4>

08001e16 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e16:	b480      	push	{r7}
 8001e18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e1a:	e7fe      	b.n	8001e1a <BusFault_Handler+0x4>

08001e1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e20:	e7fe      	b.n	8001e20 <UsageFault_Handler+0x4>

08001e22 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e22:	b480      	push	{r7}
 8001e24:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e26:	bf00      	nop
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr

08001e30 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e30:	b480      	push	{r7}
 8001e32:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e34:	bf00      	nop
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr

08001e3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e3e:	b480      	push	{r7}
 8001e40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e42:	bf00      	nop
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr

08001e4c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e50:	f000 fd40 	bl	80028d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e54:	bf00      	nop
 8001e56:	bd80      	pop	{r7, pc}

08001e58 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001e5c:	4802      	ldr	r0, [pc, #8]	; (8001e68 <OTG_FS_IRQHandler+0x10>)
 8001e5e:	f001 feb9 	bl	8003bd4 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001e62:	bf00      	nop
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	20000b28 	.word	0x20000b28

08001e6c <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1_ch2_ch3);
 8001e70:	4802      	ldr	r0, [pc, #8]	; (8001e7c <DMA2_Stream6_IRQHandler+0x10>)
 8001e72:	f001 f825 	bl	8002ec0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8001e76:	bf00      	nop
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	200003b4 	.word	0x200003b4

08001e80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b086      	sub	sp, #24
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e88:	4a14      	ldr	r2, [pc, #80]	; (8001edc <_sbrk+0x5c>)
 8001e8a:	4b15      	ldr	r3, [pc, #84]	; (8001ee0 <_sbrk+0x60>)
 8001e8c:	1ad3      	subs	r3, r2, r3
 8001e8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e94:	4b13      	ldr	r3, [pc, #76]	; (8001ee4 <_sbrk+0x64>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d102      	bne.n	8001ea2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e9c:	4b11      	ldr	r3, [pc, #68]	; (8001ee4 <_sbrk+0x64>)
 8001e9e:	4a12      	ldr	r2, [pc, #72]	; (8001ee8 <_sbrk+0x68>)
 8001ea0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ea2:	4b10      	ldr	r3, [pc, #64]	; (8001ee4 <_sbrk+0x64>)
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	4413      	add	r3, r2
 8001eaa:	693a      	ldr	r2, [r7, #16]
 8001eac:	429a      	cmp	r2, r3
 8001eae:	d207      	bcs.n	8001ec0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001eb0:	f00a f948 	bl	800c144 <__errno>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	220c      	movs	r2, #12
 8001eb8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001eba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ebe:	e009      	b.n	8001ed4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ec0:	4b08      	ldr	r3, [pc, #32]	; (8001ee4 <_sbrk+0x64>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ec6:	4b07      	ldr	r3, [pc, #28]	; (8001ee4 <_sbrk+0x64>)
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	4413      	add	r3, r2
 8001ece:	4a05      	ldr	r2, [pc, #20]	; (8001ee4 <_sbrk+0x64>)
 8001ed0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	3718      	adds	r7, #24
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}
 8001edc:	20020000 	.word	0x20020000
 8001ee0:	00000400 	.word	0x00000400
 8001ee4:	200000b8 	.word	0x200000b8
 8001ee8:	20000e40 	.word	0x20000e40

08001eec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ef0:	4b06      	ldr	r3, [pc, #24]	; (8001f0c <SystemInit+0x20>)
 8001ef2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ef6:	4a05      	ldr	r2, [pc, #20]	; (8001f0c <SystemInit+0x20>)
 8001ef8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001efc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f00:	bf00      	nop
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr
 8001f0a:	bf00      	nop
 8001f0c:	e000ed00 	.word	0xe000ed00

08001f10 <ws2812b_gpio_init>:
  144,146,148,150,152,154,156,158,160,162,164,167,169,171,173,175,
  177,180,182,184,186,189,191,193,196,198,200,203,205,208,210,213,
  215,218,220,223,225,228,231,233,236,239,241,244,247,249,252,255 };

static void ws2812b_gpio_init(void)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b088      	sub	sp, #32
 8001f14:	af00      	add	r7, sp, #0
	// WS2812B outputs
	WS2812B_GPIO_CLK_ENABLE();
 8001f16:	2300      	movs	r3, #0
 8001f18:	60bb      	str	r3, [r7, #8]
 8001f1a:	4b22      	ldr	r3, [pc, #136]	; (8001fa4 <ws2812b_gpio_init+0x94>)
 8001f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f1e:	4a21      	ldr	r2, [pc, #132]	; (8001fa4 <ws2812b_gpio_init+0x94>)
 8001f20:	f043 0304 	orr.w	r3, r3, #4
 8001f24:	6313      	str	r3, [r2, #48]	; 0x30
 8001f26:	4b1f      	ldr	r3, [pc, #124]	; (8001fa4 <ws2812b_gpio_init+0x94>)
 8001f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2a:	f003 0304 	and.w	r3, r3, #4
 8001f2e:	60bb      	str	r3, [r7, #8]
 8001f30:	68bb      	ldr	r3, [r7, #8]
	GPIO_InitTypeDef  GPIO_InitStruct;
	GPIO_InitStruct.Pin       = WS2812B_PINS;
 8001f32:	230f      	movs	r3, #15
 8001f34:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode      = GPIO_MODE_OUTPUT_PP;
 8001f36:	2301      	movs	r3, #1
 8001f38:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_LOW;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(WS2812B_PORT, &GPIO_InitStruct);
 8001f42:	f107 030c 	add.w	r3, r7, #12
 8001f46:	4619      	mov	r1, r3
 8001f48:	4817      	ldr	r0, [pc, #92]	; (8001fa8 <ws2812b_gpio_init+0x98>)
 8001f4a:	f001 fa23 	bl	8003394 <HAL_GPIO_Init>

	// Enable output pins for debuging to see DMA Full and Half transfer interrupts
	#if defined(LED_BLUE_PORT) && defined(LED_ORANGE_PORT)
		__HAL_RCC_GPIOD_CLK_ENABLE();
 8001f4e:	2300      	movs	r3, #0
 8001f50:	607b      	str	r3, [r7, #4]
 8001f52:	4b14      	ldr	r3, [pc, #80]	; (8001fa4 <ws2812b_gpio_init+0x94>)
 8001f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f56:	4a13      	ldr	r2, [pc, #76]	; (8001fa4 <ws2812b_gpio_init+0x94>)
 8001f58:	f043 0308 	orr.w	r3, r3, #8
 8001f5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f5e:	4b11      	ldr	r3, [pc, #68]	; (8001fa4 <ws2812b_gpio_init+0x94>)
 8001f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f62:	f003 0308 	and.w	r3, r3, #8
 8001f66:	607b      	str	r3, [r7, #4]
 8001f68:	687b      	ldr	r3, [r7, #4]

		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f72:	2302      	movs	r3, #2
 8001f74:	61bb      	str	r3, [r7, #24]

		GPIO_InitStruct.Pin = LED_BLUE_PIN;
 8001f76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001f7a:	60fb      	str	r3, [r7, #12]
		HAL_GPIO_Init(LED_BLUE_PORT, &GPIO_InitStruct);
 8001f7c:	f107 030c 	add.w	r3, r7, #12
 8001f80:	4619      	mov	r1, r3
 8001f82:	480a      	ldr	r0, [pc, #40]	; (8001fac <ws2812b_gpio_init+0x9c>)
 8001f84:	f001 fa06 	bl	8003394 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = LED_ORANGE_PIN;
 8001f88:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f8c:	60fb      	str	r3, [r7, #12]
		HAL_GPIO_Init(LED_ORANGE_PORT, &GPIO_InitStruct);
 8001f8e:	f107 030c 	add.w	r3, r7, #12
 8001f92:	4619      	mov	r1, r3
 8001f94:	4805      	ldr	r0, [pc, #20]	; (8001fac <ws2812b_gpio_init+0x9c>)
 8001f96:	f001 f9fd 	bl	8003394 <HAL_GPIO_Init>
	#endif
}
 8001f9a:	bf00      	nop
 8001f9c:	3720      	adds	r7, #32
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	40023800 	.word	0x40023800
 8001fa8:	40020800 	.word	0x40020800
 8001fac:	40020c00 	.word	0x40020c00

08001fb0 <TIM1_init>:

uint32_t tim_period;
uint32_t timer_reset_pulse_period;

static void TIM1_init(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b084      	sub	sp, #16
 8001fb4:	af00      	add	r7, sp, #0
	// TIM2 Periph clock enable
	__HAL_RCC_TIM1_CLK_ENABLE();
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	607b      	str	r3, [r7, #4]
 8001fba:	4b52      	ldr	r3, [pc, #328]	; (8002104 <TIM1_init+0x154>)
 8001fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fbe:	4a51      	ldr	r2, [pc, #324]	; (8002104 <TIM1_init+0x154>)
 8001fc0:	f043 0301 	orr.w	r3, r3, #1
 8001fc4:	6453      	str	r3, [r2, #68]	; 0x44
 8001fc6:	4b4f      	ldr	r3, [pc, #316]	; (8002104 <TIM1_init+0x154>)
 8001fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fca:	f003 0301 	and.w	r3, r3, #1
 8001fce:	607b      	str	r3, [r7, #4]
 8001fd0:	687b      	ldr	r3, [r7, #4]

	// This computation of pulse length should work ok,
	// at some slower core speeds it needs some tuning.
	tim_period =  SystemCoreClock / 800000; // 0,125us period (10 times lower the 1,25us period to have fixed math below)
 8001fd2:	4b4d      	ldr	r3, [pc, #308]	; (8002108 <TIM1_init+0x158>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	0a1b      	lsrs	r3, r3, #8
 8001fd8:	4a4c      	ldr	r2, [pc, #304]	; (800210c <TIM1_init+0x15c>)
 8001fda:	fba2 2303 	umull	r2, r3, r2, r3
 8001fde:	091b      	lsrs	r3, r3, #4
 8001fe0:	4a4b      	ldr	r2, [pc, #300]	; (8002110 <TIM1_init+0x160>)
 8001fe2:	6013      	str	r3, [r2, #0]
	timer_reset_pulse_period = (SystemCoreClock / (320 * 60)); // 60us just to be sure
 8001fe4:	4b48      	ldr	r3, [pc, #288]	; (8002108 <TIM1_init+0x158>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a4a      	ldr	r2, [pc, #296]	; (8002114 <TIM1_init+0x164>)
 8001fea:	fba2 2303 	umull	r2, r3, r2, r3
 8001fee:	0adb      	lsrs	r3, r3, #11
 8001ff0:	4a49      	ldr	r2, [pc, #292]	; (8002118 <TIM1_init+0x168>)
 8001ff2:	6013      	str	r3, [r2, #0]

	uint32_t cc1 = (10 * tim_period) / 36;
 8001ff4:	4b46      	ldr	r3, [pc, #280]	; (8002110 <TIM1_init+0x160>)
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	4613      	mov	r3, r2
 8001ffa:	009b      	lsls	r3, r3, #2
 8001ffc:	4413      	add	r3, r2
 8001ffe:	005b      	lsls	r3, r3, #1
 8002000:	461a      	mov	r2, r3
 8002002:	4b46      	ldr	r3, [pc, #280]	; (800211c <TIM1_init+0x16c>)
 8002004:	fba3 2302 	umull	r2, r3, r3, r2
 8002008:	08db      	lsrs	r3, r3, #3
 800200a:	60fb      	str	r3, [r7, #12]
	uint32_t cc2 = (10 * tim_period) / 15;
 800200c:	4b40      	ldr	r3, [pc, #256]	; (8002110 <TIM1_init+0x160>)
 800200e:	681a      	ldr	r2, [r3, #0]
 8002010:	4613      	mov	r3, r2
 8002012:	009b      	lsls	r3, r3, #2
 8002014:	4413      	add	r3, r2
 8002016:	005b      	lsls	r3, r3, #1
 8002018:	461a      	mov	r2, r3
 800201a:	4b41      	ldr	r3, [pc, #260]	; (8002120 <TIM1_init+0x170>)
 800201c:	fba3 2302 	umull	r2, r3, r3, r2
 8002020:	08db      	lsrs	r3, r3, #3
 8002022:	60bb      	str	r3, [r7, #8]

	TIM1_handle.Instance = TIM1;
 8002024:	4b3f      	ldr	r3, [pc, #252]	; (8002124 <TIM1_init+0x174>)
 8002026:	4a40      	ldr	r2, [pc, #256]	; (8002128 <TIM1_init+0x178>)
 8002028:	601a      	str	r2, [r3, #0]

	TIM1_handle.Init.Period            = tim_period;
 800202a:	4b39      	ldr	r3, [pc, #228]	; (8002110 <TIM1_init+0x160>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a3d      	ldr	r2, [pc, #244]	; (8002124 <TIM1_init+0x174>)
 8002030:	60d3      	str	r3, [r2, #12]
	TIM1_handle.Init.RepetitionCounter = 0;
 8002032:	4b3c      	ldr	r3, [pc, #240]	; (8002124 <TIM1_init+0x174>)
 8002034:	2200      	movs	r2, #0
 8002036:	615a      	str	r2, [r3, #20]
	TIM1_handle.Init.Prescaler         = 0;
 8002038:	4b3a      	ldr	r3, [pc, #232]	; (8002124 <TIM1_init+0x174>)
 800203a:	2200      	movs	r2, #0
 800203c:	605a      	str	r2, [r3, #4]
	TIM1_handle.Init.ClockDivision     = TIM_CLOCKDIVISION_DIV1;
 800203e:	4b39      	ldr	r3, [pc, #228]	; (8002124 <TIM1_init+0x174>)
 8002040:	2200      	movs	r2, #0
 8002042:	611a      	str	r2, [r3, #16]
	TIM1_handle.Init.CounterMode       = TIM_COUNTERMODE_UP;
 8002044:	4b37      	ldr	r3, [pc, #220]	; (8002124 <TIM1_init+0x174>)
 8002046:	2200      	movs	r2, #0
 8002048:	609a      	str	r2, [r3, #8]
	HAL_TIM_PWM_Init(&TIM1_handle);
 800204a:	4836      	ldr	r0, [pc, #216]	; (8002124 <TIM1_init+0x174>)
 800204c:	f005 fd4e 	bl	8007aec <HAL_TIM_PWM_Init>

	HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002050:	2200      	movs	r2, #0
 8002052:	2100      	movs	r1, #0
 8002054:	2019      	movs	r0, #25
 8002056:	f000 fd5c 	bl	8002b12 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800205a:	2019      	movs	r0, #25
 800205c:	f000 fd75 	bl	8002b4a <HAL_NVIC_EnableIRQ>

	tim2OC1.OCMode       = TIM_OCMODE_PWM1;
 8002060:	4b32      	ldr	r3, [pc, #200]	; (800212c <TIM1_init+0x17c>)
 8002062:	2260      	movs	r2, #96	; 0x60
 8002064:	601a      	str	r2, [r3, #0]
	tim2OC1.OCPolarity   = TIM_OCPOLARITY_HIGH;
 8002066:	4b31      	ldr	r3, [pc, #196]	; (800212c <TIM1_init+0x17c>)
 8002068:	2200      	movs	r2, #0
 800206a:	609a      	str	r2, [r3, #8]
	tim2OC1.Pulse        = cc1;
 800206c:	4a2f      	ldr	r2, [pc, #188]	; (800212c <TIM1_init+0x17c>)
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	6053      	str	r3, [r2, #4]
	tim2OC1.OCNPolarity  = TIM_OCNPOLARITY_HIGH;
 8002072:	4b2e      	ldr	r3, [pc, #184]	; (800212c <TIM1_init+0x17c>)
 8002074:	2200      	movs	r2, #0
 8002076:	60da      	str	r2, [r3, #12]
	tim2OC1.OCFastMode   = TIM_OCFAST_DISABLE;
 8002078:	4b2c      	ldr	r3, [pc, #176]	; (800212c <TIM1_init+0x17c>)
 800207a:	2200      	movs	r2, #0
 800207c:	611a      	str	r2, [r3, #16]
	HAL_TIM_PWM_ConfigChannel(&TIM1_handle, &tim2OC1, TIM_CHANNEL_1);
 800207e:	2200      	movs	r2, #0
 8002080:	492a      	ldr	r1, [pc, #168]	; (800212c <TIM1_init+0x17c>)
 8002082:	4828      	ldr	r0, [pc, #160]	; (8002124 <TIM1_init+0x174>)
 8002084:	f005 ff52 	bl	8007f2c <HAL_TIM_PWM_ConfigChannel>

	tim2OC2.OCMode       = TIM_OCMODE_PWM1;
 8002088:	4b29      	ldr	r3, [pc, #164]	; (8002130 <TIM1_init+0x180>)
 800208a:	2260      	movs	r2, #96	; 0x60
 800208c:	601a      	str	r2, [r3, #0]
	tim2OC2.OCPolarity   = TIM_OCPOLARITY_HIGH;
 800208e:	4b28      	ldr	r3, [pc, #160]	; (8002130 <TIM1_init+0x180>)
 8002090:	2200      	movs	r2, #0
 8002092:	609a      	str	r2, [r3, #8]
	tim2OC2.Pulse        = cc2;
 8002094:	4a26      	ldr	r2, [pc, #152]	; (8002130 <TIM1_init+0x180>)
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	6053      	str	r3, [r2, #4]
	tim2OC2.OCNPolarity  = TIM_OCNPOLARITY_HIGH;
 800209a:	4b25      	ldr	r3, [pc, #148]	; (8002130 <TIM1_init+0x180>)
 800209c:	2200      	movs	r2, #0
 800209e:	60da      	str	r2, [r3, #12]
	tim2OC2.OCFastMode   = TIM_OCFAST_DISABLE;
 80020a0:	4b23      	ldr	r3, [pc, #140]	; (8002130 <TIM1_init+0x180>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	611a      	str	r2, [r3, #16]
	tim2OC2.OCIdleState  = TIM_OCIDLESTATE_RESET;
 80020a6:	4b22      	ldr	r3, [pc, #136]	; (8002130 <TIM1_init+0x180>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	615a      	str	r2, [r3, #20]
	tim2OC2.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80020ac:	4b20      	ldr	r3, [pc, #128]	; (8002130 <TIM1_init+0x180>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	619a      	str	r2, [r3, #24]
	HAL_TIM_PWM_ConfigChannel(&TIM1_handle, &tim2OC2, TIM_CHANNEL_2);
 80020b2:	2204      	movs	r2, #4
 80020b4:	491e      	ldr	r1, [pc, #120]	; (8002130 <TIM1_init+0x180>)
 80020b6:	481b      	ldr	r0, [pc, #108]	; (8002124 <TIM1_init+0x174>)
 80020b8:	f005 ff38 	bl	8007f2c <HAL_TIM_PWM_ConfigChannel>


	HAL_TIM_Base_Start(&TIM1_handle);
 80020bc:	4819      	ldr	r0, [pc, #100]	; (8002124 <TIM1_init+0x174>)
 80020be:	f005 fcad 	bl	8007a1c <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&TIM1_handle, TIM_CHANNEL_1);
 80020c2:	2100      	movs	r1, #0
 80020c4:	4817      	ldr	r0, [pc, #92]	; (8002124 <TIM1_init+0x174>)
 80020c6:	f005 fd61 	bl	8007b8c <HAL_TIM_PWM_Start>

	__HAL_TIM_DISABLE(&TIM1_handle);
 80020ca:	4b16      	ldr	r3, [pc, #88]	; (8002124 <TIM1_init+0x174>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	6a1a      	ldr	r2, [r3, #32]
 80020d0:	f241 1311 	movw	r3, #4369	; 0x1111
 80020d4:	4013      	ands	r3, r2
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d10f      	bne.n	80020fa <TIM1_init+0x14a>
 80020da:	4b12      	ldr	r3, [pc, #72]	; (8002124 <TIM1_init+0x174>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	6a1a      	ldr	r2, [r3, #32]
 80020e0:	f240 4344 	movw	r3, #1092	; 0x444
 80020e4:	4013      	ands	r3, r2
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d107      	bne.n	80020fa <TIM1_init+0x14a>
 80020ea:	4b0e      	ldr	r3, [pc, #56]	; (8002124 <TIM1_init+0x174>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	4b0c      	ldr	r3, [pc, #48]	; (8002124 <TIM1_init+0x174>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f022 0201 	bic.w	r2, r2, #1
 80020f8:	601a      	str	r2, [r3, #0]

}
 80020fa:	bf00      	nop
 80020fc:	3710      	adds	r7, #16
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	40023800 	.word	0x40023800
 8002108:	20000000 	.word	0x20000000
 800210c:	014f8b59 	.word	0x014f8b59
 8002110:	20000624 	.word	0x20000624
 8002114:	1b4e81b5 	.word	0x1b4e81b5
 8002118:	2000055c 	.word	0x2000055c
 800211c:	38e38e39 	.word	0x38e38e39
 8002120:	88888889 	.word	0x88888889
 8002124:	200005dc 	.word	0x200005dc
 8002128:	40010000 	.word	0x40010000
 800212c:	200005c0 	.word	0x200005c0
 8002130:	20000540 	.word	0x20000540

08002134 <DMA2_init>:

uint32_t dummy;


static void DMA2_init(void)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b082      	sub	sp, #8
 8002138:	af00      	add	r7, sp, #0

	// TIM2 Update event
	__HAL_RCC_DMA2_CLK_ENABLE();
 800213a:	2300      	movs	r3, #0
 800213c:	607b      	str	r3, [r7, #4]
 800213e:	4b65      	ldr	r3, [pc, #404]	; (80022d4 <DMA2_init+0x1a0>)
 8002140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002142:	4a64      	ldr	r2, [pc, #400]	; (80022d4 <DMA2_init+0x1a0>)
 8002144:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002148:	6313      	str	r3, [r2, #48]	; 0x30
 800214a:	4b62      	ldr	r3, [pc, #392]	; (80022d4 <DMA2_init+0x1a0>)
 800214c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002152:	607b      	str	r3, [r7, #4]
 8002154:	687b      	ldr	r3, [r7, #4]

	dmaUpdate.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002156:	4b60      	ldr	r3, [pc, #384]	; (80022d8 <DMA2_init+0x1a4>)
 8002158:	2240      	movs	r2, #64	; 0x40
 800215a:	609a      	str	r2, [r3, #8]
	dmaUpdate.Init.PeriphInc = DMA_PINC_DISABLE;
 800215c:	4b5e      	ldr	r3, [pc, #376]	; (80022d8 <DMA2_init+0x1a4>)
 800215e:	2200      	movs	r2, #0
 8002160:	60da      	str	r2, [r3, #12]
	dmaUpdate.Init.MemInc = DMA_MINC_DISABLE;
 8002162:	4b5d      	ldr	r3, [pc, #372]	; (80022d8 <DMA2_init+0x1a4>)
 8002164:	2200      	movs	r2, #0
 8002166:	611a      	str	r2, [r3, #16]
	dmaUpdate.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002168:	4b5b      	ldr	r3, [pc, #364]	; (80022d8 <DMA2_init+0x1a4>)
 800216a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800216e:	615a      	str	r2, [r3, #20]
	dmaUpdate.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002170:	4b59      	ldr	r3, [pc, #356]	; (80022d8 <DMA2_init+0x1a4>)
 8002172:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002176:	619a      	str	r2, [r3, #24]
	dmaUpdate.Init.Mode = DMA_CIRCULAR;
 8002178:	4b57      	ldr	r3, [pc, #348]	; (80022d8 <DMA2_init+0x1a4>)
 800217a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800217e:	61da      	str	r2, [r3, #28]
	dmaUpdate.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002180:	4b55      	ldr	r3, [pc, #340]	; (80022d8 <DMA2_init+0x1a4>)
 8002182:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002186:	621a      	str	r2, [r3, #32]
	dmaUpdate.Init.Channel = DMA_CHANNEL_6;
 8002188:	4b53      	ldr	r3, [pc, #332]	; (80022d8 <DMA2_init+0x1a4>)
 800218a:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 800218e:	605a      	str	r2, [r3, #4]

	dmaUpdate.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002190:	4b51      	ldr	r3, [pc, #324]	; (80022d8 <DMA2_init+0x1a4>)
 8002192:	2200      	movs	r2, #0
 8002194:	625a      	str	r2, [r3, #36]	; 0x24
	dmaUpdate.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002196:	4b50      	ldr	r3, [pc, #320]	; (80022d8 <DMA2_init+0x1a4>)
 8002198:	2203      	movs	r2, #3
 800219a:	629a      	str	r2, [r3, #40]	; 0x28
	dmaUpdate.Init.MemBurst = DMA_MBURST_SINGLE;
 800219c:	4b4e      	ldr	r3, [pc, #312]	; (80022d8 <DMA2_init+0x1a4>)
 800219e:	2200      	movs	r2, #0
 80021a0:	62da      	str	r2, [r3, #44]	; 0x2c
	dmaUpdate.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80021a2:	4b4d      	ldr	r3, [pc, #308]	; (80022d8 <DMA2_init+0x1a4>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	631a      	str	r2, [r3, #48]	; 0x30

	dmaUpdate.Instance = DMA2_Stream5;
 80021a8:	4b4b      	ldr	r3, [pc, #300]	; (80022d8 <DMA2_init+0x1a4>)
 80021aa:	4a4c      	ldr	r2, [pc, #304]	; (80022dc <DMA2_init+0x1a8>)
 80021ac:	601a      	str	r2, [r3, #0]
	//dmaUpdate.XferCpltCallback  = TransferComplete;
	//dmaUpdate.XferErrorCallback = TransferError;

	HAL_DMA_DeInit(&dmaUpdate);
 80021ae:	484a      	ldr	r0, [pc, #296]	; (80022d8 <DMA2_init+0x1a4>)
 80021b0:	f000 fd94 	bl	8002cdc <HAL_DMA_DeInit>
	HAL_DMA_Init(&dmaUpdate);
 80021b4:	4848      	ldr	r0, [pc, #288]	; (80022d8 <DMA2_init+0x1a4>)
 80021b6:	f000 fce3 	bl	8002b80 <HAL_DMA_Init>
	//HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
	//HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
	HAL_DMA_Start(&dmaUpdate, (uint32_t)WS2812_IO_High, (uint32_t)(&WS2812B_PORT->BSRR), BUFFER_SIZE);
 80021ba:	4949      	ldr	r1, [pc, #292]	; (80022e0 <DMA2_init+0x1ac>)
 80021bc:	2330      	movs	r3, #48	; 0x30
 80021be:	4a49      	ldr	r2, [pc, #292]	; (80022e4 <DMA2_init+0x1b0>)
 80021c0:	4845      	ldr	r0, [pc, #276]	; (80022d8 <DMA2_init+0x1a4>)
 80021c2:	f000 fde9 	bl	8002d98 <HAL_DMA_Start>
	//HAL_DMA_Start(&dmaUpdate, (uint32_t)WS2812_IO_High, (uint32_t)&dummy, BUFFER_SIZE);


	// TIM2 CC1 event
	dmaCC1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80021c6:	4b48      	ldr	r3, [pc, #288]	; (80022e8 <DMA2_init+0x1b4>)
 80021c8:	2240      	movs	r2, #64	; 0x40
 80021ca:	609a      	str	r2, [r3, #8]
	dmaCC1.Init.PeriphInc = DMA_PINC_DISABLE;
 80021cc:	4b46      	ldr	r3, [pc, #280]	; (80022e8 <DMA2_init+0x1b4>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	60da      	str	r2, [r3, #12]
	dmaCC1.Init.MemInc = DMA_MINC_ENABLE;
 80021d2:	4b45      	ldr	r3, [pc, #276]	; (80022e8 <DMA2_init+0x1b4>)
 80021d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80021d8:	611a      	str	r2, [r3, #16]
	dmaCC1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80021da:	4b43      	ldr	r3, [pc, #268]	; (80022e8 <DMA2_init+0x1b4>)
 80021dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80021e0:	615a      	str	r2, [r3, #20]
	dmaCC1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80021e2:	4b41      	ldr	r3, [pc, #260]	; (80022e8 <DMA2_init+0x1b4>)
 80021e4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80021e8:	619a      	str	r2, [r3, #24]
	dmaCC1.Init.Mode = DMA_CIRCULAR;
 80021ea:	4b3f      	ldr	r3, [pc, #252]	; (80022e8 <DMA2_init+0x1b4>)
 80021ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80021f0:	61da      	str	r2, [r3, #28]
	dmaCC1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80021f2:	4b3d      	ldr	r3, [pc, #244]	; (80022e8 <DMA2_init+0x1b4>)
 80021f4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80021f8:	621a      	str	r2, [r3, #32]
	dmaCC1.Init.Channel = DMA_CHANNEL_6;
 80021fa:	4b3b      	ldr	r3, [pc, #236]	; (80022e8 <DMA2_init+0x1b4>)
 80021fc:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8002200:	605a      	str	r2, [r3, #4]

	dmaCC1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002202:	4b39      	ldr	r3, [pc, #228]	; (80022e8 <DMA2_init+0x1b4>)
 8002204:	2200      	movs	r2, #0
 8002206:	625a      	str	r2, [r3, #36]	; 0x24
	dmaCC1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002208:	4b37      	ldr	r3, [pc, #220]	; (80022e8 <DMA2_init+0x1b4>)
 800220a:	2203      	movs	r2, #3
 800220c:	629a      	str	r2, [r3, #40]	; 0x28
	dmaCC1.Init.MemBurst = DMA_MBURST_SINGLE;
 800220e:	4b36      	ldr	r3, [pc, #216]	; (80022e8 <DMA2_init+0x1b4>)
 8002210:	2200      	movs	r2, #0
 8002212:	62da      	str	r2, [r3, #44]	; 0x2c
	dmaCC1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002214:	4b34      	ldr	r3, [pc, #208]	; (80022e8 <DMA2_init+0x1b4>)
 8002216:	2200      	movs	r2, #0
 8002218:	631a      	str	r2, [r3, #48]	; 0x30

	dmaCC1.Instance = DMA2_Stream1;
 800221a:	4b33      	ldr	r3, [pc, #204]	; (80022e8 <DMA2_init+0x1b4>)
 800221c:	4a33      	ldr	r2, [pc, #204]	; (80022ec <DMA2_init+0x1b8>)
 800221e:	601a      	str	r2, [r3, #0]
	//dmaUpdate.XferCpltCallback  = TransferComplete;
	//dmaUpdate.XferErrorCallback = TransferError;
	//dmaUpdate.XferHalfCpltCallback = TransferHalf;
	//HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
	//HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
	HAL_DMA_DeInit(&dmaCC1);
 8002220:	4831      	ldr	r0, [pc, #196]	; (80022e8 <DMA2_init+0x1b4>)
 8002222:	f000 fd5b 	bl	8002cdc <HAL_DMA_DeInit>
	HAL_DMA_Init(&dmaCC1);
 8002226:	4830      	ldr	r0, [pc, #192]	; (80022e8 <DMA2_init+0x1b4>)
 8002228:	f000 fcaa 	bl	8002b80 <HAL_DMA_Init>
	HAL_DMA_Start(&dmaCC1, (uint32_t)ws2812bDmaBitBuffer, (uint32_t)(&WS2812B_PORT->BSRR) + 2, BUFFER_SIZE); //BRR
 800222c:	4930      	ldr	r1, [pc, #192]	; (80022f0 <DMA2_init+0x1bc>)
 800222e:	2330      	movs	r3, #48	; 0x30
 8002230:	4a30      	ldr	r2, [pc, #192]	; (80022f4 <DMA2_init+0x1c0>)
 8002232:	482d      	ldr	r0, [pc, #180]	; (80022e8 <DMA2_init+0x1b4>)
 8002234:	f000 fdb0 	bl	8002d98 <HAL_DMA_Start>
	//HAL_DMA_Start(&dmaCC1, (uint32_t)ws2812bDmaBitBuffer, (uint32_t)&dummy, BUFFER_SIZE); //BRR


	// TIM2 CC2 event
	dmaCC2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002238:	4b2f      	ldr	r3, [pc, #188]	; (80022f8 <DMA2_init+0x1c4>)
 800223a:	2240      	movs	r2, #64	; 0x40
 800223c:	609a      	str	r2, [r3, #8]
	dmaCC2.Init.PeriphInc = DMA_PINC_DISABLE;
 800223e:	4b2e      	ldr	r3, [pc, #184]	; (80022f8 <DMA2_init+0x1c4>)
 8002240:	2200      	movs	r2, #0
 8002242:	60da      	str	r2, [r3, #12]
	dmaCC2.Init.MemInc = DMA_MINC_DISABLE;
 8002244:	4b2c      	ldr	r3, [pc, #176]	; (80022f8 <DMA2_init+0x1c4>)
 8002246:	2200      	movs	r2, #0
 8002248:	611a      	str	r2, [r3, #16]
	dmaCC2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800224a:	4b2b      	ldr	r3, [pc, #172]	; (80022f8 <DMA2_init+0x1c4>)
 800224c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002250:	615a      	str	r2, [r3, #20]
	dmaCC2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002252:	4b29      	ldr	r3, [pc, #164]	; (80022f8 <DMA2_init+0x1c4>)
 8002254:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002258:	619a      	str	r2, [r3, #24]
	dmaCC2.Init.Mode = DMA_CIRCULAR;
 800225a:	4b27      	ldr	r3, [pc, #156]	; (80022f8 <DMA2_init+0x1c4>)
 800225c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002260:	61da      	str	r2, [r3, #28]
	dmaCC2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002262:	4b25      	ldr	r3, [pc, #148]	; (80022f8 <DMA2_init+0x1c4>)
 8002264:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002268:	621a      	str	r2, [r3, #32]
	dmaCC2.Init.Channel = DMA_CHANNEL_6;
 800226a:	4b23      	ldr	r3, [pc, #140]	; (80022f8 <DMA2_init+0x1c4>)
 800226c:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8002270:	605a      	str	r2, [r3, #4]

	dmaCC2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002272:	4b21      	ldr	r3, [pc, #132]	; (80022f8 <DMA2_init+0x1c4>)
 8002274:	2200      	movs	r2, #0
 8002276:	625a      	str	r2, [r3, #36]	; 0x24
	dmaCC2.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002278:	4b1f      	ldr	r3, [pc, #124]	; (80022f8 <DMA2_init+0x1c4>)
 800227a:	2203      	movs	r2, #3
 800227c:	629a      	str	r2, [r3, #40]	; 0x28
	dmaCC2.Init.MemBurst = DMA_MBURST_SINGLE;
 800227e:	4b1e      	ldr	r3, [pc, #120]	; (80022f8 <DMA2_init+0x1c4>)
 8002280:	2200      	movs	r2, #0
 8002282:	62da      	str	r2, [r3, #44]	; 0x2c
	dmaCC2.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002284:	4b1c      	ldr	r3, [pc, #112]	; (80022f8 <DMA2_init+0x1c4>)
 8002286:	2200      	movs	r2, #0
 8002288:	631a      	str	r2, [r3, #48]	; 0x30

	dmaCC2.Instance = DMA2_Stream2;
 800228a:	4b1b      	ldr	r3, [pc, #108]	; (80022f8 <DMA2_init+0x1c4>)
 800228c:	4a1b      	ldr	r2, [pc, #108]	; (80022fc <DMA2_init+0x1c8>)
 800228e:	601a      	str	r2, [r3, #0]

	HAL_DMA_DeInit(&dmaCC2);
 8002290:	4819      	ldr	r0, [pc, #100]	; (80022f8 <DMA2_init+0x1c4>)
 8002292:	f000 fd23 	bl	8002cdc <HAL_DMA_DeInit>

	dmaCC2.XferCpltCallback  = DMA_TransferCompleteHandler;
 8002296:	4b18      	ldr	r3, [pc, #96]	; (80022f8 <DMA2_init+0x1c4>)
 8002298:	4a19      	ldr	r2, [pc, #100]	; (8002300 <DMA2_init+0x1cc>)
 800229a:	63da      	str	r2, [r3, #60]	; 0x3c
	dmaCC2.XferHalfCpltCallback = DMA_TransferHalfHandler;
 800229c:	4b16      	ldr	r3, [pc, #88]	; (80022f8 <DMA2_init+0x1c4>)
 800229e:	4a19      	ldr	r2, [pc, #100]	; (8002304 <DMA2_init+0x1d0>)
 80022a0:	641a      	str	r2, [r3, #64]	; 0x40
	dmaCC2.XferErrorCallback = DMA_TransferError;
 80022a2:	4b15      	ldr	r3, [pc, #84]	; (80022f8 <DMA2_init+0x1c4>)
 80022a4:	4a18      	ldr	r2, [pc, #96]	; (8002308 <DMA2_init+0x1d4>)
 80022a6:	64da      	str	r2, [r3, #76]	; 0x4c

	HAL_DMA_Init(&dmaCC2);
 80022a8:	4813      	ldr	r0, [pc, #76]	; (80022f8 <DMA2_init+0x1c4>)
 80022aa:	f000 fc69 	bl	8002b80 <HAL_DMA_Init>
	HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80022ae:	2200      	movs	r2, #0
 80022b0:	2100      	movs	r1, #0
 80022b2:	203a      	movs	r0, #58	; 0x3a
 80022b4:	f000 fc2d 	bl	8002b12 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80022b8:	203a      	movs	r0, #58	; 0x3a
 80022ba:	f000 fc46 	bl	8002b4a <HAL_NVIC_EnableIRQ>
	HAL_DMA_Start_IT(&dmaCC2, (uint32_t)WS2812_IO_Low, (uint32_t)&WS2812B_PORT->BSRR, BUFFER_SIZE);
 80022be:	4913      	ldr	r1, [pc, #76]	; (800230c <DMA2_init+0x1d8>)
 80022c0:	2330      	movs	r3, #48	; 0x30
 80022c2:	4a08      	ldr	r2, [pc, #32]	; (80022e4 <DMA2_init+0x1b0>)
 80022c4:	480c      	ldr	r0, [pc, #48]	; (80022f8 <DMA2_init+0x1c4>)
 80022c6:	f000 fda2 	bl	8002e0e <HAL_DMA_Start_IT>
	//HAL_DMA_Start_IT(&dmaCC2, (uint32_t)WS2812_IO_Low, (uint32_t)&dummy, BUFFER_SIZE);

	//__HAL_LINKDMA(&Tim2Handle, hdma,  &dmaCC2);

}
 80022ca:	bf00      	nop
 80022cc:	3708      	adds	r7, #8
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	40023800 	.word	0x40023800
 80022d8:	200006ec 	.word	0x200006ec
 80022dc:	40026488 	.word	0x40026488
 80022e0:	20000004 	.word	0x20000004
 80022e4:	40020818 	.word	0x40020818
 80022e8:	20000628 	.word	0x20000628
 80022ec:	40026428 	.word	0x40026428
 80022f0:	2000068c 	.word	0x2000068c
 80022f4:	4002081a 	.word	0x4002081a
 80022f8:	20000560 	.word	0x20000560
 80022fc:	40026440 	.word	0x40026440
 8002300:	08002409 	.word	0x08002409
 8002304:	080023ad 	.word	0x080023ad
 8002308:	0800238d 	.word	0x0800238d
 800230c:	20000008 	.word	0x20000008

08002310 <loadNextFramebufferData>:




static void loadNextFramebufferData(WS2812_BufferItem *bItem, uint32_t row)
{
 8002310:	b590      	push	{r4, r7, lr}
 8002312:	b089      	sub	sp, #36	; 0x24
 8002314:	af02      	add	r7, sp, #8
 8002316:	6078      	str	r0, [r7, #4]
 8002318:	6039      	str	r1, [r7, #0]

	uint32_t r = bItem->frameBufferPointer[bItem->frameBufferCounter++];
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	1c58      	adds	r0, r3, #1
 8002324:	6879      	ldr	r1, [r7, #4]
 8002326:	6088      	str	r0, [r1, #8]
 8002328:	4413      	add	r3, r2
 800232a:	781b      	ldrb	r3, [r3, #0]
 800232c:	617b      	str	r3, [r7, #20]
	uint32_t g = bItem->frameBufferPointer[bItem->frameBufferCounter++];
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	1c58      	adds	r0, r3, #1
 8002338:	6879      	ldr	r1, [r7, #4]
 800233a:	6088      	str	r0, [r1, #8]
 800233c:	4413      	add	r3, r2
 800233e:	781b      	ldrb	r3, [r3, #0]
 8002340:	613b      	str	r3, [r7, #16]
	uint32_t b = bItem->frameBufferPointer[bItem->frameBufferCounter++];
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	1c58      	adds	r0, r3, #1
 800234c:	6879      	ldr	r1, [r7, #4]
 800234e:	6088      	str	r0, [r1, #8]
 8002350:	4413      	add	r3, r2
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	60fb      	str	r3, [r7, #12]

	if(bItem->frameBufferCounter == bItem->frameBufferSize)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	689a      	ldr	r2, [r3, #8]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	429a      	cmp	r2, r3
 8002360:	d102      	bne.n	8002368 <loadNextFramebufferData+0x58>
		bItem->frameBufferCounter = 0;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2200      	movs	r2, #0
 8002366:	609a      	str	r2, [r3, #8]

	ws2812b_set_pixel(bItem->channel, row, r, g, b);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	7b18      	ldrb	r0, [r3, #12]
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	b299      	uxth	r1, r3
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	b2da      	uxtb	r2, r3
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	b2dc      	uxtb	r4, r3
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	b2db      	uxtb	r3, r3
 800237c:	9300      	str	r3, [sp, #0]
 800237e:	4623      	mov	r3, r4
 8002380:	f000 f934 	bl	80025ec <ws2812b_set_pixel>
}
 8002384:	bf00      	nop
 8002386:	371c      	adds	r7, #28
 8002388:	46bd      	mov	sp, r7
 800238a:	bd90      	pop	{r4, r7, pc}

0800238c <DMA_TransferError>:
	__HAL_TIM_ENABLE(&TIM1_handle);
}


void DMA_TransferError(DMA_HandleTypeDef *DmaHandle)
{
 800238c:	b480      	push	{r7}
 800238e:	b085      	sub	sp, #20
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
	volatile int i = 0;
 8002394:	2300      	movs	r3, #0
 8002396:	60fb      	str	r3, [r7, #12]
	i++;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	3301      	adds	r3, #1
 800239c:	60fb      	str	r3, [r7, #12]
}
 800239e:	bf00      	nop
 80023a0:	3714      	adds	r7, #20
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr
	...

080023ac <DMA_TransferHalfHandler>:


void DMA_TransferHalfHandler(DMA_HandleTypeDef *DmaHandle)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b086      	sub	sp, #24
 80023b0:	af02      	add	r7, sp, #8
 80023b2:	6078      	str	r0, [r7, #4]

	// Is this the last LED?
	if(ws2812b.repeatCounter == WS2812B_NUMBER_OF_LEDS)
 80023b4:	4b13      	ldr	r3, [pc, #76]	; (8002404 <DMA_TransferHalfHandler+0x58>)
 80023b6:	699b      	ldr	r3, [r3, #24]
 80023b8:	2bc0      	cmp	r3, #192	; 0xc0
 80023ba:	d108      	bne.n	80023ce <DMA_TransferHalfHandler+0x22>
	 {

		// If this is the last pixel, set the next pixel value to zeros, because
		// the DMA would not stop exactly at the last bit.
		ws2812b_set_pixel(0, 0, 0, 0, 0);
 80023bc:	2300      	movs	r3, #0
 80023be:	9300      	str	r3, [sp, #0]
 80023c0:	2300      	movs	r3, #0
 80023c2:	2200      	movs	r2, #0
 80023c4:	2100      	movs	r1, #0
 80023c6:	2000      	movs	r0, #0
 80023c8:	f000 f910 	bl	80025ec <ws2812b_set_pixel>
		ws2812b.repeatCounter++;
	}



}
 80023cc:	e015      	b.n	80023fa <DMA_TransferHalfHandler+0x4e>
		for( i = 0; i < WS2812_BUFFER_COUNT; i++ )
 80023ce:	2300      	movs	r3, #0
 80023d0:	60fb      	str	r3, [r7, #12]
 80023d2:	e00a      	b.n	80023ea <DMA_TransferHalfHandler+0x3e>
			loadNextFramebufferData(&ws2812b.item[i], 0);
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	011b      	lsls	r3, r3, #4
 80023d8:	4a0a      	ldr	r2, [pc, #40]	; (8002404 <DMA_TransferHalfHandler+0x58>)
 80023da:	4413      	add	r3, r2
 80023dc:	2100      	movs	r1, #0
 80023de:	4618      	mov	r0, r3
 80023e0:	f7ff ff96 	bl	8002310 <loadNextFramebufferData>
		for( i = 0; i < WS2812_BUFFER_COUNT; i++ )
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	3301      	adds	r3, #1
 80023e8:	60fb      	str	r3, [r7, #12]
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d0f1      	beq.n	80023d4 <DMA_TransferHalfHandler+0x28>
		ws2812b.repeatCounter++;
 80023f0:	4b04      	ldr	r3, [pc, #16]	; (8002404 <DMA_TransferHalfHandler+0x58>)
 80023f2:	699b      	ldr	r3, [r3, #24]
 80023f4:	3301      	adds	r3, #1
 80023f6:	4a03      	ldr	r2, [pc, #12]	; (8002404 <DMA_TransferHalfHandler+0x58>)
 80023f8:	6193      	str	r3, [r2, #24]
}
 80023fa:	bf00      	nop
 80023fc:	3710      	adds	r7, #16
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	20000104 	.word	0x20000104

08002408 <DMA_TransferCompleteHandler>:

void DMA_TransferCompleteHandler(DMA_HandleTypeDef *DmaHandle)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b084      	sub	sp, #16
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]

	#if defined(LED_ORANGE_PORT)
		LED_ORANGE_PORT->BSRR = LED_ORANGE_PIN;
 8002410:	4b40      	ldr	r3, [pc, #256]	; (8002514 <DMA_TransferCompleteHandler+0x10c>)
 8002412:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002416:	619a      	str	r2, [r3, #24]
	#endif

	if(ws2812b.repeatCounter == WS2812B_NUMBER_OF_LEDS)
 8002418:	4b3f      	ldr	r3, [pc, #252]	; (8002518 <DMA_TransferCompleteHandler+0x110>)
 800241a:	699b      	ldr	r3, [r3, #24]
 800241c:	2bc0      	cmp	r3, #192	; 0xc0
 800241e:	d15a      	bne.n	80024d6 <DMA_TransferCompleteHandler+0xce>
	{
		// Transfer of all LEDs is done, disable DMA but enable tiemr update IRQ to stop the 50us pulse
		ws2812b.repeatCounter = 0;
 8002420:	4b3d      	ldr	r3, [pc, #244]	; (8002518 <DMA_TransferCompleteHandler+0x110>)
 8002422:	2200      	movs	r2, #0
 8002424:	619a      	str	r2, [r3, #24]

		// Stop timer
		TIM1->CR1 &= ~TIM_CR1_CEN;
 8002426:	4b3d      	ldr	r3, [pc, #244]	; (800251c <DMA_TransferCompleteHandler+0x114>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a3c      	ldr	r2, [pc, #240]	; (800251c <DMA_TransferCompleteHandler+0x114>)
 800242c:	f023 0301 	bic.w	r3, r3, #1
 8002430:	6013      	str	r3, [r2, #0]

		// Disable DMA
		__HAL_DMA_DISABLE(&dmaUpdate);
 8002432:	4b3b      	ldr	r3, [pc, #236]	; (8002520 <DMA_TransferCompleteHandler+0x118>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	4b39      	ldr	r3, [pc, #228]	; (8002520 <DMA_TransferCompleteHandler+0x118>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f022 0201 	bic.w	r2, r2, #1
 8002440:	601a      	str	r2, [r3, #0]
		__HAL_DMA_DISABLE(&dmaCC1);
 8002442:	4b38      	ldr	r3, [pc, #224]	; (8002524 <DMA_TransferCompleteHandler+0x11c>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	681a      	ldr	r2, [r3, #0]
 8002448:	4b36      	ldr	r3, [pc, #216]	; (8002524 <DMA_TransferCompleteHandler+0x11c>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f022 0201 	bic.w	r2, r2, #1
 8002450:	601a      	str	r2, [r3, #0]
		__HAL_DMA_DISABLE(&dmaCC2);
 8002452:	4b35      	ldr	r3, [pc, #212]	; (8002528 <DMA_TransferCompleteHandler+0x120>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	4b33      	ldr	r3, [pc, #204]	; (8002528 <DMA_TransferCompleteHandler+0x120>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f022 0201 	bic.w	r2, r2, #1
 8002460:	601a      	str	r2, [r3, #0]

		// Disable the DMA requests
		__HAL_TIM_DISABLE_DMA(&TIM1_handle, TIM_DMA_UPDATE);
 8002462:	4b32      	ldr	r3, [pc, #200]	; (800252c <DMA_TransferCompleteHandler+0x124>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	68da      	ldr	r2, [r3, #12]
 8002468:	4b30      	ldr	r3, [pc, #192]	; (800252c <DMA_TransferCompleteHandler+0x124>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002470:	60da      	str	r2, [r3, #12]
		__HAL_TIM_DISABLE_DMA(&TIM1_handle, TIM_DMA_CC1);
 8002472:	4b2e      	ldr	r3, [pc, #184]	; (800252c <DMA_TransferCompleteHandler+0x124>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	68da      	ldr	r2, [r3, #12]
 8002478:	4b2c      	ldr	r3, [pc, #176]	; (800252c <DMA_TransferCompleteHandler+0x124>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002480:	60da      	str	r2, [r3, #12]
		__HAL_TIM_DISABLE_DMA(&TIM1_handle, TIM_DMA_CC2);
 8002482:	4b2a      	ldr	r3, [pc, #168]	; (800252c <DMA_TransferCompleteHandler+0x124>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	68da      	ldr	r2, [r3, #12]
 8002488:	4b28      	ldr	r3, [pc, #160]	; (800252c <DMA_TransferCompleteHandler+0x124>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002490:	60da      	str	r2, [r3, #12]

		// Set 50us period for Treset pulse
		//TIM2->PSC = 1000; // For this long period we need prescaler 1000
		TIM1->ARR = timer_reset_pulse_period;
 8002492:	4a22      	ldr	r2, [pc, #136]	; (800251c <DMA_TransferCompleteHandler+0x114>)
 8002494:	4b26      	ldr	r3, [pc, #152]	; (8002530 <DMA_TransferCompleteHandler+0x128>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	62d3      	str	r3, [r2, #44]	; 0x2c
		// Reset the timer
		TIM1->CNT = 0;
 800249a:	4b20      	ldr	r3, [pc, #128]	; (800251c <DMA_TransferCompleteHandler+0x114>)
 800249c:	2200      	movs	r2, #0
 800249e:	625a      	str	r2, [r3, #36]	; 0x24

		// Generate an update event to reload the prescaler value immediately
		TIM1->EGR = TIM_EGR_UG;
 80024a0:	4b1e      	ldr	r3, [pc, #120]	; (800251c <DMA_TransferCompleteHandler+0x114>)
 80024a2:	2201      	movs	r2, #1
 80024a4:	615a      	str	r2, [r3, #20]
		__HAL_TIM_CLEAR_FLAG(&TIM1_handle, TIM_FLAG_UPDATE);
 80024a6:	4b21      	ldr	r3, [pc, #132]	; (800252c <DMA_TransferCompleteHandler+0x124>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f06f 0201 	mvn.w	r2, #1
 80024ae:	611a      	str	r2, [r3, #16]

		// Enable TIM2 Update interrupt for 50us Treset signal
		__HAL_TIM_ENABLE_IT(&TIM1_handle, TIM_IT_UPDATE);
 80024b0:	4b1e      	ldr	r3, [pc, #120]	; (800252c <DMA_TransferCompleteHandler+0x124>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	68da      	ldr	r2, [r3, #12]
 80024b6:	4b1d      	ldr	r3, [pc, #116]	; (800252c <DMA_TransferCompleteHandler+0x124>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f042 0201 	orr.w	r2, r2, #1
 80024be:	60da      	str	r2, [r3, #12]
		// Enable timer
		TIM1->CR1 |= TIM_CR1_CEN;
 80024c0:	4b16      	ldr	r3, [pc, #88]	; (800251c <DMA_TransferCompleteHandler+0x114>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a15      	ldr	r2, [pc, #84]	; (800251c <DMA_TransferCompleteHandler+0x114>)
 80024c6:	f043 0301 	orr.w	r3, r3, #1
 80024ca:	6013      	str	r3, [r2, #0]

		// Manually set outputs to low to generate 50us reset impulse
		WS2812B_PORT->BSRR = WS2812_IO_Low[0];
 80024cc:	4a19      	ldr	r2, [pc, #100]	; (8002534 <DMA_TransferCompleteHandler+0x12c>)
 80024ce:	4b1a      	ldr	r3, [pc, #104]	; (8002538 <DMA_TransferCompleteHandler+0x130>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	6193      	str	r3, [r2, #24]
 80024d4:	e015      	b.n	8002502 <DMA_TransferCompleteHandler+0xfa>
	} else {

		// Load bitbuffer with next RGB LED values
		uint32_t i;
		for( i = 0; i < WS2812_BUFFER_COUNT; i++ )
 80024d6:	2300      	movs	r3, #0
 80024d8:	60fb      	str	r3, [r7, #12]
 80024da:	e00a      	b.n	80024f2 <DMA_TransferCompleteHandler+0xea>
		{
			loadNextFramebufferData(&ws2812b.item[i], 1);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	011b      	lsls	r3, r3, #4
 80024e0:	4a0d      	ldr	r2, [pc, #52]	; (8002518 <DMA_TransferCompleteHandler+0x110>)
 80024e2:	4413      	add	r3, r2
 80024e4:	2101      	movs	r1, #1
 80024e6:	4618      	mov	r0, r3
 80024e8:	f7ff ff12 	bl	8002310 <loadNextFramebufferData>
		for( i = 0; i < WS2812_BUFFER_COUNT; i++ )
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	3301      	adds	r3, #1
 80024f0:	60fb      	str	r3, [r7, #12]
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d0f1      	beq.n	80024dc <DMA_TransferCompleteHandler+0xd4>
		}

		ws2812b.repeatCounter++;
 80024f8:	4b07      	ldr	r3, [pc, #28]	; (8002518 <DMA_TransferCompleteHandler+0x110>)
 80024fa:	699b      	ldr	r3, [r3, #24]
 80024fc:	3301      	adds	r3, #1
 80024fe:	4a06      	ldr	r2, [pc, #24]	; (8002518 <DMA_TransferCompleteHandler+0x110>)
 8002500:	6193      	str	r3, [r2, #24]
	}



	#if defined(LED_ORANGE_PORT)
		LED_ORANGE_PORT->BSRR = LED_ORANGE_PIN << 16;
 8002502:	4b04      	ldr	r3, [pc, #16]	; (8002514 <DMA_TransferCompleteHandler+0x10c>)
 8002504:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002508:	619a      	str	r2, [r3, #24]
	#endif

}
 800250a:	bf00      	nop
 800250c:	3710      	adds	r7, #16
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	40020c00 	.word	0x40020c00
 8002518:	20000104 	.word	0x20000104
 800251c:	40010000 	.word	0x40010000
 8002520:	200006ec 	.word	0x200006ec
 8002524:	20000628 	.word	0x20000628
 8002528:	20000560 	.word	0x20000560
 800252c:	200005dc 	.word	0x200005dc
 8002530:	2000055c 	.word	0x2000055c
 8002534:	40020800 	.word	0x40020800
 8002538:	20000008 	.word	0x20000008

0800253c <DMA2_Stream2_IRQHandler>:

void DMA2_Stream2_IRQHandler(void)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	af00      	add	r7, sp, #0

	#if defined(LED_BLUE_PORT)
		LED_BLUE_PORT->BSRR = LED_BLUE_PIN;
 8002540:	4b06      	ldr	r3, [pc, #24]	; (800255c <DMA2_Stream2_IRQHandler+0x20>)
 8002542:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002546:	619a      	str	r2, [r3, #24]
	#endif

	// Check the interrupt and clear flag
	  HAL_DMA_IRQHandler(&dmaCC2);
 8002548:	4805      	ldr	r0, [pc, #20]	; (8002560 <DMA2_Stream2_IRQHandler+0x24>)
 800254a:	f000 fcb9 	bl	8002ec0 <HAL_DMA_IRQHandler>

	#if defined(LED_BLUE_PORT)
		LED_BLUE_PORT->BSRR = LED_BLUE_PIN << 16;
 800254e:	4b03      	ldr	r3, [pc, #12]	; (800255c <DMA2_Stream2_IRQHandler+0x20>)
 8002550:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002554:	619a      	str	r2, [r3, #24]
	#endif
}
 8002556:	bf00      	nop
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	40020c00 	.word	0x40020c00
 8002560:	20000560 	.word	0x20000560

08002564 <TIM1_UP_TIM10_IRQHandler>:

void TIM1_UP_TIM10_IRQHandler(void)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	af00      	add	r7, sp, #0
	#if defined(LED_ORANGE_PORT)
		LED_ORANGE_PORT->BSRR = LED_ORANGE_PIN;
 8002568:	4b06      	ldr	r3, [pc, #24]	; (8002584 <TIM1_UP_TIM10_IRQHandler+0x20>)
 800256a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800256e:	619a      	str	r2, [r3, #24]
	#endif

	HAL_TIM_IRQHandler(&TIM1_handle);
 8002570:	4805      	ldr	r0, [pc, #20]	; (8002588 <TIM1_UP_TIM10_IRQHandler+0x24>)
 8002572:	f005 fbd3 	bl	8007d1c <HAL_TIM_IRQHandler>

	#if defined(LED_ORANGE_PORT)
		LED_ORANGE_PORT->BSRR = LED_ORANGE_PIN << 16;
 8002576:	4b03      	ldr	r3, [pc, #12]	; (8002584 <TIM1_UP_TIM10_IRQHandler+0x20>)
 8002578:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800257c:	619a      	str	r2, [r3, #24]
	#endif
}
 800257e:	bf00      	nop
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	40020c00 	.word	0x40020c00
 8002588:	200005dc 	.word	0x200005dc

0800258c <HAL_TIM_PeriodElapsedCallback>:

// TIM2 Interrupt Handler gets executed on every TIM2 Update if enabled
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800258c:	b480      	push	{r7}
 800258e:	b083      	sub	sp, #12
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
		__HAL_TIM_DISABLE_IT(&TIM1_handle, TIM_IT_UPDATE);
		// set TransferComplete flag
		ws2812b.transferComplete = 1;
	}*/

    ws2812b.timerPeriodCounter = 0;
 8002594:	4b11      	ldr	r3, [pc, #68]	; (80025dc <HAL_TIM_PeriodElapsedCallback+0x50>)
 8002596:	2200      	movs	r2, #0
 8002598:	615a      	str	r2, [r3, #20]
    TIM1->CR1 = 0; // disable timer
 800259a:	4b11      	ldr	r3, [pc, #68]	; (80025e0 <HAL_TIM_PeriodElapsedCallback+0x54>)
 800259c:	2200      	movs	r2, #0
 800259e:	601a      	str	r2, [r3, #0]

    // disable the TIM2 Update IRQ
    __HAL_TIM_DISABLE_IT(&TIM1_handle, TIM_IT_UPDATE);
 80025a0:	4b10      	ldr	r3, [pc, #64]	; (80025e4 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	68da      	ldr	r2, [r3, #12]
 80025a6:	4b0f      	ldr	r3, [pc, #60]	; (80025e4 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f022 0201 	bic.w	r2, r2, #1
 80025ae:	60da      	str	r2, [r3, #12]

    // Set back 1,25us period
    TIM1->ARR = tim_period;
 80025b0:	4a0b      	ldr	r2, [pc, #44]	; (80025e0 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80025b2:	4b0d      	ldr	r3, [pc, #52]	; (80025e8 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	62d3      	str	r3, [r2, #44]	; 0x2c

    // Generate an update event to reload the Prescaler value immediatly
    TIM1->EGR = TIM_EGR_UG;
 80025b8:	4b09      	ldr	r3, [pc, #36]	; (80025e0 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80025ba:	2201      	movs	r2, #1
 80025bc:	615a      	str	r2, [r3, #20]
    __HAL_TIM_CLEAR_FLAG(&TIM1_handle, TIM_FLAG_UPDATE);
 80025be:	4b09      	ldr	r3, [pc, #36]	; (80025e4 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f06f 0201 	mvn.w	r2, #1
 80025c6:	611a      	str	r2, [r3, #16]

    // set transfer_complete flag
    ws2812b.transferComplete = 1;
 80025c8:	4b04      	ldr	r3, [pc, #16]	; (80025dc <HAL_TIM_PeriodElapsedCallback+0x50>)
 80025ca:	2201      	movs	r2, #1
 80025cc:	741a      	strb	r2, [r3, #16]

}
 80025ce:	bf00      	nop
 80025d0:	370c      	adds	r7, #12
 80025d2:	46bd      	mov	sp, r7
 80025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d8:	4770      	bx	lr
 80025da:	bf00      	nop
 80025dc:	20000104 	.word	0x20000104
 80025e0:	40010000 	.word	0x40010000
 80025e4:	200005dc 	.word	0x200005dc
 80025e8:	20000624 	.word	0x20000624

080025ec <ws2812b_set_pixel>:



static void ws2812b_set_pixel(uint8_t row, uint16_t column, uint8_t red, uint8_t green, uint8_t blue)
{
 80025ec:	b490      	push	{r4, r7}
 80025ee:	b088      	sub	sp, #32
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	4604      	mov	r4, r0
 80025f4:	4608      	mov	r0, r1
 80025f6:	4611      	mov	r1, r2
 80025f8:	461a      	mov	r2, r3
 80025fa:	4623      	mov	r3, r4
 80025fc:	71fb      	strb	r3, [r7, #7]
 80025fe:	4603      	mov	r3, r0
 8002600:	80bb      	strh	r3, [r7, #4]
 8002602:	460b      	mov	r3, r1
 8002604:	71bb      	strb	r3, [r7, #6]
 8002606:	4613      	mov	r3, r2
 8002608:	70fb      	strb	r3, [r7, #3]

	// Apply gamma
	red = gammaTable[red];
 800260a:	79bb      	ldrb	r3, [r7, #6]
 800260c:	4a69      	ldr	r2, [pc, #420]	; (80027b4 <ws2812b_set_pixel+0x1c8>)
 800260e:	5cd3      	ldrb	r3, [r2, r3]
 8002610:	71bb      	strb	r3, [r7, #6]
	green = gammaTable[green];
 8002612:	78fb      	ldrb	r3, [r7, #3]
 8002614:	4a67      	ldr	r2, [pc, #412]	; (80027b4 <ws2812b_set_pixel+0x1c8>)
 8002616:	5cd3      	ldrb	r3, [r2, r3]
 8002618:	70fb      	strb	r3, [r7, #3]
	blue = gammaTable[blue];
 800261a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800261e:	4a65      	ldr	r2, [pc, #404]	; (80027b4 <ws2812b_set_pixel+0x1c8>)
 8002620:	5cd3      	ldrb	r3, [r2, r3]
 8002622:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28


	uint32_t calcCol = (column*24);
 8002626:	88ba      	ldrh	r2, [r7, #4]
 8002628:	4613      	mov	r3, r2
 800262a:	005b      	lsls	r3, r3, #1
 800262c:	4413      	add	r3, r2
 800262e:	00db      	lsls	r3, r3, #3
 8002630:	61fb      	str	r3, [r7, #28]
	uint32_t invRed = ~red;
 8002632:	79bb      	ldrb	r3, [r7, #6]
 8002634:	43db      	mvns	r3, r3
 8002636:	61bb      	str	r3, [r7, #24]
	uint32_t invGreen = ~green;
 8002638:	78fb      	ldrb	r3, [r7, #3]
 800263a:	43db      	mvns	r3, r3
 800263c:	617b      	str	r3, [r7, #20]
	uint32_t invBlue = ~blue;
 800263e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002642:	43db      	mvns	r3, r3
 8002644:	613b      	str	r3, [r7, #16]
	ws2812bDmaBitBuffer[(calcCol+8+7)] |= (((((invRed)<<7) & 0x80)>>7)<<row);
	ws2812bDmaBitBuffer[(calcCol+16+7)] |= (((((invBlue)<<7) & 0x80)>>7)<<row);
#elif defined(SETPIX_4)

	// Bitband optimizations with pure increments, 5us interrupts
	uint32_t *bitBand = BITBAND_SRAM(&ws2812bDmaBitBuffer[(calcCol)], row);
 8002646:	69fb      	ldr	r3, [r7, #28]
 8002648:	005b      	lsls	r3, r3, #1
 800264a:	4a5b      	ldr	r2, [pc, #364]	; (80027b8 <ws2812b_set_pixel+0x1cc>)
 800264c:	4413      	add	r3, r2
 800264e:	f103 4361 	add.w	r3, r3, #3774873600	; 0xe1000000
 8002652:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8002656:	015b      	lsls	r3, r3, #5
 8002658:	79fa      	ldrb	r2, [r7, #7]
 800265a:	0092      	lsls	r2, r2, #2
 800265c:	4413      	add	r3, r2
 800265e:	60fb      	str	r3, [r7, #12]

	*bitBand =  (invGreen >> 7);
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	09da      	lsrs	r2, r3, #7
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	3340      	adds	r3, #64	; 0x40
 800266c:	60fb      	str	r3, [r7, #12]

	*bitBand = (invGreen >> 6);
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	099a      	lsrs	r2, r3, #6
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	3340      	adds	r3, #64	; 0x40
 800267a:	60fb      	str	r3, [r7, #12]

	*bitBand = (invGreen >> 5);
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	095a      	lsrs	r2, r3, #5
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	3340      	adds	r3, #64	; 0x40
 8002688:	60fb      	str	r3, [r7, #12]

	*bitBand = (invGreen >> 4);
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	091a      	lsrs	r2, r3, #4
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	3340      	adds	r3, #64	; 0x40
 8002696:	60fb      	str	r3, [r7, #12]

	*bitBand = (invGreen >> 3);
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	08da      	lsrs	r2, r3, #3
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	3340      	adds	r3, #64	; 0x40
 80026a4:	60fb      	str	r3, [r7, #12]

	*bitBand = (invGreen >> 2);
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	089a      	lsrs	r2, r3, #2
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	3340      	adds	r3, #64	; 0x40
 80026b2:	60fb      	str	r3, [r7, #12]

	*bitBand = (invGreen >> 1);
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	085a      	lsrs	r2, r3, #1
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	3340      	adds	r3, #64	; 0x40
 80026c0:	60fb      	str	r3, [r7, #12]

	*bitBand = (invGreen >> 0);
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	697a      	ldr	r2, [r7, #20]
 80026c6:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	3340      	adds	r3, #64	; 0x40
 80026cc:	60fb      	str	r3, [r7, #12]

	// RED
	*bitBand =  (invRed >> 7);
 80026ce:	69bb      	ldr	r3, [r7, #24]
 80026d0:	09da      	lsrs	r2, r3, #7
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	3340      	adds	r3, #64	; 0x40
 80026da:	60fb      	str	r3, [r7, #12]

	*bitBand = (invRed >> 6);
 80026dc:	69bb      	ldr	r3, [r7, #24]
 80026de:	099a      	lsrs	r2, r3, #6
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	3340      	adds	r3, #64	; 0x40
 80026e8:	60fb      	str	r3, [r7, #12]

	*bitBand = (invRed >> 5);
 80026ea:	69bb      	ldr	r3, [r7, #24]
 80026ec:	095a      	lsrs	r2, r3, #5
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	3340      	adds	r3, #64	; 0x40
 80026f6:	60fb      	str	r3, [r7, #12]

	*bitBand = (invRed >> 4);
 80026f8:	69bb      	ldr	r3, [r7, #24]
 80026fa:	091a      	lsrs	r2, r3, #4
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	3340      	adds	r3, #64	; 0x40
 8002704:	60fb      	str	r3, [r7, #12]

	*bitBand = (invRed >> 3);
 8002706:	69bb      	ldr	r3, [r7, #24]
 8002708:	08da      	lsrs	r2, r3, #3
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	3340      	adds	r3, #64	; 0x40
 8002712:	60fb      	str	r3, [r7, #12]

	*bitBand = (invRed >> 2);
 8002714:	69bb      	ldr	r3, [r7, #24]
 8002716:	089a      	lsrs	r2, r3, #2
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	3340      	adds	r3, #64	; 0x40
 8002720:	60fb      	str	r3, [r7, #12]

	*bitBand = (invRed >> 1);
 8002722:	69bb      	ldr	r3, [r7, #24]
 8002724:	085a      	lsrs	r2, r3, #1
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	3340      	adds	r3, #64	; 0x40
 800272e:	60fb      	str	r3, [r7, #12]

	*bitBand = (invRed >> 0);
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	69ba      	ldr	r2, [r7, #24]
 8002734:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	3340      	adds	r3, #64	; 0x40
 800273a:	60fb      	str	r3, [r7, #12]

	// BLUE
	*bitBand =  (invBlue >> 7);
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	09da      	lsrs	r2, r3, #7
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	3340      	adds	r3, #64	; 0x40
 8002748:	60fb      	str	r3, [r7, #12]

	*bitBand = (invBlue >> 6);
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	099a      	lsrs	r2, r3, #6
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	3340      	adds	r3, #64	; 0x40
 8002756:	60fb      	str	r3, [r7, #12]

	*bitBand = (invBlue >> 5);
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	095a      	lsrs	r2, r3, #5
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	3340      	adds	r3, #64	; 0x40
 8002764:	60fb      	str	r3, [r7, #12]

	*bitBand = (invBlue >> 4);
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	091a      	lsrs	r2, r3, #4
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	3340      	adds	r3, #64	; 0x40
 8002772:	60fb      	str	r3, [r7, #12]

	*bitBand = (invBlue >> 3);
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	08da      	lsrs	r2, r3, #3
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	3340      	adds	r3, #64	; 0x40
 8002780:	60fb      	str	r3, [r7, #12]

	*bitBand = (invBlue >> 2);
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	089a      	lsrs	r2, r3, #2
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	3340      	adds	r3, #64	; 0x40
 800278e:	60fb      	str	r3, [r7, #12]

	*bitBand = (invBlue >> 1);
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	085a      	lsrs	r2, r3, #1
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	3340      	adds	r3, #64	; 0x40
 800279c:	60fb      	str	r3, [r7, #12]

	*bitBand = (invBlue >> 0);
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	693a      	ldr	r2, [r7, #16]
 80027a2:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	3340      	adds	r3, #64	; 0x40
 80027a8:	60fb      	str	r3, [r7, #12]

#endif
}
 80027aa:	bf00      	nop
 80027ac:	3720      	adds	r7, #32
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bc90      	pop	{r4, r7}
 80027b2:	4770      	bx	lr
 80027b4:	0800cebc 	.word	0x0800cebc
 80027b8:	2000068c 	.word	0x2000068c

080027bc <ws2812b_init>:


void ws2812b_init()
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	af00      	add	r7, sp, #0
	ws2812b_gpio_init();
 80027c0:	f7ff fba6 	bl	8001f10 <ws2812b_gpio_init>

	/*TIM2_init();
	DMA_init();*/


	DMA2_init();
 80027c4:	f7ff fcb6 	bl	8002134 <DMA2_init>
	TIM1_init();
 80027c8:	f7ff fbf2 	bl	8001fb0 <TIM1_init>


	// Need to start the first transfer
	ws2812b.transferComplete = 1;
 80027cc:	4b02      	ldr	r3, [pc, #8]	; (80027d8 <ws2812b_init+0x1c>)
 80027ce:	2201      	movs	r2, #1
 80027d0:	741a      	strb	r2, [r3, #16]
}
 80027d2:	bf00      	nop
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	20000104 	.word	0x20000104

080027dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80027dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002814 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80027e0:	480d      	ldr	r0, [pc, #52]	; (8002818 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80027e2:	490e      	ldr	r1, [pc, #56]	; (800281c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80027e4:	4a0e      	ldr	r2, [pc, #56]	; (8002820 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80027e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80027e8:	e002      	b.n	80027f0 <LoopCopyDataInit>

080027ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027ee:	3304      	adds	r3, #4

080027f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027f4:	d3f9      	bcc.n	80027ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027f6:	4a0b      	ldr	r2, [pc, #44]	; (8002824 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80027f8:	4c0b      	ldr	r4, [pc, #44]	; (8002828 <LoopFillZerobss+0x26>)
  movs r3, #0
 80027fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027fc:	e001      	b.n	8002802 <LoopFillZerobss>

080027fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002800:	3204      	adds	r2, #4

08002802 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002802:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002804:	d3fb      	bcc.n	80027fe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002806:	f7ff fb71 	bl	8001eec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800280a:	f009 fca1 	bl	800c150 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800280e:	f7fe fb79 	bl	8000f04 <main>
  bx  lr    
 8002812:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002814:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002818:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800281c:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 8002820:	0800d068 	.word	0x0800d068
  ldr r2, =_sbss
 8002824:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 8002828:	20000e3c 	.word	0x20000e3c

0800282c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800282c:	e7fe      	b.n	800282c <ADC_IRQHandler>
	...

08002830 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002834:	4b0e      	ldr	r3, [pc, #56]	; (8002870 <HAL_Init+0x40>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a0d      	ldr	r2, [pc, #52]	; (8002870 <HAL_Init+0x40>)
 800283a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800283e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002840:	4b0b      	ldr	r3, [pc, #44]	; (8002870 <HAL_Init+0x40>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a0a      	ldr	r2, [pc, #40]	; (8002870 <HAL_Init+0x40>)
 8002846:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800284a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800284c:	4b08      	ldr	r3, [pc, #32]	; (8002870 <HAL_Init+0x40>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a07      	ldr	r2, [pc, #28]	; (8002870 <HAL_Init+0x40>)
 8002852:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002856:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002858:	2003      	movs	r0, #3
 800285a:	f000 f94f 	bl	8002afc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800285e:	2000      	movs	r0, #0
 8002860:	f000 f808 	bl	8002874 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002864:	f7ff f8b6 	bl	80019d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002868:	2300      	movs	r3, #0
}
 800286a:	4618      	mov	r0, r3
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	40023c00 	.word	0x40023c00

08002874 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b082      	sub	sp, #8
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800287c:	4b12      	ldr	r3, [pc, #72]	; (80028c8 <HAL_InitTick+0x54>)
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	4b12      	ldr	r3, [pc, #72]	; (80028cc <HAL_InitTick+0x58>)
 8002882:	781b      	ldrb	r3, [r3, #0]
 8002884:	4619      	mov	r1, r3
 8002886:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800288a:	fbb3 f3f1 	udiv	r3, r3, r1
 800288e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002892:	4618      	mov	r0, r3
 8002894:	f000 f967 	bl	8002b66 <HAL_SYSTICK_Config>
 8002898:	4603      	mov	r3, r0
 800289a:	2b00      	cmp	r3, #0
 800289c:	d001      	beq.n	80028a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	e00e      	b.n	80028c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2b0f      	cmp	r3, #15
 80028a6:	d80a      	bhi.n	80028be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80028a8:	2200      	movs	r2, #0
 80028aa:	6879      	ldr	r1, [r7, #4]
 80028ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80028b0:	f000 f92f 	bl	8002b12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80028b4:	4a06      	ldr	r2, [pc, #24]	; (80028d0 <HAL_InitTick+0x5c>)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80028ba:	2300      	movs	r3, #0
 80028bc:	e000      	b.n	80028c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80028be:	2301      	movs	r3, #1
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	3708      	adds	r7, #8
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}
 80028c8:	20000000 	.word	0x20000000
 80028cc:	20000010 	.word	0x20000010
 80028d0:	2000000c 	.word	0x2000000c

080028d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028d4:	b480      	push	{r7}
 80028d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80028d8:	4b06      	ldr	r3, [pc, #24]	; (80028f4 <HAL_IncTick+0x20>)
 80028da:	781b      	ldrb	r3, [r3, #0]
 80028dc:	461a      	mov	r2, r3
 80028de:	4b06      	ldr	r3, [pc, #24]	; (80028f8 <HAL_IncTick+0x24>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4413      	add	r3, r2
 80028e4:	4a04      	ldr	r2, [pc, #16]	; (80028f8 <HAL_IncTick+0x24>)
 80028e6:	6013      	str	r3, [r2, #0]
}
 80028e8:	bf00      	nop
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr
 80028f2:	bf00      	nop
 80028f4:	20000010 	.word	0x20000010
 80028f8:	2000074c 	.word	0x2000074c

080028fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028fc:	b480      	push	{r7}
 80028fe:	af00      	add	r7, sp, #0
  return uwTick;
 8002900:	4b03      	ldr	r3, [pc, #12]	; (8002910 <HAL_GetTick+0x14>)
 8002902:	681b      	ldr	r3, [r3, #0]
}
 8002904:	4618      	mov	r0, r3
 8002906:	46bd      	mov	sp, r7
 8002908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290c:	4770      	bx	lr
 800290e:	bf00      	nop
 8002910:	2000074c 	.word	0x2000074c

08002914 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b084      	sub	sp, #16
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800291c:	f7ff ffee 	bl	80028fc <HAL_GetTick>
 8002920:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800292c:	d005      	beq.n	800293a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800292e:	4b0a      	ldr	r3, [pc, #40]	; (8002958 <HAL_Delay+0x44>)
 8002930:	781b      	ldrb	r3, [r3, #0]
 8002932:	461a      	mov	r2, r3
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	4413      	add	r3, r2
 8002938:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800293a:	bf00      	nop
 800293c:	f7ff ffde 	bl	80028fc <HAL_GetTick>
 8002940:	4602      	mov	r2, r0
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	1ad3      	subs	r3, r2, r3
 8002946:	68fa      	ldr	r2, [r7, #12]
 8002948:	429a      	cmp	r2, r3
 800294a:	d8f7      	bhi.n	800293c <HAL_Delay+0x28>
  {
  }
}
 800294c:	bf00      	nop
 800294e:	bf00      	nop
 8002950:	3710      	adds	r7, #16
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
 8002956:	bf00      	nop
 8002958:	20000010 	.word	0x20000010

0800295c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800295c:	b480      	push	{r7}
 800295e:	b085      	sub	sp, #20
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	f003 0307 	and.w	r3, r3, #7
 800296a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800296c:	4b0c      	ldr	r3, [pc, #48]	; (80029a0 <__NVIC_SetPriorityGrouping+0x44>)
 800296e:	68db      	ldr	r3, [r3, #12]
 8002970:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002972:	68ba      	ldr	r2, [r7, #8]
 8002974:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002978:	4013      	ands	r3, r2
 800297a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002984:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002988:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800298c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800298e:	4a04      	ldr	r2, [pc, #16]	; (80029a0 <__NVIC_SetPriorityGrouping+0x44>)
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	60d3      	str	r3, [r2, #12]
}
 8002994:	bf00      	nop
 8002996:	3714      	adds	r7, #20
 8002998:	46bd      	mov	sp, r7
 800299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299e:	4770      	bx	lr
 80029a0:	e000ed00 	.word	0xe000ed00

080029a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80029a4:	b480      	push	{r7}
 80029a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029a8:	4b04      	ldr	r3, [pc, #16]	; (80029bc <__NVIC_GetPriorityGrouping+0x18>)
 80029aa:	68db      	ldr	r3, [r3, #12]
 80029ac:	0a1b      	lsrs	r3, r3, #8
 80029ae:	f003 0307 	and.w	r3, r3, #7
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	46bd      	mov	sp, r7
 80029b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ba:	4770      	bx	lr
 80029bc:	e000ed00 	.word	0xe000ed00

080029c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b083      	sub	sp, #12
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	4603      	mov	r3, r0
 80029c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	db0b      	blt.n	80029ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029d2:	79fb      	ldrb	r3, [r7, #7]
 80029d4:	f003 021f 	and.w	r2, r3, #31
 80029d8:	4907      	ldr	r1, [pc, #28]	; (80029f8 <__NVIC_EnableIRQ+0x38>)
 80029da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029de:	095b      	lsrs	r3, r3, #5
 80029e0:	2001      	movs	r0, #1
 80029e2:	fa00 f202 	lsl.w	r2, r0, r2
 80029e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80029ea:	bf00      	nop
 80029ec:	370c      	adds	r7, #12
 80029ee:	46bd      	mov	sp, r7
 80029f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f4:	4770      	bx	lr
 80029f6:	bf00      	nop
 80029f8:	e000e100 	.word	0xe000e100

080029fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b083      	sub	sp, #12
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	4603      	mov	r3, r0
 8002a04:	6039      	str	r1, [r7, #0]
 8002a06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	db0a      	blt.n	8002a26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	b2da      	uxtb	r2, r3
 8002a14:	490c      	ldr	r1, [pc, #48]	; (8002a48 <__NVIC_SetPriority+0x4c>)
 8002a16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a1a:	0112      	lsls	r2, r2, #4
 8002a1c:	b2d2      	uxtb	r2, r2
 8002a1e:	440b      	add	r3, r1
 8002a20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a24:	e00a      	b.n	8002a3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	b2da      	uxtb	r2, r3
 8002a2a:	4908      	ldr	r1, [pc, #32]	; (8002a4c <__NVIC_SetPriority+0x50>)
 8002a2c:	79fb      	ldrb	r3, [r7, #7]
 8002a2e:	f003 030f 	and.w	r3, r3, #15
 8002a32:	3b04      	subs	r3, #4
 8002a34:	0112      	lsls	r2, r2, #4
 8002a36:	b2d2      	uxtb	r2, r2
 8002a38:	440b      	add	r3, r1
 8002a3a:	761a      	strb	r2, [r3, #24]
}
 8002a3c:	bf00      	nop
 8002a3e:	370c      	adds	r7, #12
 8002a40:	46bd      	mov	sp, r7
 8002a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a46:	4770      	bx	lr
 8002a48:	e000e100 	.word	0xe000e100
 8002a4c:	e000ed00 	.word	0xe000ed00

08002a50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b089      	sub	sp, #36	; 0x24
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	60f8      	str	r0, [r7, #12]
 8002a58:	60b9      	str	r1, [r7, #8]
 8002a5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	f003 0307 	and.w	r3, r3, #7
 8002a62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a64:	69fb      	ldr	r3, [r7, #28]
 8002a66:	f1c3 0307 	rsb	r3, r3, #7
 8002a6a:	2b04      	cmp	r3, #4
 8002a6c:	bf28      	it	cs
 8002a6e:	2304      	movcs	r3, #4
 8002a70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a72:	69fb      	ldr	r3, [r7, #28]
 8002a74:	3304      	adds	r3, #4
 8002a76:	2b06      	cmp	r3, #6
 8002a78:	d902      	bls.n	8002a80 <NVIC_EncodePriority+0x30>
 8002a7a:	69fb      	ldr	r3, [r7, #28]
 8002a7c:	3b03      	subs	r3, #3
 8002a7e:	e000      	b.n	8002a82 <NVIC_EncodePriority+0x32>
 8002a80:	2300      	movs	r3, #0
 8002a82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a84:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002a88:	69bb      	ldr	r3, [r7, #24]
 8002a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8e:	43da      	mvns	r2, r3
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	401a      	ands	r2, r3
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a98:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	fa01 f303 	lsl.w	r3, r1, r3
 8002aa2:	43d9      	mvns	r1, r3
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002aa8:	4313      	orrs	r3, r2
         );
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3724      	adds	r7, #36	; 0x24
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr
	...

08002ab8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b082      	sub	sp, #8
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	3b01      	subs	r3, #1
 8002ac4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ac8:	d301      	bcc.n	8002ace <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002aca:	2301      	movs	r3, #1
 8002acc:	e00f      	b.n	8002aee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ace:	4a0a      	ldr	r2, [pc, #40]	; (8002af8 <SysTick_Config+0x40>)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	3b01      	subs	r3, #1
 8002ad4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ad6:	210f      	movs	r1, #15
 8002ad8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002adc:	f7ff ff8e 	bl	80029fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ae0:	4b05      	ldr	r3, [pc, #20]	; (8002af8 <SysTick_Config+0x40>)
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ae6:	4b04      	ldr	r3, [pc, #16]	; (8002af8 <SysTick_Config+0x40>)
 8002ae8:	2207      	movs	r2, #7
 8002aea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002aec:	2300      	movs	r3, #0
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	3708      	adds	r7, #8
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	e000e010 	.word	0xe000e010

08002afc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b082      	sub	sp, #8
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b04:	6878      	ldr	r0, [r7, #4]
 8002b06:	f7ff ff29 	bl	800295c <__NVIC_SetPriorityGrouping>
}
 8002b0a:	bf00      	nop
 8002b0c:	3708      	adds	r7, #8
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}

08002b12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b12:	b580      	push	{r7, lr}
 8002b14:	b086      	sub	sp, #24
 8002b16:	af00      	add	r7, sp, #0
 8002b18:	4603      	mov	r3, r0
 8002b1a:	60b9      	str	r1, [r7, #8]
 8002b1c:	607a      	str	r2, [r7, #4]
 8002b1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b20:	2300      	movs	r3, #0
 8002b22:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b24:	f7ff ff3e 	bl	80029a4 <__NVIC_GetPriorityGrouping>
 8002b28:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b2a:	687a      	ldr	r2, [r7, #4]
 8002b2c:	68b9      	ldr	r1, [r7, #8]
 8002b2e:	6978      	ldr	r0, [r7, #20]
 8002b30:	f7ff ff8e 	bl	8002a50 <NVIC_EncodePriority>
 8002b34:	4602      	mov	r2, r0
 8002b36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b3a:	4611      	mov	r1, r2
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f7ff ff5d 	bl	80029fc <__NVIC_SetPriority>
}
 8002b42:	bf00      	nop
 8002b44:	3718      	adds	r7, #24
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}

08002b4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b4a:	b580      	push	{r7, lr}
 8002b4c:	b082      	sub	sp, #8
 8002b4e:	af00      	add	r7, sp, #0
 8002b50:	4603      	mov	r3, r0
 8002b52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f7ff ff31 	bl	80029c0 <__NVIC_EnableIRQ>
}
 8002b5e:	bf00      	nop
 8002b60:	3708      	adds	r7, #8
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}

08002b66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b66:	b580      	push	{r7, lr}
 8002b68:	b082      	sub	sp, #8
 8002b6a:	af00      	add	r7, sp, #0
 8002b6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b6e:	6878      	ldr	r0, [r7, #4]
 8002b70:	f7ff ffa2 	bl	8002ab8 <SysTick_Config>
 8002b74:	4603      	mov	r3, r0
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	3708      	adds	r7, #8
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}
	...

08002b80 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b086      	sub	sp, #24
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002b8c:	f7ff feb6 	bl	80028fc <HAL_GetTick>
 8002b90:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d101      	bne.n	8002b9c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	e099      	b.n	8002cd0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2202      	movs	r2, #2
 8002ba0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f022 0201 	bic.w	r2, r2, #1
 8002bba:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002bbc:	e00f      	b.n	8002bde <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002bbe:	f7ff fe9d 	bl	80028fc <HAL_GetTick>
 8002bc2:	4602      	mov	r2, r0
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	1ad3      	subs	r3, r2, r3
 8002bc8:	2b05      	cmp	r3, #5
 8002bca:	d908      	bls.n	8002bde <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2220      	movs	r2, #32
 8002bd0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2203      	movs	r2, #3
 8002bd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002bda:	2303      	movs	r3, #3
 8002bdc:	e078      	b.n	8002cd0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f003 0301 	and.w	r3, r3, #1
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d1e8      	bne.n	8002bbe <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002bf4:	697a      	ldr	r2, [r7, #20]
 8002bf6:	4b38      	ldr	r3, [pc, #224]	; (8002cd8 <HAL_DMA_Init+0x158>)
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	685a      	ldr	r2, [r3, #4]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c0a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	691b      	ldr	r3, [r3, #16]
 8002c10:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c16:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	699b      	ldr	r3, [r3, #24]
 8002c1c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c22:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6a1b      	ldr	r3, [r3, #32]
 8002c28:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c2a:	697a      	ldr	r2, [r7, #20]
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c34:	2b04      	cmp	r3, #4
 8002c36:	d107      	bne.n	8002c48 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c40:	4313      	orrs	r3, r2
 8002c42:	697a      	ldr	r2, [r7, #20]
 8002c44:	4313      	orrs	r3, r2
 8002c46:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	697a      	ldr	r2, [r7, #20]
 8002c4e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	695b      	ldr	r3, [r3, #20]
 8002c56:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	f023 0307 	bic.w	r3, r3, #7
 8002c5e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c64:	697a      	ldr	r2, [r7, #20]
 8002c66:	4313      	orrs	r3, r2
 8002c68:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c6e:	2b04      	cmp	r3, #4
 8002c70:	d117      	bne.n	8002ca2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c76:	697a      	ldr	r2, [r7, #20]
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d00e      	beq.n	8002ca2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002c84:	6878      	ldr	r0, [r7, #4]
 8002c86:	f000 fb09 	bl	800329c <DMA_CheckFifoParam>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d008      	beq.n	8002ca2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2240      	movs	r2, #64	; 0x40
 8002c94:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2201      	movs	r2, #1
 8002c9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e016      	b.n	8002cd0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	697a      	ldr	r2, [r7, #20]
 8002ca8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	f000 fac0 	bl	8003230 <DMA_CalcBaseAndBitshift>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cb8:	223f      	movs	r2, #63	; 0x3f
 8002cba:	409a      	lsls	r2, r3
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2201      	movs	r2, #1
 8002cca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002cce:	2300      	movs	r3, #0
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	3718      	adds	r7, #24
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}
 8002cd8:	f010803f 	.word	0xf010803f

08002cdc <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b084      	sub	sp, #16
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d101      	bne.n	8002cee <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e050      	b.n	8002d90 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	2b02      	cmp	r3, #2
 8002cf8:	d101      	bne.n	8002cfe <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8002cfa:	2302      	movs	r3, #2
 8002cfc:	e048      	b.n	8002d90 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f022 0201 	bic.w	r2, r2, #1
 8002d0c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	2200      	movs	r2, #0
 8002d14:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	2200      	movs	r2, #0
 8002d24:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	2200      	movs	r2, #0
 8002d34:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	2221      	movs	r2, #33	; 0x21
 8002d3c:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	f000 fa76 	bl	8003230 <DMA_CalcBaseAndBitshift>
 8002d44:	4603      	mov	r3, r0
 8002d46:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2200      	movs	r2, #0
 8002d52:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2200      	movs	r2, #0
 8002d58:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2200      	movs	r2, #0
 8002d64:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d70:	223f      	movs	r2, #63	; 0x3f
 8002d72:	409a      	lsls	r2, r3
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2200      	movs	r2, #0
 8002d82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002d8e:	2300      	movs	r3, #0
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	3710      	adds	r7, #16
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}

08002d98 <HAL_DMA_Start>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b086      	sub	sp, #24
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	60f8      	str	r0, [r7, #12]
 8002da0:	60b9      	str	r1, [r7, #8]
 8002da2:	607a      	str	r2, [r7, #4]
 8002da4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002da6:	2300      	movs	r3, #0
 8002da8:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002db0:	2b01      	cmp	r3, #1
 8002db2:	d101      	bne.n	8002db8 <HAL_DMA_Start+0x20>
 8002db4:	2302      	movs	r3, #2
 8002db6:	e026      	b.n	8002e06 <HAL_DMA_Start+0x6e>
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	2201      	movs	r2, #1
 8002dbc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002dc6:	b2db      	uxtb	r3, r3
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	d115      	bne.n	8002df8 <HAL_DMA_Start+0x60>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	2202      	movs	r2, #2
 8002dd0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	687a      	ldr	r2, [r7, #4]
 8002dde:	68b9      	ldr	r1, [r7, #8]
 8002de0:	68f8      	ldr	r0, [r7, #12]
 8002de2:	f000 f9f7 	bl	80031d4 <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f042 0201 	orr.w	r2, r2, #1
 8002df4:	601a      	str	r2, [r3, #0]
 8002df6:	e005      	b.n	8002e04 <HAL_DMA_Start+0x6c>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002e00:	2302      	movs	r3, #2
 8002e02:	75fb      	strb	r3, [r7, #23]
  } 
  return status; 
 8002e04:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	3718      	adds	r7, #24
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}

08002e0e <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e0e:	b580      	push	{r7, lr}
 8002e10:	b086      	sub	sp, #24
 8002e12:	af00      	add	r7, sp, #0
 8002e14:	60f8      	str	r0, [r7, #12]
 8002e16:	60b9      	str	r1, [r7, #8]
 8002e18:	607a      	str	r2, [r7, #4]
 8002e1a:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e24:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	d101      	bne.n	8002e34 <HAL_DMA_Start_IT+0x26>
 8002e30:	2302      	movs	r3, #2
 8002e32:	e040      	b.n	8002eb6 <HAL_DMA_Start_IT+0xa8>
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2201      	movs	r2, #1
 8002e38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e42:	b2db      	uxtb	r3, r3
 8002e44:	2b01      	cmp	r3, #1
 8002e46:	d12f      	bne.n	8002ea8 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	2202      	movs	r2, #2
 8002e4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	2200      	movs	r2, #0
 8002e54:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	687a      	ldr	r2, [r7, #4]
 8002e5a:	68b9      	ldr	r1, [r7, #8]
 8002e5c:	68f8      	ldr	r0, [r7, #12]
 8002e5e:	f000 f9b9 	bl	80031d4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e66:	223f      	movs	r2, #63	; 0x3f
 8002e68:	409a      	lsls	r2, r3
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	681a      	ldr	r2, [r3, #0]
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f042 0216 	orr.w	r2, r2, #22
 8002e7c:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d007      	beq.n	8002e96 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f042 0208 	orr.w	r2, r2, #8
 8002e94:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	681a      	ldr	r2, [r3, #0]
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f042 0201 	orr.w	r2, r2, #1
 8002ea4:	601a      	str	r2, [r3, #0]
 8002ea6:	e005      	b.n	8002eb4 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002eb0:	2302      	movs	r3, #2
 8002eb2:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002eb4:	7dfb      	ldrb	r3, [r7, #23]
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3718      	adds	r7, #24
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}
	...

08002ec0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b086      	sub	sp, #24
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002ecc:	4b92      	ldr	r3, [pc, #584]	; (8003118 <HAL_DMA_IRQHandler+0x258>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a92      	ldr	r2, [pc, #584]	; (800311c <HAL_DMA_IRQHandler+0x25c>)
 8002ed2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ed6:	0a9b      	lsrs	r3, r3, #10
 8002ed8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ede:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eea:	2208      	movs	r2, #8
 8002eec:	409a      	lsls	r2, r3
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	4013      	ands	r3, r2
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d01a      	beq.n	8002f2c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f003 0304 	and.w	r3, r3, #4
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d013      	beq.n	8002f2c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f022 0204 	bic.w	r2, r2, #4
 8002f12:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f18:	2208      	movs	r2, #8
 8002f1a:	409a      	lsls	r2, r3
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f24:	f043 0201 	orr.w	r2, r3, #1
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f30:	2201      	movs	r2, #1
 8002f32:	409a      	lsls	r2, r3
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	4013      	ands	r3, r2
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d012      	beq.n	8002f62 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	695b      	ldr	r3, [r3, #20]
 8002f42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d00b      	beq.n	8002f62 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f4e:	2201      	movs	r2, #1
 8002f50:	409a      	lsls	r2, r3
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f5a:	f043 0202 	orr.w	r2, r3, #2
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f66:	2204      	movs	r2, #4
 8002f68:	409a      	lsls	r2, r3
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d012      	beq.n	8002f98 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f003 0302 	and.w	r3, r3, #2
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d00b      	beq.n	8002f98 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f84:	2204      	movs	r2, #4
 8002f86:	409a      	lsls	r2, r3
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f90:	f043 0204 	orr.w	r2, r3, #4
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f9c:	2210      	movs	r2, #16
 8002f9e:	409a      	lsls	r2, r3
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d043      	beq.n	8003030 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f003 0308 	and.w	r3, r3, #8
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d03c      	beq.n	8003030 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fba:	2210      	movs	r2, #16
 8002fbc:	409a      	lsls	r2, r3
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d018      	beq.n	8003002 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d108      	bne.n	8002ff0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d024      	beq.n	8003030 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	4798      	blx	r3
 8002fee:	e01f      	b.n	8003030 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d01b      	beq.n	8003030 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ffc:	6878      	ldr	r0, [r7, #4]
 8002ffe:	4798      	blx	r3
 8003000:	e016      	b.n	8003030 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800300c:	2b00      	cmp	r3, #0
 800300e:	d107      	bne.n	8003020 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	681a      	ldr	r2, [r3, #0]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f022 0208 	bic.w	r2, r2, #8
 800301e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003024:	2b00      	cmp	r3, #0
 8003026:	d003      	beq.n	8003030 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302c:	6878      	ldr	r0, [r7, #4]
 800302e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003034:	2220      	movs	r2, #32
 8003036:	409a      	lsls	r2, r3
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	4013      	ands	r3, r2
 800303c:	2b00      	cmp	r3, #0
 800303e:	f000 808e 	beq.w	800315e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f003 0310 	and.w	r3, r3, #16
 800304c:	2b00      	cmp	r3, #0
 800304e:	f000 8086 	beq.w	800315e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003056:	2220      	movs	r2, #32
 8003058:	409a      	lsls	r2, r3
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003064:	b2db      	uxtb	r3, r3
 8003066:	2b05      	cmp	r3, #5
 8003068:	d136      	bne.n	80030d8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	681a      	ldr	r2, [r3, #0]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f022 0216 	bic.w	r2, r2, #22
 8003078:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	695a      	ldr	r2, [r3, #20]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003088:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800308e:	2b00      	cmp	r3, #0
 8003090:	d103      	bne.n	800309a <HAL_DMA_IRQHandler+0x1da>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003096:	2b00      	cmp	r3, #0
 8003098:	d007      	beq.n	80030aa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f022 0208 	bic.w	r2, r2, #8
 80030a8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030ae:	223f      	movs	r2, #63	; 0x3f
 80030b0:	409a      	lsls	r2, r3
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2201      	movs	r2, #1
 80030ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2200      	movs	r2, #0
 80030c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d07d      	beq.n	80031ca <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	4798      	blx	r3
        }
        return;
 80030d6:	e078      	b.n	80031ca <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d01c      	beq.n	8003120 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d108      	bne.n	8003106 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d030      	beq.n	800315e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003100:	6878      	ldr	r0, [r7, #4]
 8003102:	4798      	blx	r3
 8003104:	e02b      	b.n	800315e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800310a:	2b00      	cmp	r3, #0
 800310c:	d027      	beq.n	800315e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	4798      	blx	r3
 8003116:	e022      	b.n	800315e <HAL_DMA_IRQHandler+0x29e>
 8003118:	20000000 	.word	0x20000000
 800311c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800312a:	2b00      	cmp	r3, #0
 800312c:	d10f      	bne.n	800314e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f022 0210 	bic.w	r2, r2, #16
 800313c:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2201      	movs	r2, #1
 8003142:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2200      	movs	r2, #0
 800314a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003152:	2b00      	cmp	r3, #0
 8003154:	d003      	beq.n	800315e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003162:	2b00      	cmp	r3, #0
 8003164:	d032      	beq.n	80031cc <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800316a:	f003 0301 	and.w	r3, r3, #1
 800316e:	2b00      	cmp	r3, #0
 8003170:	d022      	beq.n	80031b8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2205      	movs	r2, #5
 8003176:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	681a      	ldr	r2, [r3, #0]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f022 0201 	bic.w	r2, r2, #1
 8003188:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	3301      	adds	r3, #1
 800318e:	60bb      	str	r3, [r7, #8]
 8003190:	697a      	ldr	r2, [r7, #20]
 8003192:	429a      	cmp	r2, r3
 8003194:	d307      	bcc.n	80031a6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f003 0301 	and.w	r3, r3, #1
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d1f2      	bne.n	800318a <HAL_DMA_IRQHandler+0x2ca>
 80031a4:	e000      	b.n	80031a8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80031a6:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2201      	movs	r2, #1
 80031ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2200      	movs	r2, #0
 80031b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d005      	beq.n	80031cc <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031c4:	6878      	ldr	r0, [r7, #4]
 80031c6:	4798      	blx	r3
 80031c8:	e000      	b.n	80031cc <HAL_DMA_IRQHandler+0x30c>
        return;
 80031ca:	bf00      	nop
    }
  }
}
 80031cc:	3718      	adds	r7, #24
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}
 80031d2:	bf00      	nop

080031d4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b085      	sub	sp, #20
 80031d8:	af00      	add	r7, sp, #0
 80031da:	60f8      	str	r0, [r7, #12]
 80031dc:	60b9      	str	r1, [r7, #8]
 80031de:	607a      	str	r2, [r7, #4]
 80031e0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80031f0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	683a      	ldr	r2, [r7, #0]
 80031f8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	2b40      	cmp	r3, #64	; 0x40
 8003200:	d108      	bne.n	8003214 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	687a      	ldr	r2, [r7, #4]
 8003208:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	68ba      	ldr	r2, [r7, #8]
 8003210:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003212:	e007      	b.n	8003224 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	68ba      	ldr	r2, [r7, #8]
 800321a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	687a      	ldr	r2, [r7, #4]
 8003222:	60da      	str	r2, [r3, #12]
}
 8003224:	bf00      	nop
 8003226:	3714      	adds	r7, #20
 8003228:	46bd      	mov	sp, r7
 800322a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322e:	4770      	bx	lr

08003230 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003230:	b480      	push	{r7}
 8003232:	b085      	sub	sp, #20
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	b2db      	uxtb	r3, r3
 800323e:	3b10      	subs	r3, #16
 8003240:	4a14      	ldr	r2, [pc, #80]	; (8003294 <DMA_CalcBaseAndBitshift+0x64>)
 8003242:	fba2 2303 	umull	r2, r3, r2, r3
 8003246:	091b      	lsrs	r3, r3, #4
 8003248:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800324a:	4a13      	ldr	r2, [pc, #76]	; (8003298 <DMA_CalcBaseAndBitshift+0x68>)
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	4413      	add	r3, r2
 8003250:	781b      	ldrb	r3, [r3, #0]
 8003252:	461a      	mov	r2, r3
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	2b03      	cmp	r3, #3
 800325c:	d909      	bls.n	8003272 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003266:	f023 0303 	bic.w	r3, r3, #3
 800326a:	1d1a      	adds	r2, r3, #4
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	659a      	str	r2, [r3, #88]	; 0x58
 8003270:	e007      	b.n	8003282 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800327a:	f023 0303 	bic.w	r3, r3, #3
 800327e:	687a      	ldr	r2, [r7, #4]
 8003280:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003286:	4618      	mov	r0, r3
 8003288:	3714      	adds	r7, #20
 800328a:	46bd      	mov	sp, r7
 800328c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003290:	4770      	bx	lr
 8003292:	bf00      	nop
 8003294:	aaaaaaab 	.word	0xaaaaaaab
 8003298:	0800cfbc 	.word	0x0800cfbc

0800329c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800329c:	b480      	push	{r7}
 800329e:	b085      	sub	sp, #20
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032a4:	2300      	movs	r3, #0
 80032a6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ac:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	699b      	ldr	r3, [r3, #24]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d11f      	bne.n	80032f6 <DMA_CheckFifoParam+0x5a>
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	2b03      	cmp	r3, #3
 80032ba:	d856      	bhi.n	800336a <DMA_CheckFifoParam+0xce>
 80032bc:	a201      	add	r2, pc, #4	; (adr r2, 80032c4 <DMA_CheckFifoParam+0x28>)
 80032be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032c2:	bf00      	nop
 80032c4:	080032d5 	.word	0x080032d5
 80032c8:	080032e7 	.word	0x080032e7
 80032cc:	080032d5 	.word	0x080032d5
 80032d0:	0800336b 	.word	0x0800336b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d046      	beq.n	800336e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032e4:	e043      	b.n	800336e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ea:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80032ee:	d140      	bne.n	8003372 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80032f0:	2301      	movs	r3, #1
 80032f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032f4:	e03d      	b.n	8003372 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	699b      	ldr	r3, [r3, #24]
 80032fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032fe:	d121      	bne.n	8003344 <DMA_CheckFifoParam+0xa8>
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	2b03      	cmp	r3, #3
 8003304:	d837      	bhi.n	8003376 <DMA_CheckFifoParam+0xda>
 8003306:	a201      	add	r2, pc, #4	; (adr r2, 800330c <DMA_CheckFifoParam+0x70>)
 8003308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800330c:	0800331d 	.word	0x0800331d
 8003310:	08003323 	.word	0x08003323
 8003314:	0800331d 	.word	0x0800331d
 8003318:	08003335 	.word	0x08003335
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800331c:	2301      	movs	r3, #1
 800331e:	73fb      	strb	r3, [r7, #15]
      break;
 8003320:	e030      	b.n	8003384 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003326:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800332a:	2b00      	cmp	r3, #0
 800332c:	d025      	beq.n	800337a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003332:	e022      	b.n	800337a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003338:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800333c:	d11f      	bne.n	800337e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003342:	e01c      	b.n	800337e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	2b02      	cmp	r3, #2
 8003348:	d903      	bls.n	8003352 <DMA_CheckFifoParam+0xb6>
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	2b03      	cmp	r3, #3
 800334e:	d003      	beq.n	8003358 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003350:	e018      	b.n	8003384 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	73fb      	strb	r3, [r7, #15]
      break;
 8003356:	e015      	b.n	8003384 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800335c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003360:	2b00      	cmp	r3, #0
 8003362:	d00e      	beq.n	8003382 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	73fb      	strb	r3, [r7, #15]
      break;
 8003368:	e00b      	b.n	8003382 <DMA_CheckFifoParam+0xe6>
      break;
 800336a:	bf00      	nop
 800336c:	e00a      	b.n	8003384 <DMA_CheckFifoParam+0xe8>
      break;
 800336e:	bf00      	nop
 8003370:	e008      	b.n	8003384 <DMA_CheckFifoParam+0xe8>
      break;
 8003372:	bf00      	nop
 8003374:	e006      	b.n	8003384 <DMA_CheckFifoParam+0xe8>
      break;
 8003376:	bf00      	nop
 8003378:	e004      	b.n	8003384 <DMA_CheckFifoParam+0xe8>
      break;
 800337a:	bf00      	nop
 800337c:	e002      	b.n	8003384 <DMA_CheckFifoParam+0xe8>
      break;   
 800337e:	bf00      	nop
 8003380:	e000      	b.n	8003384 <DMA_CheckFifoParam+0xe8>
      break;
 8003382:	bf00      	nop
    }
  } 
  
  return status; 
 8003384:	7bfb      	ldrb	r3, [r7, #15]
}
 8003386:	4618      	mov	r0, r3
 8003388:	3714      	adds	r7, #20
 800338a:	46bd      	mov	sp, r7
 800338c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003390:	4770      	bx	lr
 8003392:	bf00      	nop

08003394 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003394:	b480      	push	{r7}
 8003396:	b089      	sub	sp, #36	; 0x24
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
 800339c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800339e:	2300      	movs	r3, #0
 80033a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80033a2:	2300      	movs	r3, #0
 80033a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80033a6:	2300      	movs	r3, #0
 80033a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033aa:	2300      	movs	r3, #0
 80033ac:	61fb      	str	r3, [r7, #28]
 80033ae:	e16b      	b.n	8003688 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80033b0:	2201      	movs	r2, #1
 80033b2:	69fb      	ldr	r3, [r7, #28]
 80033b4:	fa02 f303 	lsl.w	r3, r2, r3
 80033b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	697a      	ldr	r2, [r7, #20]
 80033c0:	4013      	ands	r3, r2
 80033c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80033c4:	693a      	ldr	r2, [r7, #16]
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	429a      	cmp	r2, r3
 80033ca:	f040 815a 	bne.w	8003682 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	f003 0303 	and.w	r3, r3, #3
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d005      	beq.n	80033e6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80033e2:	2b02      	cmp	r3, #2
 80033e4:	d130      	bne.n	8003448 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80033ec:	69fb      	ldr	r3, [r7, #28]
 80033ee:	005b      	lsls	r3, r3, #1
 80033f0:	2203      	movs	r2, #3
 80033f2:	fa02 f303 	lsl.w	r3, r2, r3
 80033f6:	43db      	mvns	r3, r3
 80033f8:	69ba      	ldr	r2, [r7, #24]
 80033fa:	4013      	ands	r3, r2
 80033fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	68da      	ldr	r2, [r3, #12]
 8003402:	69fb      	ldr	r3, [r7, #28]
 8003404:	005b      	lsls	r3, r3, #1
 8003406:	fa02 f303 	lsl.w	r3, r2, r3
 800340a:	69ba      	ldr	r2, [r7, #24]
 800340c:	4313      	orrs	r3, r2
 800340e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	69ba      	ldr	r2, [r7, #24]
 8003414:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800341c:	2201      	movs	r2, #1
 800341e:	69fb      	ldr	r3, [r7, #28]
 8003420:	fa02 f303 	lsl.w	r3, r2, r3
 8003424:	43db      	mvns	r3, r3
 8003426:	69ba      	ldr	r2, [r7, #24]
 8003428:	4013      	ands	r3, r2
 800342a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	091b      	lsrs	r3, r3, #4
 8003432:	f003 0201 	and.w	r2, r3, #1
 8003436:	69fb      	ldr	r3, [r7, #28]
 8003438:	fa02 f303 	lsl.w	r3, r2, r3
 800343c:	69ba      	ldr	r2, [r7, #24]
 800343e:	4313      	orrs	r3, r2
 8003440:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	69ba      	ldr	r2, [r7, #24]
 8003446:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	f003 0303 	and.w	r3, r3, #3
 8003450:	2b03      	cmp	r3, #3
 8003452:	d017      	beq.n	8003484 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	68db      	ldr	r3, [r3, #12]
 8003458:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800345a:	69fb      	ldr	r3, [r7, #28]
 800345c:	005b      	lsls	r3, r3, #1
 800345e:	2203      	movs	r2, #3
 8003460:	fa02 f303 	lsl.w	r3, r2, r3
 8003464:	43db      	mvns	r3, r3
 8003466:	69ba      	ldr	r2, [r7, #24]
 8003468:	4013      	ands	r3, r2
 800346a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	689a      	ldr	r2, [r3, #8]
 8003470:	69fb      	ldr	r3, [r7, #28]
 8003472:	005b      	lsls	r3, r3, #1
 8003474:	fa02 f303 	lsl.w	r3, r2, r3
 8003478:	69ba      	ldr	r2, [r7, #24]
 800347a:	4313      	orrs	r3, r2
 800347c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	69ba      	ldr	r2, [r7, #24]
 8003482:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	f003 0303 	and.w	r3, r3, #3
 800348c:	2b02      	cmp	r3, #2
 800348e:	d123      	bne.n	80034d8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003490:	69fb      	ldr	r3, [r7, #28]
 8003492:	08da      	lsrs	r2, r3, #3
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	3208      	adds	r2, #8
 8003498:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800349c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800349e:	69fb      	ldr	r3, [r7, #28]
 80034a0:	f003 0307 	and.w	r3, r3, #7
 80034a4:	009b      	lsls	r3, r3, #2
 80034a6:	220f      	movs	r2, #15
 80034a8:	fa02 f303 	lsl.w	r3, r2, r3
 80034ac:	43db      	mvns	r3, r3
 80034ae:	69ba      	ldr	r2, [r7, #24]
 80034b0:	4013      	ands	r3, r2
 80034b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	691a      	ldr	r2, [r3, #16]
 80034b8:	69fb      	ldr	r3, [r7, #28]
 80034ba:	f003 0307 	and.w	r3, r3, #7
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	fa02 f303 	lsl.w	r3, r2, r3
 80034c4:	69ba      	ldr	r2, [r7, #24]
 80034c6:	4313      	orrs	r3, r2
 80034c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80034ca:	69fb      	ldr	r3, [r7, #28]
 80034cc:	08da      	lsrs	r2, r3, #3
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	3208      	adds	r2, #8
 80034d2:	69b9      	ldr	r1, [r7, #24]
 80034d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80034de:	69fb      	ldr	r3, [r7, #28]
 80034e0:	005b      	lsls	r3, r3, #1
 80034e2:	2203      	movs	r2, #3
 80034e4:	fa02 f303 	lsl.w	r3, r2, r3
 80034e8:	43db      	mvns	r3, r3
 80034ea:	69ba      	ldr	r2, [r7, #24]
 80034ec:	4013      	ands	r3, r2
 80034ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	f003 0203 	and.w	r2, r3, #3
 80034f8:	69fb      	ldr	r3, [r7, #28]
 80034fa:	005b      	lsls	r3, r3, #1
 80034fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003500:	69ba      	ldr	r2, [r7, #24]
 8003502:	4313      	orrs	r3, r2
 8003504:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	69ba      	ldr	r2, [r7, #24]
 800350a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003514:	2b00      	cmp	r3, #0
 8003516:	f000 80b4 	beq.w	8003682 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800351a:	2300      	movs	r3, #0
 800351c:	60fb      	str	r3, [r7, #12]
 800351e:	4b60      	ldr	r3, [pc, #384]	; (80036a0 <HAL_GPIO_Init+0x30c>)
 8003520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003522:	4a5f      	ldr	r2, [pc, #380]	; (80036a0 <HAL_GPIO_Init+0x30c>)
 8003524:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003528:	6453      	str	r3, [r2, #68]	; 0x44
 800352a:	4b5d      	ldr	r3, [pc, #372]	; (80036a0 <HAL_GPIO_Init+0x30c>)
 800352c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800352e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003532:	60fb      	str	r3, [r7, #12]
 8003534:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003536:	4a5b      	ldr	r2, [pc, #364]	; (80036a4 <HAL_GPIO_Init+0x310>)
 8003538:	69fb      	ldr	r3, [r7, #28]
 800353a:	089b      	lsrs	r3, r3, #2
 800353c:	3302      	adds	r3, #2
 800353e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003542:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003544:	69fb      	ldr	r3, [r7, #28]
 8003546:	f003 0303 	and.w	r3, r3, #3
 800354a:	009b      	lsls	r3, r3, #2
 800354c:	220f      	movs	r2, #15
 800354e:	fa02 f303 	lsl.w	r3, r2, r3
 8003552:	43db      	mvns	r3, r3
 8003554:	69ba      	ldr	r2, [r7, #24]
 8003556:	4013      	ands	r3, r2
 8003558:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	4a52      	ldr	r2, [pc, #328]	; (80036a8 <HAL_GPIO_Init+0x314>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d02b      	beq.n	80035ba <HAL_GPIO_Init+0x226>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	4a51      	ldr	r2, [pc, #324]	; (80036ac <HAL_GPIO_Init+0x318>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d025      	beq.n	80035b6 <HAL_GPIO_Init+0x222>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	4a50      	ldr	r2, [pc, #320]	; (80036b0 <HAL_GPIO_Init+0x31c>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d01f      	beq.n	80035b2 <HAL_GPIO_Init+0x21e>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	4a4f      	ldr	r2, [pc, #316]	; (80036b4 <HAL_GPIO_Init+0x320>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d019      	beq.n	80035ae <HAL_GPIO_Init+0x21a>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	4a4e      	ldr	r2, [pc, #312]	; (80036b8 <HAL_GPIO_Init+0x324>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d013      	beq.n	80035aa <HAL_GPIO_Init+0x216>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	4a4d      	ldr	r2, [pc, #308]	; (80036bc <HAL_GPIO_Init+0x328>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d00d      	beq.n	80035a6 <HAL_GPIO_Init+0x212>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	4a4c      	ldr	r2, [pc, #304]	; (80036c0 <HAL_GPIO_Init+0x32c>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d007      	beq.n	80035a2 <HAL_GPIO_Init+0x20e>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	4a4b      	ldr	r2, [pc, #300]	; (80036c4 <HAL_GPIO_Init+0x330>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d101      	bne.n	800359e <HAL_GPIO_Init+0x20a>
 800359a:	2307      	movs	r3, #7
 800359c:	e00e      	b.n	80035bc <HAL_GPIO_Init+0x228>
 800359e:	2308      	movs	r3, #8
 80035a0:	e00c      	b.n	80035bc <HAL_GPIO_Init+0x228>
 80035a2:	2306      	movs	r3, #6
 80035a4:	e00a      	b.n	80035bc <HAL_GPIO_Init+0x228>
 80035a6:	2305      	movs	r3, #5
 80035a8:	e008      	b.n	80035bc <HAL_GPIO_Init+0x228>
 80035aa:	2304      	movs	r3, #4
 80035ac:	e006      	b.n	80035bc <HAL_GPIO_Init+0x228>
 80035ae:	2303      	movs	r3, #3
 80035b0:	e004      	b.n	80035bc <HAL_GPIO_Init+0x228>
 80035b2:	2302      	movs	r3, #2
 80035b4:	e002      	b.n	80035bc <HAL_GPIO_Init+0x228>
 80035b6:	2301      	movs	r3, #1
 80035b8:	e000      	b.n	80035bc <HAL_GPIO_Init+0x228>
 80035ba:	2300      	movs	r3, #0
 80035bc:	69fa      	ldr	r2, [r7, #28]
 80035be:	f002 0203 	and.w	r2, r2, #3
 80035c2:	0092      	lsls	r2, r2, #2
 80035c4:	4093      	lsls	r3, r2
 80035c6:	69ba      	ldr	r2, [r7, #24]
 80035c8:	4313      	orrs	r3, r2
 80035ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80035cc:	4935      	ldr	r1, [pc, #212]	; (80036a4 <HAL_GPIO_Init+0x310>)
 80035ce:	69fb      	ldr	r3, [r7, #28]
 80035d0:	089b      	lsrs	r3, r3, #2
 80035d2:	3302      	adds	r3, #2
 80035d4:	69ba      	ldr	r2, [r7, #24]
 80035d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80035da:	4b3b      	ldr	r3, [pc, #236]	; (80036c8 <HAL_GPIO_Init+0x334>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	43db      	mvns	r3, r3
 80035e4:	69ba      	ldr	r2, [r7, #24]
 80035e6:	4013      	ands	r3, r2
 80035e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d003      	beq.n	80035fe <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80035f6:	69ba      	ldr	r2, [r7, #24]
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	4313      	orrs	r3, r2
 80035fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80035fe:	4a32      	ldr	r2, [pc, #200]	; (80036c8 <HAL_GPIO_Init+0x334>)
 8003600:	69bb      	ldr	r3, [r7, #24]
 8003602:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003604:	4b30      	ldr	r3, [pc, #192]	; (80036c8 <HAL_GPIO_Init+0x334>)
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	43db      	mvns	r3, r3
 800360e:	69ba      	ldr	r2, [r7, #24]
 8003610:	4013      	ands	r3, r2
 8003612:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800361c:	2b00      	cmp	r3, #0
 800361e:	d003      	beq.n	8003628 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003620:	69ba      	ldr	r2, [r7, #24]
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	4313      	orrs	r3, r2
 8003626:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003628:	4a27      	ldr	r2, [pc, #156]	; (80036c8 <HAL_GPIO_Init+0x334>)
 800362a:	69bb      	ldr	r3, [r7, #24]
 800362c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800362e:	4b26      	ldr	r3, [pc, #152]	; (80036c8 <HAL_GPIO_Init+0x334>)
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	43db      	mvns	r3, r3
 8003638:	69ba      	ldr	r2, [r7, #24]
 800363a:	4013      	ands	r3, r2
 800363c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003646:	2b00      	cmp	r3, #0
 8003648:	d003      	beq.n	8003652 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800364a:	69ba      	ldr	r2, [r7, #24]
 800364c:	693b      	ldr	r3, [r7, #16]
 800364e:	4313      	orrs	r3, r2
 8003650:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003652:	4a1d      	ldr	r2, [pc, #116]	; (80036c8 <HAL_GPIO_Init+0x334>)
 8003654:	69bb      	ldr	r3, [r7, #24]
 8003656:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003658:	4b1b      	ldr	r3, [pc, #108]	; (80036c8 <HAL_GPIO_Init+0x334>)
 800365a:	68db      	ldr	r3, [r3, #12]
 800365c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	43db      	mvns	r3, r3
 8003662:	69ba      	ldr	r2, [r7, #24]
 8003664:	4013      	ands	r3, r2
 8003666:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003670:	2b00      	cmp	r3, #0
 8003672:	d003      	beq.n	800367c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003674:	69ba      	ldr	r2, [r7, #24]
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	4313      	orrs	r3, r2
 800367a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800367c:	4a12      	ldr	r2, [pc, #72]	; (80036c8 <HAL_GPIO_Init+0x334>)
 800367e:	69bb      	ldr	r3, [r7, #24]
 8003680:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003682:	69fb      	ldr	r3, [r7, #28]
 8003684:	3301      	adds	r3, #1
 8003686:	61fb      	str	r3, [r7, #28]
 8003688:	69fb      	ldr	r3, [r7, #28]
 800368a:	2b0f      	cmp	r3, #15
 800368c:	f67f ae90 	bls.w	80033b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003690:	bf00      	nop
 8003692:	bf00      	nop
 8003694:	3724      	adds	r7, #36	; 0x24
 8003696:	46bd      	mov	sp, r7
 8003698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369c:	4770      	bx	lr
 800369e:	bf00      	nop
 80036a0:	40023800 	.word	0x40023800
 80036a4:	40013800 	.word	0x40013800
 80036a8:	40020000 	.word	0x40020000
 80036ac:	40020400 	.word	0x40020400
 80036b0:	40020800 	.word	0x40020800
 80036b4:	40020c00 	.word	0x40020c00
 80036b8:	40021000 	.word	0x40021000
 80036bc:	40021400 	.word	0x40021400
 80036c0:	40021800 	.word	0x40021800
 80036c4:	40021c00 	.word	0x40021c00
 80036c8:	40013c00 	.word	0x40013c00

080036cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b083      	sub	sp, #12
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
 80036d4:	460b      	mov	r3, r1
 80036d6:	807b      	strh	r3, [r7, #2]
 80036d8:	4613      	mov	r3, r2
 80036da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80036dc:	787b      	ldrb	r3, [r7, #1]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d003      	beq.n	80036ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80036e2:	887a      	ldrh	r2, [r7, #2]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80036e8:	e003      	b.n	80036f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80036ea:	887b      	ldrh	r3, [r7, #2]
 80036ec:	041a      	lsls	r2, r3, #16
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	619a      	str	r2, [r3, #24]
}
 80036f2:	bf00      	nop
 80036f4:	370c      	adds	r7, #12
 80036f6:	46bd      	mov	sp, r7
 80036f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fc:	4770      	bx	lr

080036fe <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80036fe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003700:	b08f      	sub	sp, #60	; 0x3c
 8003702:	af0a      	add	r7, sp, #40	; 0x28
 8003704:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d101      	bne.n	8003710 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	e054      	b.n	80037ba <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 800371c:	b2db      	uxtb	r3, r3
 800371e:	2b00      	cmp	r3, #0
 8003720:	d106      	bne.n	8003730 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2200      	movs	r2, #0
 8003726:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	f008 fa60 	bl	800bbf0 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2203      	movs	r2, #3
 8003734:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800373c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003740:	2b00      	cmp	r3, #0
 8003742:	d102      	bne.n	800374a <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2200      	movs	r2, #0
 8003748:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4618      	mov	r0, r3
 8003750:	f005 fbb6 	bl	8008ec0 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	603b      	str	r3, [r7, #0]
 800375a:	687e      	ldr	r6, [r7, #4]
 800375c:	466d      	mov	r5, sp
 800375e:	f106 0410 	add.w	r4, r6, #16
 8003762:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003764:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003766:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003768:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800376a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800376e:	e885 0003 	stmia.w	r5, {r0, r1}
 8003772:	1d33      	adds	r3, r6, #4
 8003774:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003776:	6838      	ldr	r0, [r7, #0]
 8003778:	f005 fb30 	bl	8008ddc <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	2101      	movs	r1, #1
 8003782:	4618      	mov	r0, r3
 8003784:	f005 fbad 	bl	8008ee2 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	603b      	str	r3, [r7, #0]
 800378e:	687e      	ldr	r6, [r7, #4]
 8003790:	466d      	mov	r5, sp
 8003792:	f106 0410 	add.w	r4, r6, #16
 8003796:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003798:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800379a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800379c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800379e:	e894 0003 	ldmia.w	r4, {r0, r1}
 80037a2:	e885 0003 	stmia.w	r5, {r0, r1}
 80037a6:	1d33      	adds	r3, r6, #4
 80037a8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80037aa:	6838      	ldr	r0, [r7, #0]
 80037ac:	f005 fd14 	bl	80091d8 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2201      	movs	r2, #1
 80037b4:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80037b8:	2300      	movs	r3, #0
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	3714      	adds	r7, #20
 80037be:	46bd      	mov	sp, r7
 80037c0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080037c2 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80037c2:	b590      	push	{r4, r7, lr}
 80037c4:	b089      	sub	sp, #36	; 0x24
 80037c6:	af04      	add	r7, sp, #16
 80037c8:	6078      	str	r0, [r7, #4]
 80037ca:	4608      	mov	r0, r1
 80037cc:	4611      	mov	r1, r2
 80037ce:	461a      	mov	r2, r3
 80037d0:	4603      	mov	r3, r0
 80037d2:	70fb      	strb	r3, [r7, #3]
 80037d4:	460b      	mov	r3, r1
 80037d6:	70bb      	strb	r3, [r7, #2]
 80037d8:	4613      	mov	r3, r2
 80037da:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80037e2:	2b01      	cmp	r3, #1
 80037e4:	d101      	bne.n	80037ea <HAL_HCD_HC_Init+0x28>
 80037e6:	2302      	movs	r3, #2
 80037e8:	e076      	b.n	80038d8 <HAL_HCD_HC_Init+0x116>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2201      	movs	r2, #1
 80037ee:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80037f2:	78fb      	ldrb	r3, [r7, #3]
 80037f4:	687a      	ldr	r2, [r7, #4]
 80037f6:	212c      	movs	r1, #44	; 0x2c
 80037f8:	fb01 f303 	mul.w	r3, r1, r3
 80037fc:	4413      	add	r3, r2
 80037fe:	333d      	adds	r3, #61	; 0x3d
 8003800:	2200      	movs	r2, #0
 8003802:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8003804:	78fb      	ldrb	r3, [r7, #3]
 8003806:	687a      	ldr	r2, [r7, #4]
 8003808:	212c      	movs	r1, #44	; 0x2c
 800380a:	fb01 f303 	mul.w	r3, r1, r3
 800380e:	4413      	add	r3, r2
 8003810:	3338      	adds	r3, #56	; 0x38
 8003812:	787a      	ldrb	r2, [r7, #1]
 8003814:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8003816:	78fb      	ldrb	r3, [r7, #3]
 8003818:	687a      	ldr	r2, [r7, #4]
 800381a:	212c      	movs	r1, #44	; 0x2c
 800381c:	fb01 f303 	mul.w	r3, r1, r3
 8003820:	4413      	add	r3, r2
 8003822:	3340      	adds	r3, #64	; 0x40
 8003824:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003826:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003828:	78fb      	ldrb	r3, [r7, #3]
 800382a:	687a      	ldr	r2, [r7, #4]
 800382c:	212c      	movs	r1, #44	; 0x2c
 800382e:	fb01 f303 	mul.w	r3, r1, r3
 8003832:	4413      	add	r3, r2
 8003834:	3339      	adds	r3, #57	; 0x39
 8003836:	78fa      	ldrb	r2, [r7, #3]
 8003838:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800383a:	78fb      	ldrb	r3, [r7, #3]
 800383c:	687a      	ldr	r2, [r7, #4]
 800383e:	212c      	movs	r1, #44	; 0x2c
 8003840:	fb01 f303 	mul.w	r3, r1, r3
 8003844:	4413      	add	r3, r2
 8003846:	333f      	adds	r3, #63	; 0x3f
 8003848:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800384c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800384e:	78fb      	ldrb	r3, [r7, #3]
 8003850:	78ba      	ldrb	r2, [r7, #2]
 8003852:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003856:	b2d0      	uxtb	r0, r2
 8003858:	687a      	ldr	r2, [r7, #4]
 800385a:	212c      	movs	r1, #44	; 0x2c
 800385c:	fb01 f303 	mul.w	r3, r1, r3
 8003860:	4413      	add	r3, r2
 8003862:	333a      	adds	r3, #58	; 0x3a
 8003864:	4602      	mov	r2, r0
 8003866:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8003868:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800386c:	2b00      	cmp	r3, #0
 800386e:	da09      	bge.n	8003884 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8003870:	78fb      	ldrb	r3, [r7, #3]
 8003872:	687a      	ldr	r2, [r7, #4]
 8003874:	212c      	movs	r1, #44	; 0x2c
 8003876:	fb01 f303 	mul.w	r3, r1, r3
 800387a:	4413      	add	r3, r2
 800387c:	333b      	adds	r3, #59	; 0x3b
 800387e:	2201      	movs	r2, #1
 8003880:	701a      	strb	r2, [r3, #0]
 8003882:	e008      	b.n	8003896 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8003884:	78fb      	ldrb	r3, [r7, #3]
 8003886:	687a      	ldr	r2, [r7, #4]
 8003888:	212c      	movs	r1, #44	; 0x2c
 800388a:	fb01 f303 	mul.w	r3, r1, r3
 800388e:	4413      	add	r3, r2
 8003890:	333b      	adds	r3, #59	; 0x3b
 8003892:	2200      	movs	r2, #0
 8003894:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8003896:	78fb      	ldrb	r3, [r7, #3]
 8003898:	687a      	ldr	r2, [r7, #4]
 800389a:	212c      	movs	r1, #44	; 0x2c
 800389c:	fb01 f303 	mul.w	r3, r1, r3
 80038a0:	4413      	add	r3, r2
 80038a2:	333c      	adds	r3, #60	; 0x3c
 80038a4:	f897 2020 	ldrb.w	r2, [r7, #32]
 80038a8:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6818      	ldr	r0, [r3, #0]
 80038ae:	787c      	ldrb	r4, [r7, #1]
 80038b0:	78ba      	ldrb	r2, [r7, #2]
 80038b2:	78f9      	ldrb	r1, [r7, #3]
 80038b4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80038b6:	9302      	str	r3, [sp, #8]
 80038b8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80038bc:	9301      	str	r3, [sp, #4]
 80038be:	f897 3020 	ldrb.w	r3, [r7, #32]
 80038c2:	9300      	str	r3, [sp, #0]
 80038c4:	4623      	mov	r3, r4
 80038c6:	f005 fe01 	bl	80094cc <USB_HC_Init>
 80038ca:	4603      	mov	r3, r0
 80038cc:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2200      	movs	r2, #0
 80038d2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80038d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80038d8:	4618      	mov	r0, r3
 80038da:	3714      	adds	r7, #20
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd90      	pop	{r4, r7, pc}

080038e0 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b084      	sub	sp, #16
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
 80038e8:	460b      	mov	r3, r1
 80038ea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80038ec:	2300      	movs	r3, #0
 80038ee:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80038f6:	2b01      	cmp	r3, #1
 80038f8:	d101      	bne.n	80038fe <HAL_HCD_HC_Halt+0x1e>
 80038fa:	2302      	movs	r3, #2
 80038fc:	e00f      	b.n	800391e <HAL_HCD_HC_Halt+0x3e>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2201      	movs	r2, #1
 8003902:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	78fa      	ldrb	r2, [r7, #3]
 800390c:	4611      	mov	r1, r2
 800390e:	4618      	mov	r0, r3
 8003910:	f006 f83d 	bl	800998e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2200      	movs	r2, #0
 8003918:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800391c:	7bfb      	ldrb	r3, [r7, #15]
}
 800391e:	4618      	mov	r0, r3
 8003920:	3710      	adds	r7, #16
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}
	...

08003928 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b082      	sub	sp, #8
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
 8003930:	4608      	mov	r0, r1
 8003932:	4611      	mov	r1, r2
 8003934:	461a      	mov	r2, r3
 8003936:	4603      	mov	r3, r0
 8003938:	70fb      	strb	r3, [r7, #3]
 800393a:	460b      	mov	r3, r1
 800393c:	70bb      	strb	r3, [r7, #2]
 800393e:	4613      	mov	r3, r2
 8003940:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8003942:	78fb      	ldrb	r3, [r7, #3]
 8003944:	687a      	ldr	r2, [r7, #4]
 8003946:	212c      	movs	r1, #44	; 0x2c
 8003948:	fb01 f303 	mul.w	r3, r1, r3
 800394c:	4413      	add	r3, r2
 800394e:	333b      	adds	r3, #59	; 0x3b
 8003950:	78ba      	ldrb	r2, [r7, #2]
 8003952:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8003954:	78fb      	ldrb	r3, [r7, #3]
 8003956:	687a      	ldr	r2, [r7, #4]
 8003958:	212c      	movs	r1, #44	; 0x2c
 800395a:	fb01 f303 	mul.w	r3, r1, r3
 800395e:	4413      	add	r3, r2
 8003960:	333f      	adds	r3, #63	; 0x3f
 8003962:	787a      	ldrb	r2, [r7, #1]
 8003964:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8003966:	7c3b      	ldrb	r3, [r7, #16]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d112      	bne.n	8003992 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800396c:	78fb      	ldrb	r3, [r7, #3]
 800396e:	687a      	ldr	r2, [r7, #4]
 8003970:	212c      	movs	r1, #44	; 0x2c
 8003972:	fb01 f303 	mul.w	r3, r1, r3
 8003976:	4413      	add	r3, r2
 8003978:	3342      	adds	r3, #66	; 0x42
 800397a:	2203      	movs	r2, #3
 800397c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800397e:	78fb      	ldrb	r3, [r7, #3]
 8003980:	687a      	ldr	r2, [r7, #4]
 8003982:	212c      	movs	r1, #44	; 0x2c
 8003984:	fb01 f303 	mul.w	r3, r1, r3
 8003988:	4413      	add	r3, r2
 800398a:	333d      	adds	r3, #61	; 0x3d
 800398c:	7f3a      	ldrb	r2, [r7, #28]
 800398e:	701a      	strb	r2, [r3, #0]
 8003990:	e008      	b.n	80039a4 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003992:	78fb      	ldrb	r3, [r7, #3]
 8003994:	687a      	ldr	r2, [r7, #4]
 8003996:	212c      	movs	r1, #44	; 0x2c
 8003998:	fb01 f303 	mul.w	r3, r1, r3
 800399c:	4413      	add	r3, r2
 800399e:	3342      	adds	r3, #66	; 0x42
 80039a0:	2202      	movs	r2, #2
 80039a2:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80039a4:	787b      	ldrb	r3, [r7, #1]
 80039a6:	2b03      	cmp	r3, #3
 80039a8:	f200 80c6 	bhi.w	8003b38 <HAL_HCD_HC_SubmitRequest+0x210>
 80039ac:	a201      	add	r2, pc, #4	; (adr r2, 80039b4 <HAL_HCD_HC_SubmitRequest+0x8c>)
 80039ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039b2:	bf00      	nop
 80039b4:	080039c5 	.word	0x080039c5
 80039b8:	08003b25 	.word	0x08003b25
 80039bc:	08003a29 	.word	0x08003a29
 80039c0:	08003aa7 	.word	0x08003aa7
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80039c4:	7c3b      	ldrb	r3, [r7, #16]
 80039c6:	2b01      	cmp	r3, #1
 80039c8:	f040 80b8 	bne.w	8003b3c <HAL_HCD_HC_SubmitRequest+0x214>
 80039cc:	78bb      	ldrb	r3, [r7, #2]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	f040 80b4 	bne.w	8003b3c <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80039d4:	8b3b      	ldrh	r3, [r7, #24]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d108      	bne.n	80039ec <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80039da:	78fb      	ldrb	r3, [r7, #3]
 80039dc:	687a      	ldr	r2, [r7, #4]
 80039de:	212c      	movs	r1, #44	; 0x2c
 80039e0:	fb01 f303 	mul.w	r3, r1, r3
 80039e4:	4413      	add	r3, r2
 80039e6:	3355      	adds	r3, #85	; 0x55
 80039e8:	2201      	movs	r2, #1
 80039ea:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80039ec:	78fb      	ldrb	r3, [r7, #3]
 80039ee:	687a      	ldr	r2, [r7, #4]
 80039f0:	212c      	movs	r1, #44	; 0x2c
 80039f2:	fb01 f303 	mul.w	r3, r1, r3
 80039f6:	4413      	add	r3, r2
 80039f8:	3355      	adds	r3, #85	; 0x55
 80039fa:	781b      	ldrb	r3, [r3, #0]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d109      	bne.n	8003a14 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003a00:	78fb      	ldrb	r3, [r7, #3]
 8003a02:	687a      	ldr	r2, [r7, #4]
 8003a04:	212c      	movs	r1, #44	; 0x2c
 8003a06:	fb01 f303 	mul.w	r3, r1, r3
 8003a0a:	4413      	add	r3, r2
 8003a0c:	3342      	adds	r3, #66	; 0x42
 8003a0e:	2200      	movs	r2, #0
 8003a10:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003a12:	e093      	b.n	8003b3c <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003a14:	78fb      	ldrb	r3, [r7, #3]
 8003a16:	687a      	ldr	r2, [r7, #4]
 8003a18:	212c      	movs	r1, #44	; 0x2c
 8003a1a:	fb01 f303 	mul.w	r3, r1, r3
 8003a1e:	4413      	add	r3, r2
 8003a20:	3342      	adds	r3, #66	; 0x42
 8003a22:	2202      	movs	r2, #2
 8003a24:	701a      	strb	r2, [r3, #0]
      break;
 8003a26:	e089      	b.n	8003b3c <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8003a28:	78bb      	ldrb	r3, [r7, #2]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d11d      	bne.n	8003a6a <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003a2e:	78fb      	ldrb	r3, [r7, #3]
 8003a30:	687a      	ldr	r2, [r7, #4]
 8003a32:	212c      	movs	r1, #44	; 0x2c
 8003a34:	fb01 f303 	mul.w	r3, r1, r3
 8003a38:	4413      	add	r3, r2
 8003a3a:	3355      	adds	r3, #85	; 0x55
 8003a3c:	781b      	ldrb	r3, [r3, #0]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d109      	bne.n	8003a56 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003a42:	78fb      	ldrb	r3, [r7, #3]
 8003a44:	687a      	ldr	r2, [r7, #4]
 8003a46:	212c      	movs	r1, #44	; 0x2c
 8003a48:	fb01 f303 	mul.w	r3, r1, r3
 8003a4c:	4413      	add	r3, r2
 8003a4e:	3342      	adds	r3, #66	; 0x42
 8003a50:	2200      	movs	r2, #0
 8003a52:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8003a54:	e073      	b.n	8003b3e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003a56:	78fb      	ldrb	r3, [r7, #3]
 8003a58:	687a      	ldr	r2, [r7, #4]
 8003a5a:	212c      	movs	r1, #44	; 0x2c
 8003a5c:	fb01 f303 	mul.w	r3, r1, r3
 8003a60:	4413      	add	r3, r2
 8003a62:	3342      	adds	r3, #66	; 0x42
 8003a64:	2202      	movs	r2, #2
 8003a66:	701a      	strb	r2, [r3, #0]
      break;
 8003a68:	e069      	b.n	8003b3e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003a6a:	78fb      	ldrb	r3, [r7, #3]
 8003a6c:	687a      	ldr	r2, [r7, #4]
 8003a6e:	212c      	movs	r1, #44	; 0x2c
 8003a70:	fb01 f303 	mul.w	r3, r1, r3
 8003a74:	4413      	add	r3, r2
 8003a76:	3354      	adds	r3, #84	; 0x54
 8003a78:	781b      	ldrb	r3, [r3, #0]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d109      	bne.n	8003a92 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003a7e:	78fb      	ldrb	r3, [r7, #3]
 8003a80:	687a      	ldr	r2, [r7, #4]
 8003a82:	212c      	movs	r1, #44	; 0x2c
 8003a84:	fb01 f303 	mul.w	r3, r1, r3
 8003a88:	4413      	add	r3, r2
 8003a8a:	3342      	adds	r3, #66	; 0x42
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	701a      	strb	r2, [r3, #0]
      break;
 8003a90:	e055      	b.n	8003b3e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003a92:	78fb      	ldrb	r3, [r7, #3]
 8003a94:	687a      	ldr	r2, [r7, #4]
 8003a96:	212c      	movs	r1, #44	; 0x2c
 8003a98:	fb01 f303 	mul.w	r3, r1, r3
 8003a9c:	4413      	add	r3, r2
 8003a9e:	3342      	adds	r3, #66	; 0x42
 8003aa0:	2202      	movs	r2, #2
 8003aa2:	701a      	strb	r2, [r3, #0]
      break;
 8003aa4:	e04b      	b.n	8003b3e <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8003aa6:	78bb      	ldrb	r3, [r7, #2]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d11d      	bne.n	8003ae8 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003aac:	78fb      	ldrb	r3, [r7, #3]
 8003aae:	687a      	ldr	r2, [r7, #4]
 8003ab0:	212c      	movs	r1, #44	; 0x2c
 8003ab2:	fb01 f303 	mul.w	r3, r1, r3
 8003ab6:	4413      	add	r3, r2
 8003ab8:	3355      	adds	r3, #85	; 0x55
 8003aba:	781b      	ldrb	r3, [r3, #0]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d109      	bne.n	8003ad4 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003ac0:	78fb      	ldrb	r3, [r7, #3]
 8003ac2:	687a      	ldr	r2, [r7, #4]
 8003ac4:	212c      	movs	r1, #44	; 0x2c
 8003ac6:	fb01 f303 	mul.w	r3, r1, r3
 8003aca:	4413      	add	r3, r2
 8003acc:	3342      	adds	r3, #66	; 0x42
 8003ace:	2200      	movs	r2, #0
 8003ad0:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003ad2:	e034      	b.n	8003b3e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003ad4:	78fb      	ldrb	r3, [r7, #3]
 8003ad6:	687a      	ldr	r2, [r7, #4]
 8003ad8:	212c      	movs	r1, #44	; 0x2c
 8003ada:	fb01 f303 	mul.w	r3, r1, r3
 8003ade:	4413      	add	r3, r2
 8003ae0:	3342      	adds	r3, #66	; 0x42
 8003ae2:	2202      	movs	r2, #2
 8003ae4:	701a      	strb	r2, [r3, #0]
      break;
 8003ae6:	e02a      	b.n	8003b3e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003ae8:	78fb      	ldrb	r3, [r7, #3]
 8003aea:	687a      	ldr	r2, [r7, #4]
 8003aec:	212c      	movs	r1, #44	; 0x2c
 8003aee:	fb01 f303 	mul.w	r3, r1, r3
 8003af2:	4413      	add	r3, r2
 8003af4:	3354      	adds	r3, #84	; 0x54
 8003af6:	781b      	ldrb	r3, [r3, #0]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d109      	bne.n	8003b10 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003afc:	78fb      	ldrb	r3, [r7, #3]
 8003afe:	687a      	ldr	r2, [r7, #4]
 8003b00:	212c      	movs	r1, #44	; 0x2c
 8003b02:	fb01 f303 	mul.w	r3, r1, r3
 8003b06:	4413      	add	r3, r2
 8003b08:	3342      	adds	r3, #66	; 0x42
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	701a      	strb	r2, [r3, #0]
      break;
 8003b0e:	e016      	b.n	8003b3e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003b10:	78fb      	ldrb	r3, [r7, #3]
 8003b12:	687a      	ldr	r2, [r7, #4]
 8003b14:	212c      	movs	r1, #44	; 0x2c
 8003b16:	fb01 f303 	mul.w	r3, r1, r3
 8003b1a:	4413      	add	r3, r2
 8003b1c:	3342      	adds	r3, #66	; 0x42
 8003b1e:	2202      	movs	r2, #2
 8003b20:	701a      	strb	r2, [r3, #0]
      break;
 8003b22:	e00c      	b.n	8003b3e <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003b24:	78fb      	ldrb	r3, [r7, #3]
 8003b26:	687a      	ldr	r2, [r7, #4]
 8003b28:	212c      	movs	r1, #44	; 0x2c
 8003b2a:	fb01 f303 	mul.w	r3, r1, r3
 8003b2e:	4413      	add	r3, r2
 8003b30:	3342      	adds	r3, #66	; 0x42
 8003b32:	2200      	movs	r2, #0
 8003b34:	701a      	strb	r2, [r3, #0]
      break;
 8003b36:	e002      	b.n	8003b3e <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8003b38:	bf00      	nop
 8003b3a:	e000      	b.n	8003b3e <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8003b3c:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8003b3e:	78fb      	ldrb	r3, [r7, #3]
 8003b40:	687a      	ldr	r2, [r7, #4]
 8003b42:	212c      	movs	r1, #44	; 0x2c
 8003b44:	fb01 f303 	mul.w	r3, r1, r3
 8003b48:	4413      	add	r3, r2
 8003b4a:	3344      	adds	r3, #68	; 0x44
 8003b4c:	697a      	ldr	r2, [r7, #20]
 8003b4e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8003b50:	78fb      	ldrb	r3, [r7, #3]
 8003b52:	8b3a      	ldrh	r2, [r7, #24]
 8003b54:	6879      	ldr	r1, [r7, #4]
 8003b56:	202c      	movs	r0, #44	; 0x2c
 8003b58:	fb00 f303 	mul.w	r3, r0, r3
 8003b5c:	440b      	add	r3, r1
 8003b5e:	334c      	adds	r3, #76	; 0x4c
 8003b60:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8003b62:	78fb      	ldrb	r3, [r7, #3]
 8003b64:	687a      	ldr	r2, [r7, #4]
 8003b66:	212c      	movs	r1, #44	; 0x2c
 8003b68:	fb01 f303 	mul.w	r3, r1, r3
 8003b6c:	4413      	add	r3, r2
 8003b6e:	3360      	adds	r3, #96	; 0x60
 8003b70:	2200      	movs	r2, #0
 8003b72:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8003b74:	78fb      	ldrb	r3, [r7, #3]
 8003b76:	687a      	ldr	r2, [r7, #4]
 8003b78:	212c      	movs	r1, #44	; 0x2c
 8003b7a:	fb01 f303 	mul.w	r3, r1, r3
 8003b7e:	4413      	add	r3, r2
 8003b80:	3350      	adds	r3, #80	; 0x50
 8003b82:	2200      	movs	r2, #0
 8003b84:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003b86:	78fb      	ldrb	r3, [r7, #3]
 8003b88:	687a      	ldr	r2, [r7, #4]
 8003b8a:	212c      	movs	r1, #44	; 0x2c
 8003b8c:	fb01 f303 	mul.w	r3, r1, r3
 8003b90:	4413      	add	r3, r2
 8003b92:	3339      	adds	r3, #57	; 0x39
 8003b94:	78fa      	ldrb	r2, [r7, #3]
 8003b96:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8003b98:	78fb      	ldrb	r3, [r7, #3]
 8003b9a:	687a      	ldr	r2, [r7, #4]
 8003b9c:	212c      	movs	r1, #44	; 0x2c
 8003b9e:	fb01 f303 	mul.w	r3, r1, r3
 8003ba2:	4413      	add	r3, r2
 8003ba4:	3361      	adds	r3, #97	; 0x61
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6818      	ldr	r0, [r3, #0]
 8003bae:	78fb      	ldrb	r3, [r7, #3]
 8003bb0:	222c      	movs	r2, #44	; 0x2c
 8003bb2:	fb02 f303 	mul.w	r3, r2, r3
 8003bb6:	3338      	adds	r3, #56	; 0x38
 8003bb8:	687a      	ldr	r2, [r7, #4]
 8003bba:	18d1      	adds	r1, r2, r3
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	691b      	ldr	r3, [r3, #16]
 8003bc0:	b2db      	uxtb	r3, r3
 8003bc2:	461a      	mov	r2, r3
 8003bc4:	f005 fd90 	bl	80096e8 <USB_HC_StartXfer>
 8003bc8:	4603      	mov	r3, r0
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	3708      	adds	r7, #8
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}
 8003bd2:	bf00      	nop

08003bd4 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b086      	sub	sp, #24
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4618      	mov	r0, r3
 8003bec:	f005 fab3 	bl	8009156 <USB_GetMode>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	2b01      	cmp	r3, #1
 8003bf4:	f040 80f6 	bne.w	8003de4 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	f005 fa97 	bl	8009130 <USB_ReadInterrupts>
 8003c02:	4603      	mov	r3, r0
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	f000 80ec 	beq.w	8003de2 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f005 fa8e 	bl	8009130 <USB_ReadInterrupts>
 8003c14:	4603      	mov	r3, r0
 8003c16:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c1a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003c1e:	d104      	bne.n	8003c2a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003c28:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f005 fa7e 	bl	8009130 <USB_ReadInterrupts>
 8003c34:	4603      	mov	r3, r0
 8003c36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c3a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c3e:	d104      	bne.n	8003c4a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003c48:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f005 fa6e 	bl	8009130 <USB_ReadInterrupts>
 8003c54:	4603      	mov	r3, r0
 8003c56:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003c5a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003c5e:	d104      	bne.n	8003c6a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003c68:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f005 fa5e 	bl	8009130 <USB_ReadInterrupts>
 8003c74:	4603      	mov	r3, r0
 8003c76:	f003 0302 	and.w	r3, r3, #2
 8003c7a:	2b02      	cmp	r3, #2
 8003c7c:	d103      	bne.n	8003c86 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	2202      	movs	r2, #2
 8003c84:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	f005 fa50 	bl	8009130 <USB_ReadInterrupts>
 8003c90:	4603      	mov	r3, r0
 8003c92:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c96:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c9a:	d11c      	bne.n	8003cd6 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003ca4:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f003 0301 	and.w	r3, r3, #1
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d10f      	bne.n	8003cd6 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8003cb6:	2110      	movs	r1, #16
 8003cb8:	6938      	ldr	r0, [r7, #16]
 8003cba:	f005 f95f 	bl	8008f7c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8003cbe:	6938      	ldr	r0, [r7, #16]
 8003cc0:	f005 f980 	bl	8008fc4 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	2101      	movs	r1, #1
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f005 fb38 	bl	8009340 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8003cd0:	6878      	ldr	r0, [r7, #4]
 8003cd2:	f008 f80b 	bl	800bcec <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f005 fa28 	bl	8009130 <USB_ReadInterrupts>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ce6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003cea:	d102      	bne.n	8003cf2 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8003cec:	6878      	ldr	r0, [r7, #4]
 8003cee:	f001 fa03 	bl	80050f8 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f005 fa1a 	bl	8009130 <USB_ReadInterrupts>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	f003 0308 	and.w	r3, r3, #8
 8003d02:	2b08      	cmp	r3, #8
 8003d04:	d106      	bne.n	8003d14 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8003d06:	6878      	ldr	r0, [r7, #4]
 8003d08:	f007 ffd4 	bl	800bcb4 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	2208      	movs	r2, #8
 8003d12:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4618      	mov	r0, r3
 8003d1a:	f005 fa09 	bl	8009130 <USB_ReadInterrupts>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	f003 0310 	and.w	r3, r3, #16
 8003d24:	2b10      	cmp	r3, #16
 8003d26:	d101      	bne.n	8003d2c <HAL_HCD_IRQHandler+0x158>
 8003d28:	2301      	movs	r3, #1
 8003d2a:	e000      	b.n	8003d2e <HAL_HCD_IRQHandler+0x15a>
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d012      	beq.n	8003d58 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	699a      	ldr	r2, [r3, #24]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f022 0210 	bic.w	r2, r2, #16
 8003d40:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	f001 f906 	bl	8004f54 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	699a      	ldr	r2, [r3, #24]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f042 0210 	orr.w	r2, r2, #16
 8003d56:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f005 f9e7 	bl	8009130 <USB_ReadInterrupts>
 8003d62:	4603      	mov	r3, r0
 8003d64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d68:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003d6c:	d13a      	bne.n	8003de4 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4618      	mov	r0, r3
 8003d74:	f005 fdfa 	bl	800996c <USB_HC_ReadInterrupt>
 8003d78:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	617b      	str	r3, [r7, #20]
 8003d7e:	e025      	b.n	8003dcc <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	f003 030f 	and.w	r3, r3, #15
 8003d86:	68ba      	ldr	r2, [r7, #8]
 8003d88:	fa22 f303 	lsr.w	r3, r2, r3
 8003d8c:	f003 0301 	and.w	r3, r3, #1
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d018      	beq.n	8003dc6 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	015a      	lsls	r2, r3, #5
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	4413      	add	r3, r2
 8003d9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003da6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003daa:	d106      	bne.n	8003dba <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	b2db      	uxtb	r3, r3
 8003db0:	4619      	mov	r1, r3
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	f000 f8ab 	bl	8003f0e <HCD_HC_IN_IRQHandler>
 8003db8:	e005      	b.n	8003dc6 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	b2db      	uxtb	r3, r3
 8003dbe:	4619      	mov	r1, r3
 8003dc0:	6878      	ldr	r0, [r7, #4]
 8003dc2:	f000 fcc6 	bl	8004752 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	3301      	adds	r3, #1
 8003dca:	617b      	str	r3, [r7, #20]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	697a      	ldr	r2, [r7, #20]
 8003dd2:	429a      	cmp	r2, r3
 8003dd4:	d3d4      	bcc.n	8003d80 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003dde:	615a      	str	r2, [r3, #20]
 8003de0:	e000      	b.n	8003de4 <HAL_HCD_IRQHandler+0x210>
      return;
 8003de2:	bf00      	nop
    }
  }
}
 8003de4:	3718      	adds	r7, #24
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}

08003dea <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8003dea:	b580      	push	{r7, lr}
 8003dec:	b082      	sub	sp, #8
 8003dee:	af00      	add	r7, sp, #0
 8003df0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003df8:	2b01      	cmp	r3, #1
 8003dfa:	d101      	bne.n	8003e00 <HAL_HCD_Start+0x16>
 8003dfc:	2302      	movs	r3, #2
 8003dfe:	e013      	b.n	8003e28 <HAL_HCD_Start+0x3e>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2201      	movs	r2, #1
 8003e04:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	2101      	movs	r1, #1
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f005 fafa 	bl	8009408 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f005 f840 	bl	8008e9e <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2200      	movs	r2, #0
 8003e22:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003e26:	2300      	movs	r3, #0
}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	3708      	adds	r7, #8
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bd80      	pop	{r7, pc}

08003e30 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b082      	sub	sp, #8
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003e3e:	2b01      	cmp	r3, #1
 8003e40:	d101      	bne.n	8003e46 <HAL_HCD_Stop+0x16>
 8003e42:	2302      	movs	r3, #2
 8003e44:	e00d      	b.n	8003e62 <HAL_HCD_Stop+0x32>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2201      	movs	r2, #1
 8003e4a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4618      	mov	r0, r3
 8003e54:	f005 fef4 	bl	8009c40 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003e60:	2300      	movs	r3, #0
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	3708      	adds	r7, #8
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}

08003e6a <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8003e6a:	b580      	push	{r7, lr}
 8003e6c:	b082      	sub	sp, #8
 8003e6e:	af00      	add	r7, sp, #0
 8003e70:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4618      	mov	r0, r3
 8003e78:	f005 fa9c 	bl	80093b4 <USB_ResetPort>
 8003e7c:	4603      	mov	r3, r0
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3708      	adds	r7, #8
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}

08003e86 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003e86:	b480      	push	{r7}
 8003e88:	b083      	sub	sp, #12
 8003e8a:	af00      	add	r7, sp, #0
 8003e8c:	6078      	str	r0, [r7, #4]
 8003e8e:	460b      	mov	r3, r1
 8003e90:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003e92:	78fb      	ldrb	r3, [r7, #3]
 8003e94:	687a      	ldr	r2, [r7, #4]
 8003e96:	212c      	movs	r1, #44	; 0x2c
 8003e98:	fb01 f303 	mul.w	r3, r1, r3
 8003e9c:	4413      	add	r3, r2
 8003e9e:	3360      	adds	r3, #96	; 0x60
 8003ea0:	781b      	ldrb	r3, [r3, #0]
}
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	370c      	adds	r7, #12
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eac:	4770      	bx	lr

08003eae <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003eae:	b480      	push	{r7}
 8003eb0:	b083      	sub	sp, #12
 8003eb2:	af00      	add	r7, sp, #0
 8003eb4:	6078      	str	r0, [r7, #4]
 8003eb6:	460b      	mov	r3, r1
 8003eb8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8003eba:	78fb      	ldrb	r3, [r7, #3]
 8003ebc:	687a      	ldr	r2, [r7, #4]
 8003ebe:	212c      	movs	r1, #44	; 0x2c
 8003ec0:	fb01 f303 	mul.w	r3, r1, r3
 8003ec4:	4413      	add	r3, r2
 8003ec6:	3350      	adds	r3, #80	; 0x50
 8003ec8:	681b      	ldr	r3, [r3, #0]
}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	370c      	adds	r7, #12
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed4:	4770      	bx	lr

08003ed6 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8003ed6:	b580      	push	{r7, lr}
 8003ed8:	b082      	sub	sp, #8
 8003eda:	af00      	add	r7, sp, #0
 8003edc:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f005 fae0 	bl	80094a8 <USB_GetCurrentFrame>
 8003ee8:	4603      	mov	r3, r0
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	3708      	adds	r7, #8
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}

08003ef2 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8003ef2:	b580      	push	{r7, lr}
 8003ef4:	b082      	sub	sp, #8
 8003ef6:	af00      	add	r7, sp, #0
 8003ef8:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4618      	mov	r0, r3
 8003f00:	f005 fabb 	bl	800947a <USB_GetHostSpeed>
 8003f04:	4603      	mov	r3, r0
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	3708      	adds	r7, #8
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}

08003f0e <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003f0e:	b580      	push	{r7, lr}
 8003f10:	b086      	sub	sp, #24
 8003f12:	af00      	add	r7, sp, #0
 8003f14:	6078      	str	r0, [r7, #4]
 8003f16:	460b      	mov	r3, r1
 8003f18:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f20:	697b      	ldr	r3, [r7, #20]
 8003f22:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003f24:	78fb      	ldrb	r3, [r7, #3]
 8003f26:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	015a      	lsls	r2, r3, #5
 8003f2c:	693b      	ldr	r3, [r7, #16]
 8003f2e:	4413      	add	r3, r2
 8003f30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f34:	689b      	ldr	r3, [r3, #8]
 8003f36:	f003 0304 	and.w	r3, r3, #4
 8003f3a:	2b04      	cmp	r3, #4
 8003f3c:	d119      	bne.n	8003f72 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	015a      	lsls	r2, r3, #5
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	4413      	add	r3, r2
 8003f46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f4a:	461a      	mov	r2, r3
 8003f4c:	2304      	movs	r3, #4
 8003f4e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	015a      	lsls	r2, r3, #5
 8003f54:	693b      	ldr	r3, [r7, #16]
 8003f56:	4413      	add	r3, r2
 8003f58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f5c:	68db      	ldr	r3, [r3, #12]
 8003f5e:	68fa      	ldr	r2, [r7, #12]
 8003f60:	0151      	lsls	r1, r2, #5
 8003f62:	693a      	ldr	r2, [r7, #16]
 8003f64:	440a      	add	r2, r1
 8003f66:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003f6a:	f043 0302 	orr.w	r3, r3, #2
 8003f6e:	60d3      	str	r3, [r2, #12]
 8003f70:	e101      	b.n	8004176 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	015a      	lsls	r2, r3, #5
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	4413      	add	r3, r2
 8003f7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f7e:	689b      	ldr	r3, [r3, #8]
 8003f80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f88:	d12b      	bne.n	8003fe2 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	015a      	lsls	r2, r3, #5
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	4413      	add	r3, r2
 8003f92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f96:	461a      	mov	r2, r3
 8003f98:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003f9c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8003f9e:	687a      	ldr	r2, [r7, #4]
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	212c      	movs	r1, #44	; 0x2c
 8003fa4:	fb01 f303 	mul.w	r3, r1, r3
 8003fa8:	4413      	add	r3, r2
 8003faa:	3361      	adds	r3, #97	; 0x61
 8003fac:	2207      	movs	r2, #7
 8003fae:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	015a      	lsls	r2, r3, #5
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	4413      	add	r3, r2
 8003fb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fbc:	68db      	ldr	r3, [r3, #12]
 8003fbe:	68fa      	ldr	r2, [r7, #12]
 8003fc0:	0151      	lsls	r1, r2, #5
 8003fc2:	693a      	ldr	r2, [r7, #16]
 8003fc4:	440a      	add	r2, r1
 8003fc6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003fca:	f043 0302 	orr.w	r3, r3, #2
 8003fce:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	68fa      	ldr	r2, [r7, #12]
 8003fd6:	b2d2      	uxtb	r2, r2
 8003fd8:	4611      	mov	r1, r2
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f005 fcd7 	bl	800998e <USB_HC_Halt>
 8003fe0:	e0c9      	b.n	8004176 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	015a      	lsls	r2, r3, #5
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	4413      	add	r3, r2
 8003fea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fee:	689b      	ldr	r3, [r3, #8]
 8003ff0:	f003 0320 	and.w	r3, r3, #32
 8003ff4:	2b20      	cmp	r3, #32
 8003ff6:	d109      	bne.n	800400c <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	015a      	lsls	r2, r3, #5
 8003ffc:	693b      	ldr	r3, [r7, #16]
 8003ffe:	4413      	add	r3, r2
 8004000:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004004:	461a      	mov	r2, r3
 8004006:	2320      	movs	r3, #32
 8004008:	6093      	str	r3, [r2, #8]
 800400a:	e0b4      	b.n	8004176 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	015a      	lsls	r2, r3, #5
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	4413      	add	r3, r2
 8004014:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004018:	689b      	ldr	r3, [r3, #8]
 800401a:	f003 0308 	and.w	r3, r3, #8
 800401e:	2b08      	cmp	r3, #8
 8004020:	d133      	bne.n	800408a <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	015a      	lsls	r2, r3, #5
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	4413      	add	r3, r2
 800402a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800402e:	68db      	ldr	r3, [r3, #12]
 8004030:	68fa      	ldr	r2, [r7, #12]
 8004032:	0151      	lsls	r1, r2, #5
 8004034:	693a      	ldr	r2, [r7, #16]
 8004036:	440a      	add	r2, r1
 8004038:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800403c:	f043 0302 	orr.w	r3, r3, #2
 8004040:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8004042:	687a      	ldr	r2, [r7, #4]
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	212c      	movs	r1, #44	; 0x2c
 8004048:	fb01 f303 	mul.w	r3, r1, r3
 800404c:	4413      	add	r3, r2
 800404e:	3361      	adds	r3, #97	; 0x61
 8004050:	2205      	movs	r2, #5
 8004052:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	015a      	lsls	r2, r3, #5
 8004058:	693b      	ldr	r3, [r7, #16]
 800405a:	4413      	add	r3, r2
 800405c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004060:	461a      	mov	r2, r3
 8004062:	2310      	movs	r3, #16
 8004064:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	015a      	lsls	r2, r3, #5
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	4413      	add	r3, r2
 800406e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004072:	461a      	mov	r2, r3
 8004074:	2308      	movs	r3, #8
 8004076:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	68fa      	ldr	r2, [r7, #12]
 800407e:	b2d2      	uxtb	r2, r2
 8004080:	4611      	mov	r1, r2
 8004082:	4618      	mov	r0, r3
 8004084:	f005 fc83 	bl	800998e <USB_HC_Halt>
 8004088:	e075      	b.n	8004176 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	015a      	lsls	r2, r3, #5
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	4413      	add	r3, r2
 8004092:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004096:	689b      	ldr	r3, [r3, #8]
 8004098:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800409c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040a0:	d134      	bne.n	800410c <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	015a      	lsls	r2, r3, #5
 80040a6:	693b      	ldr	r3, [r7, #16]
 80040a8:	4413      	add	r3, r2
 80040aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040ae:	68db      	ldr	r3, [r3, #12]
 80040b0:	68fa      	ldr	r2, [r7, #12]
 80040b2:	0151      	lsls	r1, r2, #5
 80040b4:	693a      	ldr	r2, [r7, #16]
 80040b6:	440a      	add	r2, r1
 80040b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80040bc:	f043 0302 	orr.w	r3, r3, #2
 80040c0:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80040c2:	687a      	ldr	r2, [r7, #4]
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	212c      	movs	r1, #44	; 0x2c
 80040c8:	fb01 f303 	mul.w	r3, r1, r3
 80040cc:	4413      	add	r3, r2
 80040ce:	3361      	adds	r3, #97	; 0x61
 80040d0:	2208      	movs	r2, #8
 80040d2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	015a      	lsls	r2, r3, #5
 80040d8:	693b      	ldr	r3, [r7, #16]
 80040da:	4413      	add	r3, r2
 80040dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040e0:	461a      	mov	r2, r3
 80040e2:	2310      	movs	r3, #16
 80040e4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	015a      	lsls	r2, r3, #5
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	4413      	add	r3, r2
 80040ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040f2:	461a      	mov	r2, r3
 80040f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80040f8:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	68fa      	ldr	r2, [r7, #12]
 8004100:	b2d2      	uxtb	r2, r2
 8004102:	4611      	mov	r1, r2
 8004104:	4618      	mov	r0, r3
 8004106:	f005 fc42 	bl	800998e <USB_HC_Halt>
 800410a:	e034      	b.n	8004176 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	015a      	lsls	r2, r3, #5
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	4413      	add	r3, r2
 8004114:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004118:	689b      	ldr	r3, [r3, #8]
 800411a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800411e:	2b80      	cmp	r3, #128	; 0x80
 8004120:	d129      	bne.n	8004176 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	015a      	lsls	r2, r3, #5
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	4413      	add	r3, r2
 800412a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800412e:	68db      	ldr	r3, [r3, #12]
 8004130:	68fa      	ldr	r2, [r7, #12]
 8004132:	0151      	lsls	r1, r2, #5
 8004134:	693a      	ldr	r2, [r7, #16]
 8004136:	440a      	add	r2, r1
 8004138:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800413c:	f043 0302 	orr.w	r3, r3, #2
 8004140:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8004142:	687a      	ldr	r2, [r7, #4]
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	212c      	movs	r1, #44	; 0x2c
 8004148:	fb01 f303 	mul.w	r3, r1, r3
 800414c:	4413      	add	r3, r2
 800414e:	3361      	adds	r3, #97	; 0x61
 8004150:	2206      	movs	r2, #6
 8004152:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	68fa      	ldr	r2, [r7, #12]
 800415a:	b2d2      	uxtb	r2, r2
 800415c:	4611      	mov	r1, r2
 800415e:	4618      	mov	r0, r3
 8004160:	f005 fc15 	bl	800998e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	015a      	lsls	r2, r3, #5
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	4413      	add	r3, r2
 800416c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004170:	461a      	mov	r2, r3
 8004172:	2380      	movs	r3, #128	; 0x80
 8004174:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	015a      	lsls	r2, r3, #5
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	4413      	add	r3, r2
 800417e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004182:	689b      	ldr	r3, [r3, #8]
 8004184:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004188:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800418c:	d122      	bne.n	80041d4 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	015a      	lsls	r2, r3, #5
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	4413      	add	r3, r2
 8004196:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800419a:	68db      	ldr	r3, [r3, #12]
 800419c:	68fa      	ldr	r2, [r7, #12]
 800419e:	0151      	lsls	r1, r2, #5
 80041a0:	693a      	ldr	r2, [r7, #16]
 80041a2:	440a      	add	r2, r1
 80041a4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80041a8:	f043 0302 	orr.w	r3, r3, #2
 80041ac:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	68fa      	ldr	r2, [r7, #12]
 80041b4:	b2d2      	uxtb	r2, r2
 80041b6:	4611      	mov	r1, r2
 80041b8:	4618      	mov	r0, r3
 80041ba:	f005 fbe8 	bl	800998e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	015a      	lsls	r2, r3, #5
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	4413      	add	r3, r2
 80041c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041ca:	461a      	mov	r2, r3
 80041cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80041d0:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80041d2:	e2ba      	b.n	800474a <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	015a      	lsls	r2, r3, #5
 80041d8:	693b      	ldr	r3, [r7, #16]
 80041da:	4413      	add	r3, r2
 80041dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	f003 0301 	and.w	r3, r3, #1
 80041e6:	2b01      	cmp	r3, #1
 80041e8:	f040 811b 	bne.w	8004422 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	691b      	ldr	r3, [r3, #16]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d019      	beq.n	8004228 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80041f4:	687a      	ldr	r2, [r7, #4]
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	212c      	movs	r1, #44	; 0x2c
 80041fa:	fb01 f303 	mul.w	r3, r1, r3
 80041fe:	4413      	add	r3, r2
 8004200:	3348      	adds	r3, #72	; 0x48
 8004202:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	0159      	lsls	r1, r3, #5
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	440b      	add	r3, r1
 800420c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004210:	691b      	ldr	r3, [r3, #16]
 8004212:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8004216:	1ad2      	subs	r2, r2, r3
 8004218:	6879      	ldr	r1, [r7, #4]
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	202c      	movs	r0, #44	; 0x2c
 800421e:	fb00 f303 	mul.w	r3, r0, r3
 8004222:	440b      	add	r3, r1
 8004224:	3350      	adds	r3, #80	; 0x50
 8004226:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004228:	687a      	ldr	r2, [r7, #4]
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	212c      	movs	r1, #44	; 0x2c
 800422e:	fb01 f303 	mul.w	r3, r1, r3
 8004232:	4413      	add	r3, r2
 8004234:	3361      	adds	r3, #97	; 0x61
 8004236:	2201      	movs	r2, #1
 8004238:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800423a:	687a      	ldr	r2, [r7, #4]
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	212c      	movs	r1, #44	; 0x2c
 8004240:	fb01 f303 	mul.w	r3, r1, r3
 8004244:	4413      	add	r3, r2
 8004246:	335c      	adds	r3, #92	; 0x5c
 8004248:	2200      	movs	r2, #0
 800424a:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	015a      	lsls	r2, r3, #5
 8004250:	693b      	ldr	r3, [r7, #16]
 8004252:	4413      	add	r3, r2
 8004254:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004258:	461a      	mov	r2, r3
 800425a:	2301      	movs	r3, #1
 800425c:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800425e:	687a      	ldr	r2, [r7, #4]
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	212c      	movs	r1, #44	; 0x2c
 8004264:	fb01 f303 	mul.w	r3, r1, r3
 8004268:	4413      	add	r3, r2
 800426a:	333f      	adds	r3, #63	; 0x3f
 800426c:	781b      	ldrb	r3, [r3, #0]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d009      	beq.n	8004286 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004272:	687a      	ldr	r2, [r7, #4]
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	212c      	movs	r1, #44	; 0x2c
 8004278:	fb01 f303 	mul.w	r3, r1, r3
 800427c:	4413      	add	r3, r2
 800427e:	333f      	adds	r3, #63	; 0x3f
 8004280:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004282:	2b02      	cmp	r3, #2
 8004284:	d121      	bne.n	80042ca <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	015a      	lsls	r2, r3, #5
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	4413      	add	r3, r2
 800428e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004292:	68db      	ldr	r3, [r3, #12]
 8004294:	68fa      	ldr	r2, [r7, #12]
 8004296:	0151      	lsls	r1, r2, #5
 8004298:	693a      	ldr	r2, [r7, #16]
 800429a:	440a      	add	r2, r1
 800429c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80042a0:	f043 0302 	orr.w	r3, r3, #2
 80042a4:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	68fa      	ldr	r2, [r7, #12]
 80042ac:	b2d2      	uxtb	r2, r2
 80042ae:	4611      	mov	r1, r2
 80042b0:	4618      	mov	r0, r3
 80042b2:	f005 fb6c 	bl	800998e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	015a      	lsls	r2, r3, #5
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	4413      	add	r3, r2
 80042be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042c2:	461a      	mov	r2, r3
 80042c4:	2310      	movs	r3, #16
 80042c6:	6093      	str	r3, [r2, #8]
 80042c8:	e066      	b.n	8004398 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80042ca:	687a      	ldr	r2, [r7, #4]
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	212c      	movs	r1, #44	; 0x2c
 80042d0:	fb01 f303 	mul.w	r3, r1, r3
 80042d4:	4413      	add	r3, r2
 80042d6:	333f      	adds	r3, #63	; 0x3f
 80042d8:	781b      	ldrb	r3, [r3, #0]
 80042da:	2b03      	cmp	r3, #3
 80042dc:	d127      	bne.n	800432e <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	015a      	lsls	r2, r3, #5
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	4413      	add	r3, r2
 80042e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	68fa      	ldr	r2, [r7, #12]
 80042ee:	0151      	lsls	r1, r2, #5
 80042f0:	693a      	ldr	r2, [r7, #16]
 80042f2:	440a      	add	r2, r1
 80042f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80042f8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80042fc:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80042fe:	687a      	ldr	r2, [r7, #4]
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	212c      	movs	r1, #44	; 0x2c
 8004304:	fb01 f303 	mul.w	r3, r1, r3
 8004308:	4413      	add	r3, r2
 800430a:	3360      	adds	r3, #96	; 0x60
 800430c:	2201      	movs	r2, #1
 800430e:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	b2d9      	uxtb	r1, r3
 8004314:	687a      	ldr	r2, [r7, #4]
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	202c      	movs	r0, #44	; 0x2c
 800431a:	fb00 f303 	mul.w	r3, r0, r3
 800431e:	4413      	add	r3, r2
 8004320:	3360      	adds	r3, #96	; 0x60
 8004322:	781b      	ldrb	r3, [r3, #0]
 8004324:	461a      	mov	r2, r3
 8004326:	6878      	ldr	r0, [r7, #4]
 8004328:	f007 fcee 	bl	800bd08 <HAL_HCD_HC_NotifyURBChange_Callback>
 800432c:	e034      	b.n	8004398 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 800432e:	687a      	ldr	r2, [r7, #4]
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	212c      	movs	r1, #44	; 0x2c
 8004334:	fb01 f303 	mul.w	r3, r1, r3
 8004338:	4413      	add	r3, r2
 800433a:	333f      	adds	r3, #63	; 0x3f
 800433c:	781b      	ldrb	r3, [r3, #0]
 800433e:	2b01      	cmp	r3, #1
 8004340:	d12a      	bne.n	8004398 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004342:	687a      	ldr	r2, [r7, #4]
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	212c      	movs	r1, #44	; 0x2c
 8004348:	fb01 f303 	mul.w	r3, r1, r3
 800434c:	4413      	add	r3, r2
 800434e:	3360      	adds	r3, #96	; 0x60
 8004350:	2201      	movs	r2, #1
 8004352:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8004354:	687a      	ldr	r2, [r7, #4]
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	212c      	movs	r1, #44	; 0x2c
 800435a:	fb01 f303 	mul.w	r3, r1, r3
 800435e:	4413      	add	r3, r2
 8004360:	3354      	adds	r3, #84	; 0x54
 8004362:	781b      	ldrb	r3, [r3, #0]
 8004364:	f083 0301 	eor.w	r3, r3, #1
 8004368:	b2d8      	uxtb	r0, r3
 800436a:	687a      	ldr	r2, [r7, #4]
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	212c      	movs	r1, #44	; 0x2c
 8004370:	fb01 f303 	mul.w	r3, r1, r3
 8004374:	4413      	add	r3, r2
 8004376:	3354      	adds	r3, #84	; 0x54
 8004378:	4602      	mov	r2, r0
 800437a:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	b2d9      	uxtb	r1, r3
 8004380:	687a      	ldr	r2, [r7, #4]
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	202c      	movs	r0, #44	; 0x2c
 8004386:	fb00 f303 	mul.w	r3, r0, r3
 800438a:	4413      	add	r3, r2
 800438c:	3360      	adds	r3, #96	; 0x60
 800438e:	781b      	ldrb	r3, [r3, #0]
 8004390:	461a      	mov	r2, r3
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	f007 fcb8 	bl	800bd08 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	691b      	ldr	r3, [r3, #16]
 800439c:	2b01      	cmp	r3, #1
 800439e:	d12b      	bne.n	80043f8 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80043a0:	687a      	ldr	r2, [r7, #4]
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	212c      	movs	r1, #44	; 0x2c
 80043a6:	fb01 f303 	mul.w	r3, r1, r3
 80043aa:	4413      	add	r3, r2
 80043ac:	3348      	adds	r3, #72	; 0x48
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	6879      	ldr	r1, [r7, #4]
 80043b2:	68fa      	ldr	r2, [r7, #12]
 80043b4:	202c      	movs	r0, #44	; 0x2c
 80043b6:	fb00 f202 	mul.w	r2, r0, r2
 80043ba:	440a      	add	r2, r1
 80043bc:	3240      	adds	r2, #64	; 0x40
 80043be:	8812      	ldrh	r2, [r2, #0]
 80043c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80043c4:	f003 0301 	and.w	r3, r3, #1
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	f000 81be 	beq.w	800474a <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80043ce:	687a      	ldr	r2, [r7, #4]
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	212c      	movs	r1, #44	; 0x2c
 80043d4:	fb01 f303 	mul.w	r3, r1, r3
 80043d8:	4413      	add	r3, r2
 80043da:	3354      	adds	r3, #84	; 0x54
 80043dc:	781b      	ldrb	r3, [r3, #0]
 80043de:	f083 0301 	eor.w	r3, r3, #1
 80043e2:	b2d8      	uxtb	r0, r3
 80043e4:	687a      	ldr	r2, [r7, #4]
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	212c      	movs	r1, #44	; 0x2c
 80043ea:	fb01 f303 	mul.w	r3, r1, r3
 80043ee:	4413      	add	r3, r2
 80043f0:	3354      	adds	r3, #84	; 0x54
 80043f2:	4602      	mov	r2, r0
 80043f4:	701a      	strb	r2, [r3, #0]
}
 80043f6:	e1a8      	b.n	800474a <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80043f8:	687a      	ldr	r2, [r7, #4]
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	212c      	movs	r1, #44	; 0x2c
 80043fe:	fb01 f303 	mul.w	r3, r1, r3
 8004402:	4413      	add	r3, r2
 8004404:	3354      	adds	r3, #84	; 0x54
 8004406:	781b      	ldrb	r3, [r3, #0]
 8004408:	f083 0301 	eor.w	r3, r3, #1
 800440c:	b2d8      	uxtb	r0, r3
 800440e:	687a      	ldr	r2, [r7, #4]
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	212c      	movs	r1, #44	; 0x2c
 8004414:	fb01 f303 	mul.w	r3, r1, r3
 8004418:	4413      	add	r3, r2
 800441a:	3354      	adds	r3, #84	; 0x54
 800441c:	4602      	mov	r2, r0
 800441e:	701a      	strb	r2, [r3, #0]
}
 8004420:	e193      	b.n	800474a <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	015a      	lsls	r2, r3, #5
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	4413      	add	r3, r2
 800442a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800442e:	689b      	ldr	r3, [r3, #8]
 8004430:	f003 0302 	and.w	r3, r3, #2
 8004434:	2b02      	cmp	r3, #2
 8004436:	f040 8106 	bne.w	8004646 <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	015a      	lsls	r2, r3, #5
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	4413      	add	r3, r2
 8004442:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004446:	68db      	ldr	r3, [r3, #12]
 8004448:	68fa      	ldr	r2, [r7, #12]
 800444a:	0151      	lsls	r1, r2, #5
 800444c:	693a      	ldr	r2, [r7, #16]
 800444e:	440a      	add	r2, r1
 8004450:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004454:	f023 0302 	bic.w	r3, r3, #2
 8004458:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800445a:	687a      	ldr	r2, [r7, #4]
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	212c      	movs	r1, #44	; 0x2c
 8004460:	fb01 f303 	mul.w	r3, r1, r3
 8004464:	4413      	add	r3, r2
 8004466:	3361      	adds	r3, #97	; 0x61
 8004468:	781b      	ldrb	r3, [r3, #0]
 800446a:	2b01      	cmp	r3, #1
 800446c:	d109      	bne.n	8004482 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800446e:	687a      	ldr	r2, [r7, #4]
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	212c      	movs	r1, #44	; 0x2c
 8004474:	fb01 f303 	mul.w	r3, r1, r3
 8004478:	4413      	add	r3, r2
 800447a:	3360      	adds	r3, #96	; 0x60
 800447c:	2201      	movs	r2, #1
 800447e:	701a      	strb	r2, [r3, #0]
 8004480:	e0c9      	b.n	8004616 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004482:	687a      	ldr	r2, [r7, #4]
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	212c      	movs	r1, #44	; 0x2c
 8004488:	fb01 f303 	mul.w	r3, r1, r3
 800448c:	4413      	add	r3, r2
 800448e:	3361      	adds	r3, #97	; 0x61
 8004490:	781b      	ldrb	r3, [r3, #0]
 8004492:	2b05      	cmp	r3, #5
 8004494:	d109      	bne.n	80044aa <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8004496:	687a      	ldr	r2, [r7, #4]
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	212c      	movs	r1, #44	; 0x2c
 800449c:	fb01 f303 	mul.w	r3, r1, r3
 80044a0:	4413      	add	r3, r2
 80044a2:	3360      	adds	r3, #96	; 0x60
 80044a4:	2205      	movs	r2, #5
 80044a6:	701a      	strb	r2, [r3, #0]
 80044a8:	e0b5      	b.n	8004616 <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80044aa:	687a      	ldr	r2, [r7, #4]
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	212c      	movs	r1, #44	; 0x2c
 80044b0:	fb01 f303 	mul.w	r3, r1, r3
 80044b4:	4413      	add	r3, r2
 80044b6:	3361      	adds	r3, #97	; 0x61
 80044b8:	781b      	ldrb	r3, [r3, #0]
 80044ba:	2b06      	cmp	r3, #6
 80044bc:	d009      	beq.n	80044d2 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80044be:	687a      	ldr	r2, [r7, #4]
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	212c      	movs	r1, #44	; 0x2c
 80044c4:	fb01 f303 	mul.w	r3, r1, r3
 80044c8:	4413      	add	r3, r2
 80044ca:	3361      	adds	r3, #97	; 0x61
 80044cc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80044ce:	2b08      	cmp	r3, #8
 80044d0:	d150      	bne.n	8004574 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 80044d2:	687a      	ldr	r2, [r7, #4]
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	212c      	movs	r1, #44	; 0x2c
 80044d8:	fb01 f303 	mul.w	r3, r1, r3
 80044dc:	4413      	add	r3, r2
 80044de:	335c      	adds	r3, #92	; 0x5c
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	1c5a      	adds	r2, r3, #1
 80044e4:	6879      	ldr	r1, [r7, #4]
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	202c      	movs	r0, #44	; 0x2c
 80044ea:	fb00 f303 	mul.w	r3, r0, r3
 80044ee:	440b      	add	r3, r1
 80044f0:	335c      	adds	r3, #92	; 0x5c
 80044f2:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80044f4:	687a      	ldr	r2, [r7, #4]
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	212c      	movs	r1, #44	; 0x2c
 80044fa:	fb01 f303 	mul.w	r3, r1, r3
 80044fe:	4413      	add	r3, r2
 8004500:	335c      	adds	r3, #92	; 0x5c
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	2b02      	cmp	r3, #2
 8004506:	d912      	bls.n	800452e <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004508:	687a      	ldr	r2, [r7, #4]
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	212c      	movs	r1, #44	; 0x2c
 800450e:	fb01 f303 	mul.w	r3, r1, r3
 8004512:	4413      	add	r3, r2
 8004514:	335c      	adds	r3, #92	; 0x5c
 8004516:	2200      	movs	r2, #0
 8004518:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800451a:	687a      	ldr	r2, [r7, #4]
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	212c      	movs	r1, #44	; 0x2c
 8004520:	fb01 f303 	mul.w	r3, r1, r3
 8004524:	4413      	add	r3, r2
 8004526:	3360      	adds	r3, #96	; 0x60
 8004528:	2204      	movs	r2, #4
 800452a:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800452c:	e073      	b.n	8004616 <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800452e:	687a      	ldr	r2, [r7, #4]
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	212c      	movs	r1, #44	; 0x2c
 8004534:	fb01 f303 	mul.w	r3, r1, r3
 8004538:	4413      	add	r3, r2
 800453a:	3360      	adds	r3, #96	; 0x60
 800453c:	2202      	movs	r2, #2
 800453e:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	015a      	lsls	r2, r3, #5
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	4413      	add	r3, r2
 8004548:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004556:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800455e:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	015a      	lsls	r2, r3, #5
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	4413      	add	r3, r2
 8004568:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800456c:	461a      	mov	r2, r3
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004572:	e050      	b.n	8004616 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004574:	687a      	ldr	r2, [r7, #4]
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	212c      	movs	r1, #44	; 0x2c
 800457a:	fb01 f303 	mul.w	r3, r1, r3
 800457e:	4413      	add	r3, r2
 8004580:	3361      	adds	r3, #97	; 0x61
 8004582:	781b      	ldrb	r3, [r3, #0]
 8004584:	2b03      	cmp	r3, #3
 8004586:	d122      	bne.n	80045ce <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004588:	687a      	ldr	r2, [r7, #4]
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	212c      	movs	r1, #44	; 0x2c
 800458e:	fb01 f303 	mul.w	r3, r1, r3
 8004592:	4413      	add	r3, r2
 8004594:	3360      	adds	r3, #96	; 0x60
 8004596:	2202      	movs	r2, #2
 8004598:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	015a      	lsls	r2, r3, #5
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	4413      	add	r3, r2
 80045a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80045b0:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80045b8:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	015a      	lsls	r2, r3, #5
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	4413      	add	r3, r2
 80045c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045c6:	461a      	mov	r2, r3
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	6013      	str	r3, [r2, #0]
 80045cc:	e023      	b.n	8004616 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80045ce:	687a      	ldr	r2, [r7, #4]
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	212c      	movs	r1, #44	; 0x2c
 80045d4:	fb01 f303 	mul.w	r3, r1, r3
 80045d8:	4413      	add	r3, r2
 80045da:	3361      	adds	r3, #97	; 0x61
 80045dc:	781b      	ldrb	r3, [r3, #0]
 80045de:	2b07      	cmp	r3, #7
 80045e0:	d119      	bne.n	8004616 <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 80045e2:	687a      	ldr	r2, [r7, #4]
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	212c      	movs	r1, #44	; 0x2c
 80045e8:	fb01 f303 	mul.w	r3, r1, r3
 80045ec:	4413      	add	r3, r2
 80045ee:	335c      	adds	r3, #92	; 0x5c
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	1c5a      	adds	r2, r3, #1
 80045f4:	6879      	ldr	r1, [r7, #4]
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	202c      	movs	r0, #44	; 0x2c
 80045fa:	fb00 f303 	mul.w	r3, r0, r3
 80045fe:	440b      	add	r3, r1
 8004600:	335c      	adds	r3, #92	; 0x5c
 8004602:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004604:	687a      	ldr	r2, [r7, #4]
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	212c      	movs	r1, #44	; 0x2c
 800460a:	fb01 f303 	mul.w	r3, r1, r3
 800460e:	4413      	add	r3, r2
 8004610:	3360      	adds	r3, #96	; 0x60
 8004612:	2204      	movs	r2, #4
 8004614:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	015a      	lsls	r2, r3, #5
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	4413      	add	r3, r2
 800461e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004622:	461a      	mov	r2, r3
 8004624:	2302      	movs	r3, #2
 8004626:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	b2d9      	uxtb	r1, r3
 800462c:	687a      	ldr	r2, [r7, #4]
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	202c      	movs	r0, #44	; 0x2c
 8004632:	fb00 f303 	mul.w	r3, r0, r3
 8004636:	4413      	add	r3, r2
 8004638:	3360      	adds	r3, #96	; 0x60
 800463a:	781b      	ldrb	r3, [r3, #0]
 800463c:	461a      	mov	r2, r3
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	f007 fb62 	bl	800bd08 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004644:	e081      	b.n	800474a <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	015a      	lsls	r2, r3, #5
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	4413      	add	r3, r2
 800464e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	f003 0310 	and.w	r3, r3, #16
 8004658:	2b10      	cmp	r3, #16
 800465a:	d176      	bne.n	800474a <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800465c:	687a      	ldr	r2, [r7, #4]
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	212c      	movs	r1, #44	; 0x2c
 8004662:	fb01 f303 	mul.w	r3, r1, r3
 8004666:	4413      	add	r3, r2
 8004668:	333f      	adds	r3, #63	; 0x3f
 800466a:	781b      	ldrb	r3, [r3, #0]
 800466c:	2b03      	cmp	r3, #3
 800466e:	d121      	bne.n	80046b4 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004670:	687a      	ldr	r2, [r7, #4]
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	212c      	movs	r1, #44	; 0x2c
 8004676:	fb01 f303 	mul.w	r3, r1, r3
 800467a:	4413      	add	r3, r2
 800467c:	335c      	adds	r3, #92	; 0x5c
 800467e:	2200      	movs	r2, #0
 8004680:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	015a      	lsls	r2, r3, #5
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	4413      	add	r3, r2
 800468a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800468e:	68db      	ldr	r3, [r3, #12]
 8004690:	68fa      	ldr	r2, [r7, #12]
 8004692:	0151      	lsls	r1, r2, #5
 8004694:	693a      	ldr	r2, [r7, #16]
 8004696:	440a      	add	r2, r1
 8004698:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800469c:	f043 0302 	orr.w	r3, r3, #2
 80046a0:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	68fa      	ldr	r2, [r7, #12]
 80046a8:	b2d2      	uxtb	r2, r2
 80046aa:	4611      	mov	r1, r2
 80046ac:	4618      	mov	r0, r3
 80046ae:	f005 f96e 	bl	800998e <USB_HC_Halt>
 80046b2:	e041      	b.n	8004738 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80046b4:	687a      	ldr	r2, [r7, #4]
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	212c      	movs	r1, #44	; 0x2c
 80046ba:	fb01 f303 	mul.w	r3, r1, r3
 80046be:	4413      	add	r3, r2
 80046c0:	333f      	adds	r3, #63	; 0x3f
 80046c2:	781b      	ldrb	r3, [r3, #0]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d009      	beq.n	80046dc <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80046c8:	687a      	ldr	r2, [r7, #4]
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	212c      	movs	r1, #44	; 0x2c
 80046ce:	fb01 f303 	mul.w	r3, r1, r3
 80046d2:	4413      	add	r3, r2
 80046d4:	333f      	adds	r3, #63	; 0x3f
 80046d6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80046d8:	2b02      	cmp	r3, #2
 80046da:	d12d      	bne.n	8004738 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80046dc:	687a      	ldr	r2, [r7, #4]
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	212c      	movs	r1, #44	; 0x2c
 80046e2:	fb01 f303 	mul.w	r3, r1, r3
 80046e6:	4413      	add	r3, r2
 80046e8:	335c      	adds	r3, #92	; 0x5c
 80046ea:	2200      	movs	r2, #0
 80046ec:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	691b      	ldr	r3, [r3, #16]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d120      	bne.n	8004738 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 80046f6:	687a      	ldr	r2, [r7, #4]
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	212c      	movs	r1, #44	; 0x2c
 80046fc:	fb01 f303 	mul.w	r3, r1, r3
 8004700:	4413      	add	r3, r2
 8004702:	3361      	adds	r3, #97	; 0x61
 8004704:	2203      	movs	r2, #3
 8004706:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	015a      	lsls	r2, r3, #5
 800470c:	693b      	ldr	r3, [r7, #16]
 800470e:	4413      	add	r3, r2
 8004710:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004714:	68db      	ldr	r3, [r3, #12]
 8004716:	68fa      	ldr	r2, [r7, #12]
 8004718:	0151      	lsls	r1, r2, #5
 800471a:	693a      	ldr	r2, [r7, #16]
 800471c:	440a      	add	r2, r1
 800471e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004722:	f043 0302 	orr.w	r3, r3, #2
 8004726:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	68fa      	ldr	r2, [r7, #12]
 800472e:	b2d2      	uxtb	r2, r2
 8004730:	4611      	mov	r1, r2
 8004732:	4618      	mov	r0, r3
 8004734:	f005 f92b 	bl	800998e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	015a      	lsls	r2, r3, #5
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	4413      	add	r3, r2
 8004740:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004744:	461a      	mov	r2, r3
 8004746:	2310      	movs	r3, #16
 8004748:	6093      	str	r3, [r2, #8]
}
 800474a:	bf00      	nop
 800474c:	3718      	adds	r7, #24
 800474e:	46bd      	mov	sp, r7
 8004750:	bd80      	pop	{r7, pc}

08004752 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004752:	b580      	push	{r7, lr}
 8004754:	b088      	sub	sp, #32
 8004756:	af00      	add	r7, sp, #0
 8004758:	6078      	str	r0, [r7, #4]
 800475a:	460b      	mov	r3, r1
 800475c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004764:	69fb      	ldr	r3, [r7, #28]
 8004766:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8004768:	78fb      	ldrb	r3, [r7, #3]
 800476a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800476c:	697b      	ldr	r3, [r7, #20]
 800476e:	015a      	lsls	r2, r3, #5
 8004770:	69bb      	ldr	r3, [r7, #24]
 8004772:	4413      	add	r3, r2
 8004774:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004778:	689b      	ldr	r3, [r3, #8]
 800477a:	f003 0304 	and.w	r3, r3, #4
 800477e:	2b04      	cmp	r3, #4
 8004780:	d119      	bne.n	80047b6 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8004782:	697b      	ldr	r3, [r7, #20]
 8004784:	015a      	lsls	r2, r3, #5
 8004786:	69bb      	ldr	r3, [r7, #24]
 8004788:	4413      	add	r3, r2
 800478a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800478e:	461a      	mov	r2, r3
 8004790:	2304      	movs	r3, #4
 8004792:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	015a      	lsls	r2, r3, #5
 8004798:	69bb      	ldr	r3, [r7, #24]
 800479a:	4413      	add	r3, r2
 800479c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047a0:	68db      	ldr	r3, [r3, #12]
 80047a2:	697a      	ldr	r2, [r7, #20]
 80047a4:	0151      	lsls	r1, r2, #5
 80047a6:	69ba      	ldr	r2, [r7, #24]
 80047a8:	440a      	add	r2, r1
 80047aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80047ae:	f043 0302 	orr.w	r3, r3, #2
 80047b2:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 80047b4:	e3ca      	b.n	8004f4c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	015a      	lsls	r2, r3, #5
 80047ba:	69bb      	ldr	r3, [r7, #24]
 80047bc:	4413      	add	r3, r2
 80047be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047c2:	689b      	ldr	r3, [r3, #8]
 80047c4:	f003 0320 	and.w	r3, r3, #32
 80047c8:	2b20      	cmp	r3, #32
 80047ca:	d13e      	bne.n	800484a <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	015a      	lsls	r2, r3, #5
 80047d0:	69bb      	ldr	r3, [r7, #24]
 80047d2:	4413      	add	r3, r2
 80047d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047d8:	461a      	mov	r2, r3
 80047da:	2320      	movs	r3, #32
 80047dc:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80047de:	687a      	ldr	r2, [r7, #4]
 80047e0:	697b      	ldr	r3, [r7, #20]
 80047e2:	212c      	movs	r1, #44	; 0x2c
 80047e4:	fb01 f303 	mul.w	r3, r1, r3
 80047e8:	4413      	add	r3, r2
 80047ea:	333d      	adds	r3, #61	; 0x3d
 80047ec:	781b      	ldrb	r3, [r3, #0]
 80047ee:	2b01      	cmp	r3, #1
 80047f0:	f040 83ac 	bne.w	8004f4c <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 80047f4:	687a      	ldr	r2, [r7, #4]
 80047f6:	697b      	ldr	r3, [r7, #20]
 80047f8:	212c      	movs	r1, #44	; 0x2c
 80047fa:	fb01 f303 	mul.w	r3, r1, r3
 80047fe:	4413      	add	r3, r2
 8004800:	333d      	adds	r3, #61	; 0x3d
 8004802:	2200      	movs	r2, #0
 8004804:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004806:	687a      	ldr	r2, [r7, #4]
 8004808:	697b      	ldr	r3, [r7, #20]
 800480a:	212c      	movs	r1, #44	; 0x2c
 800480c:	fb01 f303 	mul.w	r3, r1, r3
 8004810:	4413      	add	r3, r2
 8004812:	3360      	adds	r3, #96	; 0x60
 8004814:	2202      	movs	r2, #2
 8004816:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004818:	697b      	ldr	r3, [r7, #20]
 800481a:	015a      	lsls	r2, r3, #5
 800481c:	69bb      	ldr	r3, [r7, #24]
 800481e:	4413      	add	r3, r2
 8004820:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004824:	68db      	ldr	r3, [r3, #12]
 8004826:	697a      	ldr	r2, [r7, #20]
 8004828:	0151      	lsls	r1, r2, #5
 800482a:	69ba      	ldr	r2, [r7, #24]
 800482c:	440a      	add	r2, r1
 800482e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004832:	f043 0302 	orr.w	r3, r3, #2
 8004836:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	697a      	ldr	r2, [r7, #20]
 800483e:	b2d2      	uxtb	r2, r2
 8004840:	4611      	mov	r1, r2
 8004842:	4618      	mov	r0, r3
 8004844:	f005 f8a3 	bl	800998e <USB_HC_Halt>
}
 8004848:	e380      	b.n	8004f4c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800484a:	697b      	ldr	r3, [r7, #20]
 800484c:	015a      	lsls	r2, r3, #5
 800484e:	69bb      	ldr	r3, [r7, #24]
 8004850:	4413      	add	r3, r2
 8004852:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004856:	689b      	ldr	r3, [r3, #8]
 8004858:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800485c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004860:	d122      	bne.n	80048a8 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004862:	697b      	ldr	r3, [r7, #20]
 8004864:	015a      	lsls	r2, r3, #5
 8004866:	69bb      	ldr	r3, [r7, #24]
 8004868:	4413      	add	r3, r2
 800486a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800486e:	68db      	ldr	r3, [r3, #12]
 8004870:	697a      	ldr	r2, [r7, #20]
 8004872:	0151      	lsls	r1, r2, #5
 8004874:	69ba      	ldr	r2, [r7, #24]
 8004876:	440a      	add	r2, r1
 8004878:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800487c:	f043 0302 	orr.w	r3, r3, #2
 8004880:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	697a      	ldr	r2, [r7, #20]
 8004888:	b2d2      	uxtb	r2, r2
 800488a:	4611      	mov	r1, r2
 800488c:	4618      	mov	r0, r3
 800488e:	f005 f87e 	bl	800998e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004892:	697b      	ldr	r3, [r7, #20]
 8004894:	015a      	lsls	r2, r3, #5
 8004896:	69bb      	ldr	r3, [r7, #24]
 8004898:	4413      	add	r3, r2
 800489a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800489e:	461a      	mov	r2, r3
 80048a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80048a4:	6093      	str	r3, [r2, #8]
}
 80048a6:	e351      	b.n	8004f4c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	015a      	lsls	r2, r3, #5
 80048ac:	69bb      	ldr	r3, [r7, #24]
 80048ae:	4413      	add	r3, r2
 80048b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048b4:	689b      	ldr	r3, [r3, #8]
 80048b6:	f003 0301 	and.w	r3, r3, #1
 80048ba:	2b01      	cmp	r3, #1
 80048bc:	d150      	bne.n	8004960 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80048be:	687a      	ldr	r2, [r7, #4]
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	212c      	movs	r1, #44	; 0x2c
 80048c4:	fb01 f303 	mul.w	r3, r1, r3
 80048c8:	4413      	add	r3, r2
 80048ca:	335c      	adds	r3, #92	; 0x5c
 80048cc:	2200      	movs	r2, #0
 80048ce:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80048d0:	697b      	ldr	r3, [r7, #20]
 80048d2:	015a      	lsls	r2, r3, #5
 80048d4:	69bb      	ldr	r3, [r7, #24]
 80048d6:	4413      	add	r3, r2
 80048d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048dc:	689b      	ldr	r3, [r3, #8]
 80048de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048e2:	2b40      	cmp	r3, #64	; 0x40
 80048e4:	d111      	bne.n	800490a <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 80048e6:	687a      	ldr	r2, [r7, #4]
 80048e8:	697b      	ldr	r3, [r7, #20]
 80048ea:	212c      	movs	r1, #44	; 0x2c
 80048ec:	fb01 f303 	mul.w	r3, r1, r3
 80048f0:	4413      	add	r3, r2
 80048f2:	333d      	adds	r3, #61	; 0x3d
 80048f4:	2201      	movs	r2, #1
 80048f6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	015a      	lsls	r2, r3, #5
 80048fc:	69bb      	ldr	r3, [r7, #24]
 80048fe:	4413      	add	r3, r2
 8004900:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004904:	461a      	mov	r2, r3
 8004906:	2340      	movs	r3, #64	; 0x40
 8004908:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800490a:	697b      	ldr	r3, [r7, #20]
 800490c:	015a      	lsls	r2, r3, #5
 800490e:	69bb      	ldr	r3, [r7, #24]
 8004910:	4413      	add	r3, r2
 8004912:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004916:	68db      	ldr	r3, [r3, #12]
 8004918:	697a      	ldr	r2, [r7, #20]
 800491a:	0151      	lsls	r1, r2, #5
 800491c:	69ba      	ldr	r2, [r7, #24]
 800491e:	440a      	add	r2, r1
 8004920:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004924:	f043 0302 	orr.w	r3, r3, #2
 8004928:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	697a      	ldr	r2, [r7, #20]
 8004930:	b2d2      	uxtb	r2, r2
 8004932:	4611      	mov	r1, r2
 8004934:	4618      	mov	r0, r3
 8004936:	f005 f82a 	bl	800998e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	015a      	lsls	r2, r3, #5
 800493e:	69bb      	ldr	r3, [r7, #24]
 8004940:	4413      	add	r3, r2
 8004942:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004946:	461a      	mov	r2, r3
 8004948:	2301      	movs	r3, #1
 800494a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800494c:	687a      	ldr	r2, [r7, #4]
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	212c      	movs	r1, #44	; 0x2c
 8004952:	fb01 f303 	mul.w	r3, r1, r3
 8004956:	4413      	add	r3, r2
 8004958:	3361      	adds	r3, #97	; 0x61
 800495a:	2201      	movs	r2, #1
 800495c:	701a      	strb	r2, [r3, #0]
}
 800495e:	e2f5      	b.n	8004f4c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	015a      	lsls	r2, r3, #5
 8004964:	69bb      	ldr	r3, [r7, #24]
 8004966:	4413      	add	r3, r2
 8004968:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004972:	2b40      	cmp	r3, #64	; 0x40
 8004974:	d13c      	bne.n	80049f0 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 8004976:	687a      	ldr	r2, [r7, #4]
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	212c      	movs	r1, #44	; 0x2c
 800497c:	fb01 f303 	mul.w	r3, r1, r3
 8004980:	4413      	add	r3, r2
 8004982:	3361      	adds	r3, #97	; 0x61
 8004984:	2204      	movs	r2, #4
 8004986:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8004988:	687a      	ldr	r2, [r7, #4]
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	212c      	movs	r1, #44	; 0x2c
 800498e:	fb01 f303 	mul.w	r3, r1, r3
 8004992:	4413      	add	r3, r2
 8004994:	333d      	adds	r3, #61	; 0x3d
 8004996:	2201      	movs	r2, #1
 8004998:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800499a:	687a      	ldr	r2, [r7, #4]
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	212c      	movs	r1, #44	; 0x2c
 80049a0:	fb01 f303 	mul.w	r3, r1, r3
 80049a4:	4413      	add	r3, r2
 80049a6:	335c      	adds	r3, #92	; 0x5c
 80049a8:	2200      	movs	r2, #0
 80049aa:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	015a      	lsls	r2, r3, #5
 80049b0:	69bb      	ldr	r3, [r7, #24]
 80049b2:	4413      	add	r3, r2
 80049b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049b8:	68db      	ldr	r3, [r3, #12]
 80049ba:	697a      	ldr	r2, [r7, #20]
 80049bc:	0151      	lsls	r1, r2, #5
 80049be:	69ba      	ldr	r2, [r7, #24]
 80049c0:	440a      	add	r2, r1
 80049c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80049c6:	f043 0302 	orr.w	r3, r3, #2
 80049ca:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	697a      	ldr	r2, [r7, #20]
 80049d2:	b2d2      	uxtb	r2, r2
 80049d4:	4611      	mov	r1, r2
 80049d6:	4618      	mov	r0, r3
 80049d8:	f004 ffd9 	bl	800998e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	015a      	lsls	r2, r3, #5
 80049e0:	69bb      	ldr	r3, [r7, #24]
 80049e2:	4413      	add	r3, r2
 80049e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049e8:	461a      	mov	r2, r3
 80049ea:	2340      	movs	r3, #64	; 0x40
 80049ec:	6093      	str	r3, [r2, #8]
}
 80049ee:	e2ad      	b.n	8004f4c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80049f0:	697b      	ldr	r3, [r7, #20]
 80049f2:	015a      	lsls	r2, r3, #5
 80049f4:	69bb      	ldr	r3, [r7, #24]
 80049f6:	4413      	add	r3, r2
 80049f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049fc:	689b      	ldr	r3, [r3, #8]
 80049fe:	f003 0308 	and.w	r3, r3, #8
 8004a02:	2b08      	cmp	r3, #8
 8004a04:	d12a      	bne.n	8004a5c <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004a06:	697b      	ldr	r3, [r7, #20]
 8004a08:	015a      	lsls	r2, r3, #5
 8004a0a:	69bb      	ldr	r3, [r7, #24]
 8004a0c:	4413      	add	r3, r2
 8004a0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a12:	461a      	mov	r2, r3
 8004a14:	2308      	movs	r3, #8
 8004a16:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004a18:	697b      	ldr	r3, [r7, #20]
 8004a1a:	015a      	lsls	r2, r3, #5
 8004a1c:	69bb      	ldr	r3, [r7, #24]
 8004a1e:	4413      	add	r3, r2
 8004a20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a24:	68db      	ldr	r3, [r3, #12]
 8004a26:	697a      	ldr	r2, [r7, #20]
 8004a28:	0151      	lsls	r1, r2, #5
 8004a2a:	69ba      	ldr	r2, [r7, #24]
 8004a2c:	440a      	add	r2, r1
 8004a2e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004a32:	f043 0302 	orr.w	r3, r3, #2
 8004a36:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	697a      	ldr	r2, [r7, #20]
 8004a3e:	b2d2      	uxtb	r2, r2
 8004a40:	4611      	mov	r1, r2
 8004a42:	4618      	mov	r0, r3
 8004a44:	f004 ffa3 	bl	800998e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8004a48:	687a      	ldr	r2, [r7, #4]
 8004a4a:	697b      	ldr	r3, [r7, #20]
 8004a4c:	212c      	movs	r1, #44	; 0x2c
 8004a4e:	fb01 f303 	mul.w	r3, r1, r3
 8004a52:	4413      	add	r3, r2
 8004a54:	3361      	adds	r3, #97	; 0x61
 8004a56:	2205      	movs	r2, #5
 8004a58:	701a      	strb	r2, [r3, #0]
}
 8004a5a:	e277      	b.n	8004f4c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004a5c:	697b      	ldr	r3, [r7, #20]
 8004a5e:	015a      	lsls	r2, r3, #5
 8004a60:	69bb      	ldr	r3, [r7, #24]
 8004a62:	4413      	add	r3, r2
 8004a64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a68:	689b      	ldr	r3, [r3, #8]
 8004a6a:	f003 0310 	and.w	r3, r3, #16
 8004a6e:	2b10      	cmp	r3, #16
 8004a70:	d150      	bne.n	8004b14 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004a72:	687a      	ldr	r2, [r7, #4]
 8004a74:	697b      	ldr	r3, [r7, #20]
 8004a76:	212c      	movs	r1, #44	; 0x2c
 8004a78:	fb01 f303 	mul.w	r3, r1, r3
 8004a7c:	4413      	add	r3, r2
 8004a7e:	335c      	adds	r3, #92	; 0x5c
 8004a80:	2200      	movs	r2, #0
 8004a82:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8004a84:	687a      	ldr	r2, [r7, #4]
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	212c      	movs	r1, #44	; 0x2c
 8004a8a:	fb01 f303 	mul.w	r3, r1, r3
 8004a8e:	4413      	add	r3, r2
 8004a90:	3361      	adds	r3, #97	; 0x61
 8004a92:	2203      	movs	r2, #3
 8004a94:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8004a96:	687a      	ldr	r2, [r7, #4]
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	212c      	movs	r1, #44	; 0x2c
 8004a9c:	fb01 f303 	mul.w	r3, r1, r3
 8004aa0:	4413      	add	r3, r2
 8004aa2:	333d      	adds	r3, #61	; 0x3d
 8004aa4:	781b      	ldrb	r3, [r3, #0]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d112      	bne.n	8004ad0 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8004aaa:	687a      	ldr	r2, [r7, #4]
 8004aac:	697b      	ldr	r3, [r7, #20]
 8004aae:	212c      	movs	r1, #44	; 0x2c
 8004ab0:	fb01 f303 	mul.w	r3, r1, r3
 8004ab4:	4413      	add	r3, r2
 8004ab6:	333c      	adds	r3, #60	; 0x3c
 8004ab8:	781b      	ldrb	r3, [r3, #0]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d108      	bne.n	8004ad0 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8004abe:	687a      	ldr	r2, [r7, #4]
 8004ac0:	697b      	ldr	r3, [r7, #20]
 8004ac2:	212c      	movs	r1, #44	; 0x2c
 8004ac4:	fb01 f303 	mul.w	r3, r1, r3
 8004ac8:	4413      	add	r3, r2
 8004aca:	333d      	adds	r3, #61	; 0x3d
 8004acc:	2201      	movs	r2, #1
 8004ace:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	015a      	lsls	r2, r3, #5
 8004ad4:	69bb      	ldr	r3, [r7, #24]
 8004ad6:	4413      	add	r3, r2
 8004ad8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004adc:	68db      	ldr	r3, [r3, #12]
 8004ade:	697a      	ldr	r2, [r7, #20]
 8004ae0:	0151      	lsls	r1, r2, #5
 8004ae2:	69ba      	ldr	r2, [r7, #24]
 8004ae4:	440a      	add	r2, r1
 8004ae6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004aea:	f043 0302 	orr.w	r3, r3, #2
 8004aee:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	697a      	ldr	r2, [r7, #20]
 8004af6:	b2d2      	uxtb	r2, r2
 8004af8:	4611      	mov	r1, r2
 8004afa:	4618      	mov	r0, r3
 8004afc:	f004 ff47 	bl	800998e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004b00:	697b      	ldr	r3, [r7, #20]
 8004b02:	015a      	lsls	r2, r3, #5
 8004b04:	69bb      	ldr	r3, [r7, #24]
 8004b06:	4413      	add	r3, r2
 8004b08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b0c:	461a      	mov	r2, r3
 8004b0e:	2310      	movs	r3, #16
 8004b10:	6093      	str	r3, [r2, #8]
}
 8004b12:	e21b      	b.n	8004f4c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8004b14:	697b      	ldr	r3, [r7, #20]
 8004b16:	015a      	lsls	r2, r3, #5
 8004b18:	69bb      	ldr	r3, [r7, #24]
 8004b1a:	4413      	add	r3, r2
 8004b1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b20:	689b      	ldr	r3, [r3, #8]
 8004b22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b26:	2b80      	cmp	r3, #128	; 0x80
 8004b28:	d174      	bne.n	8004c14 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	691b      	ldr	r3, [r3, #16]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d121      	bne.n	8004b76 <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8004b32:	687a      	ldr	r2, [r7, #4]
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	212c      	movs	r1, #44	; 0x2c
 8004b38:	fb01 f303 	mul.w	r3, r1, r3
 8004b3c:	4413      	add	r3, r2
 8004b3e:	3361      	adds	r3, #97	; 0x61
 8004b40:	2206      	movs	r2, #6
 8004b42:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	015a      	lsls	r2, r3, #5
 8004b48:	69bb      	ldr	r3, [r7, #24]
 8004b4a:	4413      	add	r3, r2
 8004b4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b50:	68db      	ldr	r3, [r3, #12]
 8004b52:	697a      	ldr	r2, [r7, #20]
 8004b54:	0151      	lsls	r1, r2, #5
 8004b56:	69ba      	ldr	r2, [r7, #24]
 8004b58:	440a      	add	r2, r1
 8004b5a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004b5e:	f043 0302 	orr.w	r3, r3, #2
 8004b62:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	697a      	ldr	r2, [r7, #20]
 8004b6a:	b2d2      	uxtb	r2, r2
 8004b6c:	4611      	mov	r1, r2
 8004b6e:	4618      	mov	r0, r3
 8004b70:	f004 ff0d 	bl	800998e <USB_HC_Halt>
 8004b74:	e044      	b.n	8004c00 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 8004b76:	687a      	ldr	r2, [r7, #4]
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	212c      	movs	r1, #44	; 0x2c
 8004b7c:	fb01 f303 	mul.w	r3, r1, r3
 8004b80:	4413      	add	r3, r2
 8004b82:	335c      	adds	r3, #92	; 0x5c
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	1c5a      	adds	r2, r3, #1
 8004b88:	6879      	ldr	r1, [r7, #4]
 8004b8a:	697b      	ldr	r3, [r7, #20]
 8004b8c:	202c      	movs	r0, #44	; 0x2c
 8004b8e:	fb00 f303 	mul.w	r3, r0, r3
 8004b92:	440b      	add	r3, r1
 8004b94:	335c      	adds	r3, #92	; 0x5c
 8004b96:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004b98:	687a      	ldr	r2, [r7, #4]
 8004b9a:	697b      	ldr	r3, [r7, #20]
 8004b9c:	212c      	movs	r1, #44	; 0x2c
 8004b9e:	fb01 f303 	mul.w	r3, r1, r3
 8004ba2:	4413      	add	r3, r2
 8004ba4:	335c      	adds	r3, #92	; 0x5c
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	2b02      	cmp	r3, #2
 8004baa:	d920      	bls.n	8004bee <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004bac:	687a      	ldr	r2, [r7, #4]
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	212c      	movs	r1, #44	; 0x2c
 8004bb2:	fb01 f303 	mul.w	r3, r1, r3
 8004bb6:	4413      	add	r3, r2
 8004bb8:	335c      	adds	r3, #92	; 0x5c
 8004bba:	2200      	movs	r2, #0
 8004bbc:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004bbe:	687a      	ldr	r2, [r7, #4]
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	212c      	movs	r1, #44	; 0x2c
 8004bc4:	fb01 f303 	mul.w	r3, r1, r3
 8004bc8:	4413      	add	r3, r2
 8004bca:	3360      	adds	r3, #96	; 0x60
 8004bcc:	2204      	movs	r2, #4
 8004bce:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 8004bd0:	697b      	ldr	r3, [r7, #20]
 8004bd2:	b2d9      	uxtb	r1, r3
 8004bd4:	687a      	ldr	r2, [r7, #4]
 8004bd6:	697b      	ldr	r3, [r7, #20]
 8004bd8:	202c      	movs	r0, #44	; 0x2c
 8004bda:	fb00 f303 	mul.w	r3, r0, r3
 8004bde:	4413      	add	r3, r2
 8004be0:	3360      	adds	r3, #96	; 0x60
 8004be2:	781b      	ldrb	r3, [r3, #0]
 8004be4:	461a      	mov	r2, r3
 8004be6:	6878      	ldr	r0, [r7, #4]
 8004be8:	f007 f88e 	bl	800bd08 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004bec:	e008      	b.n	8004c00 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004bee:	687a      	ldr	r2, [r7, #4]
 8004bf0:	697b      	ldr	r3, [r7, #20]
 8004bf2:	212c      	movs	r1, #44	; 0x2c
 8004bf4:	fb01 f303 	mul.w	r3, r1, r3
 8004bf8:	4413      	add	r3, r2
 8004bfa:	3360      	adds	r3, #96	; 0x60
 8004bfc:	2202      	movs	r2, #2
 8004bfe:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	015a      	lsls	r2, r3, #5
 8004c04:	69bb      	ldr	r3, [r7, #24]
 8004c06:	4413      	add	r3, r2
 8004c08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c0c:	461a      	mov	r2, r3
 8004c0e:	2380      	movs	r3, #128	; 0x80
 8004c10:	6093      	str	r3, [r2, #8]
}
 8004c12:	e19b      	b.n	8004f4c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004c14:	697b      	ldr	r3, [r7, #20]
 8004c16:	015a      	lsls	r2, r3, #5
 8004c18:	69bb      	ldr	r3, [r7, #24]
 8004c1a:	4413      	add	r3, r2
 8004c1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c20:	689b      	ldr	r3, [r3, #8]
 8004c22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c2a:	d134      	bne.n	8004c96 <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	015a      	lsls	r2, r3, #5
 8004c30:	69bb      	ldr	r3, [r7, #24]
 8004c32:	4413      	add	r3, r2
 8004c34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c38:	68db      	ldr	r3, [r3, #12]
 8004c3a:	697a      	ldr	r2, [r7, #20]
 8004c3c:	0151      	lsls	r1, r2, #5
 8004c3e:	69ba      	ldr	r2, [r7, #24]
 8004c40:	440a      	add	r2, r1
 8004c42:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004c46:	f043 0302 	orr.w	r3, r3, #2
 8004c4a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	697a      	ldr	r2, [r7, #20]
 8004c52:	b2d2      	uxtb	r2, r2
 8004c54:	4611      	mov	r1, r2
 8004c56:	4618      	mov	r0, r3
 8004c58:	f004 fe99 	bl	800998e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004c5c:	697b      	ldr	r3, [r7, #20]
 8004c5e:	015a      	lsls	r2, r3, #5
 8004c60:	69bb      	ldr	r3, [r7, #24]
 8004c62:	4413      	add	r3, r2
 8004c64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c68:	461a      	mov	r2, r3
 8004c6a:	2310      	movs	r3, #16
 8004c6c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	015a      	lsls	r2, r3, #5
 8004c72:	69bb      	ldr	r3, [r7, #24]
 8004c74:	4413      	add	r3, r2
 8004c76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c7a:	461a      	mov	r2, r3
 8004c7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c80:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8004c82:	687a      	ldr	r2, [r7, #4]
 8004c84:	697b      	ldr	r3, [r7, #20]
 8004c86:	212c      	movs	r1, #44	; 0x2c
 8004c88:	fb01 f303 	mul.w	r3, r1, r3
 8004c8c:	4413      	add	r3, r2
 8004c8e:	3361      	adds	r3, #97	; 0x61
 8004c90:	2208      	movs	r2, #8
 8004c92:	701a      	strb	r2, [r3, #0]
}
 8004c94:	e15a      	b.n	8004f4c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	015a      	lsls	r2, r3, #5
 8004c9a:	69bb      	ldr	r3, [r7, #24]
 8004c9c:	4413      	add	r3, r2
 8004c9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ca2:	689b      	ldr	r3, [r3, #8]
 8004ca4:	f003 0302 	and.w	r3, r3, #2
 8004ca8:	2b02      	cmp	r3, #2
 8004caa:	f040 814f 	bne.w	8004f4c <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	015a      	lsls	r2, r3, #5
 8004cb2:	69bb      	ldr	r3, [r7, #24]
 8004cb4:	4413      	add	r3, r2
 8004cb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cba:	68db      	ldr	r3, [r3, #12]
 8004cbc:	697a      	ldr	r2, [r7, #20]
 8004cbe:	0151      	lsls	r1, r2, #5
 8004cc0:	69ba      	ldr	r2, [r7, #24]
 8004cc2:	440a      	add	r2, r1
 8004cc4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004cc8:	f023 0302 	bic.w	r3, r3, #2
 8004ccc:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004cce:	687a      	ldr	r2, [r7, #4]
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	212c      	movs	r1, #44	; 0x2c
 8004cd4:	fb01 f303 	mul.w	r3, r1, r3
 8004cd8:	4413      	add	r3, r2
 8004cda:	3361      	adds	r3, #97	; 0x61
 8004cdc:	781b      	ldrb	r3, [r3, #0]
 8004cde:	2b01      	cmp	r3, #1
 8004ce0:	d17d      	bne.n	8004dde <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8004ce2:	687a      	ldr	r2, [r7, #4]
 8004ce4:	697b      	ldr	r3, [r7, #20]
 8004ce6:	212c      	movs	r1, #44	; 0x2c
 8004ce8:	fb01 f303 	mul.w	r3, r1, r3
 8004cec:	4413      	add	r3, r2
 8004cee:	3360      	adds	r3, #96	; 0x60
 8004cf0:	2201      	movs	r2, #1
 8004cf2:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004cf4:	687a      	ldr	r2, [r7, #4]
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	212c      	movs	r1, #44	; 0x2c
 8004cfa:	fb01 f303 	mul.w	r3, r1, r3
 8004cfe:	4413      	add	r3, r2
 8004d00:	333f      	adds	r3, #63	; 0x3f
 8004d02:	781b      	ldrb	r3, [r3, #0]
 8004d04:	2b02      	cmp	r3, #2
 8004d06:	d00a      	beq.n	8004d1e <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8004d08:	687a      	ldr	r2, [r7, #4]
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	212c      	movs	r1, #44	; 0x2c
 8004d0e:	fb01 f303 	mul.w	r3, r1, r3
 8004d12:	4413      	add	r3, r2
 8004d14:	333f      	adds	r3, #63	; 0x3f
 8004d16:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004d18:	2b03      	cmp	r3, #3
 8004d1a:	f040 8100 	bne.w	8004f1e <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	691b      	ldr	r3, [r3, #16]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d113      	bne.n	8004d4e <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8004d26:	687a      	ldr	r2, [r7, #4]
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	212c      	movs	r1, #44	; 0x2c
 8004d2c:	fb01 f303 	mul.w	r3, r1, r3
 8004d30:	4413      	add	r3, r2
 8004d32:	3355      	adds	r3, #85	; 0x55
 8004d34:	781b      	ldrb	r3, [r3, #0]
 8004d36:	f083 0301 	eor.w	r3, r3, #1
 8004d3a:	b2d8      	uxtb	r0, r3
 8004d3c:	687a      	ldr	r2, [r7, #4]
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	212c      	movs	r1, #44	; 0x2c
 8004d42:	fb01 f303 	mul.w	r3, r1, r3
 8004d46:	4413      	add	r3, r2
 8004d48:	3355      	adds	r3, #85	; 0x55
 8004d4a:	4602      	mov	r2, r0
 8004d4c:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	691b      	ldr	r3, [r3, #16]
 8004d52:	2b01      	cmp	r3, #1
 8004d54:	f040 80e3 	bne.w	8004f1e <HCD_HC_OUT_IRQHandler+0x7cc>
 8004d58:	687a      	ldr	r2, [r7, #4]
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	212c      	movs	r1, #44	; 0x2c
 8004d5e:	fb01 f303 	mul.w	r3, r1, r3
 8004d62:	4413      	add	r3, r2
 8004d64:	334c      	adds	r3, #76	; 0x4c
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	f000 80d8 	beq.w	8004f1e <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8004d6e:	687a      	ldr	r2, [r7, #4]
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	212c      	movs	r1, #44	; 0x2c
 8004d74:	fb01 f303 	mul.w	r3, r1, r3
 8004d78:	4413      	add	r3, r2
 8004d7a:	334c      	adds	r3, #76	; 0x4c
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	6879      	ldr	r1, [r7, #4]
 8004d80:	697a      	ldr	r2, [r7, #20]
 8004d82:	202c      	movs	r0, #44	; 0x2c
 8004d84:	fb00 f202 	mul.w	r2, r0, r2
 8004d88:	440a      	add	r2, r1
 8004d8a:	3240      	adds	r2, #64	; 0x40
 8004d8c:	8812      	ldrh	r2, [r2, #0]
 8004d8e:	4413      	add	r3, r2
 8004d90:	3b01      	subs	r3, #1
 8004d92:	6879      	ldr	r1, [r7, #4]
 8004d94:	697a      	ldr	r2, [r7, #20]
 8004d96:	202c      	movs	r0, #44	; 0x2c
 8004d98:	fb00 f202 	mul.w	r2, r0, r2
 8004d9c:	440a      	add	r2, r1
 8004d9e:	3240      	adds	r2, #64	; 0x40
 8004da0:	8812      	ldrh	r2, [r2, #0]
 8004da2:	fbb3 f3f2 	udiv	r3, r3, r2
 8004da6:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	f003 0301 	and.w	r3, r3, #1
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	f000 80b5 	beq.w	8004f1e <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8004db4:	687a      	ldr	r2, [r7, #4]
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	212c      	movs	r1, #44	; 0x2c
 8004dba:	fb01 f303 	mul.w	r3, r1, r3
 8004dbe:	4413      	add	r3, r2
 8004dc0:	3355      	adds	r3, #85	; 0x55
 8004dc2:	781b      	ldrb	r3, [r3, #0]
 8004dc4:	f083 0301 	eor.w	r3, r3, #1
 8004dc8:	b2d8      	uxtb	r0, r3
 8004dca:	687a      	ldr	r2, [r7, #4]
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	212c      	movs	r1, #44	; 0x2c
 8004dd0:	fb01 f303 	mul.w	r3, r1, r3
 8004dd4:	4413      	add	r3, r2
 8004dd6:	3355      	adds	r3, #85	; 0x55
 8004dd8:	4602      	mov	r2, r0
 8004dda:	701a      	strb	r2, [r3, #0]
 8004ddc:	e09f      	b.n	8004f1e <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004dde:	687a      	ldr	r2, [r7, #4]
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	212c      	movs	r1, #44	; 0x2c
 8004de4:	fb01 f303 	mul.w	r3, r1, r3
 8004de8:	4413      	add	r3, r2
 8004dea:	3361      	adds	r3, #97	; 0x61
 8004dec:	781b      	ldrb	r3, [r3, #0]
 8004dee:	2b03      	cmp	r3, #3
 8004df0:	d109      	bne.n	8004e06 <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004df2:	687a      	ldr	r2, [r7, #4]
 8004df4:	697b      	ldr	r3, [r7, #20]
 8004df6:	212c      	movs	r1, #44	; 0x2c
 8004df8:	fb01 f303 	mul.w	r3, r1, r3
 8004dfc:	4413      	add	r3, r2
 8004dfe:	3360      	adds	r3, #96	; 0x60
 8004e00:	2202      	movs	r2, #2
 8004e02:	701a      	strb	r2, [r3, #0]
 8004e04:	e08b      	b.n	8004f1e <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8004e06:	687a      	ldr	r2, [r7, #4]
 8004e08:	697b      	ldr	r3, [r7, #20]
 8004e0a:	212c      	movs	r1, #44	; 0x2c
 8004e0c:	fb01 f303 	mul.w	r3, r1, r3
 8004e10:	4413      	add	r3, r2
 8004e12:	3361      	adds	r3, #97	; 0x61
 8004e14:	781b      	ldrb	r3, [r3, #0]
 8004e16:	2b04      	cmp	r3, #4
 8004e18:	d109      	bne.n	8004e2e <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004e1a:	687a      	ldr	r2, [r7, #4]
 8004e1c:	697b      	ldr	r3, [r7, #20]
 8004e1e:	212c      	movs	r1, #44	; 0x2c
 8004e20:	fb01 f303 	mul.w	r3, r1, r3
 8004e24:	4413      	add	r3, r2
 8004e26:	3360      	adds	r3, #96	; 0x60
 8004e28:	2202      	movs	r2, #2
 8004e2a:	701a      	strb	r2, [r3, #0]
 8004e2c:	e077      	b.n	8004f1e <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004e2e:	687a      	ldr	r2, [r7, #4]
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	212c      	movs	r1, #44	; 0x2c
 8004e34:	fb01 f303 	mul.w	r3, r1, r3
 8004e38:	4413      	add	r3, r2
 8004e3a:	3361      	adds	r3, #97	; 0x61
 8004e3c:	781b      	ldrb	r3, [r3, #0]
 8004e3e:	2b05      	cmp	r3, #5
 8004e40:	d109      	bne.n	8004e56 <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8004e42:	687a      	ldr	r2, [r7, #4]
 8004e44:	697b      	ldr	r3, [r7, #20]
 8004e46:	212c      	movs	r1, #44	; 0x2c
 8004e48:	fb01 f303 	mul.w	r3, r1, r3
 8004e4c:	4413      	add	r3, r2
 8004e4e:	3360      	adds	r3, #96	; 0x60
 8004e50:	2205      	movs	r2, #5
 8004e52:	701a      	strb	r2, [r3, #0]
 8004e54:	e063      	b.n	8004f1e <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004e56:	687a      	ldr	r2, [r7, #4]
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	212c      	movs	r1, #44	; 0x2c
 8004e5c:	fb01 f303 	mul.w	r3, r1, r3
 8004e60:	4413      	add	r3, r2
 8004e62:	3361      	adds	r3, #97	; 0x61
 8004e64:	781b      	ldrb	r3, [r3, #0]
 8004e66:	2b06      	cmp	r3, #6
 8004e68:	d009      	beq.n	8004e7e <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004e6a:	687a      	ldr	r2, [r7, #4]
 8004e6c:	697b      	ldr	r3, [r7, #20]
 8004e6e:	212c      	movs	r1, #44	; 0x2c
 8004e70:	fb01 f303 	mul.w	r3, r1, r3
 8004e74:	4413      	add	r3, r2
 8004e76:	3361      	adds	r3, #97	; 0x61
 8004e78:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004e7a:	2b08      	cmp	r3, #8
 8004e7c:	d14f      	bne.n	8004f1e <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 8004e7e:	687a      	ldr	r2, [r7, #4]
 8004e80:	697b      	ldr	r3, [r7, #20]
 8004e82:	212c      	movs	r1, #44	; 0x2c
 8004e84:	fb01 f303 	mul.w	r3, r1, r3
 8004e88:	4413      	add	r3, r2
 8004e8a:	335c      	adds	r3, #92	; 0x5c
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	1c5a      	adds	r2, r3, #1
 8004e90:	6879      	ldr	r1, [r7, #4]
 8004e92:	697b      	ldr	r3, [r7, #20]
 8004e94:	202c      	movs	r0, #44	; 0x2c
 8004e96:	fb00 f303 	mul.w	r3, r0, r3
 8004e9a:	440b      	add	r3, r1
 8004e9c:	335c      	adds	r3, #92	; 0x5c
 8004e9e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004ea0:	687a      	ldr	r2, [r7, #4]
 8004ea2:	697b      	ldr	r3, [r7, #20]
 8004ea4:	212c      	movs	r1, #44	; 0x2c
 8004ea6:	fb01 f303 	mul.w	r3, r1, r3
 8004eaa:	4413      	add	r3, r2
 8004eac:	335c      	adds	r3, #92	; 0x5c
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	2b02      	cmp	r3, #2
 8004eb2:	d912      	bls.n	8004eda <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004eb4:	687a      	ldr	r2, [r7, #4]
 8004eb6:	697b      	ldr	r3, [r7, #20]
 8004eb8:	212c      	movs	r1, #44	; 0x2c
 8004eba:	fb01 f303 	mul.w	r3, r1, r3
 8004ebe:	4413      	add	r3, r2
 8004ec0:	335c      	adds	r3, #92	; 0x5c
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004ec6:	687a      	ldr	r2, [r7, #4]
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	212c      	movs	r1, #44	; 0x2c
 8004ecc:	fb01 f303 	mul.w	r3, r1, r3
 8004ed0:	4413      	add	r3, r2
 8004ed2:	3360      	adds	r3, #96	; 0x60
 8004ed4:	2204      	movs	r2, #4
 8004ed6:	701a      	strb	r2, [r3, #0]
 8004ed8:	e021      	b.n	8004f1e <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004eda:	687a      	ldr	r2, [r7, #4]
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	212c      	movs	r1, #44	; 0x2c
 8004ee0:	fb01 f303 	mul.w	r3, r1, r3
 8004ee4:	4413      	add	r3, r2
 8004ee6:	3360      	adds	r3, #96	; 0x60
 8004ee8:	2202      	movs	r2, #2
 8004eea:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004eec:	697b      	ldr	r3, [r7, #20]
 8004eee:	015a      	lsls	r2, r3, #5
 8004ef0:	69bb      	ldr	r3, [r7, #24]
 8004ef2:	4413      	add	r3, r2
 8004ef4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004efc:	693b      	ldr	r3, [r7, #16]
 8004efe:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004f02:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004f04:	693b      	ldr	r3, [r7, #16]
 8004f06:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004f0a:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004f0c:	697b      	ldr	r3, [r7, #20]
 8004f0e:	015a      	lsls	r2, r3, #5
 8004f10:	69bb      	ldr	r3, [r7, #24]
 8004f12:	4413      	add	r3, r2
 8004f14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f18:	461a      	mov	r2, r3
 8004f1a:	693b      	ldr	r3, [r7, #16]
 8004f1c:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004f1e:	697b      	ldr	r3, [r7, #20]
 8004f20:	015a      	lsls	r2, r3, #5
 8004f22:	69bb      	ldr	r3, [r7, #24]
 8004f24:	4413      	add	r3, r2
 8004f26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f2a:	461a      	mov	r2, r3
 8004f2c:	2302      	movs	r3, #2
 8004f2e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004f30:	697b      	ldr	r3, [r7, #20]
 8004f32:	b2d9      	uxtb	r1, r3
 8004f34:	687a      	ldr	r2, [r7, #4]
 8004f36:	697b      	ldr	r3, [r7, #20]
 8004f38:	202c      	movs	r0, #44	; 0x2c
 8004f3a:	fb00 f303 	mul.w	r3, r0, r3
 8004f3e:	4413      	add	r3, r2
 8004f40:	3360      	adds	r3, #96	; 0x60
 8004f42:	781b      	ldrb	r3, [r3, #0]
 8004f44:	461a      	mov	r2, r3
 8004f46:	6878      	ldr	r0, [r7, #4]
 8004f48:	f006 fede 	bl	800bd08 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004f4c:	bf00      	nop
 8004f4e:	3720      	adds	r7, #32
 8004f50:	46bd      	mov	sp, r7
 8004f52:	bd80      	pop	{r7, pc}

08004f54 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b08a      	sub	sp, #40	; 0x28
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f64:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	6a1b      	ldr	r3, [r3, #32]
 8004f6c:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004f6e:	69fb      	ldr	r3, [r7, #28]
 8004f70:	f003 030f 	and.w	r3, r3, #15
 8004f74:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004f76:	69fb      	ldr	r3, [r7, #28]
 8004f78:	0c5b      	lsrs	r3, r3, #17
 8004f7a:	f003 030f 	and.w	r3, r3, #15
 8004f7e:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004f80:	69fb      	ldr	r3, [r7, #28]
 8004f82:	091b      	lsrs	r3, r3, #4
 8004f84:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004f88:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	2b02      	cmp	r3, #2
 8004f8e:	d004      	beq.n	8004f9a <HCD_RXQLVL_IRQHandler+0x46>
 8004f90:	697b      	ldr	r3, [r7, #20]
 8004f92:	2b05      	cmp	r3, #5
 8004f94:	f000 80a9 	beq.w	80050ea <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8004f98:	e0aa      	b.n	80050f0 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8004f9a:	693b      	ldr	r3, [r7, #16]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	f000 80a6 	beq.w	80050ee <HCD_RXQLVL_IRQHandler+0x19a>
 8004fa2:	687a      	ldr	r2, [r7, #4]
 8004fa4:	69bb      	ldr	r3, [r7, #24]
 8004fa6:	212c      	movs	r1, #44	; 0x2c
 8004fa8:	fb01 f303 	mul.w	r3, r1, r3
 8004fac:	4413      	add	r3, r2
 8004fae:	3344      	adds	r3, #68	; 0x44
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	f000 809b 	beq.w	80050ee <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8004fb8:	687a      	ldr	r2, [r7, #4]
 8004fba:	69bb      	ldr	r3, [r7, #24]
 8004fbc:	212c      	movs	r1, #44	; 0x2c
 8004fbe:	fb01 f303 	mul.w	r3, r1, r3
 8004fc2:	4413      	add	r3, r2
 8004fc4:	3350      	adds	r3, #80	; 0x50
 8004fc6:	681a      	ldr	r2, [r3, #0]
 8004fc8:	693b      	ldr	r3, [r7, #16]
 8004fca:	441a      	add	r2, r3
 8004fcc:	6879      	ldr	r1, [r7, #4]
 8004fce:	69bb      	ldr	r3, [r7, #24]
 8004fd0:	202c      	movs	r0, #44	; 0x2c
 8004fd2:	fb00 f303 	mul.w	r3, r0, r3
 8004fd6:	440b      	add	r3, r1
 8004fd8:	334c      	adds	r3, #76	; 0x4c
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	429a      	cmp	r2, r3
 8004fde:	d87a      	bhi.n	80050d6 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6818      	ldr	r0, [r3, #0]
 8004fe4:	687a      	ldr	r2, [r7, #4]
 8004fe6:	69bb      	ldr	r3, [r7, #24]
 8004fe8:	212c      	movs	r1, #44	; 0x2c
 8004fea:	fb01 f303 	mul.w	r3, r1, r3
 8004fee:	4413      	add	r3, r2
 8004ff0:	3344      	adds	r3, #68	; 0x44
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	693a      	ldr	r2, [r7, #16]
 8004ff6:	b292      	uxth	r2, r2
 8004ff8:	4619      	mov	r1, r3
 8004ffa:	f004 f841 	bl	8009080 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8004ffe:	687a      	ldr	r2, [r7, #4]
 8005000:	69bb      	ldr	r3, [r7, #24]
 8005002:	212c      	movs	r1, #44	; 0x2c
 8005004:	fb01 f303 	mul.w	r3, r1, r3
 8005008:	4413      	add	r3, r2
 800500a:	3344      	adds	r3, #68	; 0x44
 800500c:	681a      	ldr	r2, [r3, #0]
 800500e:	693b      	ldr	r3, [r7, #16]
 8005010:	441a      	add	r2, r3
 8005012:	6879      	ldr	r1, [r7, #4]
 8005014:	69bb      	ldr	r3, [r7, #24]
 8005016:	202c      	movs	r0, #44	; 0x2c
 8005018:	fb00 f303 	mul.w	r3, r0, r3
 800501c:	440b      	add	r3, r1
 800501e:	3344      	adds	r3, #68	; 0x44
 8005020:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8005022:	687a      	ldr	r2, [r7, #4]
 8005024:	69bb      	ldr	r3, [r7, #24]
 8005026:	212c      	movs	r1, #44	; 0x2c
 8005028:	fb01 f303 	mul.w	r3, r1, r3
 800502c:	4413      	add	r3, r2
 800502e:	3350      	adds	r3, #80	; 0x50
 8005030:	681a      	ldr	r2, [r3, #0]
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	441a      	add	r2, r3
 8005036:	6879      	ldr	r1, [r7, #4]
 8005038:	69bb      	ldr	r3, [r7, #24]
 800503a:	202c      	movs	r0, #44	; 0x2c
 800503c:	fb00 f303 	mul.w	r3, r0, r3
 8005040:	440b      	add	r3, r1
 8005042:	3350      	adds	r3, #80	; 0x50
 8005044:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8005046:	69bb      	ldr	r3, [r7, #24]
 8005048:	015a      	lsls	r2, r3, #5
 800504a:	6a3b      	ldr	r3, [r7, #32]
 800504c:	4413      	add	r3, r2
 800504e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005052:	691b      	ldr	r3, [r3, #16]
 8005054:	0cdb      	lsrs	r3, r3, #19
 8005056:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800505a:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800505c:	687a      	ldr	r2, [r7, #4]
 800505e:	69bb      	ldr	r3, [r7, #24]
 8005060:	212c      	movs	r1, #44	; 0x2c
 8005062:	fb01 f303 	mul.w	r3, r1, r3
 8005066:	4413      	add	r3, r2
 8005068:	3340      	adds	r3, #64	; 0x40
 800506a:	881b      	ldrh	r3, [r3, #0]
 800506c:	461a      	mov	r2, r3
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	4293      	cmp	r3, r2
 8005072:	d13c      	bne.n	80050ee <HCD_RXQLVL_IRQHandler+0x19a>
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d039      	beq.n	80050ee <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 800507a:	69bb      	ldr	r3, [r7, #24]
 800507c:	015a      	lsls	r2, r3, #5
 800507e:	6a3b      	ldr	r3, [r7, #32]
 8005080:	4413      	add	r3, r2
 8005082:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800508a:	68bb      	ldr	r3, [r7, #8]
 800508c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005090:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005092:	68bb      	ldr	r3, [r7, #8]
 8005094:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005098:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 800509a:	69bb      	ldr	r3, [r7, #24]
 800509c:	015a      	lsls	r2, r3, #5
 800509e:	6a3b      	ldr	r3, [r7, #32]
 80050a0:	4413      	add	r3, r2
 80050a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050a6:	461a      	mov	r2, r3
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80050ac:	687a      	ldr	r2, [r7, #4]
 80050ae:	69bb      	ldr	r3, [r7, #24]
 80050b0:	212c      	movs	r1, #44	; 0x2c
 80050b2:	fb01 f303 	mul.w	r3, r1, r3
 80050b6:	4413      	add	r3, r2
 80050b8:	3354      	adds	r3, #84	; 0x54
 80050ba:	781b      	ldrb	r3, [r3, #0]
 80050bc:	f083 0301 	eor.w	r3, r3, #1
 80050c0:	b2d8      	uxtb	r0, r3
 80050c2:	687a      	ldr	r2, [r7, #4]
 80050c4:	69bb      	ldr	r3, [r7, #24]
 80050c6:	212c      	movs	r1, #44	; 0x2c
 80050c8:	fb01 f303 	mul.w	r3, r1, r3
 80050cc:	4413      	add	r3, r2
 80050ce:	3354      	adds	r3, #84	; 0x54
 80050d0:	4602      	mov	r2, r0
 80050d2:	701a      	strb	r2, [r3, #0]
      break;
 80050d4:	e00b      	b.n	80050ee <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 80050d6:	687a      	ldr	r2, [r7, #4]
 80050d8:	69bb      	ldr	r3, [r7, #24]
 80050da:	212c      	movs	r1, #44	; 0x2c
 80050dc:	fb01 f303 	mul.w	r3, r1, r3
 80050e0:	4413      	add	r3, r2
 80050e2:	3360      	adds	r3, #96	; 0x60
 80050e4:	2204      	movs	r2, #4
 80050e6:	701a      	strb	r2, [r3, #0]
      break;
 80050e8:	e001      	b.n	80050ee <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 80050ea:	bf00      	nop
 80050ec:	e000      	b.n	80050f0 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 80050ee:	bf00      	nop
  }
}
 80050f0:	bf00      	nop
 80050f2:	3728      	adds	r7, #40	; 0x28
 80050f4:	46bd      	mov	sp, r7
 80050f6:	bd80      	pop	{r7, pc}

080050f8 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b086      	sub	sp, #24
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005106:	697b      	ldr	r3, [r7, #20]
 8005108:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8005114:	693b      	ldr	r3, [r7, #16]
 8005116:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005124:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	f003 0302 	and.w	r3, r3, #2
 800512c:	2b02      	cmp	r3, #2
 800512e:	d10b      	bne.n	8005148 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	f003 0301 	and.w	r3, r3, #1
 8005136:	2b01      	cmp	r3, #1
 8005138:	d102      	bne.n	8005140 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800513a:	6878      	ldr	r0, [r7, #4]
 800513c:	f006 fdc8 	bl	800bcd0 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	f043 0302 	orr.w	r3, r3, #2
 8005146:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	f003 0308 	and.w	r3, r3, #8
 800514e:	2b08      	cmp	r3, #8
 8005150:	d132      	bne.n	80051b8 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	f043 0308 	orr.w	r3, r3, #8
 8005158:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	f003 0304 	and.w	r3, r3, #4
 8005160:	2b04      	cmp	r3, #4
 8005162:	d126      	bne.n	80051b2 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	699b      	ldr	r3, [r3, #24]
 8005168:	2b02      	cmp	r3, #2
 800516a:	d113      	bne.n	8005194 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8005172:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005176:	d106      	bne.n	8005186 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	2102      	movs	r1, #2
 800517e:	4618      	mov	r0, r3
 8005180:	f004 f8de 	bl	8009340 <USB_InitFSLSPClkSel>
 8005184:	e011      	b.n	80051aa <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	2101      	movs	r1, #1
 800518c:	4618      	mov	r0, r3
 800518e:	f004 f8d7 	bl	8009340 <USB_InitFSLSPClkSel>
 8005192:	e00a      	b.n	80051aa <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	68db      	ldr	r3, [r3, #12]
 8005198:	2b01      	cmp	r3, #1
 800519a:	d106      	bne.n	80051aa <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 800519c:	693b      	ldr	r3, [r7, #16]
 800519e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80051a2:	461a      	mov	r2, r3
 80051a4:	f64e 2360 	movw	r3, #60000	; 0xea60
 80051a8:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	f006 fdba 	bl	800bd24 <HAL_HCD_PortEnabled_Callback>
 80051b0:	e002      	b.n	80051b8 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80051b2:	6878      	ldr	r0, [r7, #4]
 80051b4:	f006 fdc4 	bl	800bd40 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	f003 0320 	and.w	r3, r3, #32
 80051be:	2b20      	cmp	r3, #32
 80051c0:	d103      	bne.n	80051ca <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	f043 0320 	orr.w	r3, r3, #32
 80051c8:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80051ca:	693b      	ldr	r3, [r7, #16]
 80051cc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80051d0:	461a      	mov	r2, r3
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	6013      	str	r3, [r2, #0]
}
 80051d6:	bf00      	nop
 80051d8:	3718      	adds	r7, #24
 80051da:	46bd      	mov	sp, r7
 80051dc:	bd80      	pop	{r7, pc}
	...

080051e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b084      	sub	sp, #16
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d101      	bne.n	80051f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80051ee:	2301      	movs	r3, #1
 80051f0:	e12b      	b.n	800544a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051f8:	b2db      	uxtb	r3, r3
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d106      	bne.n	800520c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2200      	movs	r2, #0
 8005202:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f7fc fc0c 	bl	8001a24 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2224      	movs	r2, #36	; 0x24
 8005210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	681a      	ldr	r2, [r3, #0]
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f022 0201 	bic.w	r2, r2, #1
 8005222:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	681a      	ldr	r2, [r3, #0]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005232:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	681a      	ldr	r2, [r3, #0]
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005242:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005244:	f002 f9f8 	bl	8007638 <HAL_RCC_GetPCLK1Freq>
 8005248:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	4a81      	ldr	r2, [pc, #516]	; (8005454 <HAL_I2C_Init+0x274>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d807      	bhi.n	8005264 <HAL_I2C_Init+0x84>
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	4a80      	ldr	r2, [pc, #512]	; (8005458 <HAL_I2C_Init+0x278>)
 8005258:	4293      	cmp	r3, r2
 800525a:	bf94      	ite	ls
 800525c:	2301      	movls	r3, #1
 800525e:	2300      	movhi	r3, #0
 8005260:	b2db      	uxtb	r3, r3
 8005262:	e006      	b.n	8005272 <HAL_I2C_Init+0x92>
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	4a7d      	ldr	r2, [pc, #500]	; (800545c <HAL_I2C_Init+0x27c>)
 8005268:	4293      	cmp	r3, r2
 800526a:	bf94      	ite	ls
 800526c:	2301      	movls	r3, #1
 800526e:	2300      	movhi	r3, #0
 8005270:	b2db      	uxtb	r3, r3
 8005272:	2b00      	cmp	r3, #0
 8005274:	d001      	beq.n	800527a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005276:	2301      	movs	r3, #1
 8005278:	e0e7      	b.n	800544a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	4a78      	ldr	r2, [pc, #480]	; (8005460 <HAL_I2C_Init+0x280>)
 800527e:	fba2 2303 	umull	r2, r3, r2, r3
 8005282:	0c9b      	lsrs	r3, r3, #18
 8005284:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	68ba      	ldr	r2, [r7, #8]
 8005296:	430a      	orrs	r2, r1
 8005298:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	6a1b      	ldr	r3, [r3, #32]
 80052a0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	685b      	ldr	r3, [r3, #4]
 80052a8:	4a6a      	ldr	r2, [pc, #424]	; (8005454 <HAL_I2C_Init+0x274>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d802      	bhi.n	80052b4 <HAL_I2C_Init+0xd4>
 80052ae:	68bb      	ldr	r3, [r7, #8]
 80052b0:	3301      	adds	r3, #1
 80052b2:	e009      	b.n	80052c8 <HAL_I2C_Init+0xe8>
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80052ba:	fb02 f303 	mul.w	r3, r2, r3
 80052be:	4a69      	ldr	r2, [pc, #420]	; (8005464 <HAL_I2C_Init+0x284>)
 80052c0:	fba2 2303 	umull	r2, r3, r2, r3
 80052c4:	099b      	lsrs	r3, r3, #6
 80052c6:	3301      	adds	r3, #1
 80052c8:	687a      	ldr	r2, [r7, #4]
 80052ca:	6812      	ldr	r2, [r2, #0]
 80052cc:	430b      	orrs	r3, r1
 80052ce:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	69db      	ldr	r3, [r3, #28]
 80052d6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80052da:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	495c      	ldr	r1, [pc, #368]	; (8005454 <HAL_I2C_Init+0x274>)
 80052e4:	428b      	cmp	r3, r1
 80052e6:	d819      	bhi.n	800531c <HAL_I2C_Init+0x13c>
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	1e59      	subs	r1, r3, #1
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	005b      	lsls	r3, r3, #1
 80052f2:	fbb1 f3f3 	udiv	r3, r1, r3
 80052f6:	1c59      	adds	r1, r3, #1
 80052f8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80052fc:	400b      	ands	r3, r1
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d00a      	beq.n	8005318 <HAL_I2C_Init+0x138>
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	1e59      	subs	r1, r3, #1
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	685b      	ldr	r3, [r3, #4]
 800530a:	005b      	lsls	r3, r3, #1
 800530c:	fbb1 f3f3 	udiv	r3, r1, r3
 8005310:	3301      	adds	r3, #1
 8005312:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005316:	e051      	b.n	80053bc <HAL_I2C_Init+0x1dc>
 8005318:	2304      	movs	r3, #4
 800531a:	e04f      	b.n	80053bc <HAL_I2C_Init+0x1dc>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	689b      	ldr	r3, [r3, #8]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d111      	bne.n	8005348 <HAL_I2C_Init+0x168>
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	1e58      	subs	r0, r3, #1
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6859      	ldr	r1, [r3, #4]
 800532c:	460b      	mov	r3, r1
 800532e:	005b      	lsls	r3, r3, #1
 8005330:	440b      	add	r3, r1
 8005332:	fbb0 f3f3 	udiv	r3, r0, r3
 8005336:	3301      	adds	r3, #1
 8005338:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800533c:	2b00      	cmp	r3, #0
 800533e:	bf0c      	ite	eq
 8005340:	2301      	moveq	r3, #1
 8005342:	2300      	movne	r3, #0
 8005344:	b2db      	uxtb	r3, r3
 8005346:	e012      	b.n	800536e <HAL_I2C_Init+0x18e>
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	1e58      	subs	r0, r3, #1
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6859      	ldr	r1, [r3, #4]
 8005350:	460b      	mov	r3, r1
 8005352:	009b      	lsls	r3, r3, #2
 8005354:	440b      	add	r3, r1
 8005356:	0099      	lsls	r1, r3, #2
 8005358:	440b      	add	r3, r1
 800535a:	fbb0 f3f3 	udiv	r3, r0, r3
 800535e:	3301      	adds	r3, #1
 8005360:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005364:	2b00      	cmp	r3, #0
 8005366:	bf0c      	ite	eq
 8005368:	2301      	moveq	r3, #1
 800536a:	2300      	movne	r3, #0
 800536c:	b2db      	uxtb	r3, r3
 800536e:	2b00      	cmp	r3, #0
 8005370:	d001      	beq.n	8005376 <HAL_I2C_Init+0x196>
 8005372:	2301      	movs	r3, #1
 8005374:	e022      	b.n	80053bc <HAL_I2C_Init+0x1dc>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	689b      	ldr	r3, [r3, #8]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d10e      	bne.n	800539c <HAL_I2C_Init+0x1bc>
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	1e58      	subs	r0, r3, #1
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6859      	ldr	r1, [r3, #4]
 8005386:	460b      	mov	r3, r1
 8005388:	005b      	lsls	r3, r3, #1
 800538a:	440b      	add	r3, r1
 800538c:	fbb0 f3f3 	udiv	r3, r0, r3
 8005390:	3301      	adds	r3, #1
 8005392:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005396:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800539a:	e00f      	b.n	80053bc <HAL_I2C_Init+0x1dc>
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	1e58      	subs	r0, r3, #1
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6859      	ldr	r1, [r3, #4]
 80053a4:	460b      	mov	r3, r1
 80053a6:	009b      	lsls	r3, r3, #2
 80053a8:	440b      	add	r3, r1
 80053aa:	0099      	lsls	r1, r3, #2
 80053ac:	440b      	add	r3, r1
 80053ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80053b2:	3301      	adds	r3, #1
 80053b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80053b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80053bc:	6879      	ldr	r1, [r7, #4]
 80053be:	6809      	ldr	r1, [r1, #0]
 80053c0:	4313      	orrs	r3, r2
 80053c2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	69da      	ldr	r2, [r3, #28]
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6a1b      	ldr	r3, [r3, #32]
 80053d6:	431a      	orrs	r2, r3
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	430a      	orrs	r2, r1
 80053de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	689b      	ldr	r3, [r3, #8]
 80053e6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80053ea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80053ee:	687a      	ldr	r2, [r7, #4]
 80053f0:	6911      	ldr	r1, [r2, #16]
 80053f2:	687a      	ldr	r2, [r7, #4]
 80053f4:	68d2      	ldr	r2, [r2, #12]
 80053f6:	4311      	orrs	r1, r2
 80053f8:	687a      	ldr	r2, [r7, #4]
 80053fa:	6812      	ldr	r2, [r2, #0]
 80053fc:	430b      	orrs	r3, r1
 80053fe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	68db      	ldr	r3, [r3, #12]
 8005406:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	695a      	ldr	r2, [r3, #20]
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	699b      	ldr	r3, [r3, #24]
 8005412:	431a      	orrs	r2, r3
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	430a      	orrs	r2, r1
 800541a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	681a      	ldr	r2, [r3, #0]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f042 0201 	orr.w	r2, r2, #1
 800542a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2200      	movs	r2, #0
 8005430:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2220      	movs	r2, #32
 8005436:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2200      	movs	r2, #0
 800543e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2200      	movs	r2, #0
 8005444:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005448:	2300      	movs	r3, #0
}
 800544a:	4618      	mov	r0, r3
 800544c:	3710      	adds	r7, #16
 800544e:	46bd      	mov	sp, r7
 8005450:	bd80      	pop	{r7, pc}
 8005452:	bf00      	nop
 8005454:	000186a0 	.word	0x000186a0
 8005458:	001e847f 	.word	0x001e847f
 800545c:	003d08ff 	.word	0x003d08ff
 8005460:	431bde83 	.word	0x431bde83
 8005464:	10624dd3 	.word	0x10624dd3

08005468 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b088      	sub	sp, #32
 800546c:	af02      	add	r7, sp, #8
 800546e:	60f8      	str	r0, [r7, #12]
 8005470:	607a      	str	r2, [r7, #4]
 8005472:	461a      	mov	r2, r3
 8005474:	460b      	mov	r3, r1
 8005476:	817b      	strh	r3, [r7, #10]
 8005478:	4613      	mov	r3, r2
 800547a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800547c:	f7fd fa3e 	bl	80028fc <HAL_GetTick>
 8005480:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005488:	b2db      	uxtb	r3, r3
 800548a:	2b20      	cmp	r3, #32
 800548c:	f040 80e0 	bne.w	8005650 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005490:	697b      	ldr	r3, [r7, #20]
 8005492:	9300      	str	r3, [sp, #0]
 8005494:	2319      	movs	r3, #25
 8005496:	2201      	movs	r2, #1
 8005498:	4970      	ldr	r1, [pc, #448]	; (800565c <HAL_I2C_Master_Transmit+0x1f4>)
 800549a:	68f8      	ldr	r0, [r7, #12]
 800549c:	f000 fe02 	bl	80060a4 <I2C_WaitOnFlagUntilTimeout>
 80054a0:	4603      	mov	r3, r0
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d001      	beq.n	80054aa <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80054a6:	2302      	movs	r3, #2
 80054a8:	e0d3      	b.n	8005652 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054b0:	2b01      	cmp	r3, #1
 80054b2:	d101      	bne.n	80054b8 <HAL_I2C_Master_Transmit+0x50>
 80054b4:	2302      	movs	r3, #2
 80054b6:	e0cc      	b.n	8005652 <HAL_I2C_Master_Transmit+0x1ea>
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	2201      	movs	r2, #1
 80054bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f003 0301 	and.w	r3, r3, #1
 80054ca:	2b01      	cmp	r3, #1
 80054cc:	d007      	beq.n	80054de <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	681a      	ldr	r2, [r3, #0]
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f042 0201 	orr.w	r2, r2, #1
 80054dc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	681a      	ldr	r2, [r3, #0]
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80054ec:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	2221      	movs	r2, #33	; 0x21
 80054f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	2210      	movs	r2, #16
 80054fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	2200      	movs	r2, #0
 8005502:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	687a      	ldr	r2, [r7, #4]
 8005508:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	893a      	ldrh	r2, [r7, #8]
 800550e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005514:	b29a      	uxth	r2, r3
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	4a50      	ldr	r2, [pc, #320]	; (8005660 <HAL_I2C_Master_Transmit+0x1f8>)
 800551e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005520:	8979      	ldrh	r1, [r7, #10]
 8005522:	697b      	ldr	r3, [r7, #20]
 8005524:	6a3a      	ldr	r2, [r7, #32]
 8005526:	68f8      	ldr	r0, [r7, #12]
 8005528:	f000 fbbc 	bl	8005ca4 <I2C_MasterRequestWrite>
 800552c:	4603      	mov	r3, r0
 800552e:	2b00      	cmp	r3, #0
 8005530:	d001      	beq.n	8005536 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005532:	2301      	movs	r3, #1
 8005534:	e08d      	b.n	8005652 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005536:	2300      	movs	r3, #0
 8005538:	613b      	str	r3, [r7, #16]
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	695b      	ldr	r3, [r3, #20]
 8005540:	613b      	str	r3, [r7, #16]
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	699b      	ldr	r3, [r3, #24]
 8005548:	613b      	str	r3, [r7, #16]
 800554a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800554c:	e066      	b.n	800561c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800554e:	697a      	ldr	r2, [r7, #20]
 8005550:	6a39      	ldr	r1, [r7, #32]
 8005552:	68f8      	ldr	r0, [r7, #12]
 8005554:	f000 fe7c 	bl	8006250 <I2C_WaitOnTXEFlagUntilTimeout>
 8005558:	4603      	mov	r3, r0
 800555a:	2b00      	cmp	r3, #0
 800555c:	d00d      	beq.n	800557a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005562:	2b04      	cmp	r3, #4
 8005564:	d107      	bne.n	8005576 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	681a      	ldr	r2, [r3, #0]
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005574:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005576:	2301      	movs	r3, #1
 8005578:	e06b      	b.n	8005652 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800557e:	781a      	ldrb	r2, [r3, #0]
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800558a:	1c5a      	adds	r2, r3, #1
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005594:	b29b      	uxth	r3, r3
 8005596:	3b01      	subs	r3, #1
 8005598:	b29a      	uxth	r2, r3
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055a2:	3b01      	subs	r3, #1
 80055a4:	b29a      	uxth	r2, r3
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	695b      	ldr	r3, [r3, #20]
 80055b0:	f003 0304 	and.w	r3, r3, #4
 80055b4:	2b04      	cmp	r3, #4
 80055b6:	d11b      	bne.n	80055f0 <HAL_I2C_Master_Transmit+0x188>
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d017      	beq.n	80055f0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055c4:	781a      	ldrb	r2, [r3, #0]
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055d0:	1c5a      	adds	r2, r3, #1
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055da:	b29b      	uxth	r3, r3
 80055dc:	3b01      	subs	r3, #1
 80055de:	b29a      	uxth	r2, r3
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055e8:	3b01      	subs	r3, #1
 80055ea:	b29a      	uxth	r2, r3
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80055f0:	697a      	ldr	r2, [r7, #20]
 80055f2:	6a39      	ldr	r1, [r7, #32]
 80055f4:	68f8      	ldr	r0, [r7, #12]
 80055f6:	f000 fe6c 	bl	80062d2 <I2C_WaitOnBTFFlagUntilTimeout>
 80055fa:	4603      	mov	r3, r0
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d00d      	beq.n	800561c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005604:	2b04      	cmp	r3, #4
 8005606:	d107      	bne.n	8005618 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	681a      	ldr	r2, [r3, #0]
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005616:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005618:	2301      	movs	r3, #1
 800561a:	e01a      	b.n	8005652 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005620:	2b00      	cmp	r3, #0
 8005622:	d194      	bne.n	800554e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	681a      	ldr	r2, [r3, #0]
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005632:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	2220      	movs	r2, #32
 8005638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	2200      	movs	r2, #0
 8005640:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	2200      	movs	r2, #0
 8005648:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800564c:	2300      	movs	r3, #0
 800564e:	e000      	b.n	8005652 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005650:	2302      	movs	r3, #2
  }
}
 8005652:	4618      	mov	r0, r3
 8005654:	3718      	adds	r7, #24
 8005656:	46bd      	mov	sp, r7
 8005658:	bd80      	pop	{r7, pc}
 800565a:	bf00      	nop
 800565c:	00100002 	.word	0x00100002
 8005660:	ffff0000 	.word	0xffff0000

08005664 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b088      	sub	sp, #32
 8005668:	af02      	add	r7, sp, #8
 800566a:	60f8      	str	r0, [r7, #12]
 800566c:	4608      	mov	r0, r1
 800566e:	4611      	mov	r1, r2
 8005670:	461a      	mov	r2, r3
 8005672:	4603      	mov	r3, r0
 8005674:	817b      	strh	r3, [r7, #10]
 8005676:	460b      	mov	r3, r1
 8005678:	813b      	strh	r3, [r7, #8]
 800567a:	4613      	mov	r3, r2
 800567c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800567e:	f7fd f93d 	bl	80028fc <HAL_GetTick>
 8005682:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800568a:	b2db      	uxtb	r3, r3
 800568c:	2b20      	cmp	r3, #32
 800568e:	f040 80d9 	bne.w	8005844 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005692:	697b      	ldr	r3, [r7, #20]
 8005694:	9300      	str	r3, [sp, #0]
 8005696:	2319      	movs	r3, #25
 8005698:	2201      	movs	r2, #1
 800569a:	496d      	ldr	r1, [pc, #436]	; (8005850 <HAL_I2C_Mem_Write+0x1ec>)
 800569c:	68f8      	ldr	r0, [r7, #12]
 800569e:	f000 fd01 	bl	80060a4 <I2C_WaitOnFlagUntilTimeout>
 80056a2:	4603      	mov	r3, r0
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d001      	beq.n	80056ac <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80056a8:	2302      	movs	r3, #2
 80056aa:	e0cc      	b.n	8005846 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056b2:	2b01      	cmp	r3, #1
 80056b4:	d101      	bne.n	80056ba <HAL_I2C_Mem_Write+0x56>
 80056b6:	2302      	movs	r3, #2
 80056b8:	e0c5      	b.n	8005846 <HAL_I2C_Mem_Write+0x1e2>
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	2201      	movs	r2, #1
 80056be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f003 0301 	and.w	r3, r3, #1
 80056cc:	2b01      	cmp	r3, #1
 80056ce:	d007      	beq.n	80056e0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	681a      	ldr	r2, [r3, #0]
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f042 0201 	orr.w	r2, r2, #1
 80056de:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	681a      	ldr	r2, [r3, #0]
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80056ee:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	2221      	movs	r2, #33	; 0x21
 80056f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	2240      	movs	r2, #64	; 0x40
 80056fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	2200      	movs	r2, #0
 8005704:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	6a3a      	ldr	r2, [r7, #32]
 800570a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005710:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005716:	b29a      	uxth	r2, r3
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	4a4d      	ldr	r2, [pc, #308]	; (8005854 <HAL_I2C_Mem_Write+0x1f0>)
 8005720:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005722:	88f8      	ldrh	r0, [r7, #6]
 8005724:	893a      	ldrh	r2, [r7, #8]
 8005726:	8979      	ldrh	r1, [r7, #10]
 8005728:	697b      	ldr	r3, [r7, #20]
 800572a:	9301      	str	r3, [sp, #4]
 800572c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800572e:	9300      	str	r3, [sp, #0]
 8005730:	4603      	mov	r3, r0
 8005732:	68f8      	ldr	r0, [r7, #12]
 8005734:	f000 fb38 	bl	8005da8 <I2C_RequestMemoryWrite>
 8005738:	4603      	mov	r3, r0
 800573a:	2b00      	cmp	r3, #0
 800573c:	d052      	beq.n	80057e4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800573e:	2301      	movs	r3, #1
 8005740:	e081      	b.n	8005846 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005742:	697a      	ldr	r2, [r7, #20]
 8005744:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005746:	68f8      	ldr	r0, [r7, #12]
 8005748:	f000 fd82 	bl	8006250 <I2C_WaitOnTXEFlagUntilTimeout>
 800574c:	4603      	mov	r3, r0
 800574e:	2b00      	cmp	r3, #0
 8005750:	d00d      	beq.n	800576e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005756:	2b04      	cmp	r3, #4
 8005758:	d107      	bne.n	800576a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	681a      	ldr	r2, [r3, #0]
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005768:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800576a:	2301      	movs	r3, #1
 800576c:	e06b      	b.n	8005846 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005772:	781a      	ldrb	r2, [r3, #0]
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800577e:	1c5a      	adds	r2, r3, #1
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005788:	3b01      	subs	r3, #1
 800578a:	b29a      	uxth	r2, r3
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005794:	b29b      	uxth	r3, r3
 8005796:	3b01      	subs	r3, #1
 8005798:	b29a      	uxth	r2, r3
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	695b      	ldr	r3, [r3, #20]
 80057a4:	f003 0304 	and.w	r3, r3, #4
 80057a8:	2b04      	cmp	r3, #4
 80057aa:	d11b      	bne.n	80057e4 <HAL_I2C_Mem_Write+0x180>
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d017      	beq.n	80057e4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057b8:	781a      	ldrb	r2, [r3, #0]
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057c4:	1c5a      	adds	r2, r3, #1
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057ce:	3b01      	subs	r3, #1
 80057d0:	b29a      	uxth	r2, r3
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057da:	b29b      	uxth	r3, r3
 80057dc:	3b01      	subs	r3, #1
 80057de:	b29a      	uxth	r2, r3
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d1aa      	bne.n	8005742 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80057ec:	697a      	ldr	r2, [r7, #20]
 80057ee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80057f0:	68f8      	ldr	r0, [r7, #12]
 80057f2:	f000 fd6e 	bl	80062d2 <I2C_WaitOnBTFFlagUntilTimeout>
 80057f6:	4603      	mov	r3, r0
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d00d      	beq.n	8005818 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005800:	2b04      	cmp	r3, #4
 8005802:	d107      	bne.n	8005814 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	681a      	ldr	r2, [r3, #0]
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005812:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005814:	2301      	movs	r3, #1
 8005816:	e016      	b.n	8005846 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	681a      	ldr	r2, [r3, #0]
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005826:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	2220      	movs	r2, #32
 800582c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	2200      	movs	r2, #0
 8005834:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	2200      	movs	r2, #0
 800583c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005840:	2300      	movs	r3, #0
 8005842:	e000      	b.n	8005846 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005844:	2302      	movs	r3, #2
  }
}
 8005846:	4618      	mov	r0, r3
 8005848:	3718      	adds	r7, #24
 800584a:	46bd      	mov	sp, r7
 800584c:	bd80      	pop	{r7, pc}
 800584e:	bf00      	nop
 8005850:	00100002 	.word	0x00100002
 8005854:	ffff0000 	.word	0xffff0000

08005858 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b08c      	sub	sp, #48	; 0x30
 800585c:	af02      	add	r7, sp, #8
 800585e:	60f8      	str	r0, [r7, #12]
 8005860:	4608      	mov	r0, r1
 8005862:	4611      	mov	r1, r2
 8005864:	461a      	mov	r2, r3
 8005866:	4603      	mov	r3, r0
 8005868:	817b      	strh	r3, [r7, #10]
 800586a:	460b      	mov	r3, r1
 800586c:	813b      	strh	r3, [r7, #8]
 800586e:	4613      	mov	r3, r2
 8005870:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005872:	f7fd f843 	bl	80028fc <HAL_GetTick>
 8005876:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800587e:	b2db      	uxtb	r3, r3
 8005880:	2b20      	cmp	r3, #32
 8005882:	f040 8208 	bne.w	8005c96 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005888:	9300      	str	r3, [sp, #0]
 800588a:	2319      	movs	r3, #25
 800588c:	2201      	movs	r2, #1
 800588e:	497b      	ldr	r1, [pc, #492]	; (8005a7c <HAL_I2C_Mem_Read+0x224>)
 8005890:	68f8      	ldr	r0, [r7, #12]
 8005892:	f000 fc07 	bl	80060a4 <I2C_WaitOnFlagUntilTimeout>
 8005896:	4603      	mov	r3, r0
 8005898:	2b00      	cmp	r3, #0
 800589a:	d001      	beq.n	80058a0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800589c:	2302      	movs	r3, #2
 800589e:	e1fb      	b.n	8005c98 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058a6:	2b01      	cmp	r3, #1
 80058a8:	d101      	bne.n	80058ae <HAL_I2C_Mem_Read+0x56>
 80058aa:	2302      	movs	r3, #2
 80058ac:	e1f4      	b.n	8005c98 <HAL_I2C_Mem_Read+0x440>
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	2201      	movs	r2, #1
 80058b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f003 0301 	and.w	r3, r3, #1
 80058c0:	2b01      	cmp	r3, #1
 80058c2:	d007      	beq.n	80058d4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	681a      	ldr	r2, [r3, #0]
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f042 0201 	orr.w	r2, r2, #1
 80058d2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	681a      	ldr	r2, [r3, #0]
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80058e2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	2222      	movs	r2, #34	; 0x22
 80058e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	2240      	movs	r2, #64	; 0x40
 80058f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	2200      	movs	r2, #0
 80058f8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058fe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005904:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800590a:	b29a      	uxth	r2, r3
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	4a5b      	ldr	r2, [pc, #364]	; (8005a80 <HAL_I2C_Mem_Read+0x228>)
 8005914:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005916:	88f8      	ldrh	r0, [r7, #6]
 8005918:	893a      	ldrh	r2, [r7, #8]
 800591a:	8979      	ldrh	r1, [r7, #10]
 800591c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800591e:	9301      	str	r3, [sp, #4]
 8005920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005922:	9300      	str	r3, [sp, #0]
 8005924:	4603      	mov	r3, r0
 8005926:	68f8      	ldr	r0, [r7, #12]
 8005928:	f000 fad4 	bl	8005ed4 <I2C_RequestMemoryRead>
 800592c:	4603      	mov	r3, r0
 800592e:	2b00      	cmp	r3, #0
 8005930:	d001      	beq.n	8005936 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005932:	2301      	movs	r3, #1
 8005934:	e1b0      	b.n	8005c98 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800593a:	2b00      	cmp	r3, #0
 800593c:	d113      	bne.n	8005966 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800593e:	2300      	movs	r3, #0
 8005940:	623b      	str	r3, [r7, #32]
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	695b      	ldr	r3, [r3, #20]
 8005948:	623b      	str	r3, [r7, #32]
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	699b      	ldr	r3, [r3, #24]
 8005950:	623b      	str	r3, [r7, #32]
 8005952:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	681a      	ldr	r2, [r3, #0]
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005962:	601a      	str	r2, [r3, #0]
 8005964:	e184      	b.n	8005c70 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800596a:	2b01      	cmp	r3, #1
 800596c:	d11b      	bne.n	80059a6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	681a      	ldr	r2, [r3, #0]
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800597c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800597e:	2300      	movs	r3, #0
 8005980:	61fb      	str	r3, [r7, #28]
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	695b      	ldr	r3, [r3, #20]
 8005988:	61fb      	str	r3, [r7, #28]
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	699b      	ldr	r3, [r3, #24]
 8005990:	61fb      	str	r3, [r7, #28]
 8005992:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	681a      	ldr	r2, [r3, #0]
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059a2:	601a      	str	r2, [r3, #0]
 80059a4:	e164      	b.n	8005c70 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059aa:	2b02      	cmp	r3, #2
 80059ac:	d11b      	bne.n	80059e6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	681a      	ldr	r2, [r3, #0]
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059bc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	681a      	ldr	r2, [r3, #0]
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80059cc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80059ce:	2300      	movs	r3, #0
 80059d0:	61bb      	str	r3, [r7, #24]
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	695b      	ldr	r3, [r3, #20]
 80059d8:	61bb      	str	r3, [r7, #24]
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	699b      	ldr	r3, [r3, #24]
 80059e0:	61bb      	str	r3, [r7, #24]
 80059e2:	69bb      	ldr	r3, [r7, #24]
 80059e4:	e144      	b.n	8005c70 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80059e6:	2300      	movs	r3, #0
 80059e8:	617b      	str	r3, [r7, #20]
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	695b      	ldr	r3, [r3, #20]
 80059f0:	617b      	str	r3, [r7, #20]
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	699b      	ldr	r3, [r3, #24]
 80059f8:	617b      	str	r3, [r7, #20]
 80059fa:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80059fc:	e138      	b.n	8005c70 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a02:	2b03      	cmp	r3, #3
 8005a04:	f200 80f1 	bhi.w	8005bea <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a0c:	2b01      	cmp	r3, #1
 8005a0e:	d123      	bne.n	8005a58 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005a10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a12:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005a14:	68f8      	ldr	r0, [r7, #12]
 8005a16:	f000 fc9d 	bl	8006354 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005a1a:	4603      	mov	r3, r0
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d001      	beq.n	8005a24 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005a20:	2301      	movs	r3, #1
 8005a22:	e139      	b.n	8005c98 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	691a      	ldr	r2, [r3, #16]
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a2e:	b2d2      	uxtb	r2, r2
 8005a30:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a36:	1c5a      	adds	r2, r3, #1
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a40:	3b01      	subs	r3, #1
 8005a42:	b29a      	uxth	r2, r3
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a4c:	b29b      	uxth	r3, r3
 8005a4e:	3b01      	subs	r3, #1
 8005a50:	b29a      	uxth	r2, r3
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005a56:	e10b      	b.n	8005c70 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a5c:	2b02      	cmp	r3, #2
 8005a5e:	d14e      	bne.n	8005afe <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a62:	9300      	str	r3, [sp, #0]
 8005a64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a66:	2200      	movs	r2, #0
 8005a68:	4906      	ldr	r1, [pc, #24]	; (8005a84 <HAL_I2C_Mem_Read+0x22c>)
 8005a6a:	68f8      	ldr	r0, [r7, #12]
 8005a6c:	f000 fb1a 	bl	80060a4 <I2C_WaitOnFlagUntilTimeout>
 8005a70:	4603      	mov	r3, r0
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d008      	beq.n	8005a88 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005a76:	2301      	movs	r3, #1
 8005a78:	e10e      	b.n	8005c98 <HAL_I2C_Mem_Read+0x440>
 8005a7a:	bf00      	nop
 8005a7c:	00100002 	.word	0x00100002
 8005a80:	ffff0000 	.word	0xffff0000
 8005a84:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	681a      	ldr	r2, [r3, #0]
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a96:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	691a      	ldr	r2, [r3, #16]
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aa2:	b2d2      	uxtb	r2, r2
 8005aa4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aaa:	1c5a      	adds	r2, r3, #1
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ab4:	3b01      	subs	r3, #1
 8005ab6:	b29a      	uxth	r2, r3
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ac0:	b29b      	uxth	r3, r3
 8005ac2:	3b01      	subs	r3, #1
 8005ac4:	b29a      	uxth	r2, r3
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	691a      	ldr	r2, [r3, #16]
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ad4:	b2d2      	uxtb	r2, r2
 8005ad6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005adc:	1c5a      	adds	r2, r3, #1
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ae6:	3b01      	subs	r3, #1
 8005ae8:	b29a      	uxth	r2, r3
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005af2:	b29b      	uxth	r3, r3
 8005af4:	3b01      	subs	r3, #1
 8005af6:	b29a      	uxth	r2, r3
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005afc:	e0b8      	b.n	8005c70 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b00:	9300      	str	r3, [sp, #0]
 8005b02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b04:	2200      	movs	r2, #0
 8005b06:	4966      	ldr	r1, [pc, #408]	; (8005ca0 <HAL_I2C_Mem_Read+0x448>)
 8005b08:	68f8      	ldr	r0, [r7, #12]
 8005b0a:	f000 facb 	bl	80060a4 <I2C_WaitOnFlagUntilTimeout>
 8005b0e:	4603      	mov	r3, r0
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d001      	beq.n	8005b18 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005b14:	2301      	movs	r3, #1
 8005b16:	e0bf      	b.n	8005c98 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	681a      	ldr	r2, [r3, #0]
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b26:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	691a      	ldr	r2, [r3, #16]
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b32:	b2d2      	uxtb	r2, r2
 8005b34:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b3a:	1c5a      	adds	r2, r3, #1
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b44:	3b01      	subs	r3, #1
 8005b46:	b29a      	uxth	r2, r3
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b50:	b29b      	uxth	r3, r3
 8005b52:	3b01      	subs	r3, #1
 8005b54:	b29a      	uxth	r2, r3
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b5c:	9300      	str	r3, [sp, #0]
 8005b5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b60:	2200      	movs	r2, #0
 8005b62:	494f      	ldr	r1, [pc, #316]	; (8005ca0 <HAL_I2C_Mem_Read+0x448>)
 8005b64:	68f8      	ldr	r0, [r7, #12]
 8005b66:	f000 fa9d 	bl	80060a4 <I2C_WaitOnFlagUntilTimeout>
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d001      	beq.n	8005b74 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005b70:	2301      	movs	r3, #1
 8005b72:	e091      	b.n	8005c98 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	681a      	ldr	r2, [r3, #0]
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b82:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	691a      	ldr	r2, [r3, #16]
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b8e:	b2d2      	uxtb	r2, r2
 8005b90:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b96:	1c5a      	adds	r2, r3, #1
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ba0:	3b01      	subs	r3, #1
 8005ba2:	b29a      	uxth	r2, r3
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bac:	b29b      	uxth	r3, r3
 8005bae:	3b01      	subs	r3, #1
 8005bb0:	b29a      	uxth	r2, r3
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	691a      	ldr	r2, [r3, #16]
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bc0:	b2d2      	uxtb	r2, r2
 8005bc2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bc8:	1c5a      	adds	r2, r3, #1
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bd2:	3b01      	subs	r3, #1
 8005bd4:	b29a      	uxth	r2, r3
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bde:	b29b      	uxth	r3, r3
 8005be0:	3b01      	subs	r3, #1
 8005be2:	b29a      	uxth	r2, r3
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005be8:	e042      	b.n	8005c70 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005bea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bec:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005bee:	68f8      	ldr	r0, [r7, #12]
 8005bf0:	f000 fbb0 	bl	8006354 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005bf4:	4603      	mov	r3, r0
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d001      	beq.n	8005bfe <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	e04c      	b.n	8005c98 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	691a      	ldr	r2, [r3, #16]
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c08:	b2d2      	uxtb	r2, r2
 8005c0a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c10:	1c5a      	adds	r2, r3, #1
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c1a:	3b01      	subs	r3, #1
 8005c1c:	b29a      	uxth	r2, r3
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c26:	b29b      	uxth	r3, r3
 8005c28:	3b01      	subs	r3, #1
 8005c2a:	b29a      	uxth	r2, r3
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	695b      	ldr	r3, [r3, #20]
 8005c36:	f003 0304 	and.w	r3, r3, #4
 8005c3a:	2b04      	cmp	r3, #4
 8005c3c:	d118      	bne.n	8005c70 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	691a      	ldr	r2, [r3, #16]
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c48:	b2d2      	uxtb	r2, r2
 8005c4a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c50:	1c5a      	adds	r2, r3, #1
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c5a:	3b01      	subs	r3, #1
 8005c5c:	b29a      	uxth	r2, r3
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c66:	b29b      	uxth	r3, r3
 8005c68:	3b01      	subs	r3, #1
 8005c6a:	b29a      	uxth	r2, r3
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	f47f aec2 	bne.w	80059fe <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	2220      	movs	r2, #32
 8005c7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	2200      	movs	r2, #0
 8005c86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005c92:	2300      	movs	r3, #0
 8005c94:	e000      	b.n	8005c98 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005c96:	2302      	movs	r3, #2
  }
}
 8005c98:	4618      	mov	r0, r3
 8005c9a:	3728      	adds	r7, #40	; 0x28
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	bd80      	pop	{r7, pc}
 8005ca0:	00010004 	.word	0x00010004

08005ca4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b088      	sub	sp, #32
 8005ca8:	af02      	add	r7, sp, #8
 8005caa:	60f8      	str	r0, [r7, #12]
 8005cac:	607a      	str	r2, [r7, #4]
 8005cae:	603b      	str	r3, [r7, #0]
 8005cb0:	460b      	mov	r3, r1
 8005cb2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cb8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005cba:	697b      	ldr	r3, [r7, #20]
 8005cbc:	2b08      	cmp	r3, #8
 8005cbe:	d006      	beq.n	8005cce <I2C_MasterRequestWrite+0x2a>
 8005cc0:	697b      	ldr	r3, [r7, #20]
 8005cc2:	2b01      	cmp	r3, #1
 8005cc4:	d003      	beq.n	8005cce <I2C_MasterRequestWrite+0x2a>
 8005cc6:	697b      	ldr	r3, [r7, #20]
 8005cc8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005ccc:	d108      	bne.n	8005ce0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	681a      	ldr	r2, [r3, #0]
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005cdc:	601a      	str	r2, [r3, #0]
 8005cde:	e00b      	b.n	8005cf8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ce4:	2b12      	cmp	r3, #18
 8005ce6:	d107      	bne.n	8005cf8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	681a      	ldr	r2, [r3, #0]
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005cf6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	9300      	str	r3, [sp, #0]
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2200      	movs	r2, #0
 8005d00:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005d04:	68f8      	ldr	r0, [r7, #12]
 8005d06:	f000 f9cd 	bl	80060a4 <I2C_WaitOnFlagUntilTimeout>
 8005d0a:	4603      	mov	r3, r0
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d00d      	beq.n	8005d2c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d1e:	d103      	bne.n	8005d28 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d26:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005d28:	2303      	movs	r3, #3
 8005d2a:	e035      	b.n	8005d98 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	691b      	ldr	r3, [r3, #16]
 8005d30:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005d34:	d108      	bne.n	8005d48 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005d36:	897b      	ldrh	r3, [r7, #10]
 8005d38:	b2db      	uxtb	r3, r3
 8005d3a:	461a      	mov	r2, r3
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005d44:	611a      	str	r2, [r3, #16]
 8005d46:	e01b      	b.n	8005d80 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005d48:	897b      	ldrh	r3, [r7, #10]
 8005d4a:	11db      	asrs	r3, r3, #7
 8005d4c:	b2db      	uxtb	r3, r3
 8005d4e:	f003 0306 	and.w	r3, r3, #6
 8005d52:	b2db      	uxtb	r3, r3
 8005d54:	f063 030f 	orn	r3, r3, #15
 8005d58:	b2da      	uxtb	r2, r3
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	687a      	ldr	r2, [r7, #4]
 8005d64:	490e      	ldr	r1, [pc, #56]	; (8005da0 <I2C_MasterRequestWrite+0xfc>)
 8005d66:	68f8      	ldr	r0, [r7, #12]
 8005d68:	f000 f9f3 	bl	8006152 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005d6c:	4603      	mov	r3, r0
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d001      	beq.n	8005d76 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005d72:	2301      	movs	r3, #1
 8005d74:	e010      	b.n	8005d98 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005d76:	897b      	ldrh	r3, [r7, #10]
 8005d78:	b2da      	uxtb	r2, r3
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	687a      	ldr	r2, [r7, #4]
 8005d84:	4907      	ldr	r1, [pc, #28]	; (8005da4 <I2C_MasterRequestWrite+0x100>)
 8005d86:	68f8      	ldr	r0, [r7, #12]
 8005d88:	f000 f9e3 	bl	8006152 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005d8c:	4603      	mov	r3, r0
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d001      	beq.n	8005d96 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005d92:	2301      	movs	r3, #1
 8005d94:	e000      	b.n	8005d98 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005d96:	2300      	movs	r3, #0
}
 8005d98:	4618      	mov	r0, r3
 8005d9a:	3718      	adds	r7, #24
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	bd80      	pop	{r7, pc}
 8005da0:	00010008 	.word	0x00010008
 8005da4:	00010002 	.word	0x00010002

08005da8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b088      	sub	sp, #32
 8005dac:	af02      	add	r7, sp, #8
 8005dae:	60f8      	str	r0, [r7, #12]
 8005db0:	4608      	mov	r0, r1
 8005db2:	4611      	mov	r1, r2
 8005db4:	461a      	mov	r2, r3
 8005db6:	4603      	mov	r3, r0
 8005db8:	817b      	strh	r3, [r7, #10]
 8005dba:	460b      	mov	r3, r1
 8005dbc:	813b      	strh	r3, [r7, #8]
 8005dbe:	4613      	mov	r3, r2
 8005dc0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	681a      	ldr	r2, [r3, #0]
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005dd0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dd4:	9300      	str	r3, [sp, #0]
 8005dd6:	6a3b      	ldr	r3, [r7, #32]
 8005dd8:	2200      	movs	r2, #0
 8005dda:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005dde:	68f8      	ldr	r0, [r7, #12]
 8005de0:	f000 f960 	bl	80060a4 <I2C_WaitOnFlagUntilTimeout>
 8005de4:	4603      	mov	r3, r0
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d00d      	beq.n	8005e06 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005df4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005df8:	d103      	bne.n	8005e02 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e00:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005e02:	2303      	movs	r3, #3
 8005e04:	e05f      	b.n	8005ec6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005e06:	897b      	ldrh	r3, [r7, #10]
 8005e08:	b2db      	uxtb	r3, r3
 8005e0a:	461a      	mov	r2, r3
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005e14:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e18:	6a3a      	ldr	r2, [r7, #32]
 8005e1a:	492d      	ldr	r1, [pc, #180]	; (8005ed0 <I2C_RequestMemoryWrite+0x128>)
 8005e1c:	68f8      	ldr	r0, [r7, #12]
 8005e1e:	f000 f998 	bl	8006152 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005e22:	4603      	mov	r3, r0
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d001      	beq.n	8005e2c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005e28:	2301      	movs	r3, #1
 8005e2a:	e04c      	b.n	8005ec6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	617b      	str	r3, [r7, #20]
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	695b      	ldr	r3, [r3, #20]
 8005e36:	617b      	str	r3, [r7, #20]
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	699b      	ldr	r3, [r3, #24]
 8005e3e:	617b      	str	r3, [r7, #20]
 8005e40:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e44:	6a39      	ldr	r1, [r7, #32]
 8005e46:	68f8      	ldr	r0, [r7, #12]
 8005e48:	f000 fa02 	bl	8006250 <I2C_WaitOnTXEFlagUntilTimeout>
 8005e4c:	4603      	mov	r3, r0
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d00d      	beq.n	8005e6e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e56:	2b04      	cmp	r3, #4
 8005e58:	d107      	bne.n	8005e6a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	681a      	ldr	r2, [r3, #0]
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e68:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	e02b      	b.n	8005ec6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005e6e:	88fb      	ldrh	r3, [r7, #6]
 8005e70:	2b01      	cmp	r3, #1
 8005e72:	d105      	bne.n	8005e80 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005e74:	893b      	ldrh	r3, [r7, #8]
 8005e76:	b2da      	uxtb	r2, r3
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	611a      	str	r2, [r3, #16]
 8005e7e:	e021      	b.n	8005ec4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005e80:	893b      	ldrh	r3, [r7, #8]
 8005e82:	0a1b      	lsrs	r3, r3, #8
 8005e84:	b29b      	uxth	r3, r3
 8005e86:	b2da      	uxtb	r2, r3
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e90:	6a39      	ldr	r1, [r7, #32]
 8005e92:	68f8      	ldr	r0, [r7, #12]
 8005e94:	f000 f9dc 	bl	8006250 <I2C_WaitOnTXEFlagUntilTimeout>
 8005e98:	4603      	mov	r3, r0
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d00d      	beq.n	8005eba <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ea2:	2b04      	cmp	r3, #4
 8005ea4:	d107      	bne.n	8005eb6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	681a      	ldr	r2, [r3, #0]
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005eb4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	e005      	b.n	8005ec6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005eba:	893b      	ldrh	r3, [r7, #8]
 8005ebc:	b2da      	uxtb	r2, r3
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005ec4:	2300      	movs	r3, #0
}
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	3718      	adds	r7, #24
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	bd80      	pop	{r7, pc}
 8005ece:	bf00      	nop
 8005ed0:	00010002 	.word	0x00010002

08005ed4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b088      	sub	sp, #32
 8005ed8:	af02      	add	r7, sp, #8
 8005eda:	60f8      	str	r0, [r7, #12]
 8005edc:	4608      	mov	r0, r1
 8005ede:	4611      	mov	r1, r2
 8005ee0:	461a      	mov	r2, r3
 8005ee2:	4603      	mov	r3, r0
 8005ee4:	817b      	strh	r3, [r7, #10]
 8005ee6:	460b      	mov	r3, r1
 8005ee8:	813b      	strh	r3, [r7, #8]
 8005eea:	4613      	mov	r3, r2
 8005eec:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	681a      	ldr	r2, [r3, #0]
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005efc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	681a      	ldr	r2, [r3, #0]
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f0c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f10:	9300      	str	r3, [sp, #0]
 8005f12:	6a3b      	ldr	r3, [r7, #32]
 8005f14:	2200      	movs	r2, #0
 8005f16:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005f1a:	68f8      	ldr	r0, [r7, #12]
 8005f1c:	f000 f8c2 	bl	80060a4 <I2C_WaitOnFlagUntilTimeout>
 8005f20:	4603      	mov	r3, r0
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d00d      	beq.n	8005f42 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f34:	d103      	bne.n	8005f3e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f3c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005f3e:	2303      	movs	r3, #3
 8005f40:	e0aa      	b.n	8006098 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005f42:	897b      	ldrh	r3, [r7, #10]
 8005f44:	b2db      	uxtb	r3, r3
 8005f46:	461a      	mov	r2, r3
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005f50:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f54:	6a3a      	ldr	r2, [r7, #32]
 8005f56:	4952      	ldr	r1, [pc, #328]	; (80060a0 <I2C_RequestMemoryRead+0x1cc>)
 8005f58:	68f8      	ldr	r0, [r7, #12]
 8005f5a:	f000 f8fa 	bl	8006152 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005f5e:	4603      	mov	r3, r0
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d001      	beq.n	8005f68 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005f64:	2301      	movs	r3, #1
 8005f66:	e097      	b.n	8006098 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f68:	2300      	movs	r3, #0
 8005f6a:	617b      	str	r3, [r7, #20]
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	695b      	ldr	r3, [r3, #20]
 8005f72:	617b      	str	r3, [r7, #20]
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	699b      	ldr	r3, [r3, #24]
 8005f7a:	617b      	str	r3, [r7, #20]
 8005f7c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f80:	6a39      	ldr	r1, [r7, #32]
 8005f82:	68f8      	ldr	r0, [r7, #12]
 8005f84:	f000 f964 	bl	8006250 <I2C_WaitOnTXEFlagUntilTimeout>
 8005f88:	4603      	mov	r3, r0
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d00d      	beq.n	8005faa <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f92:	2b04      	cmp	r3, #4
 8005f94:	d107      	bne.n	8005fa6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	681a      	ldr	r2, [r3, #0]
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005fa4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	e076      	b.n	8006098 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005faa:	88fb      	ldrh	r3, [r7, #6]
 8005fac:	2b01      	cmp	r3, #1
 8005fae:	d105      	bne.n	8005fbc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005fb0:	893b      	ldrh	r3, [r7, #8]
 8005fb2:	b2da      	uxtb	r2, r3
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	611a      	str	r2, [r3, #16]
 8005fba:	e021      	b.n	8006000 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005fbc:	893b      	ldrh	r3, [r7, #8]
 8005fbe:	0a1b      	lsrs	r3, r3, #8
 8005fc0:	b29b      	uxth	r3, r3
 8005fc2:	b2da      	uxtb	r2, r3
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005fca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fcc:	6a39      	ldr	r1, [r7, #32]
 8005fce:	68f8      	ldr	r0, [r7, #12]
 8005fd0:	f000 f93e 	bl	8006250 <I2C_WaitOnTXEFlagUntilTimeout>
 8005fd4:	4603      	mov	r3, r0
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d00d      	beq.n	8005ff6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fde:	2b04      	cmp	r3, #4
 8005fe0:	d107      	bne.n	8005ff2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	681a      	ldr	r2, [r3, #0]
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ff0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	e050      	b.n	8006098 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005ff6:	893b      	ldrh	r3, [r7, #8]
 8005ff8:	b2da      	uxtb	r2, r3
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006000:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006002:	6a39      	ldr	r1, [r7, #32]
 8006004:	68f8      	ldr	r0, [r7, #12]
 8006006:	f000 f923 	bl	8006250 <I2C_WaitOnTXEFlagUntilTimeout>
 800600a:	4603      	mov	r3, r0
 800600c:	2b00      	cmp	r3, #0
 800600e:	d00d      	beq.n	800602c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006014:	2b04      	cmp	r3, #4
 8006016:	d107      	bne.n	8006028 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	681a      	ldr	r2, [r3, #0]
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006026:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006028:	2301      	movs	r3, #1
 800602a:	e035      	b.n	8006098 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	681a      	ldr	r2, [r3, #0]
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800603a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800603c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800603e:	9300      	str	r3, [sp, #0]
 8006040:	6a3b      	ldr	r3, [r7, #32]
 8006042:	2200      	movs	r2, #0
 8006044:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006048:	68f8      	ldr	r0, [r7, #12]
 800604a:	f000 f82b 	bl	80060a4 <I2C_WaitOnFlagUntilTimeout>
 800604e:	4603      	mov	r3, r0
 8006050:	2b00      	cmp	r3, #0
 8006052:	d00d      	beq.n	8006070 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800605e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006062:	d103      	bne.n	800606c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	f44f 7200 	mov.w	r2, #512	; 0x200
 800606a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800606c:	2303      	movs	r3, #3
 800606e:	e013      	b.n	8006098 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006070:	897b      	ldrh	r3, [r7, #10]
 8006072:	b2db      	uxtb	r3, r3
 8006074:	f043 0301 	orr.w	r3, r3, #1
 8006078:	b2da      	uxtb	r2, r3
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006082:	6a3a      	ldr	r2, [r7, #32]
 8006084:	4906      	ldr	r1, [pc, #24]	; (80060a0 <I2C_RequestMemoryRead+0x1cc>)
 8006086:	68f8      	ldr	r0, [r7, #12]
 8006088:	f000 f863 	bl	8006152 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800608c:	4603      	mov	r3, r0
 800608e:	2b00      	cmp	r3, #0
 8006090:	d001      	beq.n	8006096 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006092:	2301      	movs	r3, #1
 8006094:	e000      	b.n	8006098 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006096:	2300      	movs	r3, #0
}
 8006098:	4618      	mov	r0, r3
 800609a:	3718      	adds	r7, #24
 800609c:	46bd      	mov	sp, r7
 800609e:	bd80      	pop	{r7, pc}
 80060a0:	00010002 	.word	0x00010002

080060a4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b084      	sub	sp, #16
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	60f8      	str	r0, [r7, #12]
 80060ac:	60b9      	str	r1, [r7, #8]
 80060ae:	603b      	str	r3, [r7, #0]
 80060b0:	4613      	mov	r3, r2
 80060b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80060b4:	e025      	b.n	8006102 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80060bc:	d021      	beq.n	8006102 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060be:	f7fc fc1d 	bl	80028fc <HAL_GetTick>
 80060c2:	4602      	mov	r2, r0
 80060c4:	69bb      	ldr	r3, [r7, #24]
 80060c6:	1ad3      	subs	r3, r2, r3
 80060c8:	683a      	ldr	r2, [r7, #0]
 80060ca:	429a      	cmp	r2, r3
 80060cc:	d302      	bcc.n	80060d4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d116      	bne.n	8006102 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	2200      	movs	r2, #0
 80060d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	2220      	movs	r2, #32
 80060de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	2200      	movs	r2, #0
 80060e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ee:	f043 0220 	orr.w	r2, r3, #32
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	2200      	movs	r2, #0
 80060fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80060fe:	2301      	movs	r3, #1
 8006100:	e023      	b.n	800614a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	0c1b      	lsrs	r3, r3, #16
 8006106:	b2db      	uxtb	r3, r3
 8006108:	2b01      	cmp	r3, #1
 800610a:	d10d      	bne.n	8006128 <I2C_WaitOnFlagUntilTimeout+0x84>
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	695b      	ldr	r3, [r3, #20]
 8006112:	43da      	mvns	r2, r3
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	4013      	ands	r3, r2
 8006118:	b29b      	uxth	r3, r3
 800611a:	2b00      	cmp	r3, #0
 800611c:	bf0c      	ite	eq
 800611e:	2301      	moveq	r3, #1
 8006120:	2300      	movne	r3, #0
 8006122:	b2db      	uxtb	r3, r3
 8006124:	461a      	mov	r2, r3
 8006126:	e00c      	b.n	8006142 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	699b      	ldr	r3, [r3, #24]
 800612e:	43da      	mvns	r2, r3
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	4013      	ands	r3, r2
 8006134:	b29b      	uxth	r3, r3
 8006136:	2b00      	cmp	r3, #0
 8006138:	bf0c      	ite	eq
 800613a:	2301      	moveq	r3, #1
 800613c:	2300      	movne	r3, #0
 800613e:	b2db      	uxtb	r3, r3
 8006140:	461a      	mov	r2, r3
 8006142:	79fb      	ldrb	r3, [r7, #7]
 8006144:	429a      	cmp	r2, r3
 8006146:	d0b6      	beq.n	80060b6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006148:	2300      	movs	r3, #0
}
 800614a:	4618      	mov	r0, r3
 800614c:	3710      	adds	r7, #16
 800614e:	46bd      	mov	sp, r7
 8006150:	bd80      	pop	{r7, pc}

08006152 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006152:	b580      	push	{r7, lr}
 8006154:	b084      	sub	sp, #16
 8006156:	af00      	add	r7, sp, #0
 8006158:	60f8      	str	r0, [r7, #12]
 800615a:	60b9      	str	r1, [r7, #8]
 800615c:	607a      	str	r2, [r7, #4]
 800615e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006160:	e051      	b.n	8006206 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	695b      	ldr	r3, [r3, #20]
 8006168:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800616c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006170:	d123      	bne.n	80061ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	681a      	ldr	r2, [r3, #0]
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006180:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800618a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	2200      	movs	r2, #0
 8006190:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	2220      	movs	r2, #32
 8006196:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	2200      	movs	r2, #0
 800619e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061a6:	f043 0204 	orr.w	r2, r3, #4
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	2200      	movs	r2, #0
 80061b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80061b6:	2301      	movs	r3, #1
 80061b8:	e046      	b.n	8006248 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80061c0:	d021      	beq.n	8006206 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061c2:	f7fc fb9b 	bl	80028fc <HAL_GetTick>
 80061c6:	4602      	mov	r2, r0
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	1ad3      	subs	r3, r2, r3
 80061cc:	687a      	ldr	r2, [r7, #4]
 80061ce:	429a      	cmp	r2, r3
 80061d0:	d302      	bcc.n	80061d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d116      	bne.n	8006206 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	2200      	movs	r2, #0
 80061dc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	2220      	movs	r2, #32
 80061e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	2200      	movs	r2, #0
 80061ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061f2:	f043 0220 	orr.w	r2, r3, #32
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	2200      	movs	r2, #0
 80061fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006202:	2301      	movs	r3, #1
 8006204:	e020      	b.n	8006248 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006206:	68bb      	ldr	r3, [r7, #8]
 8006208:	0c1b      	lsrs	r3, r3, #16
 800620a:	b2db      	uxtb	r3, r3
 800620c:	2b01      	cmp	r3, #1
 800620e:	d10c      	bne.n	800622a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	695b      	ldr	r3, [r3, #20]
 8006216:	43da      	mvns	r2, r3
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	4013      	ands	r3, r2
 800621c:	b29b      	uxth	r3, r3
 800621e:	2b00      	cmp	r3, #0
 8006220:	bf14      	ite	ne
 8006222:	2301      	movne	r3, #1
 8006224:	2300      	moveq	r3, #0
 8006226:	b2db      	uxtb	r3, r3
 8006228:	e00b      	b.n	8006242 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	699b      	ldr	r3, [r3, #24]
 8006230:	43da      	mvns	r2, r3
 8006232:	68bb      	ldr	r3, [r7, #8]
 8006234:	4013      	ands	r3, r2
 8006236:	b29b      	uxth	r3, r3
 8006238:	2b00      	cmp	r3, #0
 800623a:	bf14      	ite	ne
 800623c:	2301      	movne	r3, #1
 800623e:	2300      	moveq	r3, #0
 8006240:	b2db      	uxtb	r3, r3
 8006242:	2b00      	cmp	r3, #0
 8006244:	d18d      	bne.n	8006162 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006246:	2300      	movs	r3, #0
}
 8006248:	4618      	mov	r0, r3
 800624a:	3710      	adds	r7, #16
 800624c:	46bd      	mov	sp, r7
 800624e:	bd80      	pop	{r7, pc}

08006250 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b084      	sub	sp, #16
 8006254:	af00      	add	r7, sp, #0
 8006256:	60f8      	str	r0, [r7, #12]
 8006258:	60b9      	str	r1, [r7, #8]
 800625a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800625c:	e02d      	b.n	80062ba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800625e:	68f8      	ldr	r0, [r7, #12]
 8006260:	f000 f8ce 	bl	8006400 <I2C_IsAcknowledgeFailed>
 8006264:	4603      	mov	r3, r0
 8006266:	2b00      	cmp	r3, #0
 8006268:	d001      	beq.n	800626e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800626a:	2301      	movs	r3, #1
 800626c:	e02d      	b.n	80062ca <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006274:	d021      	beq.n	80062ba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006276:	f7fc fb41 	bl	80028fc <HAL_GetTick>
 800627a:	4602      	mov	r2, r0
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	1ad3      	subs	r3, r2, r3
 8006280:	68ba      	ldr	r2, [r7, #8]
 8006282:	429a      	cmp	r2, r3
 8006284:	d302      	bcc.n	800628c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006286:	68bb      	ldr	r3, [r7, #8]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d116      	bne.n	80062ba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	2200      	movs	r2, #0
 8006290:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	2220      	movs	r2, #32
 8006296:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	2200      	movs	r2, #0
 800629e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062a6:	f043 0220 	orr.w	r2, r3, #32
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	2200      	movs	r2, #0
 80062b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80062b6:	2301      	movs	r3, #1
 80062b8:	e007      	b.n	80062ca <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	695b      	ldr	r3, [r3, #20]
 80062c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062c4:	2b80      	cmp	r3, #128	; 0x80
 80062c6:	d1ca      	bne.n	800625e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80062c8:	2300      	movs	r3, #0
}
 80062ca:	4618      	mov	r0, r3
 80062cc:	3710      	adds	r7, #16
 80062ce:	46bd      	mov	sp, r7
 80062d0:	bd80      	pop	{r7, pc}

080062d2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80062d2:	b580      	push	{r7, lr}
 80062d4:	b084      	sub	sp, #16
 80062d6:	af00      	add	r7, sp, #0
 80062d8:	60f8      	str	r0, [r7, #12]
 80062da:	60b9      	str	r1, [r7, #8]
 80062dc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80062de:	e02d      	b.n	800633c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80062e0:	68f8      	ldr	r0, [r7, #12]
 80062e2:	f000 f88d 	bl	8006400 <I2C_IsAcknowledgeFailed>
 80062e6:	4603      	mov	r3, r0
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d001      	beq.n	80062f0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80062ec:	2301      	movs	r3, #1
 80062ee:	e02d      	b.n	800634c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062f0:	68bb      	ldr	r3, [r7, #8]
 80062f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80062f6:	d021      	beq.n	800633c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062f8:	f7fc fb00 	bl	80028fc <HAL_GetTick>
 80062fc:	4602      	mov	r2, r0
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	1ad3      	subs	r3, r2, r3
 8006302:	68ba      	ldr	r2, [r7, #8]
 8006304:	429a      	cmp	r2, r3
 8006306:	d302      	bcc.n	800630e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d116      	bne.n	800633c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	2200      	movs	r2, #0
 8006312:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	2220      	movs	r2, #32
 8006318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	2200      	movs	r2, #0
 8006320:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006328:	f043 0220 	orr.w	r2, r3, #32
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	2200      	movs	r2, #0
 8006334:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006338:	2301      	movs	r3, #1
 800633a:	e007      	b.n	800634c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	695b      	ldr	r3, [r3, #20]
 8006342:	f003 0304 	and.w	r3, r3, #4
 8006346:	2b04      	cmp	r3, #4
 8006348:	d1ca      	bne.n	80062e0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800634a:	2300      	movs	r3, #0
}
 800634c:	4618      	mov	r0, r3
 800634e:	3710      	adds	r7, #16
 8006350:	46bd      	mov	sp, r7
 8006352:	bd80      	pop	{r7, pc}

08006354 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b084      	sub	sp, #16
 8006358:	af00      	add	r7, sp, #0
 800635a:	60f8      	str	r0, [r7, #12]
 800635c:	60b9      	str	r1, [r7, #8]
 800635e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006360:	e042      	b.n	80063e8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	695b      	ldr	r3, [r3, #20]
 8006368:	f003 0310 	and.w	r3, r3, #16
 800636c:	2b10      	cmp	r3, #16
 800636e:	d119      	bne.n	80063a4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f06f 0210 	mvn.w	r2, #16
 8006378:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	2200      	movs	r2, #0
 800637e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	2220      	movs	r2, #32
 8006384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	2200      	movs	r2, #0
 800638c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	2200      	movs	r2, #0
 800639c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80063a0:	2301      	movs	r3, #1
 80063a2:	e029      	b.n	80063f8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063a4:	f7fc faaa 	bl	80028fc <HAL_GetTick>
 80063a8:	4602      	mov	r2, r0
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	1ad3      	subs	r3, r2, r3
 80063ae:	68ba      	ldr	r2, [r7, #8]
 80063b0:	429a      	cmp	r2, r3
 80063b2:	d302      	bcc.n	80063ba <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d116      	bne.n	80063e8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	2200      	movs	r2, #0
 80063be:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	2220      	movs	r2, #32
 80063c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	2200      	movs	r2, #0
 80063cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063d4:	f043 0220 	orr.w	r2, r3, #32
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	2200      	movs	r2, #0
 80063e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80063e4:	2301      	movs	r3, #1
 80063e6:	e007      	b.n	80063f8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	695b      	ldr	r3, [r3, #20]
 80063ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063f2:	2b40      	cmp	r3, #64	; 0x40
 80063f4:	d1b5      	bne.n	8006362 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80063f6:	2300      	movs	r3, #0
}
 80063f8:	4618      	mov	r0, r3
 80063fa:	3710      	adds	r7, #16
 80063fc:	46bd      	mov	sp, r7
 80063fe:	bd80      	pop	{r7, pc}

08006400 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006400:	b480      	push	{r7}
 8006402:	b083      	sub	sp, #12
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	695b      	ldr	r3, [r3, #20]
 800640e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006412:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006416:	d11b      	bne.n	8006450 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006420:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2200      	movs	r2, #0
 8006426:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2220      	movs	r2, #32
 800642c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2200      	movs	r2, #0
 8006434:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800643c:	f043 0204 	orr.w	r2, r3, #4
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2200      	movs	r2, #0
 8006448:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800644c:	2301      	movs	r3, #1
 800644e:	e000      	b.n	8006452 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006450:	2300      	movs	r3, #0
}
 8006452:	4618      	mov	r0, r3
 8006454:	370c      	adds	r7, #12
 8006456:	46bd      	mov	sp, r7
 8006458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645c:	4770      	bx	lr
	...

08006460 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b088      	sub	sp, #32
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d101      	bne.n	8006472 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800646e:	2301      	movs	r3, #1
 8006470:	e128      	b.n	80066c4 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006478:	b2db      	uxtb	r3, r3
 800647a:	2b00      	cmp	r3, #0
 800647c:	d109      	bne.n	8006492 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2200      	movs	r2, #0
 8006482:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	4a90      	ldr	r2, [pc, #576]	; (80066cc <HAL_I2S_Init+0x26c>)
 800648a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800648c:	6878      	ldr	r0, [r7, #4]
 800648e:	f7fb fb11 	bl	8001ab4 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2202      	movs	r2, #2
 8006496:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	69db      	ldr	r3, [r3, #28]
 80064a0:	687a      	ldr	r2, [r7, #4]
 80064a2:	6812      	ldr	r2, [r2, #0]
 80064a4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80064a8:	f023 030f 	bic.w	r3, r3, #15
 80064ac:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	2202      	movs	r2, #2
 80064b4:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	695b      	ldr	r3, [r3, #20]
 80064ba:	2b02      	cmp	r3, #2
 80064bc:	d060      	beq.n	8006580 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	68db      	ldr	r3, [r3, #12]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d102      	bne.n	80064cc <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80064c6:	2310      	movs	r3, #16
 80064c8:	617b      	str	r3, [r7, #20]
 80064ca:	e001      	b.n	80064d0 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80064cc:	2320      	movs	r3, #32
 80064ce:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	689b      	ldr	r3, [r3, #8]
 80064d4:	2b20      	cmp	r3, #32
 80064d6:	d802      	bhi.n	80064de <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80064d8:	697b      	ldr	r3, [r7, #20]
 80064da:	005b      	lsls	r3, r3, #1
 80064dc:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80064de:	2001      	movs	r0, #1
 80064e0:	f001 f9b4 	bl	800784c <HAL_RCCEx_GetPeriphCLKFreq>
 80064e4:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	691b      	ldr	r3, [r3, #16]
 80064ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064ee:	d125      	bne.n	800653c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	68db      	ldr	r3, [r3, #12]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d010      	beq.n	800651a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80064f8:	697b      	ldr	r3, [r7, #20]
 80064fa:	009b      	lsls	r3, r3, #2
 80064fc:	68fa      	ldr	r2, [r7, #12]
 80064fe:	fbb2 f2f3 	udiv	r2, r2, r3
 8006502:	4613      	mov	r3, r2
 8006504:	009b      	lsls	r3, r3, #2
 8006506:	4413      	add	r3, r2
 8006508:	005b      	lsls	r3, r3, #1
 800650a:	461a      	mov	r2, r3
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	695b      	ldr	r3, [r3, #20]
 8006510:	fbb2 f3f3 	udiv	r3, r2, r3
 8006514:	3305      	adds	r3, #5
 8006516:	613b      	str	r3, [r7, #16]
 8006518:	e01f      	b.n	800655a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800651a:	697b      	ldr	r3, [r7, #20]
 800651c:	00db      	lsls	r3, r3, #3
 800651e:	68fa      	ldr	r2, [r7, #12]
 8006520:	fbb2 f2f3 	udiv	r2, r2, r3
 8006524:	4613      	mov	r3, r2
 8006526:	009b      	lsls	r3, r3, #2
 8006528:	4413      	add	r3, r2
 800652a:	005b      	lsls	r3, r3, #1
 800652c:	461a      	mov	r2, r3
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	695b      	ldr	r3, [r3, #20]
 8006532:	fbb2 f3f3 	udiv	r3, r2, r3
 8006536:	3305      	adds	r3, #5
 8006538:	613b      	str	r3, [r7, #16]
 800653a:	e00e      	b.n	800655a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800653c:	68fa      	ldr	r2, [r7, #12]
 800653e:	697b      	ldr	r3, [r7, #20]
 8006540:	fbb2 f2f3 	udiv	r2, r2, r3
 8006544:	4613      	mov	r3, r2
 8006546:	009b      	lsls	r3, r3, #2
 8006548:	4413      	add	r3, r2
 800654a:	005b      	lsls	r3, r3, #1
 800654c:	461a      	mov	r2, r3
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	695b      	ldr	r3, [r3, #20]
 8006552:	fbb2 f3f3 	udiv	r3, r2, r3
 8006556:	3305      	adds	r3, #5
 8006558:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800655a:	693b      	ldr	r3, [r7, #16]
 800655c:	4a5c      	ldr	r2, [pc, #368]	; (80066d0 <HAL_I2S_Init+0x270>)
 800655e:	fba2 2303 	umull	r2, r3, r2, r3
 8006562:	08db      	lsrs	r3, r3, #3
 8006564:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8006566:	693b      	ldr	r3, [r7, #16]
 8006568:	f003 0301 	and.w	r3, r3, #1
 800656c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800656e:	693a      	ldr	r2, [r7, #16]
 8006570:	69bb      	ldr	r3, [r7, #24]
 8006572:	1ad3      	subs	r3, r2, r3
 8006574:	085b      	lsrs	r3, r3, #1
 8006576:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8006578:	69bb      	ldr	r3, [r7, #24]
 800657a:	021b      	lsls	r3, r3, #8
 800657c:	61bb      	str	r3, [r7, #24]
 800657e:	e003      	b.n	8006588 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8006580:	2302      	movs	r3, #2
 8006582:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8006584:	2300      	movs	r3, #0
 8006586:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8006588:	69fb      	ldr	r3, [r7, #28]
 800658a:	2b01      	cmp	r3, #1
 800658c:	d902      	bls.n	8006594 <HAL_I2S_Init+0x134>
 800658e:	69fb      	ldr	r3, [r7, #28]
 8006590:	2bff      	cmp	r3, #255	; 0xff
 8006592:	d907      	bls.n	80065a4 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006598:	f043 0210 	orr.w	r2, r3, #16
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80065a0:	2301      	movs	r3, #1
 80065a2:	e08f      	b.n	80066c4 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	691a      	ldr	r2, [r3, #16]
 80065a8:	69bb      	ldr	r3, [r7, #24]
 80065aa:	ea42 0103 	orr.w	r1, r2, r3
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	69fa      	ldr	r2, [r7, #28]
 80065b4:	430a      	orrs	r2, r1
 80065b6:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	69db      	ldr	r3, [r3, #28]
 80065be:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80065c2:	f023 030f 	bic.w	r3, r3, #15
 80065c6:	687a      	ldr	r2, [r7, #4]
 80065c8:	6851      	ldr	r1, [r2, #4]
 80065ca:	687a      	ldr	r2, [r7, #4]
 80065cc:	6892      	ldr	r2, [r2, #8]
 80065ce:	4311      	orrs	r1, r2
 80065d0:	687a      	ldr	r2, [r7, #4]
 80065d2:	68d2      	ldr	r2, [r2, #12]
 80065d4:	4311      	orrs	r1, r2
 80065d6:	687a      	ldr	r2, [r7, #4]
 80065d8:	6992      	ldr	r2, [r2, #24]
 80065da:	430a      	orrs	r2, r1
 80065dc:	431a      	orrs	r2, r3
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80065e6:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6a1b      	ldr	r3, [r3, #32]
 80065ec:	2b01      	cmp	r3, #1
 80065ee:	d161      	bne.n	80066b4 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	4a38      	ldr	r2, [pc, #224]	; (80066d4 <HAL_I2S_Init+0x274>)
 80065f4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	4a37      	ldr	r2, [pc, #220]	; (80066d8 <HAL_I2S_Init+0x278>)
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d101      	bne.n	8006604 <HAL_I2S_Init+0x1a4>
 8006600:	4b36      	ldr	r3, [pc, #216]	; (80066dc <HAL_I2S_Init+0x27c>)
 8006602:	e001      	b.n	8006608 <HAL_I2S_Init+0x1a8>
 8006604:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006608:	69db      	ldr	r3, [r3, #28]
 800660a:	687a      	ldr	r2, [r7, #4]
 800660c:	6812      	ldr	r2, [r2, #0]
 800660e:	4932      	ldr	r1, [pc, #200]	; (80066d8 <HAL_I2S_Init+0x278>)
 8006610:	428a      	cmp	r2, r1
 8006612:	d101      	bne.n	8006618 <HAL_I2S_Init+0x1b8>
 8006614:	4a31      	ldr	r2, [pc, #196]	; (80066dc <HAL_I2S_Init+0x27c>)
 8006616:	e001      	b.n	800661c <HAL_I2S_Init+0x1bc>
 8006618:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800661c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8006620:	f023 030f 	bic.w	r3, r3, #15
 8006624:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	4a2b      	ldr	r2, [pc, #172]	; (80066d8 <HAL_I2S_Init+0x278>)
 800662c:	4293      	cmp	r3, r2
 800662e:	d101      	bne.n	8006634 <HAL_I2S_Init+0x1d4>
 8006630:	4b2a      	ldr	r3, [pc, #168]	; (80066dc <HAL_I2S_Init+0x27c>)
 8006632:	e001      	b.n	8006638 <HAL_I2S_Init+0x1d8>
 8006634:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006638:	2202      	movs	r2, #2
 800663a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	4a25      	ldr	r2, [pc, #148]	; (80066d8 <HAL_I2S_Init+0x278>)
 8006642:	4293      	cmp	r3, r2
 8006644:	d101      	bne.n	800664a <HAL_I2S_Init+0x1ea>
 8006646:	4b25      	ldr	r3, [pc, #148]	; (80066dc <HAL_I2S_Init+0x27c>)
 8006648:	e001      	b.n	800664e <HAL_I2S_Init+0x1ee>
 800664a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800664e:	69db      	ldr	r3, [r3, #28]
 8006650:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	685b      	ldr	r3, [r3, #4]
 8006656:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800665a:	d003      	beq.n	8006664 <HAL_I2S_Init+0x204>
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	685b      	ldr	r3, [r3, #4]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d103      	bne.n	800666c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8006664:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006668:	613b      	str	r3, [r7, #16]
 800666a:	e001      	b.n	8006670 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 800666c:	2300      	movs	r3, #0
 800666e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8006670:	693b      	ldr	r3, [r7, #16]
 8006672:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	689b      	ldr	r3, [r3, #8]
 8006678:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800667a:	4313      	orrs	r3, r2
 800667c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	68db      	ldr	r3, [r3, #12]
 8006682:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8006684:	4313      	orrs	r3, r2
 8006686:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	699b      	ldr	r3, [r3, #24]
 800668c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800668e:	4313      	orrs	r3, r2
 8006690:	b29a      	uxth	r2, r3
 8006692:	897b      	ldrh	r3, [r7, #10]
 8006694:	4313      	orrs	r3, r2
 8006696:	b29b      	uxth	r3, r3
 8006698:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800669c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	4a0d      	ldr	r2, [pc, #52]	; (80066d8 <HAL_I2S_Init+0x278>)
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d101      	bne.n	80066ac <HAL_I2S_Init+0x24c>
 80066a8:	4b0c      	ldr	r3, [pc, #48]	; (80066dc <HAL_I2S_Init+0x27c>)
 80066aa:	e001      	b.n	80066b0 <HAL_I2S_Init+0x250>
 80066ac:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80066b0:	897a      	ldrh	r2, [r7, #10]
 80066b2:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2200      	movs	r2, #0
 80066b8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2201      	movs	r2, #1
 80066be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80066c2:	2300      	movs	r3, #0
}
 80066c4:	4618      	mov	r0, r3
 80066c6:	3720      	adds	r7, #32
 80066c8:	46bd      	mov	sp, r7
 80066ca:	bd80      	pop	{r7, pc}
 80066cc:	080067d7 	.word	0x080067d7
 80066d0:	cccccccd 	.word	0xcccccccd
 80066d4:	080068ed 	.word	0x080068ed
 80066d8:	40003800 	.word	0x40003800
 80066dc:	40003400 	.word	0x40003400

080066e0 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80066e0:	b480      	push	{r7}
 80066e2:	b083      	sub	sp, #12
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80066e8:	bf00      	nop
 80066ea:	370c      	adds	r7, #12
 80066ec:	46bd      	mov	sp, r7
 80066ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f2:	4770      	bx	lr

080066f4 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80066f4:	b480      	push	{r7}
 80066f6:	b083      	sub	sp, #12
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80066fc:	bf00      	nop
 80066fe:	370c      	adds	r7, #12
 8006700:	46bd      	mov	sp, r7
 8006702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006706:	4770      	bx	lr

08006708 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8006708:	b480      	push	{r7}
 800670a:	b083      	sub	sp, #12
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8006710:	bf00      	nop
 8006712:	370c      	adds	r7, #12
 8006714:	46bd      	mov	sp, r7
 8006716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671a:	4770      	bx	lr

0800671c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b082      	sub	sp, #8
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006728:	881a      	ldrh	r2, [r3, #0]
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006734:	1c9a      	adds	r2, r3, #2
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800673e:	b29b      	uxth	r3, r3
 8006740:	3b01      	subs	r3, #1
 8006742:	b29a      	uxth	r2, r3
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800674c:	b29b      	uxth	r3, r3
 800674e:	2b00      	cmp	r3, #0
 8006750:	d10e      	bne.n	8006770 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	685a      	ldr	r2, [r3, #4]
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006760:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	2201      	movs	r2, #1
 8006766:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800676a:	6878      	ldr	r0, [r7, #4]
 800676c:	f7ff ffb8 	bl	80066e0 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8006770:	bf00      	nop
 8006772:	3708      	adds	r7, #8
 8006774:	46bd      	mov	sp, r7
 8006776:	bd80      	pop	{r7, pc}

08006778 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8006778:	b580      	push	{r7, lr}
 800677a:	b082      	sub	sp, #8
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	68da      	ldr	r2, [r3, #12]
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800678a:	b292      	uxth	r2, r2
 800678c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006792:	1c9a      	adds	r2, r3, #2
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800679c:	b29b      	uxth	r3, r3
 800679e:	3b01      	subs	r3, #1
 80067a0:	b29a      	uxth	r2, r3
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80067aa:	b29b      	uxth	r3, r3
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d10e      	bne.n	80067ce <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	685a      	ldr	r2, [r3, #4]
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80067be:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2201      	movs	r2, #1
 80067c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80067c8:	6878      	ldr	r0, [r7, #4]
 80067ca:	f7ff ff93 	bl	80066f4 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80067ce:	bf00      	nop
 80067d0:	3708      	adds	r7, #8
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bd80      	pop	{r7, pc}

080067d6 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80067d6:	b580      	push	{r7, lr}
 80067d8:	b086      	sub	sp, #24
 80067da:	af00      	add	r7, sp, #0
 80067dc:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	689b      	ldr	r3, [r3, #8]
 80067e4:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80067ec:	b2db      	uxtb	r3, r3
 80067ee:	2b04      	cmp	r3, #4
 80067f0:	d13a      	bne.n	8006868 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80067f2:	697b      	ldr	r3, [r7, #20]
 80067f4:	f003 0301 	and.w	r3, r3, #1
 80067f8:	2b01      	cmp	r3, #1
 80067fa:	d109      	bne.n	8006810 <I2S_IRQHandler+0x3a>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	685b      	ldr	r3, [r3, #4]
 8006802:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006806:	2b40      	cmp	r3, #64	; 0x40
 8006808:	d102      	bne.n	8006810 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800680a:	6878      	ldr	r0, [r7, #4]
 800680c:	f7ff ffb4 	bl	8006778 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8006810:	697b      	ldr	r3, [r7, #20]
 8006812:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006816:	2b40      	cmp	r3, #64	; 0x40
 8006818:	d126      	bne.n	8006868 <I2S_IRQHandler+0x92>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	685b      	ldr	r3, [r3, #4]
 8006820:	f003 0320 	and.w	r3, r3, #32
 8006824:	2b20      	cmp	r3, #32
 8006826:	d11f      	bne.n	8006868 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	685a      	ldr	r2, [r3, #4]
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006836:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006838:	2300      	movs	r3, #0
 800683a:	613b      	str	r3, [r7, #16]
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	68db      	ldr	r3, [r3, #12]
 8006842:	613b      	str	r3, [r7, #16]
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	689b      	ldr	r3, [r3, #8]
 800684a:	613b      	str	r3, [r7, #16]
 800684c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2201      	movs	r2, #1
 8006852:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800685a:	f043 0202 	orr.w	r2, r3, #2
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006862:	6878      	ldr	r0, [r7, #4]
 8006864:	f7ff ff50 	bl	8006708 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800686e:	b2db      	uxtb	r3, r3
 8006870:	2b03      	cmp	r3, #3
 8006872:	d136      	bne.n	80068e2 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8006874:	697b      	ldr	r3, [r7, #20]
 8006876:	f003 0302 	and.w	r3, r3, #2
 800687a:	2b02      	cmp	r3, #2
 800687c:	d109      	bne.n	8006892 <I2S_IRQHandler+0xbc>
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	685b      	ldr	r3, [r3, #4]
 8006884:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006888:	2b80      	cmp	r3, #128	; 0x80
 800688a:	d102      	bne.n	8006892 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800688c:	6878      	ldr	r0, [r7, #4]
 800688e:	f7ff ff45 	bl	800671c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8006892:	697b      	ldr	r3, [r7, #20]
 8006894:	f003 0308 	and.w	r3, r3, #8
 8006898:	2b08      	cmp	r3, #8
 800689a:	d122      	bne.n	80068e2 <I2S_IRQHandler+0x10c>
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	685b      	ldr	r3, [r3, #4]
 80068a2:	f003 0320 	and.w	r3, r3, #32
 80068a6:	2b20      	cmp	r3, #32
 80068a8:	d11b      	bne.n	80068e2 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	685a      	ldr	r2, [r3, #4]
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80068b8:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80068ba:	2300      	movs	r3, #0
 80068bc:	60fb      	str	r3, [r7, #12]
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	689b      	ldr	r3, [r3, #8]
 80068c4:	60fb      	str	r3, [r7, #12]
 80068c6:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2201      	movs	r2, #1
 80068cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068d4:	f043 0204 	orr.w	r2, r3, #4
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80068dc:	6878      	ldr	r0, [r7, #4]
 80068de:	f7ff ff13 	bl	8006708 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80068e2:	bf00      	nop
 80068e4:	3718      	adds	r7, #24
 80068e6:	46bd      	mov	sp, r7
 80068e8:	bd80      	pop	{r7, pc}
	...

080068ec <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b088      	sub	sp, #32
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	689b      	ldr	r3, [r3, #8]
 80068fa:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	4aa2      	ldr	r2, [pc, #648]	; (8006b8c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006902:	4293      	cmp	r3, r2
 8006904:	d101      	bne.n	800690a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8006906:	4ba2      	ldr	r3, [pc, #648]	; (8006b90 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006908:	e001      	b.n	800690e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800690a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800690e:	689b      	ldr	r3, [r3, #8]
 8006910:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	685b      	ldr	r3, [r3, #4]
 8006918:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	4a9b      	ldr	r2, [pc, #620]	; (8006b8c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006920:	4293      	cmp	r3, r2
 8006922:	d101      	bne.n	8006928 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8006924:	4b9a      	ldr	r3, [pc, #616]	; (8006b90 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006926:	e001      	b.n	800692c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8006928:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800692c:	685b      	ldr	r3, [r3, #4]
 800692e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	685b      	ldr	r3, [r3, #4]
 8006934:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006938:	d004      	beq.n	8006944 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	685b      	ldr	r3, [r3, #4]
 800693e:	2b00      	cmp	r3, #0
 8006940:	f040 8099 	bne.w	8006a76 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8006944:	69fb      	ldr	r3, [r7, #28]
 8006946:	f003 0302 	and.w	r3, r3, #2
 800694a:	2b02      	cmp	r3, #2
 800694c:	d107      	bne.n	800695e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800694e:	697b      	ldr	r3, [r7, #20]
 8006950:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006954:	2b00      	cmp	r3, #0
 8006956:	d002      	beq.n	800695e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8006958:	6878      	ldr	r0, [r7, #4]
 800695a:	f000 f925 	bl	8006ba8 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800695e:	69bb      	ldr	r3, [r7, #24]
 8006960:	f003 0301 	and.w	r3, r3, #1
 8006964:	2b01      	cmp	r3, #1
 8006966:	d107      	bne.n	8006978 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8006968:	693b      	ldr	r3, [r7, #16]
 800696a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800696e:	2b00      	cmp	r3, #0
 8006970:	d002      	beq.n	8006978 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8006972:	6878      	ldr	r0, [r7, #4]
 8006974:	f000 f9c8 	bl	8006d08 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8006978:	69bb      	ldr	r3, [r7, #24]
 800697a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800697e:	2b40      	cmp	r3, #64	; 0x40
 8006980:	d13a      	bne.n	80069f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8006982:	693b      	ldr	r3, [r7, #16]
 8006984:	f003 0320 	and.w	r3, r3, #32
 8006988:	2b00      	cmp	r3, #0
 800698a:	d035      	beq.n	80069f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	4a7e      	ldr	r2, [pc, #504]	; (8006b8c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006992:	4293      	cmp	r3, r2
 8006994:	d101      	bne.n	800699a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8006996:	4b7e      	ldr	r3, [pc, #504]	; (8006b90 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006998:	e001      	b.n	800699e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800699a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800699e:	685a      	ldr	r2, [r3, #4]
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	4979      	ldr	r1, [pc, #484]	; (8006b8c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80069a6:	428b      	cmp	r3, r1
 80069a8:	d101      	bne.n	80069ae <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80069aa:	4b79      	ldr	r3, [pc, #484]	; (8006b90 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80069ac:	e001      	b.n	80069b2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80069ae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80069b2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80069b6:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	685a      	ldr	r2, [r3, #4]
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80069c6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80069c8:	2300      	movs	r3, #0
 80069ca:	60fb      	str	r3, [r7, #12]
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	68db      	ldr	r3, [r3, #12]
 80069d2:	60fb      	str	r3, [r7, #12]
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	689b      	ldr	r3, [r3, #8]
 80069da:	60fb      	str	r3, [r7, #12]
 80069dc:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2201      	movs	r2, #1
 80069e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069ea:	f043 0202 	orr.w	r2, r3, #2
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80069f2:	6878      	ldr	r0, [r7, #4]
 80069f4:	f7ff fe88 	bl	8006708 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80069f8:	69fb      	ldr	r3, [r7, #28]
 80069fa:	f003 0308 	and.w	r3, r3, #8
 80069fe:	2b08      	cmp	r3, #8
 8006a00:	f040 80be 	bne.w	8006b80 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8006a04:	697b      	ldr	r3, [r7, #20]
 8006a06:	f003 0320 	and.w	r3, r3, #32
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	f000 80b8 	beq.w	8006b80 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	685a      	ldr	r2, [r3, #4]
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006a1e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	4a59      	ldr	r2, [pc, #356]	; (8006b8c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d101      	bne.n	8006a2e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8006a2a:	4b59      	ldr	r3, [pc, #356]	; (8006b90 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006a2c:	e001      	b.n	8006a32 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8006a2e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006a32:	685a      	ldr	r2, [r3, #4]
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	4954      	ldr	r1, [pc, #336]	; (8006b8c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006a3a:	428b      	cmp	r3, r1
 8006a3c:	d101      	bne.n	8006a42 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8006a3e:	4b54      	ldr	r3, [pc, #336]	; (8006b90 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006a40:	e001      	b.n	8006a46 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8006a42:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006a46:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006a4a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	60bb      	str	r3, [r7, #8]
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	689b      	ldr	r3, [r3, #8]
 8006a56:	60bb      	str	r3, [r7, #8]
 8006a58:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2201      	movs	r2, #1
 8006a5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a66:	f043 0204 	orr.w	r2, r3, #4
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006a6e:	6878      	ldr	r0, [r7, #4]
 8006a70:	f7ff fe4a 	bl	8006708 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006a74:	e084      	b.n	8006b80 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8006a76:	69bb      	ldr	r3, [r7, #24]
 8006a78:	f003 0302 	and.w	r3, r3, #2
 8006a7c:	2b02      	cmp	r3, #2
 8006a7e:	d107      	bne.n	8006a90 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8006a80:	693b      	ldr	r3, [r7, #16]
 8006a82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d002      	beq.n	8006a90 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	f000 f8be 	bl	8006c0c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8006a90:	69fb      	ldr	r3, [r7, #28]
 8006a92:	f003 0301 	and.w	r3, r3, #1
 8006a96:	2b01      	cmp	r3, #1
 8006a98:	d107      	bne.n	8006aaa <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8006a9a:	697b      	ldr	r3, [r7, #20]
 8006a9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d002      	beq.n	8006aaa <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8006aa4:	6878      	ldr	r0, [r7, #4]
 8006aa6:	f000 f8fd 	bl	8006ca4 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006aaa:	69fb      	ldr	r3, [r7, #28]
 8006aac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ab0:	2b40      	cmp	r3, #64	; 0x40
 8006ab2:	d12f      	bne.n	8006b14 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8006ab4:	697b      	ldr	r3, [r7, #20]
 8006ab6:	f003 0320 	and.w	r3, r3, #32
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d02a      	beq.n	8006b14 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	685a      	ldr	r2, [r3, #4]
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006acc:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	4a2e      	ldr	r2, [pc, #184]	; (8006b8c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d101      	bne.n	8006adc <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8006ad8:	4b2d      	ldr	r3, [pc, #180]	; (8006b90 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006ada:	e001      	b.n	8006ae0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8006adc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006ae0:	685a      	ldr	r2, [r3, #4]
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	4929      	ldr	r1, [pc, #164]	; (8006b8c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006ae8:	428b      	cmp	r3, r1
 8006aea:	d101      	bne.n	8006af0 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8006aec:	4b28      	ldr	r3, [pc, #160]	; (8006b90 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006aee:	e001      	b.n	8006af4 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8006af0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006af4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006af8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	2201      	movs	r2, #1
 8006afe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b06:	f043 0202 	orr.w	r2, r3, #2
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006b0e:	6878      	ldr	r0, [r7, #4]
 8006b10:	f7ff fdfa 	bl	8006708 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8006b14:	69bb      	ldr	r3, [r7, #24]
 8006b16:	f003 0308 	and.w	r3, r3, #8
 8006b1a:	2b08      	cmp	r3, #8
 8006b1c:	d131      	bne.n	8006b82 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8006b1e:	693b      	ldr	r3, [r7, #16]
 8006b20:	f003 0320 	and.w	r3, r3, #32
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d02c      	beq.n	8006b82 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	4a17      	ldr	r2, [pc, #92]	; (8006b8c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d101      	bne.n	8006b36 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8006b32:	4b17      	ldr	r3, [pc, #92]	; (8006b90 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006b34:	e001      	b.n	8006b3a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8006b36:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006b3a:	685a      	ldr	r2, [r3, #4]
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	4912      	ldr	r1, [pc, #72]	; (8006b8c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006b42:	428b      	cmp	r3, r1
 8006b44:	d101      	bne.n	8006b4a <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8006b46:	4b12      	ldr	r3, [pc, #72]	; (8006b90 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006b48:	e001      	b.n	8006b4e <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8006b4a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006b4e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006b52:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	685a      	ldr	r2, [r3, #4]
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006b62:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2201      	movs	r2, #1
 8006b68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b70:	f043 0204 	orr.w	r2, r3, #4
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006b78:	6878      	ldr	r0, [r7, #4]
 8006b7a:	f7ff fdc5 	bl	8006708 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006b7e:	e000      	b.n	8006b82 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006b80:	bf00      	nop
}
 8006b82:	bf00      	nop
 8006b84:	3720      	adds	r7, #32
 8006b86:	46bd      	mov	sp, r7
 8006b88:	bd80      	pop	{r7, pc}
 8006b8a:	bf00      	nop
 8006b8c:	40003800 	.word	0x40003800
 8006b90:	40003400 	.word	0x40003400

08006b94 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006b94:	b480      	push	{r7}
 8006b96:	b083      	sub	sp, #12
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8006b9c:	bf00      	nop
 8006b9e:	370c      	adds	r7, #12
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba6:	4770      	bx	lr

08006ba8 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b082      	sub	sp, #8
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bb4:	1c99      	adds	r1, r3, #2
 8006bb6:	687a      	ldr	r2, [r7, #4]
 8006bb8:	6251      	str	r1, [r2, #36]	; 0x24
 8006bba:	881a      	ldrh	r2, [r3, #0]
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bc6:	b29b      	uxth	r3, r3
 8006bc8:	3b01      	subs	r3, #1
 8006bca:	b29a      	uxth	r2, r3
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bd4:	b29b      	uxth	r3, r3
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d113      	bne.n	8006c02 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	685a      	ldr	r2, [r3, #4]
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006be8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006bee:	b29b      	uxth	r3, r3
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d106      	bne.n	8006c02 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2201      	movs	r2, #1
 8006bf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006bfc:	6878      	ldr	r0, [r7, #4]
 8006bfe:	f7ff ffc9 	bl	8006b94 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006c02:	bf00      	nop
 8006c04:	3708      	adds	r7, #8
 8006c06:	46bd      	mov	sp, r7
 8006c08:	bd80      	pop	{r7, pc}
	...

08006c0c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b082      	sub	sp, #8
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c18:	1c99      	adds	r1, r3, #2
 8006c1a:	687a      	ldr	r2, [r7, #4]
 8006c1c:	6251      	str	r1, [r2, #36]	; 0x24
 8006c1e:	8819      	ldrh	r1, [r3, #0]
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	4a1d      	ldr	r2, [pc, #116]	; (8006c9c <I2SEx_TxISR_I2SExt+0x90>)
 8006c26:	4293      	cmp	r3, r2
 8006c28:	d101      	bne.n	8006c2e <I2SEx_TxISR_I2SExt+0x22>
 8006c2a:	4b1d      	ldr	r3, [pc, #116]	; (8006ca0 <I2SEx_TxISR_I2SExt+0x94>)
 8006c2c:	e001      	b.n	8006c32 <I2SEx_TxISR_I2SExt+0x26>
 8006c2e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006c32:	460a      	mov	r2, r1
 8006c34:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c3a:	b29b      	uxth	r3, r3
 8006c3c:	3b01      	subs	r3, #1
 8006c3e:	b29a      	uxth	r2, r3
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c48:	b29b      	uxth	r3, r3
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d121      	bne.n	8006c92 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	4a12      	ldr	r2, [pc, #72]	; (8006c9c <I2SEx_TxISR_I2SExt+0x90>)
 8006c54:	4293      	cmp	r3, r2
 8006c56:	d101      	bne.n	8006c5c <I2SEx_TxISR_I2SExt+0x50>
 8006c58:	4b11      	ldr	r3, [pc, #68]	; (8006ca0 <I2SEx_TxISR_I2SExt+0x94>)
 8006c5a:	e001      	b.n	8006c60 <I2SEx_TxISR_I2SExt+0x54>
 8006c5c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006c60:	685a      	ldr	r2, [r3, #4]
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	490d      	ldr	r1, [pc, #52]	; (8006c9c <I2SEx_TxISR_I2SExt+0x90>)
 8006c68:	428b      	cmp	r3, r1
 8006c6a:	d101      	bne.n	8006c70 <I2SEx_TxISR_I2SExt+0x64>
 8006c6c:	4b0c      	ldr	r3, [pc, #48]	; (8006ca0 <I2SEx_TxISR_I2SExt+0x94>)
 8006c6e:	e001      	b.n	8006c74 <I2SEx_TxISR_I2SExt+0x68>
 8006c70:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006c74:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006c78:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006c7e:	b29b      	uxth	r3, r3
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d106      	bne.n	8006c92 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2201      	movs	r2, #1
 8006c88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006c8c:	6878      	ldr	r0, [r7, #4]
 8006c8e:	f7ff ff81 	bl	8006b94 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006c92:	bf00      	nop
 8006c94:	3708      	adds	r7, #8
 8006c96:	46bd      	mov	sp, r7
 8006c98:	bd80      	pop	{r7, pc}
 8006c9a:	bf00      	nop
 8006c9c:	40003800 	.word	0x40003800
 8006ca0:	40003400 	.word	0x40003400

08006ca4 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b082      	sub	sp, #8
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	68d8      	ldr	r0, [r3, #12]
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cb6:	1c99      	adds	r1, r3, #2
 8006cb8:	687a      	ldr	r2, [r7, #4]
 8006cba:	62d1      	str	r1, [r2, #44]	; 0x2c
 8006cbc:	b282      	uxth	r2, r0
 8006cbe:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006cc4:	b29b      	uxth	r3, r3
 8006cc6:	3b01      	subs	r3, #1
 8006cc8:	b29a      	uxth	r2, r3
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006cd2:	b29b      	uxth	r3, r3
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d113      	bne.n	8006d00 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	685a      	ldr	r2, [r3, #4]
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006ce6:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cec:	b29b      	uxth	r3, r3
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d106      	bne.n	8006d00 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2201      	movs	r2, #1
 8006cf6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006cfa:	6878      	ldr	r0, [r7, #4]
 8006cfc:	f7ff ff4a 	bl	8006b94 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006d00:	bf00      	nop
 8006d02:	3708      	adds	r7, #8
 8006d04:	46bd      	mov	sp, r7
 8006d06:	bd80      	pop	{r7, pc}

08006d08 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b082      	sub	sp, #8
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	4a20      	ldr	r2, [pc, #128]	; (8006d98 <I2SEx_RxISR_I2SExt+0x90>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d101      	bne.n	8006d1e <I2SEx_RxISR_I2SExt+0x16>
 8006d1a:	4b20      	ldr	r3, [pc, #128]	; (8006d9c <I2SEx_RxISR_I2SExt+0x94>)
 8006d1c:	e001      	b.n	8006d22 <I2SEx_RxISR_I2SExt+0x1a>
 8006d1e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006d22:	68d8      	ldr	r0, [r3, #12]
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d28:	1c99      	adds	r1, r3, #2
 8006d2a:	687a      	ldr	r2, [r7, #4]
 8006d2c:	62d1      	str	r1, [r2, #44]	; 0x2c
 8006d2e:	b282      	uxth	r2, r0
 8006d30:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006d36:	b29b      	uxth	r3, r3
 8006d38:	3b01      	subs	r3, #1
 8006d3a:	b29a      	uxth	r2, r3
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006d44:	b29b      	uxth	r3, r3
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d121      	bne.n	8006d8e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	4a12      	ldr	r2, [pc, #72]	; (8006d98 <I2SEx_RxISR_I2SExt+0x90>)
 8006d50:	4293      	cmp	r3, r2
 8006d52:	d101      	bne.n	8006d58 <I2SEx_RxISR_I2SExt+0x50>
 8006d54:	4b11      	ldr	r3, [pc, #68]	; (8006d9c <I2SEx_RxISR_I2SExt+0x94>)
 8006d56:	e001      	b.n	8006d5c <I2SEx_RxISR_I2SExt+0x54>
 8006d58:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006d5c:	685a      	ldr	r2, [r3, #4]
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	490d      	ldr	r1, [pc, #52]	; (8006d98 <I2SEx_RxISR_I2SExt+0x90>)
 8006d64:	428b      	cmp	r3, r1
 8006d66:	d101      	bne.n	8006d6c <I2SEx_RxISR_I2SExt+0x64>
 8006d68:	4b0c      	ldr	r3, [pc, #48]	; (8006d9c <I2SEx_RxISR_I2SExt+0x94>)
 8006d6a:	e001      	b.n	8006d70 <I2SEx_RxISR_I2SExt+0x68>
 8006d6c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006d70:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006d74:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d7a:	b29b      	uxth	r3, r3
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d106      	bne.n	8006d8e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2201      	movs	r2, #1
 8006d84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006d88:	6878      	ldr	r0, [r7, #4]
 8006d8a:	f7ff ff03 	bl	8006b94 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006d8e:	bf00      	nop
 8006d90:	3708      	adds	r7, #8
 8006d92:	46bd      	mov	sp, r7
 8006d94:	bd80      	pop	{r7, pc}
 8006d96:	bf00      	nop
 8006d98:	40003800 	.word	0x40003800
 8006d9c:	40003400 	.word	0x40003400

08006da0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b086      	sub	sp, #24
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d101      	bne.n	8006db2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006dae:	2301      	movs	r3, #1
 8006db0:	e264      	b.n	800727c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f003 0301 	and.w	r3, r3, #1
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d075      	beq.n	8006eaa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006dbe:	4ba3      	ldr	r3, [pc, #652]	; (800704c <HAL_RCC_OscConfig+0x2ac>)
 8006dc0:	689b      	ldr	r3, [r3, #8]
 8006dc2:	f003 030c 	and.w	r3, r3, #12
 8006dc6:	2b04      	cmp	r3, #4
 8006dc8:	d00c      	beq.n	8006de4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006dca:	4ba0      	ldr	r3, [pc, #640]	; (800704c <HAL_RCC_OscConfig+0x2ac>)
 8006dcc:	689b      	ldr	r3, [r3, #8]
 8006dce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006dd2:	2b08      	cmp	r3, #8
 8006dd4:	d112      	bne.n	8006dfc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006dd6:	4b9d      	ldr	r3, [pc, #628]	; (800704c <HAL_RCC_OscConfig+0x2ac>)
 8006dd8:	685b      	ldr	r3, [r3, #4]
 8006dda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006dde:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006de2:	d10b      	bne.n	8006dfc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006de4:	4b99      	ldr	r3, [pc, #612]	; (800704c <HAL_RCC_OscConfig+0x2ac>)
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d05b      	beq.n	8006ea8 <HAL_RCC_OscConfig+0x108>
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	685b      	ldr	r3, [r3, #4]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d157      	bne.n	8006ea8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006df8:	2301      	movs	r3, #1
 8006dfa:	e23f      	b.n	800727c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	685b      	ldr	r3, [r3, #4]
 8006e00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e04:	d106      	bne.n	8006e14 <HAL_RCC_OscConfig+0x74>
 8006e06:	4b91      	ldr	r3, [pc, #580]	; (800704c <HAL_RCC_OscConfig+0x2ac>)
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	4a90      	ldr	r2, [pc, #576]	; (800704c <HAL_RCC_OscConfig+0x2ac>)
 8006e0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006e10:	6013      	str	r3, [r2, #0]
 8006e12:	e01d      	b.n	8006e50 <HAL_RCC_OscConfig+0xb0>
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	685b      	ldr	r3, [r3, #4]
 8006e18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006e1c:	d10c      	bne.n	8006e38 <HAL_RCC_OscConfig+0x98>
 8006e1e:	4b8b      	ldr	r3, [pc, #556]	; (800704c <HAL_RCC_OscConfig+0x2ac>)
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	4a8a      	ldr	r2, [pc, #552]	; (800704c <HAL_RCC_OscConfig+0x2ac>)
 8006e24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006e28:	6013      	str	r3, [r2, #0]
 8006e2a:	4b88      	ldr	r3, [pc, #544]	; (800704c <HAL_RCC_OscConfig+0x2ac>)
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	4a87      	ldr	r2, [pc, #540]	; (800704c <HAL_RCC_OscConfig+0x2ac>)
 8006e30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006e34:	6013      	str	r3, [r2, #0]
 8006e36:	e00b      	b.n	8006e50 <HAL_RCC_OscConfig+0xb0>
 8006e38:	4b84      	ldr	r3, [pc, #528]	; (800704c <HAL_RCC_OscConfig+0x2ac>)
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	4a83      	ldr	r2, [pc, #524]	; (800704c <HAL_RCC_OscConfig+0x2ac>)
 8006e3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e42:	6013      	str	r3, [r2, #0]
 8006e44:	4b81      	ldr	r3, [pc, #516]	; (800704c <HAL_RCC_OscConfig+0x2ac>)
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	4a80      	ldr	r2, [pc, #512]	; (800704c <HAL_RCC_OscConfig+0x2ac>)
 8006e4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006e4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	685b      	ldr	r3, [r3, #4]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d013      	beq.n	8006e80 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e58:	f7fb fd50 	bl	80028fc <HAL_GetTick>
 8006e5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e5e:	e008      	b.n	8006e72 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006e60:	f7fb fd4c 	bl	80028fc <HAL_GetTick>
 8006e64:	4602      	mov	r2, r0
 8006e66:	693b      	ldr	r3, [r7, #16]
 8006e68:	1ad3      	subs	r3, r2, r3
 8006e6a:	2b64      	cmp	r3, #100	; 0x64
 8006e6c:	d901      	bls.n	8006e72 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006e6e:	2303      	movs	r3, #3
 8006e70:	e204      	b.n	800727c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e72:	4b76      	ldr	r3, [pc, #472]	; (800704c <HAL_RCC_OscConfig+0x2ac>)
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d0f0      	beq.n	8006e60 <HAL_RCC_OscConfig+0xc0>
 8006e7e:	e014      	b.n	8006eaa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e80:	f7fb fd3c 	bl	80028fc <HAL_GetTick>
 8006e84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006e86:	e008      	b.n	8006e9a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006e88:	f7fb fd38 	bl	80028fc <HAL_GetTick>
 8006e8c:	4602      	mov	r2, r0
 8006e8e:	693b      	ldr	r3, [r7, #16]
 8006e90:	1ad3      	subs	r3, r2, r3
 8006e92:	2b64      	cmp	r3, #100	; 0x64
 8006e94:	d901      	bls.n	8006e9a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006e96:	2303      	movs	r3, #3
 8006e98:	e1f0      	b.n	800727c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006e9a:	4b6c      	ldr	r3, [pc, #432]	; (800704c <HAL_RCC_OscConfig+0x2ac>)
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d1f0      	bne.n	8006e88 <HAL_RCC_OscConfig+0xe8>
 8006ea6:	e000      	b.n	8006eaa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ea8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f003 0302 	and.w	r3, r3, #2
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d063      	beq.n	8006f7e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006eb6:	4b65      	ldr	r3, [pc, #404]	; (800704c <HAL_RCC_OscConfig+0x2ac>)
 8006eb8:	689b      	ldr	r3, [r3, #8]
 8006eba:	f003 030c 	and.w	r3, r3, #12
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d00b      	beq.n	8006eda <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006ec2:	4b62      	ldr	r3, [pc, #392]	; (800704c <HAL_RCC_OscConfig+0x2ac>)
 8006ec4:	689b      	ldr	r3, [r3, #8]
 8006ec6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006eca:	2b08      	cmp	r3, #8
 8006ecc:	d11c      	bne.n	8006f08 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006ece:	4b5f      	ldr	r3, [pc, #380]	; (800704c <HAL_RCC_OscConfig+0x2ac>)
 8006ed0:	685b      	ldr	r3, [r3, #4]
 8006ed2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d116      	bne.n	8006f08 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006eda:	4b5c      	ldr	r3, [pc, #368]	; (800704c <HAL_RCC_OscConfig+0x2ac>)
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f003 0302 	and.w	r3, r3, #2
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d005      	beq.n	8006ef2 <HAL_RCC_OscConfig+0x152>
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	68db      	ldr	r3, [r3, #12]
 8006eea:	2b01      	cmp	r3, #1
 8006eec:	d001      	beq.n	8006ef2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006eee:	2301      	movs	r3, #1
 8006ef0:	e1c4      	b.n	800727c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ef2:	4b56      	ldr	r3, [pc, #344]	; (800704c <HAL_RCC_OscConfig+0x2ac>)
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	691b      	ldr	r3, [r3, #16]
 8006efe:	00db      	lsls	r3, r3, #3
 8006f00:	4952      	ldr	r1, [pc, #328]	; (800704c <HAL_RCC_OscConfig+0x2ac>)
 8006f02:	4313      	orrs	r3, r2
 8006f04:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006f06:	e03a      	b.n	8006f7e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	68db      	ldr	r3, [r3, #12]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d020      	beq.n	8006f52 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006f10:	4b4f      	ldr	r3, [pc, #316]	; (8007050 <HAL_RCC_OscConfig+0x2b0>)
 8006f12:	2201      	movs	r2, #1
 8006f14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f16:	f7fb fcf1 	bl	80028fc <HAL_GetTick>
 8006f1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006f1c:	e008      	b.n	8006f30 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006f1e:	f7fb fced 	bl	80028fc <HAL_GetTick>
 8006f22:	4602      	mov	r2, r0
 8006f24:	693b      	ldr	r3, [r7, #16]
 8006f26:	1ad3      	subs	r3, r2, r3
 8006f28:	2b02      	cmp	r3, #2
 8006f2a:	d901      	bls.n	8006f30 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006f2c:	2303      	movs	r3, #3
 8006f2e:	e1a5      	b.n	800727c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006f30:	4b46      	ldr	r3, [pc, #280]	; (800704c <HAL_RCC_OscConfig+0x2ac>)
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f003 0302 	and.w	r3, r3, #2
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d0f0      	beq.n	8006f1e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f3c:	4b43      	ldr	r3, [pc, #268]	; (800704c <HAL_RCC_OscConfig+0x2ac>)
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	691b      	ldr	r3, [r3, #16]
 8006f48:	00db      	lsls	r3, r3, #3
 8006f4a:	4940      	ldr	r1, [pc, #256]	; (800704c <HAL_RCC_OscConfig+0x2ac>)
 8006f4c:	4313      	orrs	r3, r2
 8006f4e:	600b      	str	r3, [r1, #0]
 8006f50:	e015      	b.n	8006f7e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006f52:	4b3f      	ldr	r3, [pc, #252]	; (8007050 <HAL_RCC_OscConfig+0x2b0>)
 8006f54:	2200      	movs	r2, #0
 8006f56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f58:	f7fb fcd0 	bl	80028fc <HAL_GetTick>
 8006f5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006f5e:	e008      	b.n	8006f72 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006f60:	f7fb fccc 	bl	80028fc <HAL_GetTick>
 8006f64:	4602      	mov	r2, r0
 8006f66:	693b      	ldr	r3, [r7, #16]
 8006f68:	1ad3      	subs	r3, r2, r3
 8006f6a:	2b02      	cmp	r3, #2
 8006f6c:	d901      	bls.n	8006f72 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006f6e:	2303      	movs	r3, #3
 8006f70:	e184      	b.n	800727c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006f72:	4b36      	ldr	r3, [pc, #216]	; (800704c <HAL_RCC_OscConfig+0x2ac>)
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f003 0302 	and.w	r3, r3, #2
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d1f0      	bne.n	8006f60 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f003 0308 	and.w	r3, r3, #8
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d030      	beq.n	8006fec <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	695b      	ldr	r3, [r3, #20]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d016      	beq.n	8006fc0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006f92:	4b30      	ldr	r3, [pc, #192]	; (8007054 <HAL_RCC_OscConfig+0x2b4>)
 8006f94:	2201      	movs	r2, #1
 8006f96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f98:	f7fb fcb0 	bl	80028fc <HAL_GetTick>
 8006f9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006f9e:	e008      	b.n	8006fb2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006fa0:	f7fb fcac 	bl	80028fc <HAL_GetTick>
 8006fa4:	4602      	mov	r2, r0
 8006fa6:	693b      	ldr	r3, [r7, #16]
 8006fa8:	1ad3      	subs	r3, r2, r3
 8006faa:	2b02      	cmp	r3, #2
 8006fac:	d901      	bls.n	8006fb2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006fae:	2303      	movs	r3, #3
 8006fb0:	e164      	b.n	800727c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006fb2:	4b26      	ldr	r3, [pc, #152]	; (800704c <HAL_RCC_OscConfig+0x2ac>)
 8006fb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006fb6:	f003 0302 	and.w	r3, r3, #2
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d0f0      	beq.n	8006fa0 <HAL_RCC_OscConfig+0x200>
 8006fbe:	e015      	b.n	8006fec <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006fc0:	4b24      	ldr	r3, [pc, #144]	; (8007054 <HAL_RCC_OscConfig+0x2b4>)
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006fc6:	f7fb fc99 	bl	80028fc <HAL_GetTick>
 8006fca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006fcc:	e008      	b.n	8006fe0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006fce:	f7fb fc95 	bl	80028fc <HAL_GetTick>
 8006fd2:	4602      	mov	r2, r0
 8006fd4:	693b      	ldr	r3, [r7, #16]
 8006fd6:	1ad3      	subs	r3, r2, r3
 8006fd8:	2b02      	cmp	r3, #2
 8006fda:	d901      	bls.n	8006fe0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006fdc:	2303      	movs	r3, #3
 8006fde:	e14d      	b.n	800727c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006fe0:	4b1a      	ldr	r3, [pc, #104]	; (800704c <HAL_RCC_OscConfig+0x2ac>)
 8006fe2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006fe4:	f003 0302 	and.w	r3, r3, #2
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d1f0      	bne.n	8006fce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f003 0304 	and.w	r3, r3, #4
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	f000 80a0 	beq.w	800713a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006ffe:	4b13      	ldr	r3, [pc, #76]	; (800704c <HAL_RCC_OscConfig+0x2ac>)
 8007000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007002:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007006:	2b00      	cmp	r3, #0
 8007008:	d10f      	bne.n	800702a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800700a:	2300      	movs	r3, #0
 800700c:	60bb      	str	r3, [r7, #8]
 800700e:	4b0f      	ldr	r3, [pc, #60]	; (800704c <HAL_RCC_OscConfig+0x2ac>)
 8007010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007012:	4a0e      	ldr	r2, [pc, #56]	; (800704c <HAL_RCC_OscConfig+0x2ac>)
 8007014:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007018:	6413      	str	r3, [r2, #64]	; 0x40
 800701a:	4b0c      	ldr	r3, [pc, #48]	; (800704c <HAL_RCC_OscConfig+0x2ac>)
 800701c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800701e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007022:	60bb      	str	r3, [r7, #8]
 8007024:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007026:	2301      	movs	r3, #1
 8007028:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800702a:	4b0b      	ldr	r3, [pc, #44]	; (8007058 <HAL_RCC_OscConfig+0x2b8>)
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007032:	2b00      	cmp	r3, #0
 8007034:	d121      	bne.n	800707a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007036:	4b08      	ldr	r3, [pc, #32]	; (8007058 <HAL_RCC_OscConfig+0x2b8>)
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	4a07      	ldr	r2, [pc, #28]	; (8007058 <HAL_RCC_OscConfig+0x2b8>)
 800703c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007040:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007042:	f7fb fc5b 	bl	80028fc <HAL_GetTick>
 8007046:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007048:	e011      	b.n	800706e <HAL_RCC_OscConfig+0x2ce>
 800704a:	bf00      	nop
 800704c:	40023800 	.word	0x40023800
 8007050:	42470000 	.word	0x42470000
 8007054:	42470e80 	.word	0x42470e80
 8007058:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800705c:	f7fb fc4e 	bl	80028fc <HAL_GetTick>
 8007060:	4602      	mov	r2, r0
 8007062:	693b      	ldr	r3, [r7, #16]
 8007064:	1ad3      	subs	r3, r2, r3
 8007066:	2b02      	cmp	r3, #2
 8007068:	d901      	bls.n	800706e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800706a:	2303      	movs	r3, #3
 800706c:	e106      	b.n	800727c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800706e:	4b85      	ldr	r3, [pc, #532]	; (8007284 <HAL_RCC_OscConfig+0x4e4>)
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007076:	2b00      	cmp	r3, #0
 8007078:	d0f0      	beq.n	800705c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	689b      	ldr	r3, [r3, #8]
 800707e:	2b01      	cmp	r3, #1
 8007080:	d106      	bne.n	8007090 <HAL_RCC_OscConfig+0x2f0>
 8007082:	4b81      	ldr	r3, [pc, #516]	; (8007288 <HAL_RCC_OscConfig+0x4e8>)
 8007084:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007086:	4a80      	ldr	r2, [pc, #512]	; (8007288 <HAL_RCC_OscConfig+0x4e8>)
 8007088:	f043 0301 	orr.w	r3, r3, #1
 800708c:	6713      	str	r3, [r2, #112]	; 0x70
 800708e:	e01c      	b.n	80070ca <HAL_RCC_OscConfig+0x32a>
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	689b      	ldr	r3, [r3, #8]
 8007094:	2b05      	cmp	r3, #5
 8007096:	d10c      	bne.n	80070b2 <HAL_RCC_OscConfig+0x312>
 8007098:	4b7b      	ldr	r3, [pc, #492]	; (8007288 <HAL_RCC_OscConfig+0x4e8>)
 800709a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800709c:	4a7a      	ldr	r2, [pc, #488]	; (8007288 <HAL_RCC_OscConfig+0x4e8>)
 800709e:	f043 0304 	orr.w	r3, r3, #4
 80070a2:	6713      	str	r3, [r2, #112]	; 0x70
 80070a4:	4b78      	ldr	r3, [pc, #480]	; (8007288 <HAL_RCC_OscConfig+0x4e8>)
 80070a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070a8:	4a77      	ldr	r2, [pc, #476]	; (8007288 <HAL_RCC_OscConfig+0x4e8>)
 80070aa:	f043 0301 	orr.w	r3, r3, #1
 80070ae:	6713      	str	r3, [r2, #112]	; 0x70
 80070b0:	e00b      	b.n	80070ca <HAL_RCC_OscConfig+0x32a>
 80070b2:	4b75      	ldr	r3, [pc, #468]	; (8007288 <HAL_RCC_OscConfig+0x4e8>)
 80070b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070b6:	4a74      	ldr	r2, [pc, #464]	; (8007288 <HAL_RCC_OscConfig+0x4e8>)
 80070b8:	f023 0301 	bic.w	r3, r3, #1
 80070bc:	6713      	str	r3, [r2, #112]	; 0x70
 80070be:	4b72      	ldr	r3, [pc, #456]	; (8007288 <HAL_RCC_OscConfig+0x4e8>)
 80070c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070c2:	4a71      	ldr	r2, [pc, #452]	; (8007288 <HAL_RCC_OscConfig+0x4e8>)
 80070c4:	f023 0304 	bic.w	r3, r3, #4
 80070c8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	689b      	ldr	r3, [r3, #8]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d015      	beq.n	80070fe <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80070d2:	f7fb fc13 	bl	80028fc <HAL_GetTick>
 80070d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80070d8:	e00a      	b.n	80070f0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80070da:	f7fb fc0f 	bl	80028fc <HAL_GetTick>
 80070de:	4602      	mov	r2, r0
 80070e0:	693b      	ldr	r3, [r7, #16]
 80070e2:	1ad3      	subs	r3, r2, r3
 80070e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80070e8:	4293      	cmp	r3, r2
 80070ea:	d901      	bls.n	80070f0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80070ec:	2303      	movs	r3, #3
 80070ee:	e0c5      	b.n	800727c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80070f0:	4b65      	ldr	r3, [pc, #404]	; (8007288 <HAL_RCC_OscConfig+0x4e8>)
 80070f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070f4:	f003 0302 	and.w	r3, r3, #2
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d0ee      	beq.n	80070da <HAL_RCC_OscConfig+0x33a>
 80070fc:	e014      	b.n	8007128 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80070fe:	f7fb fbfd 	bl	80028fc <HAL_GetTick>
 8007102:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007104:	e00a      	b.n	800711c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007106:	f7fb fbf9 	bl	80028fc <HAL_GetTick>
 800710a:	4602      	mov	r2, r0
 800710c:	693b      	ldr	r3, [r7, #16]
 800710e:	1ad3      	subs	r3, r2, r3
 8007110:	f241 3288 	movw	r2, #5000	; 0x1388
 8007114:	4293      	cmp	r3, r2
 8007116:	d901      	bls.n	800711c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8007118:	2303      	movs	r3, #3
 800711a:	e0af      	b.n	800727c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800711c:	4b5a      	ldr	r3, [pc, #360]	; (8007288 <HAL_RCC_OscConfig+0x4e8>)
 800711e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007120:	f003 0302 	and.w	r3, r3, #2
 8007124:	2b00      	cmp	r3, #0
 8007126:	d1ee      	bne.n	8007106 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007128:	7dfb      	ldrb	r3, [r7, #23]
 800712a:	2b01      	cmp	r3, #1
 800712c:	d105      	bne.n	800713a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800712e:	4b56      	ldr	r3, [pc, #344]	; (8007288 <HAL_RCC_OscConfig+0x4e8>)
 8007130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007132:	4a55      	ldr	r2, [pc, #340]	; (8007288 <HAL_RCC_OscConfig+0x4e8>)
 8007134:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007138:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	699b      	ldr	r3, [r3, #24]
 800713e:	2b00      	cmp	r3, #0
 8007140:	f000 809b 	beq.w	800727a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007144:	4b50      	ldr	r3, [pc, #320]	; (8007288 <HAL_RCC_OscConfig+0x4e8>)
 8007146:	689b      	ldr	r3, [r3, #8]
 8007148:	f003 030c 	and.w	r3, r3, #12
 800714c:	2b08      	cmp	r3, #8
 800714e:	d05c      	beq.n	800720a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	699b      	ldr	r3, [r3, #24]
 8007154:	2b02      	cmp	r3, #2
 8007156:	d141      	bne.n	80071dc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007158:	4b4c      	ldr	r3, [pc, #304]	; (800728c <HAL_RCC_OscConfig+0x4ec>)
 800715a:	2200      	movs	r2, #0
 800715c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800715e:	f7fb fbcd 	bl	80028fc <HAL_GetTick>
 8007162:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007164:	e008      	b.n	8007178 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007166:	f7fb fbc9 	bl	80028fc <HAL_GetTick>
 800716a:	4602      	mov	r2, r0
 800716c:	693b      	ldr	r3, [r7, #16]
 800716e:	1ad3      	subs	r3, r2, r3
 8007170:	2b02      	cmp	r3, #2
 8007172:	d901      	bls.n	8007178 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8007174:	2303      	movs	r3, #3
 8007176:	e081      	b.n	800727c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007178:	4b43      	ldr	r3, [pc, #268]	; (8007288 <HAL_RCC_OscConfig+0x4e8>)
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007180:	2b00      	cmp	r3, #0
 8007182:	d1f0      	bne.n	8007166 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	69da      	ldr	r2, [r3, #28]
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	6a1b      	ldr	r3, [r3, #32]
 800718c:	431a      	orrs	r2, r3
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007192:	019b      	lsls	r3, r3, #6
 8007194:	431a      	orrs	r2, r3
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800719a:	085b      	lsrs	r3, r3, #1
 800719c:	3b01      	subs	r3, #1
 800719e:	041b      	lsls	r3, r3, #16
 80071a0:	431a      	orrs	r2, r3
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071a6:	061b      	lsls	r3, r3, #24
 80071a8:	4937      	ldr	r1, [pc, #220]	; (8007288 <HAL_RCC_OscConfig+0x4e8>)
 80071aa:	4313      	orrs	r3, r2
 80071ac:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80071ae:	4b37      	ldr	r3, [pc, #220]	; (800728c <HAL_RCC_OscConfig+0x4ec>)
 80071b0:	2201      	movs	r2, #1
 80071b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80071b4:	f7fb fba2 	bl	80028fc <HAL_GetTick>
 80071b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80071ba:	e008      	b.n	80071ce <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80071bc:	f7fb fb9e 	bl	80028fc <HAL_GetTick>
 80071c0:	4602      	mov	r2, r0
 80071c2:	693b      	ldr	r3, [r7, #16]
 80071c4:	1ad3      	subs	r3, r2, r3
 80071c6:	2b02      	cmp	r3, #2
 80071c8:	d901      	bls.n	80071ce <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80071ca:	2303      	movs	r3, #3
 80071cc:	e056      	b.n	800727c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80071ce:	4b2e      	ldr	r3, [pc, #184]	; (8007288 <HAL_RCC_OscConfig+0x4e8>)
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d0f0      	beq.n	80071bc <HAL_RCC_OscConfig+0x41c>
 80071da:	e04e      	b.n	800727a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80071dc:	4b2b      	ldr	r3, [pc, #172]	; (800728c <HAL_RCC_OscConfig+0x4ec>)
 80071de:	2200      	movs	r2, #0
 80071e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80071e2:	f7fb fb8b 	bl	80028fc <HAL_GetTick>
 80071e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80071e8:	e008      	b.n	80071fc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80071ea:	f7fb fb87 	bl	80028fc <HAL_GetTick>
 80071ee:	4602      	mov	r2, r0
 80071f0:	693b      	ldr	r3, [r7, #16]
 80071f2:	1ad3      	subs	r3, r2, r3
 80071f4:	2b02      	cmp	r3, #2
 80071f6:	d901      	bls.n	80071fc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80071f8:	2303      	movs	r3, #3
 80071fa:	e03f      	b.n	800727c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80071fc:	4b22      	ldr	r3, [pc, #136]	; (8007288 <HAL_RCC_OscConfig+0x4e8>)
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007204:	2b00      	cmp	r3, #0
 8007206:	d1f0      	bne.n	80071ea <HAL_RCC_OscConfig+0x44a>
 8007208:	e037      	b.n	800727a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	699b      	ldr	r3, [r3, #24]
 800720e:	2b01      	cmp	r3, #1
 8007210:	d101      	bne.n	8007216 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8007212:	2301      	movs	r3, #1
 8007214:	e032      	b.n	800727c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007216:	4b1c      	ldr	r3, [pc, #112]	; (8007288 <HAL_RCC_OscConfig+0x4e8>)
 8007218:	685b      	ldr	r3, [r3, #4]
 800721a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	699b      	ldr	r3, [r3, #24]
 8007220:	2b01      	cmp	r3, #1
 8007222:	d028      	beq.n	8007276 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800722e:	429a      	cmp	r2, r3
 8007230:	d121      	bne.n	8007276 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800723c:	429a      	cmp	r2, r3
 800723e:	d11a      	bne.n	8007276 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007240:	68fa      	ldr	r2, [r7, #12]
 8007242:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007246:	4013      	ands	r3, r2
 8007248:	687a      	ldr	r2, [r7, #4]
 800724a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800724c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800724e:	4293      	cmp	r3, r2
 8007250:	d111      	bne.n	8007276 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800725c:	085b      	lsrs	r3, r3, #1
 800725e:	3b01      	subs	r3, #1
 8007260:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007262:	429a      	cmp	r2, r3
 8007264:	d107      	bne.n	8007276 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007270:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007272:	429a      	cmp	r2, r3
 8007274:	d001      	beq.n	800727a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8007276:	2301      	movs	r3, #1
 8007278:	e000      	b.n	800727c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800727a:	2300      	movs	r3, #0
}
 800727c:	4618      	mov	r0, r3
 800727e:	3718      	adds	r7, #24
 8007280:	46bd      	mov	sp, r7
 8007282:	bd80      	pop	{r7, pc}
 8007284:	40007000 	.word	0x40007000
 8007288:	40023800 	.word	0x40023800
 800728c:	42470060 	.word	0x42470060

08007290 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007290:	b580      	push	{r7, lr}
 8007292:	b084      	sub	sp, #16
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
 8007298:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d101      	bne.n	80072a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80072a0:	2301      	movs	r3, #1
 80072a2:	e0cc      	b.n	800743e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80072a4:	4b68      	ldr	r3, [pc, #416]	; (8007448 <HAL_RCC_ClockConfig+0x1b8>)
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f003 0307 	and.w	r3, r3, #7
 80072ac:	683a      	ldr	r2, [r7, #0]
 80072ae:	429a      	cmp	r2, r3
 80072b0:	d90c      	bls.n	80072cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80072b2:	4b65      	ldr	r3, [pc, #404]	; (8007448 <HAL_RCC_ClockConfig+0x1b8>)
 80072b4:	683a      	ldr	r2, [r7, #0]
 80072b6:	b2d2      	uxtb	r2, r2
 80072b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80072ba:	4b63      	ldr	r3, [pc, #396]	; (8007448 <HAL_RCC_ClockConfig+0x1b8>)
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f003 0307 	and.w	r3, r3, #7
 80072c2:	683a      	ldr	r2, [r7, #0]
 80072c4:	429a      	cmp	r2, r3
 80072c6:	d001      	beq.n	80072cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80072c8:	2301      	movs	r3, #1
 80072ca:	e0b8      	b.n	800743e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f003 0302 	and.w	r3, r3, #2
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d020      	beq.n	800731a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f003 0304 	and.w	r3, r3, #4
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d005      	beq.n	80072f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80072e4:	4b59      	ldr	r3, [pc, #356]	; (800744c <HAL_RCC_ClockConfig+0x1bc>)
 80072e6:	689b      	ldr	r3, [r3, #8]
 80072e8:	4a58      	ldr	r2, [pc, #352]	; (800744c <HAL_RCC_ClockConfig+0x1bc>)
 80072ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80072ee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f003 0308 	and.w	r3, r3, #8
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d005      	beq.n	8007308 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80072fc:	4b53      	ldr	r3, [pc, #332]	; (800744c <HAL_RCC_ClockConfig+0x1bc>)
 80072fe:	689b      	ldr	r3, [r3, #8]
 8007300:	4a52      	ldr	r2, [pc, #328]	; (800744c <HAL_RCC_ClockConfig+0x1bc>)
 8007302:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007306:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007308:	4b50      	ldr	r3, [pc, #320]	; (800744c <HAL_RCC_ClockConfig+0x1bc>)
 800730a:	689b      	ldr	r3, [r3, #8]
 800730c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	689b      	ldr	r3, [r3, #8]
 8007314:	494d      	ldr	r1, [pc, #308]	; (800744c <HAL_RCC_ClockConfig+0x1bc>)
 8007316:	4313      	orrs	r3, r2
 8007318:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	f003 0301 	and.w	r3, r3, #1
 8007322:	2b00      	cmp	r3, #0
 8007324:	d044      	beq.n	80073b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	685b      	ldr	r3, [r3, #4]
 800732a:	2b01      	cmp	r3, #1
 800732c:	d107      	bne.n	800733e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800732e:	4b47      	ldr	r3, [pc, #284]	; (800744c <HAL_RCC_ClockConfig+0x1bc>)
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007336:	2b00      	cmp	r3, #0
 8007338:	d119      	bne.n	800736e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800733a:	2301      	movs	r3, #1
 800733c:	e07f      	b.n	800743e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	685b      	ldr	r3, [r3, #4]
 8007342:	2b02      	cmp	r3, #2
 8007344:	d003      	beq.n	800734e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800734a:	2b03      	cmp	r3, #3
 800734c:	d107      	bne.n	800735e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800734e:	4b3f      	ldr	r3, [pc, #252]	; (800744c <HAL_RCC_ClockConfig+0x1bc>)
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007356:	2b00      	cmp	r3, #0
 8007358:	d109      	bne.n	800736e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800735a:	2301      	movs	r3, #1
 800735c:	e06f      	b.n	800743e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800735e:	4b3b      	ldr	r3, [pc, #236]	; (800744c <HAL_RCC_ClockConfig+0x1bc>)
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	f003 0302 	and.w	r3, r3, #2
 8007366:	2b00      	cmp	r3, #0
 8007368:	d101      	bne.n	800736e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800736a:	2301      	movs	r3, #1
 800736c:	e067      	b.n	800743e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800736e:	4b37      	ldr	r3, [pc, #220]	; (800744c <HAL_RCC_ClockConfig+0x1bc>)
 8007370:	689b      	ldr	r3, [r3, #8]
 8007372:	f023 0203 	bic.w	r2, r3, #3
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	685b      	ldr	r3, [r3, #4]
 800737a:	4934      	ldr	r1, [pc, #208]	; (800744c <HAL_RCC_ClockConfig+0x1bc>)
 800737c:	4313      	orrs	r3, r2
 800737e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007380:	f7fb fabc 	bl	80028fc <HAL_GetTick>
 8007384:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007386:	e00a      	b.n	800739e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007388:	f7fb fab8 	bl	80028fc <HAL_GetTick>
 800738c:	4602      	mov	r2, r0
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	1ad3      	subs	r3, r2, r3
 8007392:	f241 3288 	movw	r2, #5000	; 0x1388
 8007396:	4293      	cmp	r3, r2
 8007398:	d901      	bls.n	800739e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800739a:	2303      	movs	r3, #3
 800739c:	e04f      	b.n	800743e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800739e:	4b2b      	ldr	r3, [pc, #172]	; (800744c <HAL_RCC_ClockConfig+0x1bc>)
 80073a0:	689b      	ldr	r3, [r3, #8]
 80073a2:	f003 020c 	and.w	r2, r3, #12
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	685b      	ldr	r3, [r3, #4]
 80073aa:	009b      	lsls	r3, r3, #2
 80073ac:	429a      	cmp	r2, r3
 80073ae:	d1eb      	bne.n	8007388 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80073b0:	4b25      	ldr	r3, [pc, #148]	; (8007448 <HAL_RCC_ClockConfig+0x1b8>)
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f003 0307 	and.w	r3, r3, #7
 80073b8:	683a      	ldr	r2, [r7, #0]
 80073ba:	429a      	cmp	r2, r3
 80073bc:	d20c      	bcs.n	80073d8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80073be:	4b22      	ldr	r3, [pc, #136]	; (8007448 <HAL_RCC_ClockConfig+0x1b8>)
 80073c0:	683a      	ldr	r2, [r7, #0]
 80073c2:	b2d2      	uxtb	r2, r2
 80073c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80073c6:	4b20      	ldr	r3, [pc, #128]	; (8007448 <HAL_RCC_ClockConfig+0x1b8>)
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f003 0307 	and.w	r3, r3, #7
 80073ce:	683a      	ldr	r2, [r7, #0]
 80073d0:	429a      	cmp	r2, r3
 80073d2:	d001      	beq.n	80073d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80073d4:	2301      	movs	r3, #1
 80073d6:	e032      	b.n	800743e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f003 0304 	and.w	r3, r3, #4
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d008      	beq.n	80073f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80073e4:	4b19      	ldr	r3, [pc, #100]	; (800744c <HAL_RCC_ClockConfig+0x1bc>)
 80073e6:	689b      	ldr	r3, [r3, #8]
 80073e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	68db      	ldr	r3, [r3, #12]
 80073f0:	4916      	ldr	r1, [pc, #88]	; (800744c <HAL_RCC_ClockConfig+0x1bc>)
 80073f2:	4313      	orrs	r3, r2
 80073f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f003 0308 	and.w	r3, r3, #8
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d009      	beq.n	8007416 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007402:	4b12      	ldr	r3, [pc, #72]	; (800744c <HAL_RCC_ClockConfig+0x1bc>)
 8007404:	689b      	ldr	r3, [r3, #8]
 8007406:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	691b      	ldr	r3, [r3, #16]
 800740e:	00db      	lsls	r3, r3, #3
 8007410:	490e      	ldr	r1, [pc, #56]	; (800744c <HAL_RCC_ClockConfig+0x1bc>)
 8007412:	4313      	orrs	r3, r2
 8007414:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007416:	f000 f821 	bl	800745c <HAL_RCC_GetSysClockFreq>
 800741a:	4602      	mov	r2, r0
 800741c:	4b0b      	ldr	r3, [pc, #44]	; (800744c <HAL_RCC_ClockConfig+0x1bc>)
 800741e:	689b      	ldr	r3, [r3, #8]
 8007420:	091b      	lsrs	r3, r3, #4
 8007422:	f003 030f 	and.w	r3, r3, #15
 8007426:	490a      	ldr	r1, [pc, #40]	; (8007450 <HAL_RCC_ClockConfig+0x1c0>)
 8007428:	5ccb      	ldrb	r3, [r1, r3]
 800742a:	fa22 f303 	lsr.w	r3, r2, r3
 800742e:	4a09      	ldr	r2, [pc, #36]	; (8007454 <HAL_RCC_ClockConfig+0x1c4>)
 8007430:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007432:	4b09      	ldr	r3, [pc, #36]	; (8007458 <HAL_RCC_ClockConfig+0x1c8>)
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	4618      	mov	r0, r3
 8007438:	f7fb fa1c 	bl	8002874 <HAL_InitTick>

  return HAL_OK;
 800743c:	2300      	movs	r3, #0
}
 800743e:	4618      	mov	r0, r3
 8007440:	3710      	adds	r7, #16
 8007442:	46bd      	mov	sp, r7
 8007444:	bd80      	pop	{r7, pc}
 8007446:	bf00      	nop
 8007448:	40023c00 	.word	0x40023c00
 800744c:	40023800 	.word	0x40023800
 8007450:	0800cea4 	.word	0x0800cea4
 8007454:	20000000 	.word	0x20000000
 8007458:	2000000c 	.word	0x2000000c

0800745c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800745c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8007460:	b084      	sub	sp, #16
 8007462:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007464:	2300      	movs	r3, #0
 8007466:	607b      	str	r3, [r7, #4]
 8007468:	2300      	movs	r3, #0
 800746a:	60fb      	str	r3, [r7, #12]
 800746c:	2300      	movs	r3, #0
 800746e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8007470:	2300      	movs	r3, #0
 8007472:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007474:	4b67      	ldr	r3, [pc, #412]	; (8007614 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007476:	689b      	ldr	r3, [r3, #8]
 8007478:	f003 030c 	and.w	r3, r3, #12
 800747c:	2b08      	cmp	r3, #8
 800747e:	d00d      	beq.n	800749c <HAL_RCC_GetSysClockFreq+0x40>
 8007480:	2b08      	cmp	r3, #8
 8007482:	f200 80bd 	bhi.w	8007600 <HAL_RCC_GetSysClockFreq+0x1a4>
 8007486:	2b00      	cmp	r3, #0
 8007488:	d002      	beq.n	8007490 <HAL_RCC_GetSysClockFreq+0x34>
 800748a:	2b04      	cmp	r3, #4
 800748c:	d003      	beq.n	8007496 <HAL_RCC_GetSysClockFreq+0x3a>
 800748e:	e0b7      	b.n	8007600 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007490:	4b61      	ldr	r3, [pc, #388]	; (8007618 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8007492:	60bb      	str	r3, [r7, #8]
       break;
 8007494:	e0b7      	b.n	8007606 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007496:	4b61      	ldr	r3, [pc, #388]	; (800761c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8007498:	60bb      	str	r3, [r7, #8]
      break;
 800749a:	e0b4      	b.n	8007606 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800749c:	4b5d      	ldr	r3, [pc, #372]	; (8007614 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800749e:	685b      	ldr	r3, [r3, #4]
 80074a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80074a4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80074a6:	4b5b      	ldr	r3, [pc, #364]	; (8007614 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80074a8:	685b      	ldr	r3, [r3, #4]
 80074aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d04d      	beq.n	800754e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80074b2:	4b58      	ldr	r3, [pc, #352]	; (8007614 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80074b4:	685b      	ldr	r3, [r3, #4]
 80074b6:	099b      	lsrs	r3, r3, #6
 80074b8:	461a      	mov	r2, r3
 80074ba:	f04f 0300 	mov.w	r3, #0
 80074be:	f240 10ff 	movw	r0, #511	; 0x1ff
 80074c2:	f04f 0100 	mov.w	r1, #0
 80074c6:	ea02 0800 	and.w	r8, r2, r0
 80074ca:	ea03 0901 	and.w	r9, r3, r1
 80074ce:	4640      	mov	r0, r8
 80074d0:	4649      	mov	r1, r9
 80074d2:	f04f 0200 	mov.w	r2, #0
 80074d6:	f04f 0300 	mov.w	r3, #0
 80074da:	014b      	lsls	r3, r1, #5
 80074dc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80074e0:	0142      	lsls	r2, r0, #5
 80074e2:	4610      	mov	r0, r2
 80074e4:	4619      	mov	r1, r3
 80074e6:	ebb0 0008 	subs.w	r0, r0, r8
 80074ea:	eb61 0109 	sbc.w	r1, r1, r9
 80074ee:	f04f 0200 	mov.w	r2, #0
 80074f2:	f04f 0300 	mov.w	r3, #0
 80074f6:	018b      	lsls	r3, r1, #6
 80074f8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80074fc:	0182      	lsls	r2, r0, #6
 80074fe:	1a12      	subs	r2, r2, r0
 8007500:	eb63 0301 	sbc.w	r3, r3, r1
 8007504:	f04f 0000 	mov.w	r0, #0
 8007508:	f04f 0100 	mov.w	r1, #0
 800750c:	00d9      	lsls	r1, r3, #3
 800750e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007512:	00d0      	lsls	r0, r2, #3
 8007514:	4602      	mov	r2, r0
 8007516:	460b      	mov	r3, r1
 8007518:	eb12 0208 	adds.w	r2, r2, r8
 800751c:	eb43 0309 	adc.w	r3, r3, r9
 8007520:	f04f 0000 	mov.w	r0, #0
 8007524:	f04f 0100 	mov.w	r1, #0
 8007528:	0259      	lsls	r1, r3, #9
 800752a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800752e:	0250      	lsls	r0, r2, #9
 8007530:	4602      	mov	r2, r0
 8007532:	460b      	mov	r3, r1
 8007534:	4610      	mov	r0, r2
 8007536:	4619      	mov	r1, r3
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	461a      	mov	r2, r3
 800753c:	f04f 0300 	mov.w	r3, #0
 8007540:	f7f9 fb22 	bl	8000b88 <__aeabi_uldivmod>
 8007544:	4602      	mov	r2, r0
 8007546:	460b      	mov	r3, r1
 8007548:	4613      	mov	r3, r2
 800754a:	60fb      	str	r3, [r7, #12]
 800754c:	e04a      	b.n	80075e4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800754e:	4b31      	ldr	r3, [pc, #196]	; (8007614 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007550:	685b      	ldr	r3, [r3, #4]
 8007552:	099b      	lsrs	r3, r3, #6
 8007554:	461a      	mov	r2, r3
 8007556:	f04f 0300 	mov.w	r3, #0
 800755a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800755e:	f04f 0100 	mov.w	r1, #0
 8007562:	ea02 0400 	and.w	r4, r2, r0
 8007566:	ea03 0501 	and.w	r5, r3, r1
 800756a:	4620      	mov	r0, r4
 800756c:	4629      	mov	r1, r5
 800756e:	f04f 0200 	mov.w	r2, #0
 8007572:	f04f 0300 	mov.w	r3, #0
 8007576:	014b      	lsls	r3, r1, #5
 8007578:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800757c:	0142      	lsls	r2, r0, #5
 800757e:	4610      	mov	r0, r2
 8007580:	4619      	mov	r1, r3
 8007582:	1b00      	subs	r0, r0, r4
 8007584:	eb61 0105 	sbc.w	r1, r1, r5
 8007588:	f04f 0200 	mov.w	r2, #0
 800758c:	f04f 0300 	mov.w	r3, #0
 8007590:	018b      	lsls	r3, r1, #6
 8007592:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007596:	0182      	lsls	r2, r0, #6
 8007598:	1a12      	subs	r2, r2, r0
 800759a:	eb63 0301 	sbc.w	r3, r3, r1
 800759e:	f04f 0000 	mov.w	r0, #0
 80075a2:	f04f 0100 	mov.w	r1, #0
 80075a6:	00d9      	lsls	r1, r3, #3
 80075a8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80075ac:	00d0      	lsls	r0, r2, #3
 80075ae:	4602      	mov	r2, r0
 80075b0:	460b      	mov	r3, r1
 80075b2:	1912      	adds	r2, r2, r4
 80075b4:	eb45 0303 	adc.w	r3, r5, r3
 80075b8:	f04f 0000 	mov.w	r0, #0
 80075bc:	f04f 0100 	mov.w	r1, #0
 80075c0:	0299      	lsls	r1, r3, #10
 80075c2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80075c6:	0290      	lsls	r0, r2, #10
 80075c8:	4602      	mov	r2, r0
 80075ca:	460b      	mov	r3, r1
 80075cc:	4610      	mov	r0, r2
 80075ce:	4619      	mov	r1, r3
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	461a      	mov	r2, r3
 80075d4:	f04f 0300 	mov.w	r3, #0
 80075d8:	f7f9 fad6 	bl	8000b88 <__aeabi_uldivmod>
 80075dc:	4602      	mov	r2, r0
 80075de:	460b      	mov	r3, r1
 80075e0:	4613      	mov	r3, r2
 80075e2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80075e4:	4b0b      	ldr	r3, [pc, #44]	; (8007614 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80075e6:	685b      	ldr	r3, [r3, #4]
 80075e8:	0c1b      	lsrs	r3, r3, #16
 80075ea:	f003 0303 	and.w	r3, r3, #3
 80075ee:	3301      	adds	r3, #1
 80075f0:	005b      	lsls	r3, r3, #1
 80075f2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80075f4:	68fa      	ldr	r2, [r7, #12]
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80075fc:	60bb      	str	r3, [r7, #8]
      break;
 80075fe:	e002      	b.n	8007606 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007600:	4b05      	ldr	r3, [pc, #20]	; (8007618 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8007602:	60bb      	str	r3, [r7, #8]
      break;
 8007604:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007606:	68bb      	ldr	r3, [r7, #8]
}
 8007608:	4618      	mov	r0, r3
 800760a:	3710      	adds	r7, #16
 800760c:	46bd      	mov	sp, r7
 800760e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8007612:	bf00      	nop
 8007614:	40023800 	.word	0x40023800
 8007618:	00f42400 	.word	0x00f42400
 800761c:	007a1200 	.word	0x007a1200

08007620 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007620:	b480      	push	{r7}
 8007622:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007624:	4b03      	ldr	r3, [pc, #12]	; (8007634 <HAL_RCC_GetHCLKFreq+0x14>)
 8007626:	681b      	ldr	r3, [r3, #0]
}
 8007628:	4618      	mov	r0, r3
 800762a:	46bd      	mov	sp, r7
 800762c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007630:	4770      	bx	lr
 8007632:	bf00      	nop
 8007634:	20000000 	.word	0x20000000

08007638 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007638:	b580      	push	{r7, lr}
 800763a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800763c:	f7ff fff0 	bl	8007620 <HAL_RCC_GetHCLKFreq>
 8007640:	4602      	mov	r2, r0
 8007642:	4b05      	ldr	r3, [pc, #20]	; (8007658 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007644:	689b      	ldr	r3, [r3, #8]
 8007646:	0a9b      	lsrs	r3, r3, #10
 8007648:	f003 0307 	and.w	r3, r3, #7
 800764c:	4903      	ldr	r1, [pc, #12]	; (800765c <HAL_RCC_GetPCLK1Freq+0x24>)
 800764e:	5ccb      	ldrb	r3, [r1, r3]
 8007650:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007654:	4618      	mov	r0, r3
 8007656:	bd80      	pop	{r7, pc}
 8007658:	40023800 	.word	0x40023800
 800765c:	0800ceb4 	.word	0x0800ceb4

08007660 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007660:	b580      	push	{r7, lr}
 8007662:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007664:	f7ff ffdc 	bl	8007620 <HAL_RCC_GetHCLKFreq>
 8007668:	4602      	mov	r2, r0
 800766a:	4b05      	ldr	r3, [pc, #20]	; (8007680 <HAL_RCC_GetPCLK2Freq+0x20>)
 800766c:	689b      	ldr	r3, [r3, #8]
 800766e:	0b5b      	lsrs	r3, r3, #13
 8007670:	f003 0307 	and.w	r3, r3, #7
 8007674:	4903      	ldr	r1, [pc, #12]	; (8007684 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007676:	5ccb      	ldrb	r3, [r1, r3]
 8007678:	fa22 f303 	lsr.w	r3, r2, r3
}
 800767c:	4618      	mov	r0, r3
 800767e:	bd80      	pop	{r7, pc}
 8007680:	40023800 	.word	0x40023800
 8007684:	0800ceb4 	.word	0x0800ceb4

08007688 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007688:	b580      	push	{r7, lr}
 800768a:	b086      	sub	sp, #24
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007690:	2300      	movs	r3, #0
 8007692:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8007694:	2300      	movs	r3, #0
 8007696:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f003 0301 	and.w	r3, r3, #1
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d105      	bne.n	80076b0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d035      	beq.n	800771c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80076b0:	4b62      	ldr	r3, [pc, #392]	; (800783c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80076b2:	2200      	movs	r2, #0
 80076b4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80076b6:	f7fb f921 	bl	80028fc <HAL_GetTick>
 80076ba:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80076bc:	e008      	b.n	80076d0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80076be:	f7fb f91d 	bl	80028fc <HAL_GetTick>
 80076c2:	4602      	mov	r2, r0
 80076c4:	697b      	ldr	r3, [r7, #20]
 80076c6:	1ad3      	subs	r3, r2, r3
 80076c8:	2b02      	cmp	r3, #2
 80076ca:	d901      	bls.n	80076d0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80076cc:	2303      	movs	r3, #3
 80076ce:	e0b0      	b.n	8007832 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80076d0:	4b5b      	ldr	r3, [pc, #364]	; (8007840 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d1f0      	bne.n	80076be <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	685b      	ldr	r3, [r3, #4]
 80076e0:	019a      	lsls	r2, r3, #6
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	689b      	ldr	r3, [r3, #8]
 80076e6:	071b      	lsls	r3, r3, #28
 80076e8:	4955      	ldr	r1, [pc, #340]	; (8007840 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80076ea:	4313      	orrs	r3, r2
 80076ec:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80076f0:	4b52      	ldr	r3, [pc, #328]	; (800783c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80076f2:	2201      	movs	r2, #1
 80076f4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80076f6:	f7fb f901 	bl	80028fc <HAL_GetTick>
 80076fa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80076fc:	e008      	b.n	8007710 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80076fe:	f7fb f8fd 	bl	80028fc <HAL_GetTick>
 8007702:	4602      	mov	r2, r0
 8007704:	697b      	ldr	r3, [r7, #20]
 8007706:	1ad3      	subs	r3, r2, r3
 8007708:	2b02      	cmp	r3, #2
 800770a:	d901      	bls.n	8007710 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800770c:	2303      	movs	r3, #3
 800770e:	e090      	b.n	8007832 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007710:	4b4b      	ldr	r3, [pc, #300]	; (8007840 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007718:	2b00      	cmp	r3, #0
 800771a:	d0f0      	beq.n	80076fe <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	f003 0302 	and.w	r3, r3, #2
 8007724:	2b00      	cmp	r3, #0
 8007726:	f000 8083 	beq.w	8007830 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800772a:	2300      	movs	r3, #0
 800772c:	60fb      	str	r3, [r7, #12]
 800772e:	4b44      	ldr	r3, [pc, #272]	; (8007840 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007732:	4a43      	ldr	r2, [pc, #268]	; (8007840 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007734:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007738:	6413      	str	r3, [r2, #64]	; 0x40
 800773a:	4b41      	ldr	r3, [pc, #260]	; (8007840 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800773c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800773e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007742:	60fb      	str	r3, [r7, #12]
 8007744:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8007746:	4b3f      	ldr	r3, [pc, #252]	; (8007844 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	4a3e      	ldr	r2, [pc, #248]	; (8007844 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800774c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007750:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007752:	f7fb f8d3 	bl	80028fc <HAL_GetTick>
 8007756:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007758:	e008      	b.n	800776c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800775a:	f7fb f8cf 	bl	80028fc <HAL_GetTick>
 800775e:	4602      	mov	r2, r0
 8007760:	697b      	ldr	r3, [r7, #20]
 8007762:	1ad3      	subs	r3, r2, r3
 8007764:	2b02      	cmp	r3, #2
 8007766:	d901      	bls.n	800776c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8007768:	2303      	movs	r3, #3
 800776a:	e062      	b.n	8007832 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800776c:	4b35      	ldr	r3, [pc, #212]	; (8007844 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007774:	2b00      	cmp	r3, #0
 8007776:	d0f0      	beq.n	800775a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007778:	4b31      	ldr	r3, [pc, #196]	; (8007840 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800777a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800777c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007780:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007782:	693b      	ldr	r3, [r7, #16]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d02f      	beq.n	80077e8 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	68db      	ldr	r3, [r3, #12]
 800778c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007790:	693a      	ldr	r2, [r7, #16]
 8007792:	429a      	cmp	r2, r3
 8007794:	d028      	beq.n	80077e8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007796:	4b2a      	ldr	r3, [pc, #168]	; (8007840 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007798:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800779a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800779e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80077a0:	4b29      	ldr	r3, [pc, #164]	; (8007848 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80077a2:	2201      	movs	r2, #1
 80077a4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80077a6:	4b28      	ldr	r3, [pc, #160]	; (8007848 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80077a8:	2200      	movs	r2, #0
 80077aa:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80077ac:	4a24      	ldr	r2, [pc, #144]	; (8007840 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80077ae:	693b      	ldr	r3, [r7, #16]
 80077b0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80077b2:	4b23      	ldr	r3, [pc, #140]	; (8007840 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80077b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077b6:	f003 0301 	and.w	r3, r3, #1
 80077ba:	2b01      	cmp	r3, #1
 80077bc:	d114      	bne.n	80077e8 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80077be:	f7fb f89d 	bl	80028fc <HAL_GetTick>
 80077c2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80077c4:	e00a      	b.n	80077dc <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80077c6:	f7fb f899 	bl	80028fc <HAL_GetTick>
 80077ca:	4602      	mov	r2, r0
 80077cc:	697b      	ldr	r3, [r7, #20]
 80077ce:	1ad3      	subs	r3, r2, r3
 80077d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80077d4:	4293      	cmp	r3, r2
 80077d6:	d901      	bls.n	80077dc <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80077d8:	2303      	movs	r3, #3
 80077da:	e02a      	b.n	8007832 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80077dc:	4b18      	ldr	r3, [pc, #96]	; (8007840 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80077de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077e0:	f003 0302 	and.w	r3, r3, #2
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d0ee      	beq.n	80077c6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	68db      	ldr	r3, [r3, #12]
 80077ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80077f0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80077f4:	d10d      	bne.n	8007812 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80077f6:	4b12      	ldr	r3, [pc, #72]	; (8007840 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80077f8:	689b      	ldr	r3, [r3, #8]
 80077fa:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	68db      	ldr	r3, [r3, #12]
 8007802:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007806:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800780a:	490d      	ldr	r1, [pc, #52]	; (8007840 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800780c:	4313      	orrs	r3, r2
 800780e:	608b      	str	r3, [r1, #8]
 8007810:	e005      	b.n	800781e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8007812:	4b0b      	ldr	r3, [pc, #44]	; (8007840 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007814:	689b      	ldr	r3, [r3, #8]
 8007816:	4a0a      	ldr	r2, [pc, #40]	; (8007840 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007818:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800781c:	6093      	str	r3, [r2, #8]
 800781e:	4b08      	ldr	r3, [pc, #32]	; (8007840 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007820:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	68db      	ldr	r3, [r3, #12]
 8007826:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800782a:	4905      	ldr	r1, [pc, #20]	; (8007840 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800782c:	4313      	orrs	r3, r2
 800782e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8007830:	2300      	movs	r3, #0
}
 8007832:	4618      	mov	r0, r3
 8007834:	3718      	adds	r7, #24
 8007836:	46bd      	mov	sp, r7
 8007838:	bd80      	pop	{r7, pc}
 800783a:	bf00      	nop
 800783c:	42470068 	.word	0x42470068
 8007840:	40023800 	.word	0x40023800
 8007844:	40007000 	.word	0x40007000
 8007848:	42470e40 	.word	0x42470e40

0800784c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800784c:	b480      	push	{r7}
 800784e:	b087      	sub	sp, #28
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8007854:	2300      	movs	r3, #0
 8007856:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8007858:	2300      	movs	r3, #0
 800785a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 800785c:	2300      	movs	r3, #0
 800785e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8007860:	2300      	movs	r3, #0
 8007862:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2b01      	cmp	r3, #1
 8007868:	d13e      	bne.n	80078e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800786a:	4b23      	ldr	r3, [pc, #140]	; (80078f8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800786c:	689b      	ldr	r3, [r3, #8]
 800786e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007872:	60fb      	str	r3, [r7, #12]
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d005      	beq.n	8007886 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	2b01      	cmp	r3, #1
 800787e:	d12f      	bne.n	80078e0 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8007880:	4b1e      	ldr	r3, [pc, #120]	; (80078fc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007882:	617b      	str	r3, [r7, #20]
          break;
 8007884:	e02f      	b.n	80078e6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8007886:	4b1c      	ldr	r3, [pc, #112]	; (80078f8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007888:	685b      	ldr	r3, [r3, #4]
 800788a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800788e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007892:	d108      	bne.n	80078a6 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007894:	4b18      	ldr	r3, [pc, #96]	; (80078f8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007896:	685b      	ldr	r3, [r3, #4]
 8007898:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800789c:	4a18      	ldr	r2, [pc, #96]	; (8007900 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800789e:	fbb2 f3f3 	udiv	r3, r2, r3
 80078a2:	613b      	str	r3, [r7, #16]
 80078a4:	e007      	b.n	80078b6 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80078a6:	4b14      	ldr	r3, [pc, #80]	; (80078f8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80078a8:	685b      	ldr	r3, [r3, #4]
 80078aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80078ae:	4a15      	ldr	r2, [pc, #84]	; (8007904 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80078b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80078b4:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80078b6:	4b10      	ldr	r3, [pc, #64]	; (80078f8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80078b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80078bc:	099b      	lsrs	r3, r3, #6
 80078be:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80078c2:	693b      	ldr	r3, [r7, #16]
 80078c4:	fb02 f303 	mul.w	r3, r2, r3
 80078c8:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80078ca:	4b0b      	ldr	r3, [pc, #44]	; (80078f8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80078cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80078d0:	0f1b      	lsrs	r3, r3, #28
 80078d2:	f003 0307 	and.w	r3, r3, #7
 80078d6:	68ba      	ldr	r2, [r7, #8]
 80078d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80078dc:	617b      	str	r3, [r7, #20]
          break;
 80078de:	e002      	b.n	80078e6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80078e0:	2300      	movs	r3, #0
 80078e2:	617b      	str	r3, [r7, #20]
          break;
 80078e4:	bf00      	nop
        }
      }
      break;
 80078e6:	bf00      	nop
    }
  }
  return frequency;
 80078e8:	697b      	ldr	r3, [r7, #20]
}
 80078ea:	4618      	mov	r0, r3
 80078ec:	371c      	adds	r7, #28
 80078ee:	46bd      	mov	sp, r7
 80078f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f4:	4770      	bx	lr
 80078f6:	bf00      	nop
 80078f8:	40023800 	.word	0x40023800
 80078fc:	00bb8000 	.word	0x00bb8000
 8007900:	007a1200 	.word	0x007a1200
 8007904:	00f42400 	.word	0x00f42400

08007908 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b082      	sub	sp, #8
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d101      	bne.n	800791a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007916:	2301      	movs	r3, #1
 8007918:	e07b      	b.n	8007a12 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800791e:	2b00      	cmp	r3, #0
 8007920:	d108      	bne.n	8007934 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	685b      	ldr	r3, [r3, #4]
 8007926:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800792a:	d009      	beq.n	8007940 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2200      	movs	r2, #0
 8007930:	61da      	str	r2, [r3, #28]
 8007932:	e005      	b.n	8007940 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2200      	movs	r2, #0
 8007938:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	2200      	movs	r2, #0
 800793e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2200      	movs	r2, #0
 8007944:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800794c:	b2db      	uxtb	r3, r3
 800794e:	2b00      	cmp	r3, #0
 8007950:	d106      	bne.n	8007960 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	2200      	movs	r2, #0
 8007956:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800795a:	6878      	ldr	r0, [r7, #4]
 800795c:	f7fa f92a 	bl	8001bb4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2202      	movs	r2, #2
 8007964:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	681a      	ldr	r2, [r3, #0]
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007976:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	685b      	ldr	r3, [r3, #4]
 800797c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	689b      	ldr	r3, [r3, #8]
 8007984:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007988:	431a      	orrs	r2, r3
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	68db      	ldr	r3, [r3, #12]
 800798e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007992:	431a      	orrs	r2, r3
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	691b      	ldr	r3, [r3, #16]
 8007998:	f003 0302 	and.w	r3, r3, #2
 800799c:	431a      	orrs	r2, r3
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	695b      	ldr	r3, [r3, #20]
 80079a2:	f003 0301 	and.w	r3, r3, #1
 80079a6:	431a      	orrs	r2, r3
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	699b      	ldr	r3, [r3, #24]
 80079ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80079b0:	431a      	orrs	r2, r3
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	69db      	ldr	r3, [r3, #28]
 80079b6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80079ba:	431a      	orrs	r2, r3
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	6a1b      	ldr	r3, [r3, #32]
 80079c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079c4:	ea42 0103 	orr.w	r1, r2, r3
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079cc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	430a      	orrs	r2, r1
 80079d6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	699b      	ldr	r3, [r3, #24]
 80079dc:	0c1b      	lsrs	r3, r3, #16
 80079de:	f003 0104 	and.w	r1, r3, #4
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079e6:	f003 0210 	and.w	r2, r3, #16
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	430a      	orrs	r2, r1
 80079f0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	69da      	ldr	r2, [r3, #28]
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007a00:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	2200      	movs	r2, #0
 8007a06:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2201      	movs	r2, #1
 8007a0c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007a10:	2300      	movs	r3, #0
}
 8007a12:	4618      	mov	r0, r3
 8007a14:	3708      	adds	r7, #8
 8007a16:	46bd      	mov	sp, r7
 8007a18:	bd80      	pop	{r7, pc}
	...

08007a1c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007a1c:	b480      	push	{r7}
 8007a1e:	b085      	sub	sp, #20
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a2a:	b2db      	uxtb	r3, r3
 8007a2c:	2b01      	cmp	r3, #1
 8007a2e:	d001      	beq.n	8007a34 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007a30:	2301      	movs	r3, #1
 8007a32:	e046      	b.n	8007ac2 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2202      	movs	r2, #2
 8007a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	4a23      	ldr	r2, [pc, #140]	; (8007ad0 <HAL_TIM_Base_Start+0xb4>)
 8007a42:	4293      	cmp	r3, r2
 8007a44:	d022      	beq.n	8007a8c <HAL_TIM_Base_Start+0x70>
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a4e:	d01d      	beq.n	8007a8c <HAL_TIM_Base_Start+0x70>
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	4a1f      	ldr	r2, [pc, #124]	; (8007ad4 <HAL_TIM_Base_Start+0xb8>)
 8007a56:	4293      	cmp	r3, r2
 8007a58:	d018      	beq.n	8007a8c <HAL_TIM_Base_Start+0x70>
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	4a1e      	ldr	r2, [pc, #120]	; (8007ad8 <HAL_TIM_Base_Start+0xbc>)
 8007a60:	4293      	cmp	r3, r2
 8007a62:	d013      	beq.n	8007a8c <HAL_TIM_Base_Start+0x70>
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	4a1c      	ldr	r2, [pc, #112]	; (8007adc <HAL_TIM_Base_Start+0xc0>)
 8007a6a:	4293      	cmp	r3, r2
 8007a6c:	d00e      	beq.n	8007a8c <HAL_TIM_Base_Start+0x70>
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	4a1b      	ldr	r2, [pc, #108]	; (8007ae0 <HAL_TIM_Base_Start+0xc4>)
 8007a74:	4293      	cmp	r3, r2
 8007a76:	d009      	beq.n	8007a8c <HAL_TIM_Base_Start+0x70>
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	4a19      	ldr	r2, [pc, #100]	; (8007ae4 <HAL_TIM_Base_Start+0xc8>)
 8007a7e:	4293      	cmp	r3, r2
 8007a80:	d004      	beq.n	8007a8c <HAL_TIM_Base_Start+0x70>
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	4a18      	ldr	r2, [pc, #96]	; (8007ae8 <HAL_TIM_Base_Start+0xcc>)
 8007a88:	4293      	cmp	r3, r2
 8007a8a:	d111      	bne.n	8007ab0 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	689b      	ldr	r3, [r3, #8]
 8007a92:	f003 0307 	and.w	r3, r3, #7
 8007a96:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	2b06      	cmp	r3, #6
 8007a9c:	d010      	beq.n	8007ac0 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	681a      	ldr	r2, [r3, #0]
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	f042 0201 	orr.w	r2, r2, #1
 8007aac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007aae:	e007      	b.n	8007ac0 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	681a      	ldr	r2, [r3, #0]
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	f042 0201 	orr.w	r2, r2, #1
 8007abe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007ac0:	2300      	movs	r3, #0
}
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	3714      	adds	r7, #20
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007acc:	4770      	bx	lr
 8007ace:	bf00      	nop
 8007ad0:	40010000 	.word	0x40010000
 8007ad4:	40000400 	.word	0x40000400
 8007ad8:	40000800 	.word	0x40000800
 8007adc:	40000c00 	.word	0x40000c00
 8007ae0:	40010400 	.word	0x40010400
 8007ae4:	40014000 	.word	0x40014000
 8007ae8:	40001800 	.word	0x40001800

08007aec <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b082      	sub	sp, #8
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d101      	bne.n	8007afe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007afa:	2301      	movs	r3, #1
 8007afc:	e041      	b.n	8007b82 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b04:	b2db      	uxtb	r3, r3
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d106      	bne.n	8007b18 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	2200      	movs	r2, #0
 8007b0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007b12:	6878      	ldr	r0, [r7, #4]
 8007b14:	f7fa f896 	bl	8001c44 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	2202      	movs	r2, #2
 8007b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681a      	ldr	r2, [r3, #0]
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	3304      	adds	r3, #4
 8007b28:	4619      	mov	r1, r3
 8007b2a:	4610      	mov	r0, r2
 8007b2c:	f000 fae8 	bl	8008100 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2201      	movs	r2, #1
 8007b34:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2201      	movs	r2, #1
 8007b3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2201      	movs	r2, #1
 8007b44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2201      	movs	r2, #1
 8007b4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2201      	movs	r2, #1
 8007b54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2201      	movs	r2, #1
 8007b5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2201      	movs	r2, #1
 8007b64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2201      	movs	r2, #1
 8007b6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2201      	movs	r2, #1
 8007b74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	2201      	movs	r2, #1
 8007b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007b80:	2300      	movs	r3, #0
}
 8007b82:	4618      	mov	r0, r3
 8007b84:	3708      	adds	r7, #8
 8007b86:	46bd      	mov	sp, r7
 8007b88:	bd80      	pop	{r7, pc}
	...

08007b8c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b084      	sub	sp, #16
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
 8007b94:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007b96:	683b      	ldr	r3, [r7, #0]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d109      	bne.n	8007bb0 <HAL_TIM_PWM_Start+0x24>
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007ba2:	b2db      	uxtb	r3, r3
 8007ba4:	2b01      	cmp	r3, #1
 8007ba6:	bf14      	ite	ne
 8007ba8:	2301      	movne	r3, #1
 8007baa:	2300      	moveq	r3, #0
 8007bac:	b2db      	uxtb	r3, r3
 8007bae:	e022      	b.n	8007bf6 <HAL_TIM_PWM_Start+0x6a>
 8007bb0:	683b      	ldr	r3, [r7, #0]
 8007bb2:	2b04      	cmp	r3, #4
 8007bb4:	d109      	bne.n	8007bca <HAL_TIM_PWM_Start+0x3e>
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007bbc:	b2db      	uxtb	r3, r3
 8007bbe:	2b01      	cmp	r3, #1
 8007bc0:	bf14      	ite	ne
 8007bc2:	2301      	movne	r3, #1
 8007bc4:	2300      	moveq	r3, #0
 8007bc6:	b2db      	uxtb	r3, r3
 8007bc8:	e015      	b.n	8007bf6 <HAL_TIM_PWM_Start+0x6a>
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	2b08      	cmp	r3, #8
 8007bce:	d109      	bne.n	8007be4 <HAL_TIM_PWM_Start+0x58>
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007bd6:	b2db      	uxtb	r3, r3
 8007bd8:	2b01      	cmp	r3, #1
 8007bda:	bf14      	ite	ne
 8007bdc:	2301      	movne	r3, #1
 8007bde:	2300      	moveq	r3, #0
 8007be0:	b2db      	uxtb	r3, r3
 8007be2:	e008      	b.n	8007bf6 <HAL_TIM_PWM_Start+0x6a>
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007bea:	b2db      	uxtb	r3, r3
 8007bec:	2b01      	cmp	r3, #1
 8007bee:	bf14      	ite	ne
 8007bf0:	2301      	movne	r3, #1
 8007bf2:	2300      	moveq	r3, #0
 8007bf4:	b2db      	uxtb	r3, r3
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d001      	beq.n	8007bfe <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007bfa:	2301      	movs	r3, #1
 8007bfc:	e07c      	b.n	8007cf8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007bfe:	683b      	ldr	r3, [r7, #0]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d104      	bne.n	8007c0e <HAL_TIM_PWM_Start+0x82>
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2202      	movs	r2, #2
 8007c08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007c0c:	e013      	b.n	8007c36 <HAL_TIM_PWM_Start+0xaa>
 8007c0e:	683b      	ldr	r3, [r7, #0]
 8007c10:	2b04      	cmp	r3, #4
 8007c12:	d104      	bne.n	8007c1e <HAL_TIM_PWM_Start+0x92>
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2202      	movs	r2, #2
 8007c18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007c1c:	e00b      	b.n	8007c36 <HAL_TIM_PWM_Start+0xaa>
 8007c1e:	683b      	ldr	r3, [r7, #0]
 8007c20:	2b08      	cmp	r3, #8
 8007c22:	d104      	bne.n	8007c2e <HAL_TIM_PWM_Start+0xa2>
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2202      	movs	r2, #2
 8007c28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007c2c:	e003      	b.n	8007c36 <HAL_TIM_PWM_Start+0xaa>
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	2202      	movs	r2, #2
 8007c32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	2201      	movs	r2, #1
 8007c3c:	6839      	ldr	r1, [r7, #0]
 8007c3e:	4618      	mov	r0, r3
 8007c40:	f000 fcae 	bl	80085a0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	4a2d      	ldr	r2, [pc, #180]	; (8007d00 <HAL_TIM_PWM_Start+0x174>)
 8007c4a:	4293      	cmp	r3, r2
 8007c4c:	d004      	beq.n	8007c58 <HAL_TIM_PWM_Start+0xcc>
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	4a2c      	ldr	r2, [pc, #176]	; (8007d04 <HAL_TIM_PWM_Start+0x178>)
 8007c54:	4293      	cmp	r3, r2
 8007c56:	d101      	bne.n	8007c5c <HAL_TIM_PWM_Start+0xd0>
 8007c58:	2301      	movs	r3, #1
 8007c5a:	e000      	b.n	8007c5e <HAL_TIM_PWM_Start+0xd2>
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d007      	beq.n	8007c72 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007c70:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	4a22      	ldr	r2, [pc, #136]	; (8007d00 <HAL_TIM_PWM_Start+0x174>)
 8007c78:	4293      	cmp	r3, r2
 8007c7a:	d022      	beq.n	8007cc2 <HAL_TIM_PWM_Start+0x136>
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c84:	d01d      	beq.n	8007cc2 <HAL_TIM_PWM_Start+0x136>
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	4a1f      	ldr	r2, [pc, #124]	; (8007d08 <HAL_TIM_PWM_Start+0x17c>)
 8007c8c:	4293      	cmp	r3, r2
 8007c8e:	d018      	beq.n	8007cc2 <HAL_TIM_PWM_Start+0x136>
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	4a1d      	ldr	r2, [pc, #116]	; (8007d0c <HAL_TIM_PWM_Start+0x180>)
 8007c96:	4293      	cmp	r3, r2
 8007c98:	d013      	beq.n	8007cc2 <HAL_TIM_PWM_Start+0x136>
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	4a1c      	ldr	r2, [pc, #112]	; (8007d10 <HAL_TIM_PWM_Start+0x184>)
 8007ca0:	4293      	cmp	r3, r2
 8007ca2:	d00e      	beq.n	8007cc2 <HAL_TIM_PWM_Start+0x136>
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	4a16      	ldr	r2, [pc, #88]	; (8007d04 <HAL_TIM_PWM_Start+0x178>)
 8007caa:	4293      	cmp	r3, r2
 8007cac:	d009      	beq.n	8007cc2 <HAL_TIM_PWM_Start+0x136>
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	4a18      	ldr	r2, [pc, #96]	; (8007d14 <HAL_TIM_PWM_Start+0x188>)
 8007cb4:	4293      	cmp	r3, r2
 8007cb6:	d004      	beq.n	8007cc2 <HAL_TIM_PWM_Start+0x136>
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	4a16      	ldr	r2, [pc, #88]	; (8007d18 <HAL_TIM_PWM_Start+0x18c>)
 8007cbe:	4293      	cmp	r3, r2
 8007cc0:	d111      	bne.n	8007ce6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	689b      	ldr	r3, [r3, #8]
 8007cc8:	f003 0307 	and.w	r3, r3, #7
 8007ccc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	2b06      	cmp	r3, #6
 8007cd2:	d010      	beq.n	8007cf6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	681a      	ldr	r2, [r3, #0]
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	f042 0201 	orr.w	r2, r2, #1
 8007ce2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ce4:	e007      	b.n	8007cf6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	681a      	ldr	r2, [r3, #0]
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	f042 0201 	orr.w	r2, r2, #1
 8007cf4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007cf6:	2300      	movs	r3, #0
}
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	3710      	adds	r7, #16
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	bd80      	pop	{r7, pc}
 8007d00:	40010000 	.word	0x40010000
 8007d04:	40010400 	.word	0x40010400
 8007d08:	40000400 	.word	0x40000400
 8007d0c:	40000800 	.word	0x40000800
 8007d10:	40000c00 	.word	0x40000c00
 8007d14:	40014000 	.word	0x40014000
 8007d18:	40001800 	.word	0x40001800

08007d1c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b082      	sub	sp, #8
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	691b      	ldr	r3, [r3, #16]
 8007d2a:	f003 0302 	and.w	r3, r3, #2
 8007d2e:	2b02      	cmp	r3, #2
 8007d30:	d122      	bne.n	8007d78 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	68db      	ldr	r3, [r3, #12]
 8007d38:	f003 0302 	and.w	r3, r3, #2
 8007d3c:	2b02      	cmp	r3, #2
 8007d3e:	d11b      	bne.n	8007d78 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	f06f 0202 	mvn.w	r2, #2
 8007d48:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2201      	movs	r2, #1
 8007d4e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	699b      	ldr	r3, [r3, #24]
 8007d56:	f003 0303 	and.w	r3, r3, #3
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d003      	beq.n	8007d66 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007d5e:	6878      	ldr	r0, [r7, #4]
 8007d60:	f000 f9b0 	bl	80080c4 <HAL_TIM_IC_CaptureCallback>
 8007d64:	e005      	b.n	8007d72 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d66:	6878      	ldr	r0, [r7, #4]
 8007d68:	f000 f9a2 	bl	80080b0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d6c:	6878      	ldr	r0, [r7, #4]
 8007d6e:	f000 f9b3 	bl	80080d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	2200      	movs	r2, #0
 8007d76:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	691b      	ldr	r3, [r3, #16]
 8007d7e:	f003 0304 	and.w	r3, r3, #4
 8007d82:	2b04      	cmp	r3, #4
 8007d84:	d122      	bne.n	8007dcc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	68db      	ldr	r3, [r3, #12]
 8007d8c:	f003 0304 	and.w	r3, r3, #4
 8007d90:	2b04      	cmp	r3, #4
 8007d92:	d11b      	bne.n	8007dcc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	f06f 0204 	mvn.w	r2, #4
 8007d9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	2202      	movs	r2, #2
 8007da2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	699b      	ldr	r3, [r3, #24]
 8007daa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d003      	beq.n	8007dba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007db2:	6878      	ldr	r0, [r7, #4]
 8007db4:	f000 f986 	bl	80080c4 <HAL_TIM_IC_CaptureCallback>
 8007db8:	e005      	b.n	8007dc6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007dba:	6878      	ldr	r0, [r7, #4]
 8007dbc:	f000 f978 	bl	80080b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007dc0:	6878      	ldr	r0, [r7, #4]
 8007dc2:	f000 f989 	bl	80080d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	2200      	movs	r2, #0
 8007dca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	691b      	ldr	r3, [r3, #16]
 8007dd2:	f003 0308 	and.w	r3, r3, #8
 8007dd6:	2b08      	cmp	r3, #8
 8007dd8:	d122      	bne.n	8007e20 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	68db      	ldr	r3, [r3, #12]
 8007de0:	f003 0308 	and.w	r3, r3, #8
 8007de4:	2b08      	cmp	r3, #8
 8007de6:	d11b      	bne.n	8007e20 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	f06f 0208 	mvn.w	r2, #8
 8007df0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	2204      	movs	r2, #4
 8007df6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	69db      	ldr	r3, [r3, #28]
 8007dfe:	f003 0303 	and.w	r3, r3, #3
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d003      	beq.n	8007e0e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007e06:	6878      	ldr	r0, [r7, #4]
 8007e08:	f000 f95c 	bl	80080c4 <HAL_TIM_IC_CaptureCallback>
 8007e0c:	e005      	b.n	8007e1a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e0e:	6878      	ldr	r0, [r7, #4]
 8007e10:	f000 f94e 	bl	80080b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e14:	6878      	ldr	r0, [r7, #4]
 8007e16:	f000 f95f 	bl	80080d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	691b      	ldr	r3, [r3, #16]
 8007e26:	f003 0310 	and.w	r3, r3, #16
 8007e2a:	2b10      	cmp	r3, #16
 8007e2c:	d122      	bne.n	8007e74 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	68db      	ldr	r3, [r3, #12]
 8007e34:	f003 0310 	and.w	r3, r3, #16
 8007e38:	2b10      	cmp	r3, #16
 8007e3a:	d11b      	bne.n	8007e74 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	f06f 0210 	mvn.w	r2, #16
 8007e44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	2208      	movs	r2, #8
 8007e4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	69db      	ldr	r3, [r3, #28]
 8007e52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d003      	beq.n	8007e62 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007e5a:	6878      	ldr	r0, [r7, #4]
 8007e5c:	f000 f932 	bl	80080c4 <HAL_TIM_IC_CaptureCallback>
 8007e60:	e005      	b.n	8007e6e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e62:	6878      	ldr	r0, [r7, #4]
 8007e64:	f000 f924 	bl	80080b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e68:	6878      	ldr	r0, [r7, #4]
 8007e6a:	f000 f935 	bl	80080d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	2200      	movs	r2, #0
 8007e72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	691b      	ldr	r3, [r3, #16]
 8007e7a:	f003 0301 	and.w	r3, r3, #1
 8007e7e:	2b01      	cmp	r3, #1
 8007e80:	d10e      	bne.n	8007ea0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	68db      	ldr	r3, [r3, #12]
 8007e88:	f003 0301 	and.w	r3, r3, #1
 8007e8c:	2b01      	cmp	r3, #1
 8007e8e:	d107      	bne.n	8007ea0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	f06f 0201 	mvn.w	r2, #1
 8007e98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007e9a:	6878      	ldr	r0, [r7, #4]
 8007e9c:	f7fa fb76 	bl	800258c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	691b      	ldr	r3, [r3, #16]
 8007ea6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007eaa:	2b80      	cmp	r3, #128	; 0x80
 8007eac:	d10e      	bne.n	8007ecc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	68db      	ldr	r3, [r3, #12]
 8007eb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007eb8:	2b80      	cmp	r3, #128	; 0x80
 8007eba:	d107      	bne.n	8007ecc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007ec4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007ec6:	6878      	ldr	r0, [r7, #4]
 8007ec8:	f000 fc68 	bl	800879c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	691b      	ldr	r3, [r3, #16]
 8007ed2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ed6:	2b40      	cmp	r3, #64	; 0x40
 8007ed8:	d10e      	bne.n	8007ef8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	68db      	ldr	r3, [r3, #12]
 8007ee0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ee4:	2b40      	cmp	r3, #64	; 0x40
 8007ee6:	d107      	bne.n	8007ef8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007ef0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007ef2:	6878      	ldr	r0, [r7, #4]
 8007ef4:	f000 f8fa 	bl	80080ec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	691b      	ldr	r3, [r3, #16]
 8007efe:	f003 0320 	and.w	r3, r3, #32
 8007f02:	2b20      	cmp	r3, #32
 8007f04:	d10e      	bne.n	8007f24 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	68db      	ldr	r3, [r3, #12]
 8007f0c:	f003 0320 	and.w	r3, r3, #32
 8007f10:	2b20      	cmp	r3, #32
 8007f12:	d107      	bne.n	8007f24 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	f06f 0220 	mvn.w	r2, #32
 8007f1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007f1e:	6878      	ldr	r0, [r7, #4]
 8007f20:	f000 fc32 	bl	8008788 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007f24:	bf00      	nop
 8007f26:	3708      	adds	r7, #8
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	bd80      	pop	{r7, pc}

08007f2c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b086      	sub	sp, #24
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	60f8      	str	r0, [r7, #12]
 8007f34:	60b9      	str	r1, [r7, #8]
 8007f36:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007f38:	2300      	movs	r3, #0
 8007f3a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f42:	2b01      	cmp	r3, #1
 8007f44:	d101      	bne.n	8007f4a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007f46:	2302      	movs	r3, #2
 8007f48:	e0ae      	b.n	80080a8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	2201      	movs	r2, #1
 8007f4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	2b0c      	cmp	r3, #12
 8007f56:	f200 809f 	bhi.w	8008098 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007f5a:	a201      	add	r2, pc, #4	; (adr r2, 8007f60 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007f5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f60:	08007f95 	.word	0x08007f95
 8007f64:	08008099 	.word	0x08008099
 8007f68:	08008099 	.word	0x08008099
 8007f6c:	08008099 	.word	0x08008099
 8007f70:	08007fd5 	.word	0x08007fd5
 8007f74:	08008099 	.word	0x08008099
 8007f78:	08008099 	.word	0x08008099
 8007f7c:	08008099 	.word	0x08008099
 8007f80:	08008017 	.word	0x08008017
 8007f84:	08008099 	.word	0x08008099
 8007f88:	08008099 	.word	0x08008099
 8007f8c:	08008099 	.word	0x08008099
 8007f90:	08008057 	.word	0x08008057
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	68b9      	ldr	r1, [r7, #8]
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	f000 f950 	bl	8008240 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	699a      	ldr	r2, [r3, #24]
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	f042 0208 	orr.w	r2, r2, #8
 8007fae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	699a      	ldr	r2, [r3, #24]
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	f022 0204 	bic.w	r2, r2, #4
 8007fbe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	6999      	ldr	r1, [r3, #24]
 8007fc6:	68bb      	ldr	r3, [r7, #8]
 8007fc8:	691a      	ldr	r2, [r3, #16]
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	430a      	orrs	r2, r1
 8007fd0:	619a      	str	r2, [r3, #24]
      break;
 8007fd2:	e064      	b.n	800809e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	68b9      	ldr	r1, [r7, #8]
 8007fda:	4618      	mov	r0, r3
 8007fdc:	f000 f9a0 	bl	8008320 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	699a      	ldr	r2, [r3, #24]
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007fee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	699a      	ldr	r2, [r3, #24]
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007ffe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	6999      	ldr	r1, [r3, #24]
 8008006:	68bb      	ldr	r3, [r7, #8]
 8008008:	691b      	ldr	r3, [r3, #16]
 800800a:	021a      	lsls	r2, r3, #8
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	430a      	orrs	r2, r1
 8008012:	619a      	str	r2, [r3, #24]
      break;
 8008014:	e043      	b.n	800809e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	68b9      	ldr	r1, [r7, #8]
 800801c:	4618      	mov	r0, r3
 800801e:	f000 f9f5 	bl	800840c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	69da      	ldr	r2, [r3, #28]
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	f042 0208 	orr.w	r2, r2, #8
 8008030:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	69da      	ldr	r2, [r3, #28]
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	f022 0204 	bic.w	r2, r2, #4
 8008040:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	69d9      	ldr	r1, [r3, #28]
 8008048:	68bb      	ldr	r3, [r7, #8]
 800804a:	691a      	ldr	r2, [r3, #16]
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	430a      	orrs	r2, r1
 8008052:	61da      	str	r2, [r3, #28]
      break;
 8008054:	e023      	b.n	800809e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	68b9      	ldr	r1, [r7, #8]
 800805c:	4618      	mov	r0, r3
 800805e:	f000 fa49 	bl	80084f4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	69da      	ldr	r2, [r3, #28]
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008070:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	69da      	ldr	r2, [r3, #28]
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008080:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	69d9      	ldr	r1, [r3, #28]
 8008088:	68bb      	ldr	r3, [r7, #8]
 800808a:	691b      	ldr	r3, [r3, #16]
 800808c:	021a      	lsls	r2, r3, #8
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	430a      	orrs	r2, r1
 8008094:	61da      	str	r2, [r3, #28]
      break;
 8008096:	e002      	b.n	800809e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008098:	2301      	movs	r3, #1
 800809a:	75fb      	strb	r3, [r7, #23]
      break;
 800809c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	2200      	movs	r2, #0
 80080a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80080a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80080a8:	4618      	mov	r0, r3
 80080aa:	3718      	adds	r7, #24
 80080ac:	46bd      	mov	sp, r7
 80080ae:	bd80      	pop	{r7, pc}

080080b0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80080b0:	b480      	push	{r7}
 80080b2:	b083      	sub	sp, #12
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80080b8:	bf00      	nop
 80080ba:	370c      	adds	r7, #12
 80080bc:	46bd      	mov	sp, r7
 80080be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c2:	4770      	bx	lr

080080c4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80080c4:	b480      	push	{r7}
 80080c6:	b083      	sub	sp, #12
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80080cc:	bf00      	nop
 80080ce:	370c      	adds	r7, #12
 80080d0:	46bd      	mov	sp, r7
 80080d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d6:	4770      	bx	lr

080080d8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80080d8:	b480      	push	{r7}
 80080da:	b083      	sub	sp, #12
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80080e0:	bf00      	nop
 80080e2:	370c      	adds	r7, #12
 80080e4:	46bd      	mov	sp, r7
 80080e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ea:	4770      	bx	lr

080080ec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80080ec:	b480      	push	{r7}
 80080ee:	b083      	sub	sp, #12
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80080f4:	bf00      	nop
 80080f6:	370c      	adds	r7, #12
 80080f8:	46bd      	mov	sp, r7
 80080fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fe:	4770      	bx	lr

08008100 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008100:	b480      	push	{r7}
 8008102:	b085      	sub	sp, #20
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
 8008108:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	4a40      	ldr	r2, [pc, #256]	; (8008214 <TIM_Base_SetConfig+0x114>)
 8008114:	4293      	cmp	r3, r2
 8008116:	d013      	beq.n	8008140 <TIM_Base_SetConfig+0x40>
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800811e:	d00f      	beq.n	8008140 <TIM_Base_SetConfig+0x40>
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	4a3d      	ldr	r2, [pc, #244]	; (8008218 <TIM_Base_SetConfig+0x118>)
 8008124:	4293      	cmp	r3, r2
 8008126:	d00b      	beq.n	8008140 <TIM_Base_SetConfig+0x40>
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	4a3c      	ldr	r2, [pc, #240]	; (800821c <TIM_Base_SetConfig+0x11c>)
 800812c:	4293      	cmp	r3, r2
 800812e:	d007      	beq.n	8008140 <TIM_Base_SetConfig+0x40>
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	4a3b      	ldr	r2, [pc, #236]	; (8008220 <TIM_Base_SetConfig+0x120>)
 8008134:	4293      	cmp	r3, r2
 8008136:	d003      	beq.n	8008140 <TIM_Base_SetConfig+0x40>
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	4a3a      	ldr	r2, [pc, #232]	; (8008224 <TIM_Base_SetConfig+0x124>)
 800813c:	4293      	cmp	r3, r2
 800813e:	d108      	bne.n	8008152 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008146:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	685b      	ldr	r3, [r3, #4]
 800814c:	68fa      	ldr	r2, [r7, #12]
 800814e:	4313      	orrs	r3, r2
 8008150:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	4a2f      	ldr	r2, [pc, #188]	; (8008214 <TIM_Base_SetConfig+0x114>)
 8008156:	4293      	cmp	r3, r2
 8008158:	d02b      	beq.n	80081b2 <TIM_Base_SetConfig+0xb2>
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008160:	d027      	beq.n	80081b2 <TIM_Base_SetConfig+0xb2>
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	4a2c      	ldr	r2, [pc, #176]	; (8008218 <TIM_Base_SetConfig+0x118>)
 8008166:	4293      	cmp	r3, r2
 8008168:	d023      	beq.n	80081b2 <TIM_Base_SetConfig+0xb2>
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	4a2b      	ldr	r2, [pc, #172]	; (800821c <TIM_Base_SetConfig+0x11c>)
 800816e:	4293      	cmp	r3, r2
 8008170:	d01f      	beq.n	80081b2 <TIM_Base_SetConfig+0xb2>
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	4a2a      	ldr	r2, [pc, #168]	; (8008220 <TIM_Base_SetConfig+0x120>)
 8008176:	4293      	cmp	r3, r2
 8008178:	d01b      	beq.n	80081b2 <TIM_Base_SetConfig+0xb2>
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	4a29      	ldr	r2, [pc, #164]	; (8008224 <TIM_Base_SetConfig+0x124>)
 800817e:	4293      	cmp	r3, r2
 8008180:	d017      	beq.n	80081b2 <TIM_Base_SetConfig+0xb2>
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	4a28      	ldr	r2, [pc, #160]	; (8008228 <TIM_Base_SetConfig+0x128>)
 8008186:	4293      	cmp	r3, r2
 8008188:	d013      	beq.n	80081b2 <TIM_Base_SetConfig+0xb2>
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	4a27      	ldr	r2, [pc, #156]	; (800822c <TIM_Base_SetConfig+0x12c>)
 800818e:	4293      	cmp	r3, r2
 8008190:	d00f      	beq.n	80081b2 <TIM_Base_SetConfig+0xb2>
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	4a26      	ldr	r2, [pc, #152]	; (8008230 <TIM_Base_SetConfig+0x130>)
 8008196:	4293      	cmp	r3, r2
 8008198:	d00b      	beq.n	80081b2 <TIM_Base_SetConfig+0xb2>
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	4a25      	ldr	r2, [pc, #148]	; (8008234 <TIM_Base_SetConfig+0x134>)
 800819e:	4293      	cmp	r3, r2
 80081a0:	d007      	beq.n	80081b2 <TIM_Base_SetConfig+0xb2>
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	4a24      	ldr	r2, [pc, #144]	; (8008238 <TIM_Base_SetConfig+0x138>)
 80081a6:	4293      	cmp	r3, r2
 80081a8:	d003      	beq.n	80081b2 <TIM_Base_SetConfig+0xb2>
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	4a23      	ldr	r2, [pc, #140]	; (800823c <TIM_Base_SetConfig+0x13c>)
 80081ae:	4293      	cmp	r3, r2
 80081b0:	d108      	bne.n	80081c4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80081b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80081ba:	683b      	ldr	r3, [r7, #0]
 80081bc:	68db      	ldr	r3, [r3, #12]
 80081be:	68fa      	ldr	r2, [r7, #12]
 80081c0:	4313      	orrs	r3, r2
 80081c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80081ca:	683b      	ldr	r3, [r7, #0]
 80081cc:	695b      	ldr	r3, [r3, #20]
 80081ce:	4313      	orrs	r3, r2
 80081d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	68fa      	ldr	r2, [r7, #12]
 80081d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80081d8:	683b      	ldr	r3, [r7, #0]
 80081da:	689a      	ldr	r2, [r3, #8]
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80081e0:	683b      	ldr	r3, [r7, #0]
 80081e2:	681a      	ldr	r2, [r3, #0]
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	4a0a      	ldr	r2, [pc, #40]	; (8008214 <TIM_Base_SetConfig+0x114>)
 80081ec:	4293      	cmp	r3, r2
 80081ee:	d003      	beq.n	80081f8 <TIM_Base_SetConfig+0xf8>
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	4a0c      	ldr	r2, [pc, #48]	; (8008224 <TIM_Base_SetConfig+0x124>)
 80081f4:	4293      	cmp	r3, r2
 80081f6:	d103      	bne.n	8008200 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	691a      	ldr	r2, [r3, #16]
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2201      	movs	r2, #1
 8008204:	615a      	str	r2, [r3, #20]
}
 8008206:	bf00      	nop
 8008208:	3714      	adds	r7, #20
 800820a:	46bd      	mov	sp, r7
 800820c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008210:	4770      	bx	lr
 8008212:	bf00      	nop
 8008214:	40010000 	.word	0x40010000
 8008218:	40000400 	.word	0x40000400
 800821c:	40000800 	.word	0x40000800
 8008220:	40000c00 	.word	0x40000c00
 8008224:	40010400 	.word	0x40010400
 8008228:	40014000 	.word	0x40014000
 800822c:	40014400 	.word	0x40014400
 8008230:	40014800 	.word	0x40014800
 8008234:	40001800 	.word	0x40001800
 8008238:	40001c00 	.word	0x40001c00
 800823c:	40002000 	.word	0x40002000

08008240 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008240:	b480      	push	{r7}
 8008242:	b087      	sub	sp, #28
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
 8008248:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	6a1b      	ldr	r3, [r3, #32]
 800824e:	f023 0201 	bic.w	r2, r3, #1
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	6a1b      	ldr	r3, [r3, #32]
 800825a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	685b      	ldr	r3, [r3, #4]
 8008260:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	699b      	ldr	r3, [r3, #24]
 8008266:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800826e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	f023 0303 	bic.w	r3, r3, #3
 8008276:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008278:	683b      	ldr	r3, [r7, #0]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	68fa      	ldr	r2, [r7, #12]
 800827e:	4313      	orrs	r3, r2
 8008280:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008282:	697b      	ldr	r3, [r7, #20]
 8008284:	f023 0302 	bic.w	r3, r3, #2
 8008288:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800828a:	683b      	ldr	r3, [r7, #0]
 800828c:	689b      	ldr	r3, [r3, #8]
 800828e:	697a      	ldr	r2, [r7, #20]
 8008290:	4313      	orrs	r3, r2
 8008292:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	4a20      	ldr	r2, [pc, #128]	; (8008318 <TIM_OC1_SetConfig+0xd8>)
 8008298:	4293      	cmp	r3, r2
 800829a:	d003      	beq.n	80082a4 <TIM_OC1_SetConfig+0x64>
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	4a1f      	ldr	r2, [pc, #124]	; (800831c <TIM_OC1_SetConfig+0xdc>)
 80082a0:	4293      	cmp	r3, r2
 80082a2:	d10c      	bne.n	80082be <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80082a4:	697b      	ldr	r3, [r7, #20]
 80082a6:	f023 0308 	bic.w	r3, r3, #8
 80082aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80082ac:	683b      	ldr	r3, [r7, #0]
 80082ae:	68db      	ldr	r3, [r3, #12]
 80082b0:	697a      	ldr	r2, [r7, #20]
 80082b2:	4313      	orrs	r3, r2
 80082b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80082b6:	697b      	ldr	r3, [r7, #20]
 80082b8:	f023 0304 	bic.w	r3, r3, #4
 80082bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	4a15      	ldr	r2, [pc, #84]	; (8008318 <TIM_OC1_SetConfig+0xd8>)
 80082c2:	4293      	cmp	r3, r2
 80082c4:	d003      	beq.n	80082ce <TIM_OC1_SetConfig+0x8e>
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	4a14      	ldr	r2, [pc, #80]	; (800831c <TIM_OC1_SetConfig+0xdc>)
 80082ca:	4293      	cmp	r3, r2
 80082cc:	d111      	bne.n	80082f2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80082ce:	693b      	ldr	r3, [r7, #16]
 80082d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80082d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80082d6:	693b      	ldr	r3, [r7, #16]
 80082d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80082dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	695b      	ldr	r3, [r3, #20]
 80082e2:	693a      	ldr	r2, [r7, #16]
 80082e4:	4313      	orrs	r3, r2
 80082e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80082e8:	683b      	ldr	r3, [r7, #0]
 80082ea:	699b      	ldr	r3, [r3, #24]
 80082ec:	693a      	ldr	r2, [r7, #16]
 80082ee:	4313      	orrs	r3, r2
 80082f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	693a      	ldr	r2, [r7, #16]
 80082f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	68fa      	ldr	r2, [r7, #12]
 80082fc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80082fe:	683b      	ldr	r3, [r7, #0]
 8008300:	685a      	ldr	r2, [r3, #4]
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	697a      	ldr	r2, [r7, #20]
 800830a:	621a      	str	r2, [r3, #32]
}
 800830c:	bf00      	nop
 800830e:	371c      	adds	r7, #28
 8008310:	46bd      	mov	sp, r7
 8008312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008316:	4770      	bx	lr
 8008318:	40010000 	.word	0x40010000
 800831c:	40010400 	.word	0x40010400

08008320 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008320:	b480      	push	{r7}
 8008322:	b087      	sub	sp, #28
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]
 8008328:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	6a1b      	ldr	r3, [r3, #32]
 800832e:	f023 0210 	bic.w	r2, r3, #16
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	6a1b      	ldr	r3, [r3, #32]
 800833a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	685b      	ldr	r3, [r3, #4]
 8008340:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	699b      	ldr	r3, [r3, #24]
 8008346:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800834e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008356:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008358:	683b      	ldr	r3, [r7, #0]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	021b      	lsls	r3, r3, #8
 800835e:	68fa      	ldr	r2, [r7, #12]
 8008360:	4313      	orrs	r3, r2
 8008362:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008364:	697b      	ldr	r3, [r7, #20]
 8008366:	f023 0320 	bic.w	r3, r3, #32
 800836a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800836c:	683b      	ldr	r3, [r7, #0]
 800836e:	689b      	ldr	r3, [r3, #8]
 8008370:	011b      	lsls	r3, r3, #4
 8008372:	697a      	ldr	r2, [r7, #20]
 8008374:	4313      	orrs	r3, r2
 8008376:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	4a22      	ldr	r2, [pc, #136]	; (8008404 <TIM_OC2_SetConfig+0xe4>)
 800837c:	4293      	cmp	r3, r2
 800837e:	d003      	beq.n	8008388 <TIM_OC2_SetConfig+0x68>
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	4a21      	ldr	r2, [pc, #132]	; (8008408 <TIM_OC2_SetConfig+0xe8>)
 8008384:	4293      	cmp	r3, r2
 8008386:	d10d      	bne.n	80083a4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008388:	697b      	ldr	r3, [r7, #20]
 800838a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800838e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	68db      	ldr	r3, [r3, #12]
 8008394:	011b      	lsls	r3, r3, #4
 8008396:	697a      	ldr	r2, [r7, #20]
 8008398:	4313      	orrs	r3, r2
 800839a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800839c:	697b      	ldr	r3, [r7, #20]
 800839e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80083a2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	4a17      	ldr	r2, [pc, #92]	; (8008404 <TIM_OC2_SetConfig+0xe4>)
 80083a8:	4293      	cmp	r3, r2
 80083aa:	d003      	beq.n	80083b4 <TIM_OC2_SetConfig+0x94>
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	4a16      	ldr	r2, [pc, #88]	; (8008408 <TIM_OC2_SetConfig+0xe8>)
 80083b0:	4293      	cmp	r3, r2
 80083b2:	d113      	bne.n	80083dc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80083b4:	693b      	ldr	r3, [r7, #16]
 80083b6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80083ba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80083bc:	693b      	ldr	r3, [r7, #16]
 80083be:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80083c2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80083c4:	683b      	ldr	r3, [r7, #0]
 80083c6:	695b      	ldr	r3, [r3, #20]
 80083c8:	009b      	lsls	r3, r3, #2
 80083ca:	693a      	ldr	r2, [r7, #16]
 80083cc:	4313      	orrs	r3, r2
 80083ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80083d0:	683b      	ldr	r3, [r7, #0]
 80083d2:	699b      	ldr	r3, [r3, #24]
 80083d4:	009b      	lsls	r3, r3, #2
 80083d6:	693a      	ldr	r2, [r7, #16]
 80083d8:	4313      	orrs	r3, r2
 80083da:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	693a      	ldr	r2, [r7, #16]
 80083e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	68fa      	ldr	r2, [r7, #12]
 80083e6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80083e8:	683b      	ldr	r3, [r7, #0]
 80083ea:	685a      	ldr	r2, [r3, #4]
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	697a      	ldr	r2, [r7, #20]
 80083f4:	621a      	str	r2, [r3, #32]
}
 80083f6:	bf00      	nop
 80083f8:	371c      	adds	r7, #28
 80083fa:	46bd      	mov	sp, r7
 80083fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008400:	4770      	bx	lr
 8008402:	bf00      	nop
 8008404:	40010000 	.word	0x40010000
 8008408:	40010400 	.word	0x40010400

0800840c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800840c:	b480      	push	{r7}
 800840e:	b087      	sub	sp, #28
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]
 8008414:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	6a1b      	ldr	r3, [r3, #32]
 800841a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	6a1b      	ldr	r3, [r3, #32]
 8008426:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	685b      	ldr	r3, [r3, #4]
 800842c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	69db      	ldr	r3, [r3, #28]
 8008432:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800843a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	f023 0303 	bic.w	r3, r3, #3
 8008442:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008444:	683b      	ldr	r3, [r7, #0]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	68fa      	ldr	r2, [r7, #12]
 800844a:	4313      	orrs	r3, r2
 800844c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800844e:	697b      	ldr	r3, [r7, #20]
 8008450:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008454:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008456:	683b      	ldr	r3, [r7, #0]
 8008458:	689b      	ldr	r3, [r3, #8]
 800845a:	021b      	lsls	r3, r3, #8
 800845c:	697a      	ldr	r2, [r7, #20]
 800845e:	4313      	orrs	r3, r2
 8008460:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	4a21      	ldr	r2, [pc, #132]	; (80084ec <TIM_OC3_SetConfig+0xe0>)
 8008466:	4293      	cmp	r3, r2
 8008468:	d003      	beq.n	8008472 <TIM_OC3_SetConfig+0x66>
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	4a20      	ldr	r2, [pc, #128]	; (80084f0 <TIM_OC3_SetConfig+0xe4>)
 800846e:	4293      	cmp	r3, r2
 8008470:	d10d      	bne.n	800848e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008472:	697b      	ldr	r3, [r7, #20]
 8008474:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008478:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800847a:	683b      	ldr	r3, [r7, #0]
 800847c:	68db      	ldr	r3, [r3, #12]
 800847e:	021b      	lsls	r3, r3, #8
 8008480:	697a      	ldr	r2, [r7, #20]
 8008482:	4313      	orrs	r3, r2
 8008484:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008486:	697b      	ldr	r3, [r7, #20]
 8008488:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800848c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	4a16      	ldr	r2, [pc, #88]	; (80084ec <TIM_OC3_SetConfig+0xe0>)
 8008492:	4293      	cmp	r3, r2
 8008494:	d003      	beq.n	800849e <TIM_OC3_SetConfig+0x92>
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	4a15      	ldr	r2, [pc, #84]	; (80084f0 <TIM_OC3_SetConfig+0xe4>)
 800849a:	4293      	cmp	r3, r2
 800849c:	d113      	bne.n	80084c6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800849e:	693b      	ldr	r3, [r7, #16]
 80084a0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80084a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80084a6:	693b      	ldr	r3, [r7, #16]
 80084a8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80084ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80084ae:	683b      	ldr	r3, [r7, #0]
 80084b0:	695b      	ldr	r3, [r3, #20]
 80084b2:	011b      	lsls	r3, r3, #4
 80084b4:	693a      	ldr	r2, [r7, #16]
 80084b6:	4313      	orrs	r3, r2
 80084b8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80084ba:	683b      	ldr	r3, [r7, #0]
 80084bc:	699b      	ldr	r3, [r3, #24]
 80084be:	011b      	lsls	r3, r3, #4
 80084c0:	693a      	ldr	r2, [r7, #16]
 80084c2:	4313      	orrs	r3, r2
 80084c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	693a      	ldr	r2, [r7, #16]
 80084ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	68fa      	ldr	r2, [r7, #12]
 80084d0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80084d2:	683b      	ldr	r3, [r7, #0]
 80084d4:	685a      	ldr	r2, [r3, #4]
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	697a      	ldr	r2, [r7, #20]
 80084de:	621a      	str	r2, [r3, #32]
}
 80084e0:	bf00      	nop
 80084e2:	371c      	adds	r7, #28
 80084e4:	46bd      	mov	sp, r7
 80084e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ea:	4770      	bx	lr
 80084ec:	40010000 	.word	0x40010000
 80084f0:	40010400 	.word	0x40010400

080084f4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80084f4:	b480      	push	{r7}
 80084f6:	b087      	sub	sp, #28
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
 80084fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	6a1b      	ldr	r3, [r3, #32]
 8008502:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	6a1b      	ldr	r3, [r3, #32]
 800850e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	685b      	ldr	r3, [r3, #4]
 8008514:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	69db      	ldr	r3, [r3, #28]
 800851a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008522:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800852a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800852c:	683b      	ldr	r3, [r7, #0]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	021b      	lsls	r3, r3, #8
 8008532:	68fa      	ldr	r2, [r7, #12]
 8008534:	4313      	orrs	r3, r2
 8008536:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008538:	693b      	ldr	r3, [r7, #16]
 800853a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800853e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008540:	683b      	ldr	r3, [r7, #0]
 8008542:	689b      	ldr	r3, [r3, #8]
 8008544:	031b      	lsls	r3, r3, #12
 8008546:	693a      	ldr	r2, [r7, #16]
 8008548:	4313      	orrs	r3, r2
 800854a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	4a12      	ldr	r2, [pc, #72]	; (8008598 <TIM_OC4_SetConfig+0xa4>)
 8008550:	4293      	cmp	r3, r2
 8008552:	d003      	beq.n	800855c <TIM_OC4_SetConfig+0x68>
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	4a11      	ldr	r2, [pc, #68]	; (800859c <TIM_OC4_SetConfig+0xa8>)
 8008558:	4293      	cmp	r3, r2
 800855a:	d109      	bne.n	8008570 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800855c:	697b      	ldr	r3, [r7, #20]
 800855e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008562:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008564:	683b      	ldr	r3, [r7, #0]
 8008566:	695b      	ldr	r3, [r3, #20]
 8008568:	019b      	lsls	r3, r3, #6
 800856a:	697a      	ldr	r2, [r7, #20]
 800856c:	4313      	orrs	r3, r2
 800856e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	697a      	ldr	r2, [r7, #20]
 8008574:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	68fa      	ldr	r2, [r7, #12]
 800857a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800857c:	683b      	ldr	r3, [r7, #0]
 800857e:	685a      	ldr	r2, [r3, #4]
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	693a      	ldr	r2, [r7, #16]
 8008588:	621a      	str	r2, [r3, #32]
}
 800858a:	bf00      	nop
 800858c:	371c      	adds	r7, #28
 800858e:	46bd      	mov	sp, r7
 8008590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008594:	4770      	bx	lr
 8008596:	bf00      	nop
 8008598:	40010000 	.word	0x40010000
 800859c:	40010400 	.word	0x40010400

080085a0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80085a0:	b480      	push	{r7}
 80085a2:	b087      	sub	sp, #28
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	60f8      	str	r0, [r7, #12]
 80085a8:	60b9      	str	r1, [r7, #8]
 80085aa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80085ac:	68bb      	ldr	r3, [r7, #8]
 80085ae:	f003 031f 	and.w	r3, r3, #31
 80085b2:	2201      	movs	r2, #1
 80085b4:	fa02 f303 	lsl.w	r3, r2, r3
 80085b8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	6a1a      	ldr	r2, [r3, #32]
 80085be:	697b      	ldr	r3, [r7, #20]
 80085c0:	43db      	mvns	r3, r3
 80085c2:	401a      	ands	r2, r3
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	6a1a      	ldr	r2, [r3, #32]
 80085cc:	68bb      	ldr	r3, [r7, #8]
 80085ce:	f003 031f 	and.w	r3, r3, #31
 80085d2:	6879      	ldr	r1, [r7, #4]
 80085d4:	fa01 f303 	lsl.w	r3, r1, r3
 80085d8:	431a      	orrs	r2, r3
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	621a      	str	r2, [r3, #32]
}
 80085de:	bf00      	nop
 80085e0:	371c      	adds	r7, #28
 80085e2:	46bd      	mov	sp, r7
 80085e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e8:	4770      	bx	lr
	...

080085ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80085ec:	b480      	push	{r7}
 80085ee:	b085      	sub	sp, #20
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	6078      	str	r0, [r7, #4]
 80085f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80085fc:	2b01      	cmp	r3, #1
 80085fe:	d101      	bne.n	8008604 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008600:	2302      	movs	r3, #2
 8008602:	e05a      	b.n	80086ba <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2201      	movs	r2, #1
 8008608:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2202      	movs	r2, #2
 8008610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	685b      	ldr	r3, [r3, #4]
 800861a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	689b      	ldr	r3, [r3, #8]
 8008622:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800862a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800862c:	683b      	ldr	r3, [r7, #0]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	68fa      	ldr	r2, [r7, #12]
 8008632:	4313      	orrs	r3, r2
 8008634:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	68fa      	ldr	r2, [r7, #12]
 800863c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	4a21      	ldr	r2, [pc, #132]	; (80086c8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008644:	4293      	cmp	r3, r2
 8008646:	d022      	beq.n	800868e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008650:	d01d      	beq.n	800868e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	4a1d      	ldr	r2, [pc, #116]	; (80086cc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008658:	4293      	cmp	r3, r2
 800865a:	d018      	beq.n	800868e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	4a1b      	ldr	r2, [pc, #108]	; (80086d0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008662:	4293      	cmp	r3, r2
 8008664:	d013      	beq.n	800868e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	4a1a      	ldr	r2, [pc, #104]	; (80086d4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800866c:	4293      	cmp	r3, r2
 800866e:	d00e      	beq.n	800868e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	4a18      	ldr	r2, [pc, #96]	; (80086d8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008676:	4293      	cmp	r3, r2
 8008678:	d009      	beq.n	800868e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	4a17      	ldr	r2, [pc, #92]	; (80086dc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008680:	4293      	cmp	r3, r2
 8008682:	d004      	beq.n	800868e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	4a15      	ldr	r2, [pc, #84]	; (80086e0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800868a:	4293      	cmp	r3, r2
 800868c:	d10c      	bne.n	80086a8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800868e:	68bb      	ldr	r3, [r7, #8]
 8008690:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008694:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008696:	683b      	ldr	r3, [r7, #0]
 8008698:	685b      	ldr	r3, [r3, #4]
 800869a:	68ba      	ldr	r2, [r7, #8]
 800869c:	4313      	orrs	r3, r2
 800869e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	68ba      	ldr	r2, [r7, #8]
 80086a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	2201      	movs	r2, #1
 80086ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	2200      	movs	r2, #0
 80086b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80086b8:	2300      	movs	r3, #0
}
 80086ba:	4618      	mov	r0, r3
 80086bc:	3714      	adds	r7, #20
 80086be:	46bd      	mov	sp, r7
 80086c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c4:	4770      	bx	lr
 80086c6:	bf00      	nop
 80086c8:	40010000 	.word	0x40010000
 80086cc:	40000400 	.word	0x40000400
 80086d0:	40000800 	.word	0x40000800
 80086d4:	40000c00 	.word	0x40000c00
 80086d8:	40010400 	.word	0x40010400
 80086dc:	40014000 	.word	0x40014000
 80086e0:	40001800 	.word	0x40001800

080086e4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80086e4:	b480      	push	{r7}
 80086e6:	b085      	sub	sp, #20
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
 80086ec:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80086ee:	2300      	movs	r3, #0
 80086f0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80086f8:	2b01      	cmp	r3, #1
 80086fa:	d101      	bne.n	8008700 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80086fc:	2302      	movs	r3, #2
 80086fe:	e03d      	b.n	800877c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	2201      	movs	r2, #1
 8008704:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800870e:	683b      	ldr	r3, [r7, #0]
 8008710:	68db      	ldr	r3, [r3, #12]
 8008712:	4313      	orrs	r3, r2
 8008714:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800871c:	683b      	ldr	r3, [r7, #0]
 800871e:	689b      	ldr	r3, [r3, #8]
 8008720:	4313      	orrs	r3, r2
 8008722:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800872a:	683b      	ldr	r3, [r7, #0]
 800872c:	685b      	ldr	r3, [r3, #4]
 800872e:	4313      	orrs	r3, r2
 8008730:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008738:	683b      	ldr	r3, [r7, #0]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	4313      	orrs	r3, r2
 800873e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008746:	683b      	ldr	r3, [r7, #0]
 8008748:	691b      	ldr	r3, [r3, #16]
 800874a:	4313      	orrs	r3, r2
 800874c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008754:	683b      	ldr	r3, [r7, #0]
 8008756:	695b      	ldr	r3, [r3, #20]
 8008758:	4313      	orrs	r3, r2
 800875a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008762:	683b      	ldr	r3, [r7, #0]
 8008764:	69db      	ldr	r3, [r3, #28]
 8008766:	4313      	orrs	r3, r2
 8008768:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	68fa      	ldr	r2, [r7, #12]
 8008770:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	2200      	movs	r2, #0
 8008776:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800877a:	2300      	movs	r3, #0
}
 800877c:	4618      	mov	r0, r3
 800877e:	3714      	adds	r7, #20
 8008780:	46bd      	mov	sp, r7
 8008782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008786:	4770      	bx	lr

08008788 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008788:	b480      	push	{r7}
 800878a:	b083      	sub	sp, #12
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008790:	bf00      	nop
 8008792:	370c      	adds	r7, #12
 8008794:	46bd      	mov	sp, r7
 8008796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879a:	4770      	bx	lr

0800879c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800879c:	b480      	push	{r7}
 800879e:	b083      	sub	sp, #12
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80087a4:	bf00      	nop
 80087a6:	370c      	adds	r7, #12
 80087a8:	46bd      	mov	sp, r7
 80087aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ae:	4770      	bx	lr

080087b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80087b0:	b580      	push	{r7, lr}
 80087b2:	b082      	sub	sp, #8
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d101      	bne.n	80087c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80087be:	2301      	movs	r3, #1
 80087c0:	e03f      	b.n	8008842 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80087c8:	b2db      	uxtb	r3, r3
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d106      	bne.n	80087dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	2200      	movs	r2, #0
 80087d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80087d6:	6878      	ldr	r0, [r7, #4]
 80087d8:	f7f9 facc 	bl	8001d74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	2224      	movs	r2, #36	; 0x24
 80087e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	68da      	ldr	r2, [r3, #12]
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80087f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80087f4:	6878      	ldr	r0, [r7, #4]
 80087f6:	f000 f929 	bl	8008a4c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	691a      	ldr	r2, [r3, #16]
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008808:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	695a      	ldr	r2, [r3, #20]
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008818:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	68da      	ldr	r2, [r3, #12]
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008828:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	2200      	movs	r2, #0
 800882e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	2220      	movs	r2, #32
 8008834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	2220      	movs	r2, #32
 800883c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008840:	2300      	movs	r3, #0
}
 8008842:	4618      	mov	r0, r3
 8008844:	3708      	adds	r7, #8
 8008846:	46bd      	mov	sp, r7
 8008848:	bd80      	pop	{r7, pc}

0800884a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800884a:	b580      	push	{r7, lr}
 800884c:	b08a      	sub	sp, #40	; 0x28
 800884e:	af02      	add	r7, sp, #8
 8008850:	60f8      	str	r0, [r7, #12]
 8008852:	60b9      	str	r1, [r7, #8]
 8008854:	603b      	str	r3, [r7, #0]
 8008856:	4613      	mov	r3, r2
 8008858:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800885a:	2300      	movs	r3, #0
 800885c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008864:	b2db      	uxtb	r3, r3
 8008866:	2b20      	cmp	r3, #32
 8008868:	d17c      	bne.n	8008964 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800886a:	68bb      	ldr	r3, [r7, #8]
 800886c:	2b00      	cmp	r3, #0
 800886e:	d002      	beq.n	8008876 <HAL_UART_Transmit+0x2c>
 8008870:	88fb      	ldrh	r3, [r7, #6]
 8008872:	2b00      	cmp	r3, #0
 8008874:	d101      	bne.n	800887a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008876:	2301      	movs	r3, #1
 8008878:	e075      	b.n	8008966 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008880:	2b01      	cmp	r3, #1
 8008882:	d101      	bne.n	8008888 <HAL_UART_Transmit+0x3e>
 8008884:	2302      	movs	r3, #2
 8008886:	e06e      	b.n	8008966 <HAL_UART_Transmit+0x11c>
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	2201      	movs	r2, #1
 800888c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	2200      	movs	r2, #0
 8008894:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	2221      	movs	r2, #33	; 0x21
 800889a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800889e:	f7fa f82d 	bl	80028fc <HAL_GetTick>
 80088a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	88fa      	ldrh	r2, [r7, #6]
 80088a8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	88fa      	ldrh	r2, [r7, #6]
 80088ae:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	689b      	ldr	r3, [r3, #8]
 80088b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80088b8:	d108      	bne.n	80088cc <HAL_UART_Transmit+0x82>
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	691b      	ldr	r3, [r3, #16]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d104      	bne.n	80088cc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80088c2:	2300      	movs	r3, #0
 80088c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80088c6:	68bb      	ldr	r3, [r7, #8]
 80088c8:	61bb      	str	r3, [r7, #24]
 80088ca:	e003      	b.n	80088d4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80088cc:	68bb      	ldr	r3, [r7, #8]
 80088ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80088d0:	2300      	movs	r3, #0
 80088d2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	2200      	movs	r2, #0
 80088d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80088dc:	e02a      	b.n	8008934 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80088de:	683b      	ldr	r3, [r7, #0]
 80088e0:	9300      	str	r3, [sp, #0]
 80088e2:	697b      	ldr	r3, [r7, #20]
 80088e4:	2200      	movs	r2, #0
 80088e6:	2180      	movs	r1, #128	; 0x80
 80088e8:	68f8      	ldr	r0, [r7, #12]
 80088ea:	f000 f840 	bl	800896e <UART_WaitOnFlagUntilTimeout>
 80088ee:	4603      	mov	r3, r0
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d001      	beq.n	80088f8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80088f4:	2303      	movs	r3, #3
 80088f6:	e036      	b.n	8008966 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80088f8:	69fb      	ldr	r3, [r7, #28]
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d10b      	bne.n	8008916 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80088fe:	69bb      	ldr	r3, [r7, #24]
 8008900:	881b      	ldrh	r3, [r3, #0]
 8008902:	461a      	mov	r2, r3
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800890c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800890e:	69bb      	ldr	r3, [r7, #24]
 8008910:	3302      	adds	r3, #2
 8008912:	61bb      	str	r3, [r7, #24]
 8008914:	e007      	b.n	8008926 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008916:	69fb      	ldr	r3, [r7, #28]
 8008918:	781a      	ldrb	r2, [r3, #0]
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008920:	69fb      	ldr	r3, [r7, #28]
 8008922:	3301      	adds	r3, #1
 8008924:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800892a:	b29b      	uxth	r3, r3
 800892c:	3b01      	subs	r3, #1
 800892e:	b29a      	uxth	r2, r3
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008938:	b29b      	uxth	r3, r3
 800893a:	2b00      	cmp	r3, #0
 800893c:	d1cf      	bne.n	80088de <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800893e:	683b      	ldr	r3, [r7, #0]
 8008940:	9300      	str	r3, [sp, #0]
 8008942:	697b      	ldr	r3, [r7, #20]
 8008944:	2200      	movs	r2, #0
 8008946:	2140      	movs	r1, #64	; 0x40
 8008948:	68f8      	ldr	r0, [r7, #12]
 800894a:	f000 f810 	bl	800896e <UART_WaitOnFlagUntilTimeout>
 800894e:	4603      	mov	r3, r0
 8008950:	2b00      	cmp	r3, #0
 8008952:	d001      	beq.n	8008958 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008954:	2303      	movs	r3, #3
 8008956:	e006      	b.n	8008966 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	2220      	movs	r2, #32
 800895c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8008960:	2300      	movs	r3, #0
 8008962:	e000      	b.n	8008966 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008964:	2302      	movs	r3, #2
  }
}
 8008966:	4618      	mov	r0, r3
 8008968:	3720      	adds	r7, #32
 800896a:	46bd      	mov	sp, r7
 800896c:	bd80      	pop	{r7, pc}

0800896e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800896e:	b580      	push	{r7, lr}
 8008970:	b090      	sub	sp, #64	; 0x40
 8008972:	af00      	add	r7, sp, #0
 8008974:	60f8      	str	r0, [r7, #12]
 8008976:	60b9      	str	r1, [r7, #8]
 8008978:	603b      	str	r3, [r7, #0]
 800897a:	4613      	mov	r3, r2
 800897c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800897e:	e050      	b.n	8008a22 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008980:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008982:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008986:	d04c      	beq.n	8008a22 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008988:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800898a:	2b00      	cmp	r3, #0
 800898c:	d007      	beq.n	800899e <UART_WaitOnFlagUntilTimeout+0x30>
 800898e:	f7f9 ffb5 	bl	80028fc <HAL_GetTick>
 8008992:	4602      	mov	r2, r0
 8008994:	683b      	ldr	r3, [r7, #0]
 8008996:	1ad3      	subs	r3, r2, r3
 8008998:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800899a:	429a      	cmp	r2, r3
 800899c:	d241      	bcs.n	8008a22 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	330c      	adds	r3, #12
 80089a4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089a8:	e853 3f00 	ldrex	r3, [r3]
 80089ac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80089ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089b0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80089b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	330c      	adds	r3, #12
 80089bc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80089be:	637a      	str	r2, [r7, #52]	; 0x34
 80089c0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089c2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80089c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80089c6:	e841 2300 	strex	r3, r2, [r1]
 80089ca:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80089cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d1e5      	bne.n	800899e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	3314      	adds	r3, #20
 80089d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089da:	697b      	ldr	r3, [r7, #20]
 80089dc:	e853 3f00 	ldrex	r3, [r3]
 80089e0:	613b      	str	r3, [r7, #16]
   return(result);
 80089e2:	693b      	ldr	r3, [r7, #16]
 80089e4:	f023 0301 	bic.w	r3, r3, #1
 80089e8:	63bb      	str	r3, [r7, #56]	; 0x38
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	3314      	adds	r3, #20
 80089f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80089f2:	623a      	str	r2, [r7, #32]
 80089f4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089f6:	69f9      	ldr	r1, [r7, #28]
 80089f8:	6a3a      	ldr	r2, [r7, #32]
 80089fa:	e841 2300 	strex	r3, r2, [r1]
 80089fe:	61bb      	str	r3, [r7, #24]
   return(result);
 8008a00:	69bb      	ldr	r3, [r7, #24]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d1e5      	bne.n	80089d2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	2220      	movs	r2, #32
 8008a0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	2220      	movs	r2, #32
 8008a12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	2200      	movs	r2, #0
 8008a1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008a1e:	2303      	movs	r3, #3
 8008a20:	e00f      	b.n	8008a42 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	681a      	ldr	r2, [r3, #0]
 8008a28:	68bb      	ldr	r3, [r7, #8]
 8008a2a:	4013      	ands	r3, r2
 8008a2c:	68ba      	ldr	r2, [r7, #8]
 8008a2e:	429a      	cmp	r2, r3
 8008a30:	bf0c      	ite	eq
 8008a32:	2301      	moveq	r3, #1
 8008a34:	2300      	movne	r3, #0
 8008a36:	b2db      	uxtb	r3, r3
 8008a38:	461a      	mov	r2, r3
 8008a3a:	79fb      	ldrb	r3, [r7, #7]
 8008a3c:	429a      	cmp	r2, r3
 8008a3e:	d09f      	beq.n	8008980 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008a40:	2300      	movs	r3, #0
}
 8008a42:	4618      	mov	r0, r3
 8008a44:	3740      	adds	r7, #64	; 0x40
 8008a46:	46bd      	mov	sp, r7
 8008a48:	bd80      	pop	{r7, pc}
	...

08008a4c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008a4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a50:	b09f      	sub	sp, #124	; 0x7c
 8008a52:	af00      	add	r7, sp, #0
 8008a54:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008a56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	691b      	ldr	r3, [r3, #16]
 8008a5c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008a60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a62:	68d9      	ldr	r1, [r3, #12]
 8008a64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a66:	681a      	ldr	r2, [r3, #0]
 8008a68:	ea40 0301 	orr.w	r3, r0, r1
 8008a6c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008a6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a70:	689a      	ldr	r2, [r3, #8]
 8008a72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a74:	691b      	ldr	r3, [r3, #16]
 8008a76:	431a      	orrs	r2, r3
 8008a78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a7a:	695b      	ldr	r3, [r3, #20]
 8008a7c:	431a      	orrs	r2, r3
 8008a7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a80:	69db      	ldr	r3, [r3, #28]
 8008a82:	4313      	orrs	r3, r2
 8008a84:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8008a86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	68db      	ldr	r3, [r3, #12]
 8008a8c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008a90:	f021 010c 	bic.w	r1, r1, #12
 8008a94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a96:	681a      	ldr	r2, [r3, #0]
 8008a98:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008a9a:	430b      	orrs	r3, r1
 8008a9c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008a9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	695b      	ldr	r3, [r3, #20]
 8008aa4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008aa8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008aaa:	6999      	ldr	r1, [r3, #24]
 8008aac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008aae:	681a      	ldr	r2, [r3, #0]
 8008ab0:	ea40 0301 	orr.w	r3, r0, r1
 8008ab4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008ab6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ab8:	681a      	ldr	r2, [r3, #0]
 8008aba:	4bc5      	ldr	r3, [pc, #788]	; (8008dd0 <UART_SetConfig+0x384>)
 8008abc:	429a      	cmp	r2, r3
 8008abe:	d004      	beq.n	8008aca <UART_SetConfig+0x7e>
 8008ac0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ac2:	681a      	ldr	r2, [r3, #0]
 8008ac4:	4bc3      	ldr	r3, [pc, #780]	; (8008dd4 <UART_SetConfig+0x388>)
 8008ac6:	429a      	cmp	r2, r3
 8008ac8:	d103      	bne.n	8008ad2 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008aca:	f7fe fdc9 	bl	8007660 <HAL_RCC_GetPCLK2Freq>
 8008ace:	6778      	str	r0, [r7, #116]	; 0x74
 8008ad0:	e002      	b.n	8008ad8 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008ad2:	f7fe fdb1 	bl	8007638 <HAL_RCC_GetPCLK1Freq>
 8008ad6:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008ad8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ada:	69db      	ldr	r3, [r3, #28]
 8008adc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008ae0:	f040 80b6 	bne.w	8008c50 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008ae4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008ae6:	461c      	mov	r4, r3
 8008ae8:	f04f 0500 	mov.w	r5, #0
 8008aec:	4622      	mov	r2, r4
 8008aee:	462b      	mov	r3, r5
 8008af0:	1891      	adds	r1, r2, r2
 8008af2:	6439      	str	r1, [r7, #64]	; 0x40
 8008af4:	415b      	adcs	r3, r3
 8008af6:	647b      	str	r3, [r7, #68]	; 0x44
 8008af8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008afc:	1912      	adds	r2, r2, r4
 8008afe:	eb45 0303 	adc.w	r3, r5, r3
 8008b02:	f04f 0000 	mov.w	r0, #0
 8008b06:	f04f 0100 	mov.w	r1, #0
 8008b0a:	00d9      	lsls	r1, r3, #3
 8008b0c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008b10:	00d0      	lsls	r0, r2, #3
 8008b12:	4602      	mov	r2, r0
 8008b14:	460b      	mov	r3, r1
 8008b16:	1911      	adds	r1, r2, r4
 8008b18:	6639      	str	r1, [r7, #96]	; 0x60
 8008b1a:	416b      	adcs	r3, r5
 8008b1c:	667b      	str	r3, [r7, #100]	; 0x64
 8008b1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b20:	685b      	ldr	r3, [r3, #4]
 8008b22:	461a      	mov	r2, r3
 8008b24:	f04f 0300 	mov.w	r3, #0
 8008b28:	1891      	adds	r1, r2, r2
 8008b2a:	63b9      	str	r1, [r7, #56]	; 0x38
 8008b2c:	415b      	adcs	r3, r3
 8008b2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008b30:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008b34:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8008b38:	f7f8 f826 	bl	8000b88 <__aeabi_uldivmod>
 8008b3c:	4602      	mov	r2, r0
 8008b3e:	460b      	mov	r3, r1
 8008b40:	4ba5      	ldr	r3, [pc, #660]	; (8008dd8 <UART_SetConfig+0x38c>)
 8008b42:	fba3 2302 	umull	r2, r3, r3, r2
 8008b46:	095b      	lsrs	r3, r3, #5
 8008b48:	011e      	lsls	r6, r3, #4
 8008b4a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008b4c:	461c      	mov	r4, r3
 8008b4e:	f04f 0500 	mov.w	r5, #0
 8008b52:	4622      	mov	r2, r4
 8008b54:	462b      	mov	r3, r5
 8008b56:	1891      	adds	r1, r2, r2
 8008b58:	6339      	str	r1, [r7, #48]	; 0x30
 8008b5a:	415b      	adcs	r3, r3
 8008b5c:	637b      	str	r3, [r7, #52]	; 0x34
 8008b5e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008b62:	1912      	adds	r2, r2, r4
 8008b64:	eb45 0303 	adc.w	r3, r5, r3
 8008b68:	f04f 0000 	mov.w	r0, #0
 8008b6c:	f04f 0100 	mov.w	r1, #0
 8008b70:	00d9      	lsls	r1, r3, #3
 8008b72:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008b76:	00d0      	lsls	r0, r2, #3
 8008b78:	4602      	mov	r2, r0
 8008b7a:	460b      	mov	r3, r1
 8008b7c:	1911      	adds	r1, r2, r4
 8008b7e:	65b9      	str	r1, [r7, #88]	; 0x58
 8008b80:	416b      	adcs	r3, r5
 8008b82:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008b84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b86:	685b      	ldr	r3, [r3, #4]
 8008b88:	461a      	mov	r2, r3
 8008b8a:	f04f 0300 	mov.w	r3, #0
 8008b8e:	1891      	adds	r1, r2, r2
 8008b90:	62b9      	str	r1, [r7, #40]	; 0x28
 8008b92:	415b      	adcs	r3, r3
 8008b94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008b96:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008b9a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8008b9e:	f7f7 fff3 	bl	8000b88 <__aeabi_uldivmod>
 8008ba2:	4602      	mov	r2, r0
 8008ba4:	460b      	mov	r3, r1
 8008ba6:	4b8c      	ldr	r3, [pc, #560]	; (8008dd8 <UART_SetConfig+0x38c>)
 8008ba8:	fba3 1302 	umull	r1, r3, r3, r2
 8008bac:	095b      	lsrs	r3, r3, #5
 8008bae:	2164      	movs	r1, #100	; 0x64
 8008bb0:	fb01 f303 	mul.w	r3, r1, r3
 8008bb4:	1ad3      	subs	r3, r2, r3
 8008bb6:	00db      	lsls	r3, r3, #3
 8008bb8:	3332      	adds	r3, #50	; 0x32
 8008bba:	4a87      	ldr	r2, [pc, #540]	; (8008dd8 <UART_SetConfig+0x38c>)
 8008bbc:	fba2 2303 	umull	r2, r3, r2, r3
 8008bc0:	095b      	lsrs	r3, r3, #5
 8008bc2:	005b      	lsls	r3, r3, #1
 8008bc4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008bc8:	441e      	add	r6, r3
 8008bca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008bcc:	4618      	mov	r0, r3
 8008bce:	f04f 0100 	mov.w	r1, #0
 8008bd2:	4602      	mov	r2, r0
 8008bd4:	460b      	mov	r3, r1
 8008bd6:	1894      	adds	r4, r2, r2
 8008bd8:	623c      	str	r4, [r7, #32]
 8008bda:	415b      	adcs	r3, r3
 8008bdc:	627b      	str	r3, [r7, #36]	; 0x24
 8008bde:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008be2:	1812      	adds	r2, r2, r0
 8008be4:	eb41 0303 	adc.w	r3, r1, r3
 8008be8:	f04f 0400 	mov.w	r4, #0
 8008bec:	f04f 0500 	mov.w	r5, #0
 8008bf0:	00dd      	lsls	r5, r3, #3
 8008bf2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008bf6:	00d4      	lsls	r4, r2, #3
 8008bf8:	4622      	mov	r2, r4
 8008bfa:	462b      	mov	r3, r5
 8008bfc:	1814      	adds	r4, r2, r0
 8008bfe:	653c      	str	r4, [r7, #80]	; 0x50
 8008c00:	414b      	adcs	r3, r1
 8008c02:	657b      	str	r3, [r7, #84]	; 0x54
 8008c04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c06:	685b      	ldr	r3, [r3, #4]
 8008c08:	461a      	mov	r2, r3
 8008c0a:	f04f 0300 	mov.w	r3, #0
 8008c0e:	1891      	adds	r1, r2, r2
 8008c10:	61b9      	str	r1, [r7, #24]
 8008c12:	415b      	adcs	r3, r3
 8008c14:	61fb      	str	r3, [r7, #28]
 8008c16:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008c1a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8008c1e:	f7f7 ffb3 	bl	8000b88 <__aeabi_uldivmod>
 8008c22:	4602      	mov	r2, r0
 8008c24:	460b      	mov	r3, r1
 8008c26:	4b6c      	ldr	r3, [pc, #432]	; (8008dd8 <UART_SetConfig+0x38c>)
 8008c28:	fba3 1302 	umull	r1, r3, r3, r2
 8008c2c:	095b      	lsrs	r3, r3, #5
 8008c2e:	2164      	movs	r1, #100	; 0x64
 8008c30:	fb01 f303 	mul.w	r3, r1, r3
 8008c34:	1ad3      	subs	r3, r2, r3
 8008c36:	00db      	lsls	r3, r3, #3
 8008c38:	3332      	adds	r3, #50	; 0x32
 8008c3a:	4a67      	ldr	r2, [pc, #412]	; (8008dd8 <UART_SetConfig+0x38c>)
 8008c3c:	fba2 2303 	umull	r2, r3, r2, r3
 8008c40:	095b      	lsrs	r3, r3, #5
 8008c42:	f003 0207 	and.w	r2, r3, #7
 8008c46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	4432      	add	r2, r6
 8008c4c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008c4e:	e0b9      	b.n	8008dc4 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008c50:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008c52:	461c      	mov	r4, r3
 8008c54:	f04f 0500 	mov.w	r5, #0
 8008c58:	4622      	mov	r2, r4
 8008c5a:	462b      	mov	r3, r5
 8008c5c:	1891      	adds	r1, r2, r2
 8008c5e:	6139      	str	r1, [r7, #16]
 8008c60:	415b      	adcs	r3, r3
 8008c62:	617b      	str	r3, [r7, #20]
 8008c64:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008c68:	1912      	adds	r2, r2, r4
 8008c6a:	eb45 0303 	adc.w	r3, r5, r3
 8008c6e:	f04f 0000 	mov.w	r0, #0
 8008c72:	f04f 0100 	mov.w	r1, #0
 8008c76:	00d9      	lsls	r1, r3, #3
 8008c78:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008c7c:	00d0      	lsls	r0, r2, #3
 8008c7e:	4602      	mov	r2, r0
 8008c80:	460b      	mov	r3, r1
 8008c82:	eb12 0804 	adds.w	r8, r2, r4
 8008c86:	eb43 0905 	adc.w	r9, r3, r5
 8008c8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c8c:	685b      	ldr	r3, [r3, #4]
 8008c8e:	4618      	mov	r0, r3
 8008c90:	f04f 0100 	mov.w	r1, #0
 8008c94:	f04f 0200 	mov.w	r2, #0
 8008c98:	f04f 0300 	mov.w	r3, #0
 8008c9c:	008b      	lsls	r3, r1, #2
 8008c9e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008ca2:	0082      	lsls	r2, r0, #2
 8008ca4:	4640      	mov	r0, r8
 8008ca6:	4649      	mov	r1, r9
 8008ca8:	f7f7 ff6e 	bl	8000b88 <__aeabi_uldivmod>
 8008cac:	4602      	mov	r2, r0
 8008cae:	460b      	mov	r3, r1
 8008cb0:	4b49      	ldr	r3, [pc, #292]	; (8008dd8 <UART_SetConfig+0x38c>)
 8008cb2:	fba3 2302 	umull	r2, r3, r3, r2
 8008cb6:	095b      	lsrs	r3, r3, #5
 8008cb8:	011e      	lsls	r6, r3, #4
 8008cba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	f04f 0100 	mov.w	r1, #0
 8008cc2:	4602      	mov	r2, r0
 8008cc4:	460b      	mov	r3, r1
 8008cc6:	1894      	adds	r4, r2, r2
 8008cc8:	60bc      	str	r4, [r7, #8]
 8008cca:	415b      	adcs	r3, r3
 8008ccc:	60fb      	str	r3, [r7, #12]
 8008cce:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008cd2:	1812      	adds	r2, r2, r0
 8008cd4:	eb41 0303 	adc.w	r3, r1, r3
 8008cd8:	f04f 0400 	mov.w	r4, #0
 8008cdc:	f04f 0500 	mov.w	r5, #0
 8008ce0:	00dd      	lsls	r5, r3, #3
 8008ce2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008ce6:	00d4      	lsls	r4, r2, #3
 8008ce8:	4622      	mov	r2, r4
 8008cea:	462b      	mov	r3, r5
 8008cec:	1814      	adds	r4, r2, r0
 8008cee:	64bc      	str	r4, [r7, #72]	; 0x48
 8008cf0:	414b      	adcs	r3, r1
 8008cf2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008cf4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008cf6:	685b      	ldr	r3, [r3, #4]
 8008cf8:	4618      	mov	r0, r3
 8008cfa:	f04f 0100 	mov.w	r1, #0
 8008cfe:	f04f 0200 	mov.w	r2, #0
 8008d02:	f04f 0300 	mov.w	r3, #0
 8008d06:	008b      	lsls	r3, r1, #2
 8008d08:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008d0c:	0082      	lsls	r2, r0, #2
 8008d0e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8008d12:	f7f7 ff39 	bl	8000b88 <__aeabi_uldivmod>
 8008d16:	4602      	mov	r2, r0
 8008d18:	460b      	mov	r3, r1
 8008d1a:	4b2f      	ldr	r3, [pc, #188]	; (8008dd8 <UART_SetConfig+0x38c>)
 8008d1c:	fba3 1302 	umull	r1, r3, r3, r2
 8008d20:	095b      	lsrs	r3, r3, #5
 8008d22:	2164      	movs	r1, #100	; 0x64
 8008d24:	fb01 f303 	mul.w	r3, r1, r3
 8008d28:	1ad3      	subs	r3, r2, r3
 8008d2a:	011b      	lsls	r3, r3, #4
 8008d2c:	3332      	adds	r3, #50	; 0x32
 8008d2e:	4a2a      	ldr	r2, [pc, #168]	; (8008dd8 <UART_SetConfig+0x38c>)
 8008d30:	fba2 2303 	umull	r2, r3, r2, r3
 8008d34:	095b      	lsrs	r3, r3, #5
 8008d36:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008d3a:	441e      	add	r6, r3
 8008d3c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008d3e:	4618      	mov	r0, r3
 8008d40:	f04f 0100 	mov.w	r1, #0
 8008d44:	4602      	mov	r2, r0
 8008d46:	460b      	mov	r3, r1
 8008d48:	1894      	adds	r4, r2, r2
 8008d4a:	603c      	str	r4, [r7, #0]
 8008d4c:	415b      	adcs	r3, r3
 8008d4e:	607b      	str	r3, [r7, #4]
 8008d50:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d54:	1812      	adds	r2, r2, r0
 8008d56:	eb41 0303 	adc.w	r3, r1, r3
 8008d5a:	f04f 0400 	mov.w	r4, #0
 8008d5e:	f04f 0500 	mov.w	r5, #0
 8008d62:	00dd      	lsls	r5, r3, #3
 8008d64:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008d68:	00d4      	lsls	r4, r2, #3
 8008d6a:	4622      	mov	r2, r4
 8008d6c:	462b      	mov	r3, r5
 8008d6e:	eb12 0a00 	adds.w	sl, r2, r0
 8008d72:	eb43 0b01 	adc.w	fp, r3, r1
 8008d76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d78:	685b      	ldr	r3, [r3, #4]
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	f04f 0100 	mov.w	r1, #0
 8008d80:	f04f 0200 	mov.w	r2, #0
 8008d84:	f04f 0300 	mov.w	r3, #0
 8008d88:	008b      	lsls	r3, r1, #2
 8008d8a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008d8e:	0082      	lsls	r2, r0, #2
 8008d90:	4650      	mov	r0, sl
 8008d92:	4659      	mov	r1, fp
 8008d94:	f7f7 fef8 	bl	8000b88 <__aeabi_uldivmod>
 8008d98:	4602      	mov	r2, r0
 8008d9a:	460b      	mov	r3, r1
 8008d9c:	4b0e      	ldr	r3, [pc, #56]	; (8008dd8 <UART_SetConfig+0x38c>)
 8008d9e:	fba3 1302 	umull	r1, r3, r3, r2
 8008da2:	095b      	lsrs	r3, r3, #5
 8008da4:	2164      	movs	r1, #100	; 0x64
 8008da6:	fb01 f303 	mul.w	r3, r1, r3
 8008daa:	1ad3      	subs	r3, r2, r3
 8008dac:	011b      	lsls	r3, r3, #4
 8008dae:	3332      	adds	r3, #50	; 0x32
 8008db0:	4a09      	ldr	r2, [pc, #36]	; (8008dd8 <UART_SetConfig+0x38c>)
 8008db2:	fba2 2303 	umull	r2, r3, r2, r3
 8008db6:	095b      	lsrs	r3, r3, #5
 8008db8:	f003 020f 	and.w	r2, r3, #15
 8008dbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	4432      	add	r2, r6
 8008dc2:	609a      	str	r2, [r3, #8]
}
 8008dc4:	bf00      	nop
 8008dc6:	377c      	adds	r7, #124	; 0x7c
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008dce:	bf00      	nop
 8008dd0:	40011000 	.word	0x40011000
 8008dd4:	40011400 	.word	0x40011400
 8008dd8:	51eb851f 	.word	0x51eb851f

08008ddc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008ddc:	b084      	sub	sp, #16
 8008dde:	b580      	push	{r7, lr}
 8008de0:	b084      	sub	sp, #16
 8008de2:	af00      	add	r7, sp, #0
 8008de4:	6078      	str	r0, [r7, #4]
 8008de6:	f107 001c 	add.w	r0, r7, #28
 8008dea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008df0:	2b01      	cmp	r3, #1
 8008df2:	d122      	bne.n	8008e3a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008df8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	68db      	ldr	r3, [r3, #12]
 8008e04:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8008e08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008e0c:	687a      	ldr	r2, [r7, #4]
 8008e0e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	68db      	ldr	r3, [r3, #12]
 8008e14:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008e1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e1e:	2b01      	cmp	r3, #1
 8008e20:	d105      	bne.n	8008e2e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	68db      	ldr	r3, [r3, #12]
 8008e26:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008e2e:	6878      	ldr	r0, [r7, #4]
 8008e30:	f000 f9a0 	bl	8009174 <USB_CoreReset>
 8008e34:	4603      	mov	r3, r0
 8008e36:	73fb      	strb	r3, [r7, #15]
 8008e38:	e01a      	b.n	8008e70 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	68db      	ldr	r3, [r3, #12]
 8008e3e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008e46:	6878      	ldr	r0, [r7, #4]
 8008e48:	f000 f994 	bl	8009174 <USB_CoreReset>
 8008e4c:	4603      	mov	r3, r0
 8008e4e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008e50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d106      	bne.n	8008e64 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e5a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	639a      	str	r2, [r3, #56]	; 0x38
 8008e62:	e005      	b.n	8008e70 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e68:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e72:	2b01      	cmp	r3, #1
 8008e74:	d10b      	bne.n	8008e8e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	689b      	ldr	r3, [r3, #8]
 8008e7a:	f043 0206 	orr.w	r2, r3, #6
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	689b      	ldr	r3, [r3, #8]
 8008e86:	f043 0220 	orr.w	r2, r3, #32
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008e8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e90:	4618      	mov	r0, r3
 8008e92:	3710      	adds	r7, #16
 8008e94:	46bd      	mov	sp, r7
 8008e96:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008e9a:	b004      	add	sp, #16
 8008e9c:	4770      	bx	lr

08008e9e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008e9e:	b480      	push	{r7}
 8008ea0:	b083      	sub	sp, #12
 8008ea2:	af00      	add	r7, sp, #0
 8008ea4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	689b      	ldr	r3, [r3, #8]
 8008eaa:	f043 0201 	orr.w	r2, r3, #1
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008eb2:	2300      	movs	r3, #0
}
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	370c      	adds	r7, #12
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ebe:	4770      	bx	lr

08008ec0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008ec0:	b480      	push	{r7}
 8008ec2:	b083      	sub	sp, #12
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	689b      	ldr	r3, [r3, #8]
 8008ecc:	f023 0201 	bic.w	r2, r3, #1
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008ed4:	2300      	movs	r3, #0
}
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	370c      	adds	r7, #12
 8008eda:	46bd      	mov	sp, r7
 8008edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee0:	4770      	bx	lr

08008ee2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008ee2:	b580      	push	{r7, lr}
 8008ee4:	b084      	sub	sp, #16
 8008ee6:	af00      	add	r7, sp, #0
 8008ee8:	6078      	str	r0, [r7, #4]
 8008eea:	460b      	mov	r3, r1
 8008eec:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008eee:	2300      	movs	r3, #0
 8008ef0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	68db      	ldr	r3, [r3, #12]
 8008ef6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008efe:	78fb      	ldrb	r3, [r7, #3]
 8008f00:	2b01      	cmp	r3, #1
 8008f02:	d115      	bne.n	8008f30 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	68db      	ldr	r3, [r3, #12]
 8008f08:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008f10:	2001      	movs	r0, #1
 8008f12:	f7f9 fcff 	bl	8002914 <HAL_Delay>
      ms++;
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	3301      	adds	r3, #1
 8008f1a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008f1c:	6878      	ldr	r0, [r7, #4]
 8008f1e:	f000 f91a 	bl	8009156 <USB_GetMode>
 8008f22:	4603      	mov	r3, r0
 8008f24:	2b01      	cmp	r3, #1
 8008f26:	d01e      	beq.n	8008f66 <USB_SetCurrentMode+0x84>
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	2b31      	cmp	r3, #49	; 0x31
 8008f2c:	d9f0      	bls.n	8008f10 <USB_SetCurrentMode+0x2e>
 8008f2e:	e01a      	b.n	8008f66 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008f30:	78fb      	ldrb	r3, [r7, #3]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d115      	bne.n	8008f62 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	68db      	ldr	r3, [r3, #12]
 8008f3a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008f42:	2001      	movs	r0, #1
 8008f44:	f7f9 fce6 	bl	8002914 <HAL_Delay>
      ms++;
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	3301      	adds	r3, #1
 8008f4c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008f4e:	6878      	ldr	r0, [r7, #4]
 8008f50:	f000 f901 	bl	8009156 <USB_GetMode>
 8008f54:	4603      	mov	r3, r0
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d005      	beq.n	8008f66 <USB_SetCurrentMode+0x84>
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	2b31      	cmp	r3, #49	; 0x31
 8008f5e:	d9f0      	bls.n	8008f42 <USB_SetCurrentMode+0x60>
 8008f60:	e001      	b.n	8008f66 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008f62:	2301      	movs	r3, #1
 8008f64:	e005      	b.n	8008f72 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	2b32      	cmp	r3, #50	; 0x32
 8008f6a:	d101      	bne.n	8008f70 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008f6c:	2301      	movs	r3, #1
 8008f6e:	e000      	b.n	8008f72 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008f70:	2300      	movs	r3, #0
}
 8008f72:	4618      	mov	r0, r3
 8008f74:	3710      	adds	r7, #16
 8008f76:	46bd      	mov	sp, r7
 8008f78:	bd80      	pop	{r7, pc}
	...

08008f7c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008f7c:	b480      	push	{r7}
 8008f7e:	b085      	sub	sp, #20
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	6078      	str	r0, [r7, #4]
 8008f84:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008f86:	2300      	movs	r3, #0
 8008f88:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008f8a:	683b      	ldr	r3, [r7, #0]
 8008f8c:	019b      	lsls	r3, r3, #6
 8008f8e:	f043 0220 	orr.w	r2, r3, #32
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	3301      	adds	r3, #1
 8008f9a:	60fb      	str	r3, [r7, #12]
 8008f9c:	4a08      	ldr	r2, [pc, #32]	; (8008fc0 <USB_FlushTxFifo+0x44>)
 8008f9e:	4293      	cmp	r3, r2
 8008fa0:	d901      	bls.n	8008fa6 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8008fa2:	2303      	movs	r3, #3
 8008fa4:	e006      	b.n	8008fb4 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	691b      	ldr	r3, [r3, #16]
 8008faa:	f003 0320 	and.w	r3, r3, #32
 8008fae:	2b20      	cmp	r3, #32
 8008fb0:	d0f1      	beq.n	8008f96 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8008fb2:	2300      	movs	r3, #0
}
 8008fb4:	4618      	mov	r0, r3
 8008fb6:	3714      	adds	r7, #20
 8008fb8:	46bd      	mov	sp, r7
 8008fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fbe:	4770      	bx	lr
 8008fc0:	00030d40 	.word	0x00030d40

08008fc4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008fc4:	b480      	push	{r7}
 8008fc6:	b085      	sub	sp, #20
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008fcc:	2300      	movs	r3, #0
 8008fce:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	2210      	movs	r2, #16
 8008fd4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	3301      	adds	r3, #1
 8008fda:	60fb      	str	r3, [r7, #12]
 8008fdc:	4a08      	ldr	r2, [pc, #32]	; (8009000 <USB_FlushRxFifo+0x3c>)
 8008fde:	4293      	cmp	r3, r2
 8008fe0:	d901      	bls.n	8008fe6 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8008fe2:	2303      	movs	r3, #3
 8008fe4:	e006      	b.n	8008ff4 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	691b      	ldr	r3, [r3, #16]
 8008fea:	f003 0310 	and.w	r3, r3, #16
 8008fee:	2b10      	cmp	r3, #16
 8008ff0:	d0f1      	beq.n	8008fd6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8008ff2:	2300      	movs	r3, #0
}
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	3714      	adds	r7, #20
 8008ff8:	46bd      	mov	sp, r7
 8008ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ffe:	4770      	bx	lr
 8009000:	00030d40 	.word	0x00030d40

08009004 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009004:	b480      	push	{r7}
 8009006:	b089      	sub	sp, #36	; 0x24
 8009008:	af00      	add	r7, sp, #0
 800900a:	60f8      	str	r0, [r7, #12]
 800900c:	60b9      	str	r1, [r7, #8]
 800900e:	4611      	mov	r1, r2
 8009010:	461a      	mov	r2, r3
 8009012:	460b      	mov	r3, r1
 8009014:	71fb      	strb	r3, [r7, #7]
 8009016:	4613      	mov	r3, r2
 8009018:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800901e:	68bb      	ldr	r3, [r7, #8]
 8009020:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8009022:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009026:	2b00      	cmp	r3, #0
 8009028:	d123      	bne.n	8009072 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800902a:	88bb      	ldrh	r3, [r7, #4]
 800902c:	3303      	adds	r3, #3
 800902e:	089b      	lsrs	r3, r3, #2
 8009030:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009032:	2300      	movs	r3, #0
 8009034:	61bb      	str	r3, [r7, #24]
 8009036:	e018      	b.n	800906a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009038:	79fb      	ldrb	r3, [r7, #7]
 800903a:	031a      	lsls	r2, r3, #12
 800903c:	697b      	ldr	r3, [r7, #20]
 800903e:	4413      	add	r3, r2
 8009040:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009044:	461a      	mov	r2, r3
 8009046:	69fb      	ldr	r3, [r7, #28]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800904c:	69fb      	ldr	r3, [r7, #28]
 800904e:	3301      	adds	r3, #1
 8009050:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009052:	69fb      	ldr	r3, [r7, #28]
 8009054:	3301      	adds	r3, #1
 8009056:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009058:	69fb      	ldr	r3, [r7, #28]
 800905a:	3301      	adds	r3, #1
 800905c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800905e:	69fb      	ldr	r3, [r7, #28]
 8009060:	3301      	adds	r3, #1
 8009062:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009064:	69bb      	ldr	r3, [r7, #24]
 8009066:	3301      	adds	r3, #1
 8009068:	61bb      	str	r3, [r7, #24]
 800906a:	69ba      	ldr	r2, [r7, #24]
 800906c:	693b      	ldr	r3, [r7, #16]
 800906e:	429a      	cmp	r2, r3
 8009070:	d3e2      	bcc.n	8009038 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009072:	2300      	movs	r3, #0
}
 8009074:	4618      	mov	r0, r3
 8009076:	3724      	adds	r7, #36	; 0x24
 8009078:	46bd      	mov	sp, r7
 800907a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800907e:	4770      	bx	lr

08009080 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009080:	b480      	push	{r7}
 8009082:	b08b      	sub	sp, #44	; 0x2c
 8009084:	af00      	add	r7, sp, #0
 8009086:	60f8      	str	r0, [r7, #12]
 8009088:	60b9      	str	r1, [r7, #8]
 800908a:	4613      	mov	r3, r2
 800908c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8009092:	68bb      	ldr	r3, [r7, #8]
 8009094:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8009096:	88fb      	ldrh	r3, [r7, #6]
 8009098:	089b      	lsrs	r3, r3, #2
 800909a:	b29b      	uxth	r3, r3
 800909c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800909e:	88fb      	ldrh	r3, [r7, #6]
 80090a0:	f003 0303 	and.w	r3, r3, #3
 80090a4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80090a6:	2300      	movs	r3, #0
 80090a8:	623b      	str	r3, [r7, #32]
 80090aa:	e014      	b.n	80090d6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80090ac:	69bb      	ldr	r3, [r7, #24]
 80090ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80090b2:	681a      	ldr	r2, [r3, #0]
 80090b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090b6:	601a      	str	r2, [r3, #0]
    pDest++;
 80090b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090ba:	3301      	adds	r3, #1
 80090bc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80090be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090c0:	3301      	adds	r3, #1
 80090c2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80090c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090c6:	3301      	adds	r3, #1
 80090c8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80090ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090cc:	3301      	adds	r3, #1
 80090ce:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80090d0:	6a3b      	ldr	r3, [r7, #32]
 80090d2:	3301      	adds	r3, #1
 80090d4:	623b      	str	r3, [r7, #32]
 80090d6:	6a3a      	ldr	r2, [r7, #32]
 80090d8:	697b      	ldr	r3, [r7, #20]
 80090da:	429a      	cmp	r2, r3
 80090dc:	d3e6      	bcc.n	80090ac <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80090de:	8bfb      	ldrh	r3, [r7, #30]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d01e      	beq.n	8009122 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80090e4:	2300      	movs	r3, #0
 80090e6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80090e8:	69bb      	ldr	r3, [r7, #24]
 80090ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80090ee:	461a      	mov	r2, r3
 80090f0:	f107 0310 	add.w	r3, r7, #16
 80090f4:	6812      	ldr	r2, [r2, #0]
 80090f6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80090f8:	693a      	ldr	r2, [r7, #16]
 80090fa:	6a3b      	ldr	r3, [r7, #32]
 80090fc:	b2db      	uxtb	r3, r3
 80090fe:	00db      	lsls	r3, r3, #3
 8009100:	fa22 f303 	lsr.w	r3, r2, r3
 8009104:	b2da      	uxtb	r2, r3
 8009106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009108:	701a      	strb	r2, [r3, #0]
      i++;
 800910a:	6a3b      	ldr	r3, [r7, #32]
 800910c:	3301      	adds	r3, #1
 800910e:	623b      	str	r3, [r7, #32]
      pDest++;
 8009110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009112:	3301      	adds	r3, #1
 8009114:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8009116:	8bfb      	ldrh	r3, [r7, #30]
 8009118:	3b01      	subs	r3, #1
 800911a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800911c:	8bfb      	ldrh	r3, [r7, #30]
 800911e:	2b00      	cmp	r3, #0
 8009120:	d1ea      	bne.n	80090f8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8009122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009124:	4618      	mov	r0, r3
 8009126:	372c      	adds	r7, #44	; 0x2c
 8009128:	46bd      	mov	sp, r7
 800912a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912e:	4770      	bx	lr

08009130 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8009130:	b480      	push	{r7}
 8009132:	b085      	sub	sp, #20
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	695b      	ldr	r3, [r3, #20]
 800913c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	699b      	ldr	r3, [r3, #24]
 8009142:	68fa      	ldr	r2, [r7, #12]
 8009144:	4013      	ands	r3, r2
 8009146:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009148:	68fb      	ldr	r3, [r7, #12]
}
 800914a:	4618      	mov	r0, r3
 800914c:	3714      	adds	r7, #20
 800914e:	46bd      	mov	sp, r7
 8009150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009154:	4770      	bx	lr

08009156 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009156:	b480      	push	{r7}
 8009158:	b083      	sub	sp, #12
 800915a:	af00      	add	r7, sp, #0
 800915c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	695b      	ldr	r3, [r3, #20]
 8009162:	f003 0301 	and.w	r3, r3, #1
}
 8009166:	4618      	mov	r0, r3
 8009168:	370c      	adds	r7, #12
 800916a:	46bd      	mov	sp, r7
 800916c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009170:	4770      	bx	lr
	...

08009174 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009174:	b480      	push	{r7}
 8009176:	b085      	sub	sp, #20
 8009178:	af00      	add	r7, sp, #0
 800917a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800917c:	2300      	movs	r3, #0
 800917e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	3301      	adds	r3, #1
 8009184:	60fb      	str	r3, [r7, #12]
 8009186:	4a13      	ldr	r2, [pc, #76]	; (80091d4 <USB_CoreReset+0x60>)
 8009188:	4293      	cmp	r3, r2
 800918a:	d901      	bls.n	8009190 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 800918c:	2303      	movs	r3, #3
 800918e:	e01a      	b.n	80091c6 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	691b      	ldr	r3, [r3, #16]
 8009194:	2b00      	cmp	r3, #0
 8009196:	daf3      	bge.n	8009180 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009198:	2300      	movs	r3, #0
 800919a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	691b      	ldr	r3, [r3, #16]
 80091a0:	f043 0201 	orr.w	r2, r3, #1
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	3301      	adds	r3, #1
 80091ac:	60fb      	str	r3, [r7, #12]
 80091ae:	4a09      	ldr	r2, [pc, #36]	; (80091d4 <USB_CoreReset+0x60>)
 80091b0:	4293      	cmp	r3, r2
 80091b2:	d901      	bls.n	80091b8 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 80091b4:	2303      	movs	r3, #3
 80091b6:	e006      	b.n	80091c6 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	691b      	ldr	r3, [r3, #16]
 80091bc:	f003 0301 	and.w	r3, r3, #1
 80091c0:	2b01      	cmp	r3, #1
 80091c2:	d0f1      	beq.n	80091a8 <USB_CoreReset+0x34>

  return HAL_OK;
 80091c4:	2300      	movs	r3, #0
}
 80091c6:	4618      	mov	r0, r3
 80091c8:	3714      	adds	r7, #20
 80091ca:	46bd      	mov	sp, r7
 80091cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d0:	4770      	bx	lr
 80091d2:	bf00      	nop
 80091d4:	00030d40 	.word	0x00030d40

080091d8 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80091d8:	b084      	sub	sp, #16
 80091da:	b580      	push	{r7, lr}
 80091dc:	b084      	sub	sp, #16
 80091de:	af00      	add	r7, sp, #0
 80091e0:	6078      	str	r0, [r7, #4]
 80091e2:	f107 001c 	add.w	r0, r7, #28
 80091e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80091ee:	68bb      	ldr	r3, [r7, #8]
 80091f0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80091f4:	461a      	mov	r2, r3
 80091f6:	2300      	movs	r3, #0
 80091f8:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091fe:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800920a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009216:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009222:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009226:	2b00      	cmp	r3, #0
 8009228:	d018      	beq.n	800925c <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800922a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800922c:	2b01      	cmp	r3, #1
 800922e:	d10a      	bne.n	8009246 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8009230:	68bb      	ldr	r3, [r7, #8]
 8009232:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	68ba      	ldr	r2, [r7, #8]
 800923a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800923e:	f043 0304 	orr.w	r3, r3, #4
 8009242:	6013      	str	r3, [r2, #0]
 8009244:	e014      	b.n	8009270 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8009246:	68bb      	ldr	r3, [r7, #8]
 8009248:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	68ba      	ldr	r2, [r7, #8]
 8009250:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009254:	f023 0304 	bic.w	r3, r3, #4
 8009258:	6013      	str	r3, [r2, #0]
 800925a:	e009      	b.n	8009270 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800925c:	68bb      	ldr	r3, [r7, #8]
 800925e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	68ba      	ldr	r2, [r7, #8]
 8009266:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800926a:	f023 0304 	bic.w	r3, r3, #4
 800926e:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8009270:	2110      	movs	r1, #16
 8009272:	6878      	ldr	r0, [r7, #4]
 8009274:	f7ff fe82 	bl	8008f7c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8009278:	6878      	ldr	r0, [r7, #4]
 800927a:	f7ff fea3 	bl	8008fc4 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800927e:	2300      	movs	r3, #0
 8009280:	60fb      	str	r3, [r7, #12]
 8009282:	e015      	b.n	80092b0 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	015a      	lsls	r2, r3, #5
 8009288:	68bb      	ldr	r3, [r7, #8]
 800928a:	4413      	add	r3, r2
 800928c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009290:	461a      	mov	r2, r3
 8009292:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009296:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	015a      	lsls	r2, r3, #5
 800929c:	68bb      	ldr	r3, [r7, #8]
 800929e:	4413      	add	r3, r2
 80092a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80092a4:	461a      	mov	r2, r3
 80092a6:	2300      	movs	r3, #0
 80092a8:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	3301      	adds	r3, #1
 80092ae:	60fb      	str	r3, [r7, #12]
 80092b0:	6a3b      	ldr	r3, [r7, #32]
 80092b2:	68fa      	ldr	r2, [r7, #12]
 80092b4:	429a      	cmp	r2, r3
 80092b6:	d3e5      	bcc.n	8009284 <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	2200      	movs	r2, #0
 80092bc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80092c4:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d00b      	beq.n	80092ea <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80092d8:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	4a13      	ldr	r2, [pc, #76]	; (800932c <USB_HostInit+0x154>)
 80092de:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	4a13      	ldr	r2, [pc, #76]	; (8009330 <USB_HostInit+0x158>)
 80092e4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80092e8:	e009      	b.n	80092fe <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	2280      	movs	r2, #128	; 0x80
 80092ee:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	4a10      	ldr	r2, [pc, #64]	; (8009334 <USB_HostInit+0x15c>)
 80092f4:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	4a0f      	ldr	r2, [pc, #60]	; (8009338 <USB_HostInit+0x160>)
 80092fa:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80092fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009300:	2b00      	cmp	r3, #0
 8009302:	d105      	bne.n	8009310 <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	699b      	ldr	r3, [r3, #24]
 8009308:	f043 0210 	orr.w	r2, r3, #16
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	699a      	ldr	r2, [r3, #24]
 8009314:	4b09      	ldr	r3, [pc, #36]	; (800933c <USB_HostInit+0x164>)
 8009316:	4313      	orrs	r3, r2
 8009318:	687a      	ldr	r2, [r7, #4]
 800931a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800931c:	2300      	movs	r3, #0
}
 800931e:	4618      	mov	r0, r3
 8009320:	3710      	adds	r7, #16
 8009322:	46bd      	mov	sp, r7
 8009324:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009328:	b004      	add	sp, #16
 800932a:	4770      	bx	lr
 800932c:	01000200 	.word	0x01000200
 8009330:	00e00300 	.word	0x00e00300
 8009334:	00600080 	.word	0x00600080
 8009338:	004000e0 	.word	0x004000e0
 800933c:	a3200008 	.word	0xa3200008

08009340 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8009340:	b480      	push	{r7}
 8009342:	b085      	sub	sp, #20
 8009344:	af00      	add	r7, sp, #0
 8009346:	6078      	str	r0, [r7, #4]
 8009348:	460b      	mov	r3, r1
 800934a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	68fa      	ldr	r2, [r7, #12]
 800935a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800935e:	f023 0303 	bic.w	r3, r3, #3
 8009362:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800936a:	681a      	ldr	r2, [r3, #0]
 800936c:	78fb      	ldrb	r3, [r7, #3]
 800936e:	f003 0303 	and.w	r3, r3, #3
 8009372:	68f9      	ldr	r1, [r7, #12]
 8009374:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8009378:	4313      	orrs	r3, r2
 800937a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800937c:	78fb      	ldrb	r3, [r7, #3]
 800937e:	2b01      	cmp	r3, #1
 8009380:	d107      	bne.n	8009392 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009388:	461a      	mov	r2, r3
 800938a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800938e:	6053      	str	r3, [r2, #4]
 8009390:	e009      	b.n	80093a6 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8009392:	78fb      	ldrb	r3, [r7, #3]
 8009394:	2b02      	cmp	r3, #2
 8009396:	d106      	bne.n	80093a6 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800939e:	461a      	mov	r2, r3
 80093a0:	f241 7370 	movw	r3, #6000	; 0x1770
 80093a4:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80093a6:	2300      	movs	r3, #0
}
 80093a8:	4618      	mov	r0, r3
 80093aa:	3714      	adds	r7, #20
 80093ac:	46bd      	mov	sp, r7
 80093ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b2:	4770      	bx	lr

080093b4 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80093b4:	b580      	push	{r7, lr}
 80093b6:	b084      	sub	sp, #16
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80093c0:	2300      	movs	r3, #0
 80093c2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80093ce:	68bb      	ldr	r3, [r7, #8]
 80093d0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80093d4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80093d6:	68bb      	ldr	r3, [r7, #8]
 80093d8:	68fa      	ldr	r2, [r7, #12]
 80093da:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80093de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80093e2:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80093e4:	2064      	movs	r0, #100	; 0x64
 80093e6:	f7f9 fa95 	bl	8002914 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80093ea:	68bb      	ldr	r3, [r7, #8]
 80093ec:	68fa      	ldr	r2, [r7, #12]
 80093ee:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80093f2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80093f6:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80093f8:	200a      	movs	r0, #10
 80093fa:	f7f9 fa8b 	bl	8002914 <HAL_Delay>

  return HAL_OK;
 80093fe:	2300      	movs	r3, #0
}
 8009400:	4618      	mov	r0, r3
 8009402:	3710      	adds	r7, #16
 8009404:	46bd      	mov	sp, r7
 8009406:	bd80      	pop	{r7, pc}

08009408 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8009408:	b480      	push	{r7}
 800940a:	b085      	sub	sp, #20
 800940c:	af00      	add	r7, sp, #0
 800940e:	6078      	str	r0, [r7, #4]
 8009410:	460b      	mov	r3, r1
 8009412:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8009418:	2300      	movs	r3, #0
 800941a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8009426:	68bb      	ldr	r3, [r7, #8]
 8009428:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800942c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800942e:	68bb      	ldr	r3, [r7, #8]
 8009430:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009434:	2b00      	cmp	r3, #0
 8009436:	d109      	bne.n	800944c <USB_DriveVbus+0x44>
 8009438:	78fb      	ldrb	r3, [r7, #3]
 800943a:	2b01      	cmp	r3, #1
 800943c:	d106      	bne.n	800944c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800943e:	68bb      	ldr	r3, [r7, #8]
 8009440:	68fa      	ldr	r2, [r7, #12]
 8009442:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8009446:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800944a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800944c:	68bb      	ldr	r3, [r7, #8]
 800944e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009452:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009456:	d109      	bne.n	800946c <USB_DriveVbus+0x64>
 8009458:	78fb      	ldrb	r3, [r7, #3]
 800945a:	2b00      	cmp	r3, #0
 800945c:	d106      	bne.n	800946c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800945e:	68bb      	ldr	r3, [r7, #8]
 8009460:	68fa      	ldr	r2, [r7, #12]
 8009462:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8009466:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800946a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800946c:	2300      	movs	r3, #0
}
 800946e:	4618      	mov	r0, r3
 8009470:	3714      	adds	r7, #20
 8009472:	46bd      	mov	sp, r7
 8009474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009478:	4770      	bx	lr

0800947a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800947a:	b480      	push	{r7}
 800947c:	b085      	sub	sp, #20
 800947e:	af00      	add	r7, sp, #0
 8009480:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8009486:	2300      	movs	r3, #0
 8009488:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8009494:	68bb      	ldr	r3, [r7, #8]
 8009496:	0c5b      	lsrs	r3, r3, #17
 8009498:	f003 0303 	and.w	r3, r3, #3
}
 800949c:	4618      	mov	r0, r3
 800949e:	3714      	adds	r7, #20
 80094a0:	46bd      	mov	sp, r7
 80094a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a6:	4770      	bx	lr

080094a8 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80094a8:	b480      	push	{r7}
 80094aa:	b085      	sub	sp, #20
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80094ba:	689b      	ldr	r3, [r3, #8]
 80094bc:	b29b      	uxth	r3, r3
}
 80094be:	4618      	mov	r0, r3
 80094c0:	3714      	adds	r7, #20
 80094c2:	46bd      	mov	sp, r7
 80094c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c8:	4770      	bx	lr
	...

080094cc <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80094cc:	b580      	push	{r7, lr}
 80094ce:	b088      	sub	sp, #32
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
 80094d4:	4608      	mov	r0, r1
 80094d6:	4611      	mov	r1, r2
 80094d8:	461a      	mov	r2, r3
 80094da:	4603      	mov	r3, r0
 80094dc:	70fb      	strb	r3, [r7, #3]
 80094de:	460b      	mov	r3, r1
 80094e0:	70bb      	strb	r3, [r7, #2]
 80094e2:	4613      	mov	r3, r2
 80094e4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80094e6:	2300      	movs	r3, #0
 80094e8:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80094ee:	78fb      	ldrb	r3, [r7, #3]
 80094f0:	015a      	lsls	r2, r3, #5
 80094f2:	693b      	ldr	r3, [r7, #16]
 80094f4:	4413      	add	r3, r2
 80094f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80094fa:	461a      	mov	r2, r3
 80094fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009500:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8009502:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009506:	2b03      	cmp	r3, #3
 8009508:	d87e      	bhi.n	8009608 <USB_HC_Init+0x13c>
 800950a:	a201      	add	r2, pc, #4	; (adr r2, 8009510 <USB_HC_Init+0x44>)
 800950c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009510:	08009521 	.word	0x08009521
 8009514:	080095cb 	.word	0x080095cb
 8009518:	08009521 	.word	0x08009521
 800951c:	0800958d 	.word	0x0800958d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009520:	78fb      	ldrb	r3, [r7, #3]
 8009522:	015a      	lsls	r2, r3, #5
 8009524:	693b      	ldr	r3, [r7, #16]
 8009526:	4413      	add	r3, r2
 8009528:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800952c:	461a      	mov	r2, r3
 800952e:	f240 439d 	movw	r3, #1181	; 0x49d
 8009532:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8009534:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009538:	2b00      	cmp	r3, #0
 800953a:	da10      	bge.n	800955e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800953c:	78fb      	ldrb	r3, [r7, #3]
 800953e:	015a      	lsls	r2, r3, #5
 8009540:	693b      	ldr	r3, [r7, #16]
 8009542:	4413      	add	r3, r2
 8009544:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009548:	68db      	ldr	r3, [r3, #12]
 800954a:	78fa      	ldrb	r2, [r7, #3]
 800954c:	0151      	lsls	r1, r2, #5
 800954e:	693a      	ldr	r2, [r7, #16]
 8009550:	440a      	add	r2, r1
 8009552:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009556:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800955a:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 800955c:	e057      	b.n	800960e <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009562:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009566:	2b00      	cmp	r3, #0
 8009568:	d051      	beq.n	800960e <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800956a:	78fb      	ldrb	r3, [r7, #3]
 800956c:	015a      	lsls	r2, r3, #5
 800956e:	693b      	ldr	r3, [r7, #16]
 8009570:	4413      	add	r3, r2
 8009572:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009576:	68db      	ldr	r3, [r3, #12]
 8009578:	78fa      	ldrb	r2, [r7, #3]
 800957a:	0151      	lsls	r1, r2, #5
 800957c:	693a      	ldr	r2, [r7, #16]
 800957e:	440a      	add	r2, r1
 8009580:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009584:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8009588:	60d3      	str	r3, [r2, #12]
      break;
 800958a:	e040      	b.n	800960e <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800958c:	78fb      	ldrb	r3, [r7, #3]
 800958e:	015a      	lsls	r2, r3, #5
 8009590:	693b      	ldr	r3, [r7, #16]
 8009592:	4413      	add	r3, r2
 8009594:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009598:	461a      	mov	r2, r3
 800959a:	f240 639d 	movw	r3, #1693	; 0x69d
 800959e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80095a0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	da34      	bge.n	8009612 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80095a8:	78fb      	ldrb	r3, [r7, #3]
 80095aa:	015a      	lsls	r2, r3, #5
 80095ac:	693b      	ldr	r3, [r7, #16]
 80095ae:	4413      	add	r3, r2
 80095b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80095b4:	68db      	ldr	r3, [r3, #12]
 80095b6:	78fa      	ldrb	r2, [r7, #3]
 80095b8:	0151      	lsls	r1, r2, #5
 80095ba:	693a      	ldr	r2, [r7, #16]
 80095bc:	440a      	add	r2, r1
 80095be:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80095c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80095c6:	60d3      	str	r3, [r2, #12]
      }

      break;
 80095c8:	e023      	b.n	8009612 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80095ca:	78fb      	ldrb	r3, [r7, #3]
 80095cc:	015a      	lsls	r2, r3, #5
 80095ce:	693b      	ldr	r3, [r7, #16]
 80095d0:	4413      	add	r3, r2
 80095d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80095d6:	461a      	mov	r2, r3
 80095d8:	f240 2325 	movw	r3, #549	; 0x225
 80095dc:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80095de:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	da17      	bge.n	8009616 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80095e6:	78fb      	ldrb	r3, [r7, #3]
 80095e8:	015a      	lsls	r2, r3, #5
 80095ea:	693b      	ldr	r3, [r7, #16]
 80095ec:	4413      	add	r3, r2
 80095ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80095f2:	68db      	ldr	r3, [r3, #12]
 80095f4:	78fa      	ldrb	r2, [r7, #3]
 80095f6:	0151      	lsls	r1, r2, #5
 80095f8:	693a      	ldr	r2, [r7, #16]
 80095fa:	440a      	add	r2, r1
 80095fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009600:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8009604:	60d3      	str	r3, [r2, #12]
      }
      break;
 8009606:	e006      	b.n	8009616 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8009608:	2301      	movs	r3, #1
 800960a:	77fb      	strb	r3, [r7, #31]
      break;
 800960c:	e004      	b.n	8009618 <USB_HC_Init+0x14c>
      break;
 800960e:	bf00      	nop
 8009610:	e002      	b.n	8009618 <USB_HC_Init+0x14c>
      break;
 8009612:	bf00      	nop
 8009614:	e000      	b.n	8009618 <USB_HC_Init+0x14c>
      break;
 8009616:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8009618:	693b      	ldr	r3, [r7, #16]
 800961a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800961e:	699a      	ldr	r2, [r3, #24]
 8009620:	78fb      	ldrb	r3, [r7, #3]
 8009622:	f003 030f 	and.w	r3, r3, #15
 8009626:	2101      	movs	r1, #1
 8009628:	fa01 f303 	lsl.w	r3, r1, r3
 800962c:	6939      	ldr	r1, [r7, #16]
 800962e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8009632:	4313      	orrs	r3, r2
 8009634:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	699b      	ldr	r3, [r3, #24]
 800963a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8009642:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009646:	2b00      	cmp	r3, #0
 8009648:	da03      	bge.n	8009652 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800964a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800964e:	61bb      	str	r3, [r7, #24]
 8009650:	e001      	b.n	8009656 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8009652:	2300      	movs	r3, #0
 8009654:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8009656:	6878      	ldr	r0, [r7, #4]
 8009658:	f7ff ff0f 	bl	800947a <USB_GetHostSpeed>
 800965c:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800965e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009662:	2b02      	cmp	r3, #2
 8009664:	d106      	bne.n	8009674 <USB_HC_Init+0x1a8>
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	2b02      	cmp	r3, #2
 800966a:	d003      	beq.n	8009674 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800966c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009670:	617b      	str	r3, [r7, #20]
 8009672:	e001      	b.n	8009678 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8009674:	2300      	movs	r3, #0
 8009676:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009678:	787b      	ldrb	r3, [r7, #1]
 800967a:	059b      	lsls	r3, r3, #22
 800967c:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8009680:	78bb      	ldrb	r3, [r7, #2]
 8009682:	02db      	lsls	r3, r3, #11
 8009684:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009688:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800968a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800968e:	049b      	lsls	r3, r3, #18
 8009690:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8009694:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8009696:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8009698:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800969c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800969e:	69bb      	ldr	r3, [r7, #24]
 80096a0:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80096a2:	78fb      	ldrb	r3, [r7, #3]
 80096a4:	0159      	lsls	r1, r3, #5
 80096a6:	693b      	ldr	r3, [r7, #16]
 80096a8:	440b      	add	r3, r1
 80096aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80096ae:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80096b0:	697b      	ldr	r3, [r7, #20]
 80096b2:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80096b4:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 80096b6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80096ba:	2b03      	cmp	r3, #3
 80096bc:	d10f      	bne.n	80096de <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 80096be:	78fb      	ldrb	r3, [r7, #3]
 80096c0:	015a      	lsls	r2, r3, #5
 80096c2:	693b      	ldr	r3, [r7, #16]
 80096c4:	4413      	add	r3, r2
 80096c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	78fa      	ldrb	r2, [r7, #3]
 80096ce:	0151      	lsls	r1, r2, #5
 80096d0:	693a      	ldr	r2, [r7, #16]
 80096d2:	440a      	add	r2, r1
 80096d4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80096d8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80096dc:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80096de:	7ffb      	ldrb	r3, [r7, #31]
}
 80096e0:	4618      	mov	r0, r3
 80096e2:	3720      	adds	r7, #32
 80096e4:	46bd      	mov	sp, r7
 80096e6:	bd80      	pop	{r7, pc}

080096e8 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80096e8:	b580      	push	{r7, lr}
 80096ea:	b08c      	sub	sp, #48	; 0x30
 80096ec:	af02      	add	r7, sp, #8
 80096ee:	60f8      	str	r0, [r7, #12]
 80096f0:	60b9      	str	r1, [r7, #8]
 80096f2:	4613      	mov	r3, r2
 80096f4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80096fa:	68bb      	ldr	r3, [r7, #8]
 80096fc:	785b      	ldrb	r3, [r3, #1]
 80096fe:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8009700:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009704:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800970a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800970e:	2b00      	cmp	r3, #0
 8009710:	d02d      	beq.n	800976e <USB_HC_StartXfer+0x86>
 8009712:	68bb      	ldr	r3, [r7, #8]
 8009714:	791b      	ldrb	r3, [r3, #4]
 8009716:	2b00      	cmp	r3, #0
 8009718:	d129      	bne.n	800976e <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800971a:	79fb      	ldrb	r3, [r7, #7]
 800971c:	2b01      	cmp	r3, #1
 800971e:	d117      	bne.n	8009750 <USB_HC_StartXfer+0x68>
 8009720:	68bb      	ldr	r3, [r7, #8]
 8009722:	79db      	ldrb	r3, [r3, #7]
 8009724:	2b00      	cmp	r3, #0
 8009726:	d003      	beq.n	8009730 <USB_HC_StartXfer+0x48>
 8009728:	68bb      	ldr	r3, [r7, #8]
 800972a:	79db      	ldrb	r3, [r3, #7]
 800972c:	2b02      	cmp	r3, #2
 800972e:	d10f      	bne.n	8009750 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8009730:	69fb      	ldr	r3, [r7, #28]
 8009732:	015a      	lsls	r2, r3, #5
 8009734:	6a3b      	ldr	r3, [r7, #32]
 8009736:	4413      	add	r3, r2
 8009738:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800973c:	68db      	ldr	r3, [r3, #12]
 800973e:	69fa      	ldr	r2, [r7, #28]
 8009740:	0151      	lsls	r1, r2, #5
 8009742:	6a3a      	ldr	r2, [r7, #32]
 8009744:	440a      	add	r2, r1
 8009746:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800974a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800974e:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8009750:	79fb      	ldrb	r3, [r7, #7]
 8009752:	2b00      	cmp	r3, #0
 8009754:	d10b      	bne.n	800976e <USB_HC_StartXfer+0x86>
 8009756:	68bb      	ldr	r3, [r7, #8]
 8009758:	795b      	ldrb	r3, [r3, #5]
 800975a:	2b01      	cmp	r3, #1
 800975c:	d107      	bne.n	800976e <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800975e:	68bb      	ldr	r3, [r7, #8]
 8009760:	785b      	ldrb	r3, [r3, #1]
 8009762:	4619      	mov	r1, r3
 8009764:	68f8      	ldr	r0, [r7, #12]
 8009766:	f000 fa2f 	bl	8009bc8 <USB_DoPing>
      return HAL_OK;
 800976a:	2300      	movs	r3, #0
 800976c:	e0f8      	b.n	8009960 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800976e:	68bb      	ldr	r3, [r7, #8]
 8009770:	695b      	ldr	r3, [r3, #20]
 8009772:	2b00      	cmp	r3, #0
 8009774:	d018      	beq.n	80097a8 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8009776:	68bb      	ldr	r3, [r7, #8]
 8009778:	695b      	ldr	r3, [r3, #20]
 800977a:	68ba      	ldr	r2, [r7, #8]
 800977c:	8912      	ldrh	r2, [r2, #8]
 800977e:	4413      	add	r3, r2
 8009780:	3b01      	subs	r3, #1
 8009782:	68ba      	ldr	r2, [r7, #8]
 8009784:	8912      	ldrh	r2, [r2, #8]
 8009786:	fbb3 f3f2 	udiv	r3, r3, r2
 800978a:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800978c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800978e:	8b7b      	ldrh	r3, [r7, #26]
 8009790:	429a      	cmp	r2, r3
 8009792:	d90b      	bls.n	80097ac <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8009794:	8b7b      	ldrh	r3, [r7, #26]
 8009796:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8009798:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800979a:	68ba      	ldr	r2, [r7, #8]
 800979c:	8912      	ldrh	r2, [r2, #8]
 800979e:	fb02 f203 	mul.w	r2, r2, r3
 80097a2:	68bb      	ldr	r3, [r7, #8]
 80097a4:	611a      	str	r2, [r3, #16]
 80097a6:	e001      	b.n	80097ac <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 80097a8:	2301      	movs	r3, #1
 80097aa:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 80097ac:	68bb      	ldr	r3, [r7, #8]
 80097ae:	78db      	ldrb	r3, [r3, #3]
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d007      	beq.n	80097c4 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80097b4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80097b6:	68ba      	ldr	r2, [r7, #8]
 80097b8:	8912      	ldrh	r2, [r2, #8]
 80097ba:	fb02 f203 	mul.w	r2, r2, r3
 80097be:	68bb      	ldr	r3, [r7, #8]
 80097c0:	611a      	str	r2, [r3, #16]
 80097c2:	e003      	b.n	80097cc <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 80097c4:	68bb      	ldr	r3, [r7, #8]
 80097c6:	695a      	ldr	r2, [r3, #20]
 80097c8:	68bb      	ldr	r3, [r7, #8]
 80097ca:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80097cc:	68bb      	ldr	r3, [r7, #8]
 80097ce:	691b      	ldr	r3, [r3, #16]
 80097d0:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80097d4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80097d6:	04d9      	lsls	r1, r3, #19
 80097d8:	4b63      	ldr	r3, [pc, #396]	; (8009968 <USB_HC_StartXfer+0x280>)
 80097da:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80097dc:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80097de:	68bb      	ldr	r3, [r7, #8]
 80097e0:	7a9b      	ldrb	r3, [r3, #10]
 80097e2:	075b      	lsls	r3, r3, #29
 80097e4:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80097e8:	69f9      	ldr	r1, [r7, #28]
 80097ea:	0148      	lsls	r0, r1, #5
 80097ec:	6a39      	ldr	r1, [r7, #32]
 80097ee:	4401      	add	r1, r0
 80097f0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80097f4:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80097f6:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80097f8:	79fb      	ldrb	r3, [r7, #7]
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d009      	beq.n	8009812 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80097fe:	68bb      	ldr	r3, [r7, #8]
 8009800:	68d9      	ldr	r1, [r3, #12]
 8009802:	69fb      	ldr	r3, [r7, #28]
 8009804:	015a      	lsls	r2, r3, #5
 8009806:	6a3b      	ldr	r3, [r7, #32]
 8009808:	4413      	add	r3, r2
 800980a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800980e:	460a      	mov	r2, r1
 8009810:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8009812:	6a3b      	ldr	r3, [r7, #32]
 8009814:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009818:	689b      	ldr	r3, [r3, #8]
 800981a:	f003 0301 	and.w	r3, r3, #1
 800981e:	2b00      	cmp	r3, #0
 8009820:	bf0c      	ite	eq
 8009822:	2301      	moveq	r3, #1
 8009824:	2300      	movne	r3, #0
 8009826:	b2db      	uxtb	r3, r3
 8009828:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800982a:	69fb      	ldr	r3, [r7, #28]
 800982c:	015a      	lsls	r2, r3, #5
 800982e:	6a3b      	ldr	r3, [r7, #32]
 8009830:	4413      	add	r3, r2
 8009832:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	69fa      	ldr	r2, [r7, #28]
 800983a:	0151      	lsls	r1, r2, #5
 800983c:	6a3a      	ldr	r2, [r7, #32]
 800983e:	440a      	add	r2, r1
 8009840:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009844:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009848:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800984a:	69fb      	ldr	r3, [r7, #28]
 800984c:	015a      	lsls	r2, r3, #5
 800984e:	6a3b      	ldr	r3, [r7, #32]
 8009850:	4413      	add	r3, r2
 8009852:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009856:	681a      	ldr	r2, [r3, #0]
 8009858:	7e7b      	ldrb	r3, [r7, #25]
 800985a:	075b      	lsls	r3, r3, #29
 800985c:	69f9      	ldr	r1, [r7, #28]
 800985e:	0148      	lsls	r0, r1, #5
 8009860:	6a39      	ldr	r1, [r7, #32]
 8009862:	4401      	add	r1, r0
 8009864:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8009868:	4313      	orrs	r3, r2
 800986a:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800986c:	69fb      	ldr	r3, [r7, #28]
 800986e:	015a      	lsls	r2, r3, #5
 8009870:	6a3b      	ldr	r3, [r7, #32]
 8009872:	4413      	add	r3, r2
 8009874:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800987c:	693b      	ldr	r3, [r7, #16]
 800987e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009882:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8009884:	68bb      	ldr	r3, [r7, #8]
 8009886:	78db      	ldrb	r3, [r3, #3]
 8009888:	2b00      	cmp	r3, #0
 800988a:	d004      	beq.n	8009896 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800988c:	693b      	ldr	r3, [r7, #16]
 800988e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009892:	613b      	str	r3, [r7, #16]
 8009894:	e003      	b.n	800989e <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8009896:	693b      	ldr	r3, [r7, #16]
 8009898:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800989c:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800989e:	693b      	ldr	r3, [r7, #16]
 80098a0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80098a4:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80098a6:	69fb      	ldr	r3, [r7, #28]
 80098a8:	015a      	lsls	r2, r3, #5
 80098aa:	6a3b      	ldr	r3, [r7, #32]
 80098ac:	4413      	add	r3, r2
 80098ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80098b2:	461a      	mov	r2, r3
 80098b4:	693b      	ldr	r3, [r7, #16]
 80098b6:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80098b8:	79fb      	ldrb	r3, [r7, #7]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d001      	beq.n	80098c2 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80098be:	2300      	movs	r3, #0
 80098c0:	e04e      	b.n	8009960 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80098c2:	68bb      	ldr	r3, [r7, #8]
 80098c4:	78db      	ldrb	r3, [r3, #3]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d149      	bne.n	800995e <USB_HC_StartXfer+0x276>
 80098ca:	68bb      	ldr	r3, [r7, #8]
 80098cc:	695b      	ldr	r3, [r3, #20]
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d045      	beq.n	800995e <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 80098d2:	68bb      	ldr	r3, [r7, #8]
 80098d4:	79db      	ldrb	r3, [r3, #7]
 80098d6:	2b03      	cmp	r3, #3
 80098d8:	d830      	bhi.n	800993c <USB_HC_StartXfer+0x254>
 80098da:	a201      	add	r2, pc, #4	; (adr r2, 80098e0 <USB_HC_StartXfer+0x1f8>)
 80098dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098e0:	080098f1 	.word	0x080098f1
 80098e4:	08009915 	.word	0x08009915
 80098e8:	080098f1 	.word	0x080098f1
 80098ec:	08009915 	.word	0x08009915
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80098f0:	68bb      	ldr	r3, [r7, #8]
 80098f2:	695b      	ldr	r3, [r3, #20]
 80098f4:	3303      	adds	r3, #3
 80098f6:	089b      	lsrs	r3, r3, #2
 80098f8:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80098fa:	8afa      	ldrh	r2, [r7, #22]
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009900:	b29b      	uxth	r3, r3
 8009902:	429a      	cmp	r2, r3
 8009904:	d91c      	bls.n	8009940 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	699b      	ldr	r3, [r3, #24]
 800990a:	f043 0220 	orr.w	r2, r3, #32
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	619a      	str	r2, [r3, #24]
        }
        break;
 8009912:	e015      	b.n	8009940 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8009914:	68bb      	ldr	r3, [r7, #8]
 8009916:	695b      	ldr	r3, [r3, #20]
 8009918:	3303      	adds	r3, #3
 800991a:	089b      	lsrs	r3, r3, #2
 800991c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800991e:	8afa      	ldrh	r2, [r7, #22]
 8009920:	6a3b      	ldr	r3, [r7, #32]
 8009922:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009926:	691b      	ldr	r3, [r3, #16]
 8009928:	b29b      	uxth	r3, r3
 800992a:	429a      	cmp	r2, r3
 800992c:	d90a      	bls.n	8009944 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	699b      	ldr	r3, [r3, #24]
 8009932:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	619a      	str	r2, [r3, #24]
        }
        break;
 800993a:	e003      	b.n	8009944 <USB_HC_StartXfer+0x25c>

      default:
        break;
 800993c:	bf00      	nop
 800993e:	e002      	b.n	8009946 <USB_HC_StartXfer+0x25e>
        break;
 8009940:	bf00      	nop
 8009942:	e000      	b.n	8009946 <USB_HC_StartXfer+0x25e>
        break;
 8009944:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8009946:	68bb      	ldr	r3, [r7, #8]
 8009948:	68d9      	ldr	r1, [r3, #12]
 800994a:	68bb      	ldr	r3, [r7, #8]
 800994c:	785a      	ldrb	r2, [r3, #1]
 800994e:	68bb      	ldr	r3, [r7, #8]
 8009950:	695b      	ldr	r3, [r3, #20]
 8009952:	b29b      	uxth	r3, r3
 8009954:	2000      	movs	r0, #0
 8009956:	9000      	str	r0, [sp, #0]
 8009958:	68f8      	ldr	r0, [r7, #12]
 800995a:	f7ff fb53 	bl	8009004 <USB_WritePacket>
  }

  return HAL_OK;
 800995e:	2300      	movs	r3, #0
}
 8009960:	4618      	mov	r0, r3
 8009962:	3728      	adds	r7, #40	; 0x28
 8009964:	46bd      	mov	sp, r7
 8009966:	bd80      	pop	{r7, pc}
 8009968:	1ff80000 	.word	0x1ff80000

0800996c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800996c:	b480      	push	{r7}
 800996e:	b085      	sub	sp, #20
 8009970:	af00      	add	r7, sp, #0
 8009972:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800997e:	695b      	ldr	r3, [r3, #20]
 8009980:	b29b      	uxth	r3, r3
}
 8009982:	4618      	mov	r0, r3
 8009984:	3714      	adds	r7, #20
 8009986:	46bd      	mov	sp, r7
 8009988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998c:	4770      	bx	lr

0800998e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800998e:	b480      	push	{r7}
 8009990:	b089      	sub	sp, #36	; 0x24
 8009992:	af00      	add	r7, sp, #0
 8009994:	6078      	str	r0, [r7, #4]
 8009996:	460b      	mov	r3, r1
 8009998:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 800999e:	78fb      	ldrb	r3, [r7, #3]
 80099a0:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 80099a2:	2300      	movs	r3, #0
 80099a4:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80099a6:	697b      	ldr	r3, [r7, #20]
 80099a8:	015a      	lsls	r2, r3, #5
 80099aa:	69bb      	ldr	r3, [r7, #24]
 80099ac:	4413      	add	r3, r2
 80099ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	0c9b      	lsrs	r3, r3, #18
 80099b6:	f003 0303 	and.w	r3, r3, #3
 80099ba:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80099bc:	697b      	ldr	r3, [r7, #20]
 80099be:	015a      	lsls	r2, r3, #5
 80099c0:	69bb      	ldr	r3, [r7, #24]
 80099c2:	4413      	add	r3, r2
 80099c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	0fdb      	lsrs	r3, r3, #31
 80099cc:	f003 0301 	and.w	r3, r3, #1
 80099d0:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	689b      	ldr	r3, [r3, #8]
 80099d6:	f003 0320 	and.w	r3, r3, #32
 80099da:	2b20      	cmp	r3, #32
 80099dc:	d104      	bne.n	80099e8 <USB_HC_Halt+0x5a>
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d101      	bne.n	80099e8 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 80099e4:	2300      	movs	r3, #0
 80099e6:	e0e8      	b.n	8009bba <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80099e8:	693b      	ldr	r3, [r7, #16]
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d002      	beq.n	80099f4 <USB_HC_Halt+0x66>
 80099ee:	693b      	ldr	r3, [r7, #16]
 80099f0:	2b02      	cmp	r3, #2
 80099f2:	d173      	bne.n	8009adc <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80099f4:	697b      	ldr	r3, [r7, #20]
 80099f6:	015a      	lsls	r2, r3, #5
 80099f8:	69bb      	ldr	r3, [r7, #24]
 80099fa:	4413      	add	r3, r2
 80099fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	697a      	ldr	r2, [r7, #20]
 8009a04:	0151      	lsls	r1, r2, #5
 8009a06:	69ba      	ldr	r2, [r7, #24]
 8009a08:	440a      	add	r2, r1
 8009a0a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009a0e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009a12:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	689b      	ldr	r3, [r3, #8]
 8009a18:	f003 0320 	and.w	r3, r3, #32
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	f040 80cb 	bne.w	8009bb8 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a26:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d143      	bne.n	8009ab6 <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8009a2e:	697b      	ldr	r3, [r7, #20]
 8009a30:	015a      	lsls	r2, r3, #5
 8009a32:	69bb      	ldr	r3, [r7, #24]
 8009a34:	4413      	add	r3, r2
 8009a36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	697a      	ldr	r2, [r7, #20]
 8009a3e:	0151      	lsls	r1, r2, #5
 8009a40:	69ba      	ldr	r2, [r7, #24]
 8009a42:	440a      	add	r2, r1
 8009a44:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009a48:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009a4c:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009a4e:	697b      	ldr	r3, [r7, #20]
 8009a50:	015a      	lsls	r2, r3, #5
 8009a52:	69bb      	ldr	r3, [r7, #24]
 8009a54:	4413      	add	r3, r2
 8009a56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	697a      	ldr	r2, [r7, #20]
 8009a5e:	0151      	lsls	r1, r2, #5
 8009a60:	69ba      	ldr	r2, [r7, #24]
 8009a62:	440a      	add	r2, r1
 8009a64:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009a68:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009a6c:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8009a6e:	697b      	ldr	r3, [r7, #20]
 8009a70:	015a      	lsls	r2, r3, #5
 8009a72:	69bb      	ldr	r3, [r7, #24]
 8009a74:	4413      	add	r3, r2
 8009a76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	697a      	ldr	r2, [r7, #20]
 8009a7e:	0151      	lsls	r1, r2, #5
 8009a80:	69ba      	ldr	r2, [r7, #24]
 8009a82:	440a      	add	r2, r1
 8009a84:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009a88:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009a8c:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 8009a8e:	69fb      	ldr	r3, [r7, #28]
 8009a90:	3301      	adds	r3, #1
 8009a92:	61fb      	str	r3, [r7, #28]
 8009a94:	69fb      	ldr	r3, [r7, #28]
 8009a96:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009a9a:	d81d      	bhi.n	8009ad8 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009a9c:	697b      	ldr	r3, [r7, #20]
 8009a9e:	015a      	lsls	r2, r3, #5
 8009aa0:	69bb      	ldr	r3, [r7, #24]
 8009aa2:	4413      	add	r3, r2
 8009aa4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009aae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009ab2:	d0ec      	beq.n	8009a8e <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009ab4:	e080      	b.n	8009bb8 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009ab6:	697b      	ldr	r3, [r7, #20]
 8009ab8:	015a      	lsls	r2, r3, #5
 8009aba:	69bb      	ldr	r3, [r7, #24]
 8009abc:	4413      	add	r3, r2
 8009abe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	697a      	ldr	r2, [r7, #20]
 8009ac6:	0151      	lsls	r1, r2, #5
 8009ac8:	69ba      	ldr	r2, [r7, #24]
 8009aca:	440a      	add	r2, r1
 8009acc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009ad0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009ad4:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009ad6:	e06f      	b.n	8009bb8 <USB_HC_Halt+0x22a>
            break;
 8009ad8:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009ada:	e06d      	b.n	8009bb8 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8009adc:	697b      	ldr	r3, [r7, #20]
 8009ade:	015a      	lsls	r2, r3, #5
 8009ae0:	69bb      	ldr	r3, [r7, #24]
 8009ae2:	4413      	add	r3, r2
 8009ae4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	697a      	ldr	r2, [r7, #20]
 8009aec:	0151      	lsls	r1, r2, #5
 8009aee:	69ba      	ldr	r2, [r7, #24]
 8009af0:	440a      	add	r2, r1
 8009af2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009af6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009afa:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8009afc:	69bb      	ldr	r3, [r7, #24]
 8009afe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009b02:	691b      	ldr	r3, [r3, #16]
 8009b04:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d143      	bne.n	8009b94 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8009b0c:	697b      	ldr	r3, [r7, #20]
 8009b0e:	015a      	lsls	r2, r3, #5
 8009b10:	69bb      	ldr	r3, [r7, #24]
 8009b12:	4413      	add	r3, r2
 8009b14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	697a      	ldr	r2, [r7, #20]
 8009b1c:	0151      	lsls	r1, r2, #5
 8009b1e:	69ba      	ldr	r2, [r7, #24]
 8009b20:	440a      	add	r2, r1
 8009b22:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009b26:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009b2a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009b2c:	697b      	ldr	r3, [r7, #20]
 8009b2e:	015a      	lsls	r2, r3, #5
 8009b30:	69bb      	ldr	r3, [r7, #24]
 8009b32:	4413      	add	r3, r2
 8009b34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	697a      	ldr	r2, [r7, #20]
 8009b3c:	0151      	lsls	r1, r2, #5
 8009b3e:	69ba      	ldr	r2, [r7, #24]
 8009b40:	440a      	add	r2, r1
 8009b42:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009b46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009b4a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8009b4c:	697b      	ldr	r3, [r7, #20]
 8009b4e:	015a      	lsls	r2, r3, #5
 8009b50:	69bb      	ldr	r3, [r7, #24]
 8009b52:	4413      	add	r3, r2
 8009b54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	697a      	ldr	r2, [r7, #20]
 8009b5c:	0151      	lsls	r1, r2, #5
 8009b5e:	69ba      	ldr	r2, [r7, #24]
 8009b60:	440a      	add	r2, r1
 8009b62:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009b66:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009b6a:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8009b6c:	69fb      	ldr	r3, [r7, #28]
 8009b6e:	3301      	adds	r3, #1
 8009b70:	61fb      	str	r3, [r7, #28]
 8009b72:	69fb      	ldr	r3, [r7, #28]
 8009b74:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009b78:	d81d      	bhi.n	8009bb6 <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009b7a:	697b      	ldr	r3, [r7, #20]
 8009b7c:	015a      	lsls	r2, r3, #5
 8009b7e:	69bb      	ldr	r3, [r7, #24]
 8009b80:	4413      	add	r3, r2
 8009b82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009b8c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009b90:	d0ec      	beq.n	8009b6c <USB_HC_Halt+0x1de>
 8009b92:	e011      	b.n	8009bb8 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009b94:	697b      	ldr	r3, [r7, #20]
 8009b96:	015a      	lsls	r2, r3, #5
 8009b98:	69bb      	ldr	r3, [r7, #24]
 8009b9a:	4413      	add	r3, r2
 8009b9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	697a      	ldr	r2, [r7, #20]
 8009ba4:	0151      	lsls	r1, r2, #5
 8009ba6:	69ba      	ldr	r2, [r7, #24]
 8009ba8:	440a      	add	r2, r1
 8009baa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009bae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009bb2:	6013      	str	r3, [r2, #0]
 8009bb4:	e000      	b.n	8009bb8 <USB_HC_Halt+0x22a>
          break;
 8009bb6:	bf00      	nop
    }
  }

  return HAL_OK;
 8009bb8:	2300      	movs	r3, #0
}
 8009bba:	4618      	mov	r0, r3
 8009bbc:	3724      	adds	r7, #36	; 0x24
 8009bbe:	46bd      	mov	sp, r7
 8009bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc4:	4770      	bx	lr
	...

08009bc8 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8009bc8:	b480      	push	{r7}
 8009bca:	b087      	sub	sp, #28
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	6078      	str	r0, [r7, #4]
 8009bd0:	460b      	mov	r3, r1
 8009bd2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8009bd8:	78fb      	ldrb	r3, [r7, #3]
 8009bda:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8009bdc:	2301      	movs	r3, #1
 8009bde:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	04da      	lsls	r2, r3, #19
 8009be4:	4b15      	ldr	r3, [pc, #84]	; (8009c3c <USB_DoPing+0x74>)
 8009be6:	4013      	ands	r3, r2
 8009be8:	693a      	ldr	r2, [r7, #16]
 8009bea:	0151      	lsls	r1, r2, #5
 8009bec:	697a      	ldr	r2, [r7, #20]
 8009bee:	440a      	add	r2, r1
 8009bf0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009bf4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009bf8:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8009bfa:	693b      	ldr	r3, [r7, #16]
 8009bfc:	015a      	lsls	r2, r3, #5
 8009bfe:	697b      	ldr	r3, [r7, #20]
 8009c00:	4413      	add	r3, r2
 8009c02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009c0a:	68bb      	ldr	r3, [r7, #8]
 8009c0c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009c10:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009c12:	68bb      	ldr	r3, [r7, #8]
 8009c14:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009c18:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8009c1a:	693b      	ldr	r3, [r7, #16]
 8009c1c:	015a      	lsls	r2, r3, #5
 8009c1e:	697b      	ldr	r3, [r7, #20]
 8009c20:	4413      	add	r3, r2
 8009c22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009c26:	461a      	mov	r2, r3
 8009c28:	68bb      	ldr	r3, [r7, #8]
 8009c2a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8009c2c:	2300      	movs	r3, #0
}
 8009c2e:	4618      	mov	r0, r3
 8009c30:	371c      	adds	r7, #28
 8009c32:	46bd      	mov	sp, r7
 8009c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c38:	4770      	bx	lr
 8009c3a:	bf00      	nop
 8009c3c:	1ff80000 	.word	0x1ff80000

08009c40 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8009c40:	b580      	push	{r7, lr}
 8009c42:	b086      	sub	sp, #24
 8009c44:	af00      	add	r7, sp, #0
 8009c46:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8009c4c:	2300      	movs	r3, #0
 8009c4e:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8009c50:	6878      	ldr	r0, [r7, #4]
 8009c52:	f7ff f935 	bl	8008ec0 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8009c56:	2110      	movs	r1, #16
 8009c58:	6878      	ldr	r0, [r7, #4]
 8009c5a:	f7ff f98f 	bl	8008f7c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8009c5e:	6878      	ldr	r0, [r7, #4]
 8009c60:	f7ff f9b0 	bl	8008fc4 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8009c64:	2300      	movs	r3, #0
 8009c66:	613b      	str	r3, [r7, #16]
 8009c68:	e01f      	b.n	8009caa <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8009c6a:	693b      	ldr	r3, [r7, #16]
 8009c6c:	015a      	lsls	r2, r3, #5
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	4413      	add	r3, r2
 8009c72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8009c7a:	68bb      	ldr	r3, [r7, #8]
 8009c7c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009c80:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8009c82:	68bb      	ldr	r3, [r7, #8]
 8009c84:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009c88:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8009c8a:	68bb      	ldr	r3, [r7, #8]
 8009c8c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009c90:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8009c92:	693b      	ldr	r3, [r7, #16]
 8009c94:	015a      	lsls	r2, r3, #5
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	4413      	add	r3, r2
 8009c9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009c9e:	461a      	mov	r2, r3
 8009ca0:	68bb      	ldr	r3, [r7, #8]
 8009ca2:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8009ca4:	693b      	ldr	r3, [r7, #16]
 8009ca6:	3301      	adds	r3, #1
 8009ca8:	613b      	str	r3, [r7, #16]
 8009caa:	693b      	ldr	r3, [r7, #16]
 8009cac:	2b0f      	cmp	r3, #15
 8009cae:	d9dc      	bls.n	8009c6a <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8009cb0:	2300      	movs	r3, #0
 8009cb2:	613b      	str	r3, [r7, #16]
 8009cb4:	e034      	b.n	8009d20 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8009cb6:	693b      	ldr	r3, [r7, #16]
 8009cb8:	015a      	lsls	r2, r3, #5
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	4413      	add	r3, r2
 8009cbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8009cc6:	68bb      	ldr	r3, [r7, #8]
 8009cc8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009ccc:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8009cce:	68bb      	ldr	r3, [r7, #8]
 8009cd0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009cd4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8009cd6:	68bb      	ldr	r3, [r7, #8]
 8009cd8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009cdc:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8009cde:	693b      	ldr	r3, [r7, #16]
 8009ce0:	015a      	lsls	r2, r3, #5
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	4413      	add	r3, r2
 8009ce6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009cea:	461a      	mov	r2, r3
 8009cec:	68bb      	ldr	r3, [r7, #8]
 8009cee:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8009cf0:	697b      	ldr	r3, [r7, #20]
 8009cf2:	3301      	adds	r3, #1
 8009cf4:	617b      	str	r3, [r7, #20]
 8009cf6:	697b      	ldr	r3, [r7, #20]
 8009cf8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009cfc:	d80c      	bhi.n	8009d18 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009cfe:	693b      	ldr	r3, [r7, #16]
 8009d00:	015a      	lsls	r2, r3, #5
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	4413      	add	r3, r2
 8009d06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009d10:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009d14:	d0ec      	beq.n	8009cf0 <USB_StopHost+0xb0>
 8009d16:	e000      	b.n	8009d1a <USB_StopHost+0xda>
        break;
 8009d18:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8009d1a:	693b      	ldr	r3, [r7, #16]
 8009d1c:	3301      	adds	r3, #1
 8009d1e:	613b      	str	r3, [r7, #16]
 8009d20:	693b      	ldr	r3, [r7, #16]
 8009d22:	2b0f      	cmp	r3, #15
 8009d24:	d9c7      	bls.n	8009cb6 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009d2c:	461a      	mov	r2, r3
 8009d2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009d32:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009d3a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8009d3c:	6878      	ldr	r0, [r7, #4]
 8009d3e:	f7ff f8ae 	bl	8008e9e <USB_EnableGlobalInt>

  return HAL_OK;
 8009d42:	2300      	movs	r3, #0
}
 8009d44:	4618      	mov	r0, r3
 8009d46:	3718      	adds	r7, #24
 8009d48:	46bd      	mov	sp, r7
 8009d4a:	bd80      	pop	{r7, pc}

08009d4c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8009d4c:	b590      	push	{r4, r7, lr}
 8009d4e:	b089      	sub	sp, #36	; 0x24
 8009d50:	af04      	add	r7, sp, #16
 8009d52:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8009d54:	2301      	movs	r3, #1
 8009d56:	2202      	movs	r2, #2
 8009d58:	2102      	movs	r1, #2
 8009d5a:	6878      	ldr	r0, [r7, #4]
 8009d5c:	f000 fc66 	bl	800a62c <USBH_FindInterface>
 8009d60:	4603      	mov	r3, r0
 8009d62:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8009d64:	7bfb      	ldrb	r3, [r7, #15]
 8009d66:	2bff      	cmp	r3, #255	; 0xff
 8009d68:	d002      	beq.n	8009d70 <USBH_CDC_InterfaceInit+0x24>
 8009d6a:	7bfb      	ldrb	r3, [r7, #15]
 8009d6c:	2b01      	cmp	r3, #1
 8009d6e:	d901      	bls.n	8009d74 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8009d70:	2302      	movs	r3, #2
 8009d72:	e13d      	b.n	8009ff0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8009d74:	7bfb      	ldrb	r3, [r7, #15]
 8009d76:	4619      	mov	r1, r3
 8009d78:	6878      	ldr	r0, [r7, #4]
 8009d7a:	f000 fc3b 	bl	800a5f4 <USBH_SelectInterface>
 8009d7e:	4603      	mov	r3, r0
 8009d80:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8009d82:	7bbb      	ldrb	r3, [r7, #14]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d001      	beq.n	8009d8c <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8009d88:	2302      	movs	r3, #2
 8009d8a:	e131      	b.n	8009ff0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8009d92:	2050      	movs	r0, #80	; 0x50
 8009d94:	f002 fa00 	bl	800c198 <malloc>
 8009d98:	4603      	mov	r3, r0
 8009d9a:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009da2:	69db      	ldr	r3, [r3, #28]
 8009da4:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8009da6:	68bb      	ldr	r3, [r7, #8]
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d101      	bne.n	8009db0 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8009dac:	2302      	movs	r3, #2
 8009dae:	e11f      	b.n	8009ff0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8009db0:	2250      	movs	r2, #80	; 0x50
 8009db2:	2100      	movs	r1, #0
 8009db4:	68b8      	ldr	r0, [r7, #8]
 8009db6:	f002 f9ff 	bl	800c1b8 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8009dba:	7bfb      	ldrb	r3, [r7, #15]
 8009dbc:	687a      	ldr	r2, [r7, #4]
 8009dbe:	211a      	movs	r1, #26
 8009dc0:	fb01 f303 	mul.w	r3, r1, r3
 8009dc4:	4413      	add	r3, r2
 8009dc6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009dca:	781b      	ldrb	r3, [r3, #0]
 8009dcc:	b25b      	sxtb	r3, r3
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	da15      	bge.n	8009dfe <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009dd2:	7bfb      	ldrb	r3, [r7, #15]
 8009dd4:	687a      	ldr	r2, [r7, #4]
 8009dd6:	211a      	movs	r1, #26
 8009dd8:	fb01 f303 	mul.w	r3, r1, r3
 8009ddc:	4413      	add	r3, r2
 8009dde:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009de2:	781a      	ldrb	r2, [r3, #0]
 8009de4:	68bb      	ldr	r3, [r7, #8]
 8009de6:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009de8:	7bfb      	ldrb	r3, [r7, #15]
 8009dea:	687a      	ldr	r2, [r7, #4]
 8009dec:	211a      	movs	r1, #26
 8009dee:	fb01 f303 	mul.w	r3, r1, r3
 8009df2:	4413      	add	r3, r2
 8009df4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8009df8:	881a      	ldrh	r2, [r3, #0]
 8009dfa:	68bb      	ldr	r3, [r7, #8]
 8009dfc:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8009dfe:	68bb      	ldr	r3, [r7, #8]
 8009e00:	785b      	ldrb	r3, [r3, #1]
 8009e02:	4619      	mov	r1, r3
 8009e04:	6878      	ldr	r0, [r7, #4]
 8009e06:	f001 fe32 	bl	800ba6e <USBH_AllocPipe>
 8009e0a:	4603      	mov	r3, r0
 8009e0c:	461a      	mov	r2, r3
 8009e0e:	68bb      	ldr	r3, [r7, #8]
 8009e10:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8009e12:	68bb      	ldr	r3, [r7, #8]
 8009e14:	7819      	ldrb	r1, [r3, #0]
 8009e16:	68bb      	ldr	r3, [r7, #8]
 8009e18:	7858      	ldrb	r0, [r3, #1]
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009e26:	68ba      	ldr	r2, [r7, #8]
 8009e28:	8952      	ldrh	r2, [r2, #10]
 8009e2a:	9202      	str	r2, [sp, #8]
 8009e2c:	2203      	movs	r2, #3
 8009e2e:	9201      	str	r2, [sp, #4]
 8009e30:	9300      	str	r3, [sp, #0]
 8009e32:	4623      	mov	r3, r4
 8009e34:	4602      	mov	r2, r0
 8009e36:	6878      	ldr	r0, [r7, #4]
 8009e38:	f001 fdea 	bl	800ba10 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8009e3c:	68bb      	ldr	r3, [r7, #8]
 8009e3e:	781b      	ldrb	r3, [r3, #0]
 8009e40:	2200      	movs	r2, #0
 8009e42:	4619      	mov	r1, r3
 8009e44:	6878      	ldr	r0, [r7, #4]
 8009e46:	f002 f8f9 	bl	800c03c <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8009e4a:	2300      	movs	r3, #0
 8009e4c:	2200      	movs	r2, #0
 8009e4e:	210a      	movs	r1, #10
 8009e50:	6878      	ldr	r0, [r7, #4]
 8009e52:	f000 fbeb 	bl	800a62c <USBH_FindInterface>
 8009e56:	4603      	mov	r3, r0
 8009e58:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8009e5a:	7bfb      	ldrb	r3, [r7, #15]
 8009e5c:	2bff      	cmp	r3, #255	; 0xff
 8009e5e:	d002      	beq.n	8009e66 <USBH_CDC_InterfaceInit+0x11a>
 8009e60:	7bfb      	ldrb	r3, [r7, #15]
 8009e62:	2b01      	cmp	r3, #1
 8009e64:	d901      	bls.n	8009e6a <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8009e66:	2302      	movs	r3, #2
 8009e68:	e0c2      	b.n	8009ff0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8009e6a:	7bfb      	ldrb	r3, [r7, #15]
 8009e6c:	687a      	ldr	r2, [r7, #4]
 8009e6e:	211a      	movs	r1, #26
 8009e70:	fb01 f303 	mul.w	r3, r1, r3
 8009e74:	4413      	add	r3, r2
 8009e76:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009e7a:	781b      	ldrb	r3, [r3, #0]
 8009e7c:	b25b      	sxtb	r3, r3
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	da16      	bge.n	8009eb0 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009e82:	7bfb      	ldrb	r3, [r7, #15]
 8009e84:	687a      	ldr	r2, [r7, #4]
 8009e86:	211a      	movs	r1, #26
 8009e88:	fb01 f303 	mul.w	r3, r1, r3
 8009e8c:	4413      	add	r3, r2
 8009e8e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009e92:	781a      	ldrb	r2, [r3, #0]
 8009e94:	68bb      	ldr	r3, [r7, #8]
 8009e96:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009e98:	7bfb      	ldrb	r3, [r7, #15]
 8009e9a:	687a      	ldr	r2, [r7, #4]
 8009e9c:	211a      	movs	r1, #26
 8009e9e:	fb01 f303 	mul.w	r3, r1, r3
 8009ea2:	4413      	add	r3, r2
 8009ea4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8009ea8:	881a      	ldrh	r2, [r3, #0]
 8009eaa:	68bb      	ldr	r3, [r7, #8]
 8009eac:	835a      	strh	r2, [r3, #26]
 8009eae:	e015      	b.n	8009edc <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009eb0:	7bfb      	ldrb	r3, [r7, #15]
 8009eb2:	687a      	ldr	r2, [r7, #4]
 8009eb4:	211a      	movs	r1, #26
 8009eb6:	fb01 f303 	mul.w	r3, r1, r3
 8009eba:	4413      	add	r3, r2
 8009ebc:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009ec0:	781a      	ldrb	r2, [r3, #0]
 8009ec2:	68bb      	ldr	r3, [r7, #8]
 8009ec4:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009ec6:	7bfb      	ldrb	r3, [r7, #15]
 8009ec8:	687a      	ldr	r2, [r7, #4]
 8009eca:	211a      	movs	r1, #26
 8009ecc:	fb01 f303 	mul.w	r3, r1, r3
 8009ed0:	4413      	add	r3, r2
 8009ed2:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8009ed6:	881a      	ldrh	r2, [r3, #0]
 8009ed8:	68bb      	ldr	r3, [r7, #8]
 8009eda:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8009edc:	7bfb      	ldrb	r3, [r7, #15]
 8009ede:	687a      	ldr	r2, [r7, #4]
 8009ee0:	211a      	movs	r1, #26
 8009ee2:	fb01 f303 	mul.w	r3, r1, r3
 8009ee6:	4413      	add	r3, r2
 8009ee8:	f203 3356 	addw	r3, r3, #854	; 0x356
 8009eec:	781b      	ldrb	r3, [r3, #0]
 8009eee:	b25b      	sxtb	r3, r3
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	da16      	bge.n	8009f22 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8009ef4:	7bfb      	ldrb	r3, [r7, #15]
 8009ef6:	687a      	ldr	r2, [r7, #4]
 8009ef8:	211a      	movs	r1, #26
 8009efa:	fb01 f303 	mul.w	r3, r1, r3
 8009efe:	4413      	add	r3, r2
 8009f00:	f203 3356 	addw	r3, r3, #854	; 0x356
 8009f04:	781a      	ldrb	r2, [r3, #0]
 8009f06:	68bb      	ldr	r3, [r7, #8]
 8009f08:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8009f0a:	7bfb      	ldrb	r3, [r7, #15]
 8009f0c:	687a      	ldr	r2, [r7, #4]
 8009f0e:	211a      	movs	r1, #26
 8009f10:	fb01 f303 	mul.w	r3, r1, r3
 8009f14:	4413      	add	r3, r2
 8009f16:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8009f1a:	881a      	ldrh	r2, [r3, #0]
 8009f1c:	68bb      	ldr	r3, [r7, #8]
 8009f1e:	835a      	strh	r2, [r3, #26]
 8009f20:	e015      	b.n	8009f4e <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8009f22:	7bfb      	ldrb	r3, [r7, #15]
 8009f24:	687a      	ldr	r2, [r7, #4]
 8009f26:	211a      	movs	r1, #26
 8009f28:	fb01 f303 	mul.w	r3, r1, r3
 8009f2c:	4413      	add	r3, r2
 8009f2e:	f203 3356 	addw	r3, r3, #854	; 0x356
 8009f32:	781a      	ldrb	r2, [r3, #0]
 8009f34:	68bb      	ldr	r3, [r7, #8]
 8009f36:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8009f38:	7bfb      	ldrb	r3, [r7, #15]
 8009f3a:	687a      	ldr	r2, [r7, #4]
 8009f3c:	211a      	movs	r1, #26
 8009f3e:	fb01 f303 	mul.w	r3, r1, r3
 8009f42:	4413      	add	r3, r2
 8009f44:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8009f48:	881a      	ldrh	r2, [r3, #0]
 8009f4a:	68bb      	ldr	r3, [r7, #8]
 8009f4c:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8009f4e:	68bb      	ldr	r3, [r7, #8]
 8009f50:	7b9b      	ldrb	r3, [r3, #14]
 8009f52:	4619      	mov	r1, r3
 8009f54:	6878      	ldr	r0, [r7, #4]
 8009f56:	f001 fd8a 	bl	800ba6e <USBH_AllocPipe>
 8009f5a:	4603      	mov	r3, r0
 8009f5c:	461a      	mov	r2, r3
 8009f5e:	68bb      	ldr	r3, [r7, #8]
 8009f60:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8009f62:	68bb      	ldr	r3, [r7, #8]
 8009f64:	7bdb      	ldrb	r3, [r3, #15]
 8009f66:	4619      	mov	r1, r3
 8009f68:	6878      	ldr	r0, [r7, #4]
 8009f6a:	f001 fd80 	bl	800ba6e <USBH_AllocPipe>
 8009f6e:	4603      	mov	r3, r0
 8009f70:	461a      	mov	r2, r3
 8009f72:	68bb      	ldr	r3, [r7, #8]
 8009f74:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8009f76:	68bb      	ldr	r3, [r7, #8]
 8009f78:	7b59      	ldrb	r1, [r3, #13]
 8009f7a:	68bb      	ldr	r3, [r7, #8]
 8009f7c:	7b98      	ldrb	r0, [r3, #14]
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009f8a:	68ba      	ldr	r2, [r7, #8]
 8009f8c:	8b12      	ldrh	r2, [r2, #24]
 8009f8e:	9202      	str	r2, [sp, #8]
 8009f90:	2202      	movs	r2, #2
 8009f92:	9201      	str	r2, [sp, #4]
 8009f94:	9300      	str	r3, [sp, #0]
 8009f96:	4623      	mov	r3, r4
 8009f98:	4602      	mov	r2, r0
 8009f9a:	6878      	ldr	r0, [r7, #4]
 8009f9c:	f001 fd38 	bl	800ba10 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8009fa0:	68bb      	ldr	r3, [r7, #8]
 8009fa2:	7b19      	ldrb	r1, [r3, #12]
 8009fa4:	68bb      	ldr	r3, [r7, #8]
 8009fa6:	7bd8      	ldrb	r0, [r3, #15]
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009fb4:	68ba      	ldr	r2, [r7, #8]
 8009fb6:	8b52      	ldrh	r2, [r2, #26]
 8009fb8:	9202      	str	r2, [sp, #8]
 8009fba:	2202      	movs	r2, #2
 8009fbc:	9201      	str	r2, [sp, #4]
 8009fbe:	9300      	str	r3, [sp, #0]
 8009fc0:	4623      	mov	r3, r4
 8009fc2:	4602      	mov	r2, r0
 8009fc4:	6878      	ldr	r0, [r7, #4]
 8009fc6:	f001 fd23 	bl	800ba10 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8009fca:	68bb      	ldr	r3, [r7, #8]
 8009fcc:	2200      	movs	r2, #0
 8009fce:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8009fd2:	68bb      	ldr	r3, [r7, #8]
 8009fd4:	7b5b      	ldrb	r3, [r3, #13]
 8009fd6:	2200      	movs	r2, #0
 8009fd8:	4619      	mov	r1, r3
 8009fda:	6878      	ldr	r0, [r7, #4]
 8009fdc:	f002 f82e 	bl	800c03c <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8009fe0:	68bb      	ldr	r3, [r7, #8]
 8009fe2:	7b1b      	ldrb	r3, [r3, #12]
 8009fe4:	2200      	movs	r2, #0
 8009fe6:	4619      	mov	r1, r3
 8009fe8:	6878      	ldr	r0, [r7, #4]
 8009fea:	f002 f827 	bl	800c03c <USBH_LL_SetToggle>

  return USBH_OK;
 8009fee:	2300      	movs	r3, #0
}
 8009ff0:	4618      	mov	r0, r3
 8009ff2:	3714      	adds	r7, #20
 8009ff4:	46bd      	mov	sp, r7
 8009ff6:	bd90      	pop	{r4, r7, pc}

08009ff8 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8009ff8:	b580      	push	{r7, lr}
 8009ffa:	b084      	sub	sp, #16
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a006:	69db      	ldr	r3, [r3, #28]
 800a008:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	781b      	ldrb	r3, [r3, #0]
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d00e      	beq.n	800a030 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	781b      	ldrb	r3, [r3, #0]
 800a016:	4619      	mov	r1, r3
 800a018:	6878      	ldr	r0, [r7, #4]
 800a01a:	f001 fd18 	bl	800ba4e <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	781b      	ldrb	r3, [r3, #0]
 800a022:	4619      	mov	r1, r3
 800a024:	6878      	ldr	r0, [r7, #4]
 800a026:	f001 fd43 	bl	800bab0 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	2200      	movs	r2, #0
 800a02e:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	7b1b      	ldrb	r3, [r3, #12]
 800a034:	2b00      	cmp	r3, #0
 800a036:	d00e      	beq.n	800a056 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	7b1b      	ldrb	r3, [r3, #12]
 800a03c:	4619      	mov	r1, r3
 800a03e:	6878      	ldr	r0, [r7, #4]
 800a040:	f001 fd05 	bl	800ba4e <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	7b1b      	ldrb	r3, [r3, #12]
 800a048:	4619      	mov	r1, r3
 800a04a:	6878      	ldr	r0, [r7, #4]
 800a04c:	f001 fd30 	bl	800bab0 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	2200      	movs	r2, #0
 800a054:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	7b5b      	ldrb	r3, [r3, #13]
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d00e      	beq.n	800a07c <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	7b5b      	ldrb	r3, [r3, #13]
 800a062:	4619      	mov	r1, r3
 800a064:	6878      	ldr	r0, [r7, #4]
 800a066:	f001 fcf2 	bl	800ba4e <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	7b5b      	ldrb	r3, [r3, #13]
 800a06e:	4619      	mov	r1, r3
 800a070:	6878      	ldr	r0, [r7, #4]
 800a072:	f001 fd1d 	bl	800bab0 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	2200      	movs	r2, #0
 800a07a:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a082:	69db      	ldr	r3, [r3, #28]
 800a084:	2b00      	cmp	r3, #0
 800a086:	d00b      	beq.n	800a0a0 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a08e:	69db      	ldr	r3, [r3, #28]
 800a090:	4618      	mov	r0, r3
 800a092:	f002 f889 	bl	800c1a8 <free>
    phost->pActiveClass->pData = 0U;
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a09c:	2200      	movs	r2, #0
 800a09e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800a0a0:	2300      	movs	r3, #0
}
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	3710      	adds	r7, #16
 800a0a6:	46bd      	mov	sp, r7
 800a0a8:	bd80      	pop	{r7, pc}

0800a0aa <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800a0aa:	b580      	push	{r7, lr}
 800a0ac:	b084      	sub	sp, #16
 800a0ae:	af00      	add	r7, sp, #0
 800a0b0:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a0b8:	69db      	ldr	r3, [r3, #28]
 800a0ba:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	3340      	adds	r3, #64	; 0x40
 800a0c0:	4619      	mov	r1, r3
 800a0c2:	6878      	ldr	r0, [r7, #4]
 800a0c4:	f000 f8b1 	bl	800a22a <GetLineCoding>
 800a0c8:	4603      	mov	r3, r0
 800a0ca:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800a0cc:	7afb      	ldrb	r3, [r7, #11]
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d105      	bne.n	800a0de <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a0d8:	2102      	movs	r1, #2
 800a0da:	6878      	ldr	r0, [r7, #4]
 800a0dc:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800a0de:	7afb      	ldrb	r3, [r7, #11]
}
 800a0e0:	4618      	mov	r0, r3
 800a0e2:	3710      	adds	r7, #16
 800a0e4:	46bd      	mov	sp, r7
 800a0e6:	bd80      	pop	{r7, pc}

0800a0e8 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800a0e8:	b580      	push	{r7, lr}
 800a0ea:	b084      	sub	sp, #16
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800a0f0:	2301      	movs	r3, #1
 800a0f2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800a0f4:	2300      	movs	r3, #0
 800a0f6:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a0fe:	69db      	ldr	r3, [r3, #28]
 800a100:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800a102:	68bb      	ldr	r3, [r7, #8]
 800a104:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800a108:	2b04      	cmp	r3, #4
 800a10a:	d877      	bhi.n	800a1fc <USBH_CDC_Process+0x114>
 800a10c:	a201      	add	r2, pc, #4	; (adr r2, 800a114 <USBH_CDC_Process+0x2c>)
 800a10e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a112:	bf00      	nop
 800a114:	0800a129 	.word	0x0800a129
 800a118:	0800a12f 	.word	0x0800a12f
 800a11c:	0800a15f 	.word	0x0800a15f
 800a120:	0800a1d3 	.word	0x0800a1d3
 800a124:	0800a1e1 	.word	0x0800a1e1
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800a128:	2300      	movs	r3, #0
 800a12a:	73fb      	strb	r3, [r7, #15]
      break;
 800a12c:	e06d      	b.n	800a20a <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800a12e:	68bb      	ldr	r3, [r7, #8]
 800a130:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a132:	4619      	mov	r1, r3
 800a134:	6878      	ldr	r0, [r7, #4]
 800a136:	f000 f897 	bl	800a268 <SetLineCoding>
 800a13a:	4603      	mov	r3, r0
 800a13c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800a13e:	7bbb      	ldrb	r3, [r7, #14]
 800a140:	2b00      	cmp	r3, #0
 800a142:	d104      	bne.n	800a14e <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800a144:	68bb      	ldr	r3, [r7, #8]
 800a146:	2202      	movs	r2, #2
 800a148:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800a14c:	e058      	b.n	800a200 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800a14e:	7bbb      	ldrb	r3, [r7, #14]
 800a150:	2b01      	cmp	r3, #1
 800a152:	d055      	beq.n	800a200 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800a154:	68bb      	ldr	r3, [r7, #8]
 800a156:	2204      	movs	r2, #4
 800a158:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800a15c:	e050      	b.n	800a200 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800a15e:	68bb      	ldr	r3, [r7, #8]
 800a160:	3340      	adds	r3, #64	; 0x40
 800a162:	4619      	mov	r1, r3
 800a164:	6878      	ldr	r0, [r7, #4]
 800a166:	f000 f860 	bl	800a22a <GetLineCoding>
 800a16a:	4603      	mov	r3, r0
 800a16c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800a16e:	7bbb      	ldrb	r3, [r7, #14]
 800a170:	2b00      	cmp	r3, #0
 800a172:	d126      	bne.n	800a1c2 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800a174:	68bb      	ldr	r3, [r7, #8]
 800a176:	2200      	movs	r2, #0
 800a178:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800a17c:	68bb      	ldr	r3, [r7, #8]
 800a17e:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800a182:	68bb      	ldr	r3, [r7, #8]
 800a184:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a186:	791b      	ldrb	r3, [r3, #4]
 800a188:	429a      	cmp	r2, r3
 800a18a:	d13b      	bne.n	800a204 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800a18c:	68bb      	ldr	r3, [r7, #8]
 800a18e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800a192:	68bb      	ldr	r3, [r7, #8]
 800a194:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a196:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800a198:	429a      	cmp	r2, r3
 800a19a:	d133      	bne.n	800a204 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800a19c:	68bb      	ldr	r3, [r7, #8]
 800a19e:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800a1a2:	68bb      	ldr	r3, [r7, #8]
 800a1a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a1a6:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800a1a8:	429a      	cmp	r2, r3
 800a1aa:	d12b      	bne.n	800a204 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800a1ac:	68bb      	ldr	r3, [r7, #8]
 800a1ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a1b0:	68bb      	ldr	r3, [r7, #8]
 800a1b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a1b4:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800a1b6:	429a      	cmp	r2, r3
 800a1b8:	d124      	bne.n	800a204 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800a1ba:	6878      	ldr	r0, [r7, #4]
 800a1bc:	f000 f958 	bl	800a470 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800a1c0:	e020      	b.n	800a204 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800a1c2:	7bbb      	ldrb	r3, [r7, #14]
 800a1c4:	2b01      	cmp	r3, #1
 800a1c6:	d01d      	beq.n	800a204 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800a1c8:	68bb      	ldr	r3, [r7, #8]
 800a1ca:	2204      	movs	r2, #4
 800a1cc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800a1d0:	e018      	b.n	800a204 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800a1d2:	6878      	ldr	r0, [r7, #4]
 800a1d4:	f000 f867 	bl	800a2a6 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800a1d8:	6878      	ldr	r0, [r7, #4]
 800a1da:	f000 f8da 	bl	800a392 <CDC_ProcessReception>
      break;
 800a1de:	e014      	b.n	800a20a <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800a1e0:	2100      	movs	r1, #0
 800a1e2:	6878      	ldr	r0, [r7, #4]
 800a1e4:	f000 ffe3 	bl	800b1ae <USBH_ClrFeature>
 800a1e8:	4603      	mov	r3, r0
 800a1ea:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800a1ec:	7bbb      	ldrb	r3, [r7, #14]
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d10a      	bne.n	800a208 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800a1f2:	68bb      	ldr	r3, [r7, #8]
 800a1f4:	2200      	movs	r2, #0
 800a1f6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800a1fa:	e005      	b.n	800a208 <USBH_CDC_Process+0x120>

    default:
      break;
 800a1fc:	bf00      	nop
 800a1fe:	e004      	b.n	800a20a <USBH_CDC_Process+0x122>
      break;
 800a200:	bf00      	nop
 800a202:	e002      	b.n	800a20a <USBH_CDC_Process+0x122>
      break;
 800a204:	bf00      	nop
 800a206:	e000      	b.n	800a20a <USBH_CDC_Process+0x122>
      break;
 800a208:	bf00      	nop

  }

  return status;
 800a20a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a20c:	4618      	mov	r0, r3
 800a20e:	3710      	adds	r7, #16
 800a210:	46bd      	mov	sp, r7
 800a212:	bd80      	pop	{r7, pc}

0800a214 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800a214:	b480      	push	{r7}
 800a216:	b083      	sub	sp, #12
 800a218:	af00      	add	r7, sp, #0
 800a21a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800a21c:	2300      	movs	r3, #0
}
 800a21e:	4618      	mov	r0, r3
 800a220:	370c      	adds	r7, #12
 800a222:	46bd      	mov	sp, r7
 800a224:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a228:	4770      	bx	lr

0800a22a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800a22a:	b580      	push	{r7, lr}
 800a22c:	b082      	sub	sp, #8
 800a22e:	af00      	add	r7, sp, #0
 800a230:	6078      	str	r0, [r7, #4]
 800a232:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	22a1      	movs	r2, #161	; 0xa1
 800a238:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	2221      	movs	r2, #33	; 0x21
 800a23e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	2200      	movs	r2, #0
 800a244:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	2200      	movs	r2, #0
 800a24a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	2207      	movs	r2, #7
 800a250:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800a252:	683b      	ldr	r3, [r7, #0]
 800a254:	2207      	movs	r2, #7
 800a256:	4619      	mov	r1, r3
 800a258:	6878      	ldr	r0, [r7, #4]
 800a25a:	f001 f988 	bl	800b56e <USBH_CtlReq>
 800a25e:	4603      	mov	r3, r0
}
 800a260:	4618      	mov	r0, r3
 800a262:	3708      	adds	r7, #8
 800a264:	46bd      	mov	sp, r7
 800a266:	bd80      	pop	{r7, pc}

0800a268 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800a268:	b580      	push	{r7, lr}
 800a26a:	b082      	sub	sp, #8
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	6078      	str	r0, [r7, #4]
 800a270:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	2221      	movs	r2, #33	; 0x21
 800a276:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	2220      	movs	r2, #32
 800a27c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	2200      	movs	r2, #0
 800a282:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	2200      	movs	r2, #0
 800a288:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	2207      	movs	r2, #7
 800a28e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800a290:	683b      	ldr	r3, [r7, #0]
 800a292:	2207      	movs	r2, #7
 800a294:	4619      	mov	r1, r3
 800a296:	6878      	ldr	r0, [r7, #4]
 800a298:	f001 f969 	bl	800b56e <USBH_CtlReq>
 800a29c:	4603      	mov	r3, r0
}
 800a29e:	4618      	mov	r0, r3
 800a2a0:	3708      	adds	r7, #8
 800a2a2:	46bd      	mov	sp, r7
 800a2a4:	bd80      	pop	{r7, pc}

0800a2a6 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800a2a6:	b580      	push	{r7, lr}
 800a2a8:	b086      	sub	sp, #24
 800a2aa:	af02      	add	r7, sp, #8
 800a2ac:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a2b4:	69db      	ldr	r3, [r3, #28]
 800a2b6:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a2b8:	2300      	movs	r3, #0
 800a2ba:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800a2c2:	2b01      	cmp	r3, #1
 800a2c4:	d002      	beq.n	800a2cc <CDC_ProcessTransmission+0x26>
 800a2c6:	2b02      	cmp	r3, #2
 800a2c8:	d023      	beq.n	800a312 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800a2ca:	e05e      	b.n	800a38a <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2d0:	68fa      	ldr	r2, [r7, #12]
 800a2d2:	8b12      	ldrh	r2, [r2, #24]
 800a2d4:	4293      	cmp	r3, r2
 800a2d6:	d90b      	bls.n	800a2f0 <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	69d9      	ldr	r1, [r3, #28]
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	8b1a      	ldrh	r2, [r3, #24]
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	7b5b      	ldrb	r3, [r3, #13]
 800a2e4:	2001      	movs	r0, #1
 800a2e6:	9000      	str	r0, [sp, #0]
 800a2e8:	6878      	ldr	r0, [r7, #4]
 800a2ea:	f001 fb4e 	bl	800b98a <USBH_BulkSendData>
 800a2ee:	e00b      	b.n	800a308 <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 800a2f8:	b29a      	uxth	r2, r3
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	7b5b      	ldrb	r3, [r3, #13]
 800a2fe:	2001      	movs	r0, #1
 800a300:	9000      	str	r0, [sp, #0]
 800a302:	6878      	ldr	r0, [r7, #4]
 800a304:	f001 fb41 	bl	800b98a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	2202      	movs	r2, #2
 800a30c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800a310:	e03b      	b.n	800a38a <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	7b5b      	ldrb	r3, [r3, #13]
 800a316:	4619      	mov	r1, r3
 800a318:	6878      	ldr	r0, [r7, #4]
 800a31a:	f001 fe65 	bl	800bfe8 <USBH_LL_GetURBState>
 800a31e:	4603      	mov	r3, r0
 800a320:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800a322:	7afb      	ldrb	r3, [r7, #11]
 800a324:	2b01      	cmp	r3, #1
 800a326:	d128      	bne.n	800a37a <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a32c:	68fa      	ldr	r2, [r7, #12]
 800a32e:	8b12      	ldrh	r2, [r2, #24]
 800a330:	4293      	cmp	r3, r2
 800a332:	d90e      	bls.n	800a352 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a338:	68fa      	ldr	r2, [r7, #12]
 800a33a:	8b12      	ldrh	r2, [r2, #24]
 800a33c:	1a9a      	subs	r2, r3, r2
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	69db      	ldr	r3, [r3, #28]
 800a346:	68fa      	ldr	r2, [r7, #12]
 800a348:	8b12      	ldrh	r2, [r2, #24]
 800a34a:	441a      	add	r2, r3
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	61da      	str	r2, [r3, #28]
 800a350:	e002      	b.n	800a358 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	2200      	movs	r2, #0
 800a356:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d004      	beq.n	800a36a <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	2201      	movs	r2, #1
 800a364:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800a368:	e00e      	b.n	800a388 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	2200      	movs	r2, #0
 800a36e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800a372:	6878      	ldr	r0, [r7, #4]
 800a374:	f000 f868 	bl	800a448 <USBH_CDC_TransmitCallback>
      break;
 800a378:	e006      	b.n	800a388 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800a37a:	7afb      	ldrb	r3, [r7, #11]
 800a37c:	2b02      	cmp	r3, #2
 800a37e:	d103      	bne.n	800a388 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	2201      	movs	r2, #1
 800a384:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800a388:	bf00      	nop
  }
}
 800a38a:	bf00      	nop
 800a38c:	3710      	adds	r7, #16
 800a38e:	46bd      	mov	sp, r7
 800a390:	bd80      	pop	{r7, pc}

0800a392 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800a392:	b580      	push	{r7, lr}
 800a394:	b086      	sub	sp, #24
 800a396:	af00      	add	r7, sp, #0
 800a398:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a3a0:	69db      	ldr	r3, [r3, #28]
 800a3a2:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a3a4:	2300      	movs	r3, #0
 800a3a6:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800a3a8:	697b      	ldr	r3, [r7, #20]
 800a3aa:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800a3ae:	2b03      	cmp	r3, #3
 800a3b0:	d002      	beq.n	800a3b8 <CDC_ProcessReception+0x26>
 800a3b2:	2b04      	cmp	r3, #4
 800a3b4:	d00e      	beq.n	800a3d4 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800a3b6:	e043      	b.n	800a440 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 800a3b8:	697b      	ldr	r3, [r7, #20]
 800a3ba:	6a19      	ldr	r1, [r3, #32]
 800a3bc:	697b      	ldr	r3, [r7, #20]
 800a3be:	8b5a      	ldrh	r2, [r3, #26]
 800a3c0:	697b      	ldr	r3, [r7, #20]
 800a3c2:	7b1b      	ldrb	r3, [r3, #12]
 800a3c4:	6878      	ldr	r0, [r7, #4]
 800a3c6:	f001 fb05 	bl	800b9d4 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800a3ca:	697b      	ldr	r3, [r7, #20]
 800a3cc:	2204      	movs	r2, #4
 800a3ce:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800a3d2:	e035      	b.n	800a440 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800a3d4:	697b      	ldr	r3, [r7, #20]
 800a3d6:	7b1b      	ldrb	r3, [r3, #12]
 800a3d8:	4619      	mov	r1, r3
 800a3da:	6878      	ldr	r0, [r7, #4]
 800a3dc:	f001 fe04 	bl	800bfe8 <USBH_LL_GetURBState>
 800a3e0:	4603      	mov	r3, r0
 800a3e2:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800a3e4:	7cfb      	ldrb	r3, [r7, #19]
 800a3e6:	2b01      	cmp	r3, #1
 800a3e8:	d129      	bne.n	800a43e <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800a3ea:	697b      	ldr	r3, [r7, #20]
 800a3ec:	7b1b      	ldrb	r3, [r3, #12]
 800a3ee:	4619      	mov	r1, r3
 800a3f0:	6878      	ldr	r0, [r7, #4]
 800a3f2:	f001 fd67 	bl	800bec4 <USBH_LL_GetLastXferSize>
 800a3f6:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800a3f8:	697b      	ldr	r3, [r7, #20]
 800a3fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3fc:	68fa      	ldr	r2, [r7, #12]
 800a3fe:	429a      	cmp	r2, r3
 800a400:	d016      	beq.n	800a430 <CDC_ProcessReception+0x9e>
 800a402:	697b      	ldr	r3, [r7, #20]
 800a404:	8b5b      	ldrh	r3, [r3, #26]
 800a406:	461a      	mov	r2, r3
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	4293      	cmp	r3, r2
 800a40c:	d910      	bls.n	800a430 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800a40e:	697b      	ldr	r3, [r7, #20]
 800a410:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	1ad2      	subs	r2, r2, r3
 800a416:	697b      	ldr	r3, [r7, #20]
 800a418:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800a41a:	697b      	ldr	r3, [r7, #20]
 800a41c:	6a1a      	ldr	r2, [r3, #32]
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	441a      	add	r2, r3
 800a422:	697b      	ldr	r3, [r7, #20]
 800a424:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800a426:	697b      	ldr	r3, [r7, #20]
 800a428:	2203      	movs	r2, #3
 800a42a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800a42e:	e006      	b.n	800a43e <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800a430:	697b      	ldr	r3, [r7, #20]
 800a432:	2200      	movs	r2, #0
 800a434:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800a438:	6878      	ldr	r0, [r7, #4]
 800a43a:	f000 f80f 	bl	800a45c <USBH_CDC_ReceiveCallback>
      break;
 800a43e:	bf00      	nop
  }
}
 800a440:	bf00      	nop
 800a442:	3718      	adds	r7, #24
 800a444:	46bd      	mov	sp, r7
 800a446:	bd80      	pop	{r7, pc}

0800a448 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800a448:	b480      	push	{r7}
 800a44a:	b083      	sub	sp, #12
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800a450:	bf00      	nop
 800a452:	370c      	adds	r7, #12
 800a454:	46bd      	mov	sp, r7
 800a456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a45a:	4770      	bx	lr

0800a45c <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800a45c:	b480      	push	{r7}
 800a45e:	b083      	sub	sp, #12
 800a460:	af00      	add	r7, sp, #0
 800a462:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800a464:	bf00      	nop
 800a466:	370c      	adds	r7, #12
 800a468:	46bd      	mov	sp, r7
 800a46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a46e:	4770      	bx	lr

0800a470 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800a470:	b480      	push	{r7}
 800a472:	b083      	sub	sp, #12
 800a474:	af00      	add	r7, sp, #0
 800a476:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800a478:	bf00      	nop
 800a47a:	370c      	adds	r7, #12
 800a47c:	46bd      	mov	sp, r7
 800a47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a482:	4770      	bx	lr

0800a484 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800a484:	b580      	push	{r7, lr}
 800a486:	b084      	sub	sp, #16
 800a488:	af00      	add	r7, sp, #0
 800a48a:	60f8      	str	r0, [r7, #12]
 800a48c:	60b9      	str	r1, [r7, #8]
 800a48e:	4613      	mov	r3, r2
 800a490:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	2b00      	cmp	r3, #0
 800a496:	d101      	bne.n	800a49c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800a498:	2302      	movs	r3, #2
 800a49a:	e029      	b.n	800a4f0 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	79fa      	ldrb	r2, [r7, #7]
 800a4a0:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	2200      	movs	r2, #0
 800a4a8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	2200      	movs	r2, #0
 800a4b0:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800a4b4:	68f8      	ldr	r0, [r7, #12]
 800a4b6:	f000 f81f 	bl	800a4f8 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	2200      	movs	r2, #0
 800a4be:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	2200      	movs	r2, #0
 800a4c6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	2200      	movs	r2, #0
 800a4ce:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	2200      	movs	r2, #0
 800a4d6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800a4da:	68bb      	ldr	r3, [r7, #8]
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d003      	beq.n	800a4e8 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	68ba      	ldr	r2, [r7, #8]
 800a4e4:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800a4e8:	68f8      	ldr	r0, [r7, #12]
 800a4ea:	f001 fc37 	bl	800bd5c <USBH_LL_Init>

  return USBH_OK;
 800a4ee:	2300      	movs	r3, #0
}
 800a4f0:	4618      	mov	r0, r3
 800a4f2:	3710      	adds	r7, #16
 800a4f4:	46bd      	mov	sp, r7
 800a4f6:	bd80      	pop	{r7, pc}

0800a4f8 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800a4f8:	b480      	push	{r7}
 800a4fa:	b085      	sub	sp, #20
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800a500:	2300      	movs	r3, #0
 800a502:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800a504:	2300      	movs	r3, #0
 800a506:	60fb      	str	r3, [r7, #12]
 800a508:	e009      	b.n	800a51e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800a50a:	687a      	ldr	r2, [r7, #4]
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	33e0      	adds	r3, #224	; 0xe0
 800a510:	009b      	lsls	r3, r3, #2
 800a512:	4413      	add	r3, r2
 800a514:	2200      	movs	r2, #0
 800a516:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	3301      	adds	r3, #1
 800a51c:	60fb      	str	r3, [r7, #12]
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	2b0e      	cmp	r3, #14
 800a522:	d9f2      	bls.n	800a50a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800a524:	2300      	movs	r3, #0
 800a526:	60fb      	str	r3, [r7, #12]
 800a528:	e009      	b.n	800a53e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800a52a:	687a      	ldr	r2, [r7, #4]
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	4413      	add	r3, r2
 800a530:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a534:	2200      	movs	r2, #0
 800a536:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	3301      	adds	r3, #1
 800a53c:	60fb      	str	r3, [r7, #12]
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a544:	d3f1      	bcc.n	800a52a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	2200      	movs	r2, #0
 800a54a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	2200      	movs	r2, #0
 800a550:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	2201      	movs	r2, #1
 800a556:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	2200      	movs	r2, #0
 800a55c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	2201      	movs	r2, #1
 800a564:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	2240      	movs	r2, #64	; 0x40
 800a56a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	2200      	movs	r2, #0
 800a570:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	2200      	movs	r2, #0
 800a576:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	2201      	movs	r2, #1
 800a57e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	2200      	movs	r2, #0
 800a586:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	2200      	movs	r2, #0
 800a58e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800a592:	2300      	movs	r3, #0
}
 800a594:	4618      	mov	r0, r3
 800a596:	3714      	adds	r7, #20
 800a598:	46bd      	mov	sp, r7
 800a59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a59e:	4770      	bx	lr

0800a5a0 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800a5a0:	b480      	push	{r7}
 800a5a2:	b085      	sub	sp, #20
 800a5a4:	af00      	add	r7, sp, #0
 800a5a6:	6078      	str	r0, [r7, #4]
 800a5a8:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800a5aa:	2300      	movs	r3, #0
 800a5ac:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800a5ae:	683b      	ldr	r3, [r7, #0]
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d016      	beq.n	800a5e2 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d10e      	bne.n	800a5dc <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a5c4:	1c59      	adds	r1, r3, #1
 800a5c6:	687a      	ldr	r2, [r7, #4]
 800a5c8:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800a5cc:	687a      	ldr	r2, [r7, #4]
 800a5ce:	33de      	adds	r3, #222	; 0xde
 800a5d0:	6839      	ldr	r1, [r7, #0]
 800a5d2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800a5d6:	2300      	movs	r3, #0
 800a5d8:	73fb      	strb	r3, [r7, #15]
 800a5da:	e004      	b.n	800a5e6 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800a5dc:	2302      	movs	r3, #2
 800a5de:	73fb      	strb	r3, [r7, #15]
 800a5e0:	e001      	b.n	800a5e6 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800a5e2:	2302      	movs	r3, #2
 800a5e4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a5e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5e8:	4618      	mov	r0, r3
 800a5ea:	3714      	adds	r7, #20
 800a5ec:	46bd      	mov	sp, r7
 800a5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f2:	4770      	bx	lr

0800a5f4 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800a5f4:	b480      	push	{r7}
 800a5f6:	b085      	sub	sp, #20
 800a5f8:	af00      	add	r7, sp, #0
 800a5fa:	6078      	str	r0, [r7, #4]
 800a5fc:	460b      	mov	r3, r1
 800a5fe:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800a600:	2300      	movs	r3, #0
 800a602:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800a60a:	78fa      	ldrb	r2, [r7, #3]
 800a60c:	429a      	cmp	r2, r3
 800a60e:	d204      	bcs.n	800a61a <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	78fa      	ldrb	r2, [r7, #3]
 800a614:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800a618:	e001      	b.n	800a61e <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800a61a:	2302      	movs	r3, #2
 800a61c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a61e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a620:	4618      	mov	r0, r3
 800a622:	3714      	adds	r7, #20
 800a624:	46bd      	mov	sp, r7
 800a626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a62a:	4770      	bx	lr

0800a62c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800a62c:	b480      	push	{r7}
 800a62e:	b087      	sub	sp, #28
 800a630:	af00      	add	r7, sp, #0
 800a632:	6078      	str	r0, [r7, #4]
 800a634:	4608      	mov	r0, r1
 800a636:	4611      	mov	r1, r2
 800a638:	461a      	mov	r2, r3
 800a63a:	4603      	mov	r3, r0
 800a63c:	70fb      	strb	r3, [r7, #3]
 800a63e:	460b      	mov	r3, r1
 800a640:	70bb      	strb	r3, [r7, #2]
 800a642:	4613      	mov	r3, r2
 800a644:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800a646:	2300      	movs	r3, #0
 800a648:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800a64a:	2300      	movs	r3, #0
 800a64c:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800a654:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a656:	e025      	b.n	800a6a4 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800a658:	7dfb      	ldrb	r3, [r7, #23]
 800a65a:	221a      	movs	r2, #26
 800a65c:	fb02 f303 	mul.w	r3, r2, r3
 800a660:	3308      	adds	r3, #8
 800a662:	68fa      	ldr	r2, [r7, #12]
 800a664:	4413      	add	r3, r2
 800a666:	3302      	adds	r3, #2
 800a668:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800a66a:	693b      	ldr	r3, [r7, #16]
 800a66c:	795b      	ldrb	r3, [r3, #5]
 800a66e:	78fa      	ldrb	r2, [r7, #3]
 800a670:	429a      	cmp	r2, r3
 800a672:	d002      	beq.n	800a67a <USBH_FindInterface+0x4e>
 800a674:	78fb      	ldrb	r3, [r7, #3]
 800a676:	2bff      	cmp	r3, #255	; 0xff
 800a678:	d111      	bne.n	800a69e <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a67a:	693b      	ldr	r3, [r7, #16]
 800a67c:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800a67e:	78ba      	ldrb	r2, [r7, #2]
 800a680:	429a      	cmp	r2, r3
 800a682:	d002      	beq.n	800a68a <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a684:	78bb      	ldrb	r3, [r7, #2]
 800a686:	2bff      	cmp	r3, #255	; 0xff
 800a688:	d109      	bne.n	800a69e <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a68a:	693b      	ldr	r3, [r7, #16]
 800a68c:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a68e:	787a      	ldrb	r2, [r7, #1]
 800a690:	429a      	cmp	r2, r3
 800a692:	d002      	beq.n	800a69a <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a694:	787b      	ldrb	r3, [r7, #1]
 800a696:	2bff      	cmp	r3, #255	; 0xff
 800a698:	d101      	bne.n	800a69e <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800a69a:	7dfb      	ldrb	r3, [r7, #23]
 800a69c:	e006      	b.n	800a6ac <USBH_FindInterface+0x80>
    }
    if_ix++;
 800a69e:	7dfb      	ldrb	r3, [r7, #23]
 800a6a0:	3301      	adds	r3, #1
 800a6a2:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a6a4:	7dfb      	ldrb	r3, [r7, #23]
 800a6a6:	2b01      	cmp	r3, #1
 800a6a8:	d9d6      	bls.n	800a658 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800a6aa:	23ff      	movs	r3, #255	; 0xff
}
 800a6ac:	4618      	mov	r0, r3
 800a6ae:	371c      	adds	r7, #28
 800a6b0:	46bd      	mov	sp, r7
 800a6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b6:	4770      	bx	lr

0800a6b8 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800a6b8:	b580      	push	{r7, lr}
 800a6ba:	b082      	sub	sp, #8
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800a6c0:	6878      	ldr	r0, [r7, #4]
 800a6c2:	f001 fb87 	bl	800bdd4 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800a6c6:	2101      	movs	r1, #1
 800a6c8:	6878      	ldr	r0, [r7, #4]
 800a6ca:	f001 fca0 	bl	800c00e <USBH_LL_DriverVBUS>

  return USBH_OK;
 800a6ce:	2300      	movs	r3, #0
}
 800a6d0:	4618      	mov	r0, r3
 800a6d2:	3708      	adds	r7, #8
 800a6d4:	46bd      	mov	sp, r7
 800a6d6:	bd80      	pop	{r7, pc}

0800a6d8 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800a6d8:	b580      	push	{r7, lr}
 800a6da:	b088      	sub	sp, #32
 800a6dc:	af04      	add	r7, sp, #16
 800a6de:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800a6e0:	2302      	movs	r3, #2
 800a6e2:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800a6e4:	2300      	movs	r3, #0
 800a6e6:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800a6ee:	b2db      	uxtb	r3, r3
 800a6f0:	2b01      	cmp	r3, #1
 800a6f2:	d102      	bne.n	800a6fa <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	2203      	movs	r2, #3
 800a6f8:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	781b      	ldrb	r3, [r3, #0]
 800a6fe:	b2db      	uxtb	r3, r3
 800a700:	2b0b      	cmp	r3, #11
 800a702:	f200 81b3 	bhi.w	800aa6c <USBH_Process+0x394>
 800a706:	a201      	add	r2, pc, #4	; (adr r2, 800a70c <USBH_Process+0x34>)
 800a708:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a70c:	0800a73d 	.word	0x0800a73d
 800a710:	0800a76f 	.word	0x0800a76f
 800a714:	0800a7d7 	.word	0x0800a7d7
 800a718:	0800aa07 	.word	0x0800aa07
 800a71c:	0800aa6d 	.word	0x0800aa6d
 800a720:	0800a87b 	.word	0x0800a87b
 800a724:	0800a9ad 	.word	0x0800a9ad
 800a728:	0800a8b1 	.word	0x0800a8b1
 800a72c:	0800a8d1 	.word	0x0800a8d1
 800a730:	0800a8f1 	.word	0x0800a8f1
 800a734:	0800a91f 	.word	0x0800a91f
 800a738:	0800a9ef 	.word	0x0800a9ef
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800a742:	b2db      	uxtb	r3, r3
 800a744:	2b00      	cmp	r3, #0
 800a746:	f000 8193 	beq.w	800aa70 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	2201      	movs	r2, #1
 800a74e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800a750:	20c8      	movs	r0, #200	; 0xc8
 800a752:	f001 fca3 	bl	800c09c <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800a756:	6878      	ldr	r0, [r7, #4]
 800a758:	f001 fb99 	bl	800be8e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	2200      	movs	r2, #0
 800a760:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	2200      	movs	r2, #0
 800a768:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800a76c:	e180      	b.n	800aa70 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800a774:	2b01      	cmp	r3, #1
 800a776:	d107      	bne.n	800a788 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	2200      	movs	r2, #0
 800a77c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	2202      	movs	r2, #2
 800a784:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a786:	e182      	b.n	800aa8e <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800a78e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a792:	d914      	bls.n	800a7be <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800a79a:	3301      	adds	r3, #1
 800a79c:	b2da      	uxtb	r2, r3
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800a7aa:	2b03      	cmp	r3, #3
 800a7ac:	d903      	bls.n	800a7b6 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	220d      	movs	r2, #13
 800a7b2:	701a      	strb	r2, [r3, #0]
      break;
 800a7b4:	e16b      	b.n	800aa8e <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	2200      	movs	r2, #0
 800a7ba:	701a      	strb	r2, [r3, #0]
      break;
 800a7bc:	e167      	b.n	800aa8e <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800a7c4:	f103 020a 	add.w	r2, r3, #10
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800a7ce:	200a      	movs	r0, #10
 800a7d0:	f001 fc64 	bl	800c09c <USBH_Delay>
      break;
 800a7d4:	e15b      	b.n	800aa8e <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d005      	beq.n	800a7ec <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a7e6:	2104      	movs	r1, #4
 800a7e8:	6878      	ldr	r0, [r7, #4]
 800a7ea:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800a7ec:	2064      	movs	r0, #100	; 0x64
 800a7ee:	f001 fc55 	bl	800c09c <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800a7f2:	6878      	ldr	r0, [r7, #4]
 800a7f4:	f001 fb24 	bl	800be40 <USBH_LL_GetSpeed>
 800a7f8:	4603      	mov	r3, r0
 800a7fa:	461a      	mov	r2, r3
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	2205      	movs	r2, #5
 800a806:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800a808:	2100      	movs	r1, #0
 800a80a:	6878      	ldr	r0, [r7, #4]
 800a80c:	f001 f92f 	bl	800ba6e <USBH_AllocPipe>
 800a810:	4603      	mov	r3, r0
 800a812:	461a      	mov	r2, r3
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800a818:	2180      	movs	r1, #128	; 0x80
 800a81a:	6878      	ldr	r0, [r7, #4]
 800a81c:	f001 f927 	bl	800ba6e <USBH_AllocPipe>
 800a820:	4603      	mov	r3, r0
 800a822:	461a      	mov	r2, r3
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	7919      	ldrb	r1, [r3, #4]
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800a838:	687a      	ldr	r2, [r7, #4]
 800a83a:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800a83c:	b292      	uxth	r2, r2
 800a83e:	9202      	str	r2, [sp, #8]
 800a840:	2200      	movs	r2, #0
 800a842:	9201      	str	r2, [sp, #4]
 800a844:	9300      	str	r3, [sp, #0]
 800a846:	4603      	mov	r3, r0
 800a848:	2280      	movs	r2, #128	; 0x80
 800a84a:	6878      	ldr	r0, [r7, #4]
 800a84c:	f001 f8e0 	bl	800ba10 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	7959      	ldrb	r1, [r3, #5]
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800a860:	687a      	ldr	r2, [r7, #4]
 800a862:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800a864:	b292      	uxth	r2, r2
 800a866:	9202      	str	r2, [sp, #8]
 800a868:	2200      	movs	r2, #0
 800a86a:	9201      	str	r2, [sp, #4]
 800a86c:	9300      	str	r3, [sp, #0]
 800a86e:	4603      	mov	r3, r0
 800a870:	2200      	movs	r2, #0
 800a872:	6878      	ldr	r0, [r7, #4]
 800a874:	f001 f8cc 	bl	800ba10 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a878:	e109      	b.n	800aa8e <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800a87a:	6878      	ldr	r0, [r7, #4]
 800a87c:	f000 f90c 	bl	800aa98 <USBH_HandleEnum>
 800a880:	4603      	mov	r3, r0
 800a882:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800a884:	7bbb      	ldrb	r3, [r7, #14]
 800a886:	b2db      	uxtb	r3, r3
 800a888:	2b00      	cmp	r3, #0
 800a88a:	f040 80f3 	bne.w	800aa74 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	2200      	movs	r2, #0
 800a892:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800a89c:	2b01      	cmp	r3, #1
 800a89e:	d103      	bne.n	800a8a8 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	2208      	movs	r2, #8
 800a8a4:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800a8a6:	e0e5      	b.n	800aa74 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	2207      	movs	r2, #7
 800a8ac:	701a      	strb	r2, [r3, #0]
      break;
 800a8ae:	e0e1      	b.n	800aa74 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	f000 80de 	beq.w	800aa78 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a8c2:	2101      	movs	r1, #1
 800a8c4:	6878      	ldr	r0, [r7, #4]
 800a8c6:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	2208      	movs	r2, #8
 800a8cc:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800a8ce:	e0d3      	b.n	800aa78 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800a8d6:	b29b      	uxth	r3, r3
 800a8d8:	4619      	mov	r1, r3
 800a8da:	6878      	ldr	r0, [r7, #4]
 800a8dc:	f000 fc20 	bl	800b120 <USBH_SetCfg>
 800a8e0:	4603      	mov	r3, r0
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	f040 80ca 	bne.w	800aa7c <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	2209      	movs	r2, #9
 800a8ec:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a8ee:	e0c5      	b.n	800aa7c <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800a8f6:	f003 0320 	and.w	r3, r3, #32
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d00b      	beq.n	800a916 <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800a8fe:	2101      	movs	r1, #1
 800a900:	6878      	ldr	r0, [r7, #4]
 800a902:	f000 fc30 	bl	800b166 <USBH_SetFeature>
 800a906:	4603      	mov	r3, r0
 800a908:	2b00      	cmp	r3, #0
 800a90a:	f040 80b9 	bne.w	800aa80 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	220a      	movs	r2, #10
 800a912:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a914:	e0b4      	b.n	800aa80 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	220a      	movs	r2, #10
 800a91a:	701a      	strb	r2, [r3, #0]
      break;
 800a91c:	e0b0      	b.n	800aa80 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a924:	2b00      	cmp	r3, #0
 800a926:	f000 80ad 	beq.w	800aa84 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	2200      	movs	r2, #0
 800a92e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a932:	2300      	movs	r3, #0
 800a934:	73fb      	strb	r3, [r7, #15]
 800a936:	e016      	b.n	800a966 <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800a938:	7bfa      	ldrb	r2, [r7, #15]
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	32de      	adds	r2, #222	; 0xde
 800a93e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a942:	791a      	ldrb	r2, [r3, #4]
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800a94a:	429a      	cmp	r2, r3
 800a94c:	d108      	bne.n	800a960 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 800a94e:	7bfa      	ldrb	r2, [r7, #15]
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	32de      	adds	r2, #222	; 0xde
 800a954:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800a95e:	e005      	b.n	800a96c <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a960:	7bfb      	ldrb	r3, [r7, #15]
 800a962:	3301      	adds	r3, #1
 800a964:	73fb      	strb	r3, [r7, #15]
 800a966:	7bfb      	ldrb	r3, [r7, #15]
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d0e5      	beq.n	800a938 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a972:	2b00      	cmp	r3, #0
 800a974:	d016      	beq.n	800a9a4 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a97c:	689b      	ldr	r3, [r3, #8]
 800a97e:	6878      	ldr	r0, [r7, #4]
 800a980:	4798      	blx	r3
 800a982:	4603      	mov	r3, r0
 800a984:	2b00      	cmp	r3, #0
 800a986:	d109      	bne.n	800a99c <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	2206      	movs	r2, #6
 800a98c:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a994:	2103      	movs	r1, #3
 800a996:	6878      	ldr	r0, [r7, #4]
 800a998:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a99a:	e073      	b.n	800aa84 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	220d      	movs	r2, #13
 800a9a0:	701a      	strb	r2, [r3, #0]
      break;
 800a9a2:	e06f      	b.n	800aa84 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	220d      	movs	r2, #13
 800a9a8:	701a      	strb	r2, [r3, #0]
      break;
 800a9aa:	e06b      	b.n	800aa84 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d017      	beq.n	800a9e6 <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a9bc:	691b      	ldr	r3, [r3, #16]
 800a9be:	6878      	ldr	r0, [r7, #4]
 800a9c0:	4798      	blx	r3
 800a9c2:	4603      	mov	r3, r0
 800a9c4:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800a9c6:	7bbb      	ldrb	r3, [r7, #14]
 800a9c8:	b2db      	uxtb	r3, r3
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d103      	bne.n	800a9d6 <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	220b      	movs	r2, #11
 800a9d2:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a9d4:	e058      	b.n	800aa88 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 800a9d6:	7bbb      	ldrb	r3, [r7, #14]
 800a9d8:	b2db      	uxtb	r3, r3
 800a9da:	2b02      	cmp	r3, #2
 800a9dc:	d154      	bne.n	800aa88 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	220d      	movs	r2, #13
 800a9e2:	701a      	strb	r2, [r3, #0]
      break;
 800a9e4:	e050      	b.n	800aa88 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	220d      	movs	r2, #13
 800a9ea:	701a      	strb	r2, [r3, #0]
      break;
 800a9ec:	e04c      	b.n	800aa88 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d049      	beq.n	800aa8c <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a9fe:	695b      	ldr	r3, [r3, #20]
 800aa00:	6878      	ldr	r0, [r7, #4]
 800aa02:	4798      	blx	r3
      }
      break;
 800aa04:	e042      	b.n	800aa8c <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	2200      	movs	r2, #0
 800aa0a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800aa0e:	6878      	ldr	r0, [r7, #4]
 800aa10:	f7ff fd72 	bl	800a4f8 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d009      	beq.n	800aa32 <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aa24:	68db      	ldr	r3, [r3, #12]
 800aa26:	6878      	ldr	r0, [r7, #4]
 800aa28:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	2200      	movs	r2, #0
 800aa2e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d005      	beq.n	800aa48 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800aa42:	2105      	movs	r1, #5
 800aa44:	6878      	ldr	r0, [r7, #4]
 800aa46:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800aa4e:	b2db      	uxtb	r3, r3
 800aa50:	2b01      	cmp	r3, #1
 800aa52:	d107      	bne.n	800aa64 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	2200      	movs	r2, #0
 800aa58:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800aa5c:	6878      	ldr	r0, [r7, #4]
 800aa5e:	f7ff fe2b 	bl	800a6b8 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800aa62:	e014      	b.n	800aa8e <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 800aa64:	6878      	ldr	r0, [r7, #4]
 800aa66:	f001 f9b5 	bl	800bdd4 <USBH_LL_Start>
      break;
 800aa6a:	e010      	b.n	800aa8e <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 800aa6c:	bf00      	nop
 800aa6e:	e00e      	b.n	800aa8e <USBH_Process+0x3b6>
      break;
 800aa70:	bf00      	nop
 800aa72:	e00c      	b.n	800aa8e <USBH_Process+0x3b6>
      break;
 800aa74:	bf00      	nop
 800aa76:	e00a      	b.n	800aa8e <USBH_Process+0x3b6>
    break;
 800aa78:	bf00      	nop
 800aa7a:	e008      	b.n	800aa8e <USBH_Process+0x3b6>
      break;
 800aa7c:	bf00      	nop
 800aa7e:	e006      	b.n	800aa8e <USBH_Process+0x3b6>
      break;
 800aa80:	bf00      	nop
 800aa82:	e004      	b.n	800aa8e <USBH_Process+0x3b6>
      break;
 800aa84:	bf00      	nop
 800aa86:	e002      	b.n	800aa8e <USBH_Process+0x3b6>
      break;
 800aa88:	bf00      	nop
 800aa8a:	e000      	b.n	800aa8e <USBH_Process+0x3b6>
      break;
 800aa8c:	bf00      	nop
  }
  return USBH_OK;
 800aa8e:	2300      	movs	r3, #0
}
 800aa90:	4618      	mov	r0, r3
 800aa92:	3710      	adds	r7, #16
 800aa94:	46bd      	mov	sp, r7
 800aa96:	bd80      	pop	{r7, pc}

0800aa98 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800aa98:	b580      	push	{r7, lr}
 800aa9a:	b088      	sub	sp, #32
 800aa9c:	af04      	add	r7, sp, #16
 800aa9e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800aaa0:	2301      	movs	r3, #1
 800aaa2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800aaa4:	2301      	movs	r3, #1
 800aaa6:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	785b      	ldrb	r3, [r3, #1]
 800aaac:	2b07      	cmp	r3, #7
 800aaae:	f200 81c1 	bhi.w	800ae34 <USBH_HandleEnum+0x39c>
 800aab2:	a201      	add	r2, pc, #4	; (adr r2, 800aab8 <USBH_HandleEnum+0x20>)
 800aab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aab8:	0800aad9 	.word	0x0800aad9
 800aabc:	0800ab97 	.word	0x0800ab97
 800aac0:	0800ac01 	.word	0x0800ac01
 800aac4:	0800ac8f 	.word	0x0800ac8f
 800aac8:	0800acf9 	.word	0x0800acf9
 800aacc:	0800ad69 	.word	0x0800ad69
 800aad0:	0800adaf 	.word	0x0800adaf
 800aad4:	0800adf5 	.word	0x0800adf5
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800aad8:	2108      	movs	r1, #8
 800aada:	6878      	ldr	r0, [r7, #4]
 800aadc:	f000 fa50 	bl	800af80 <USBH_Get_DevDesc>
 800aae0:	4603      	mov	r3, r0
 800aae2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800aae4:	7bbb      	ldrb	r3, [r7, #14]
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d130      	bne.n	800ab4c <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	2201      	movs	r2, #1
 800aaf8:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	7919      	ldrb	r1, [r3, #4]
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800ab0a:	687a      	ldr	r2, [r7, #4]
 800ab0c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800ab0e:	b292      	uxth	r2, r2
 800ab10:	9202      	str	r2, [sp, #8]
 800ab12:	2200      	movs	r2, #0
 800ab14:	9201      	str	r2, [sp, #4]
 800ab16:	9300      	str	r3, [sp, #0]
 800ab18:	4603      	mov	r3, r0
 800ab1a:	2280      	movs	r2, #128	; 0x80
 800ab1c:	6878      	ldr	r0, [r7, #4]
 800ab1e:	f000 ff77 	bl	800ba10 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	7959      	ldrb	r1, [r3, #5]
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800ab32:	687a      	ldr	r2, [r7, #4]
 800ab34:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800ab36:	b292      	uxth	r2, r2
 800ab38:	9202      	str	r2, [sp, #8]
 800ab3a:	2200      	movs	r2, #0
 800ab3c:	9201      	str	r2, [sp, #4]
 800ab3e:	9300      	str	r3, [sp, #0]
 800ab40:	4603      	mov	r3, r0
 800ab42:	2200      	movs	r2, #0
 800ab44:	6878      	ldr	r0, [r7, #4]
 800ab46:	f000 ff63 	bl	800ba10 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800ab4a:	e175      	b.n	800ae38 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ab4c:	7bbb      	ldrb	r3, [r7, #14]
 800ab4e:	2b03      	cmp	r3, #3
 800ab50:	f040 8172 	bne.w	800ae38 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ab5a:	3301      	adds	r3, #1
 800ab5c:	b2da      	uxtb	r2, r3
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ab6a:	2b03      	cmp	r3, #3
 800ab6c:	d903      	bls.n	800ab76 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	220d      	movs	r2, #13
 800ab72:	701a      	strb	r2, [r3, #0]
      break;
 800ab74:	e160      	b.n	800ae38 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	795b      	ldrb	r3, [r3, #5]
 800ab7a:	4619      	mov	r1, r3
 800ab7c:	6878      	ldr	r0, [r7, #4]
 800ab7e:	f000 ff97 	bl	800bab0 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	791b      	ldrb	r3, [r3, #4]
 800ab86:	4619      	mov	r1, r3
 800ab88:	6878      	ldr	r0, [r7, #4]
 800ab8a:	f000 ff91 	bl	800bab0 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	2200      	movs	r2, #0
 800ab92:	701a      	strb	r2, [r3, #0]
      break;
 800ab94:	e150      	b.n	800ae38 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800ab96:	2112      	movs	r1, #18
 800ab98:	6878      	ldr	r0, [r7, #4]
 800ab9a:	f000 f9f1 	bl	800af80 <USBH_Get_DevDesc>
 800ab9e:	4603      	mov	r3, r0
 800aba0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800aba2:	7bbb      	ldrb	r3, [r7, #14]
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d103      	bne.n	800abb0 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	2202      	movs	r2, #2
 800abac:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800abae:	e145      	b.n	800ae3c <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800abb0:	7bbb      	ldrb	r3, [r7, #14]
 800abb2:	2b03      	cmp	r3, #3
 800abb4:	f040 8142 	bne.w	800ae3c <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800abbe:	3301      	adds	r3, #1
 800abc0:	b2da      	uxtb	r2, r3
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800abce:	2b03      	cmp	r3, #3
 800abd0:	d903      	bls.n	800abda <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	220d      	movs	r2, #13
 800abd6:	701a      	strb	r2, [r3, #0]
      break;
 800abd8:	e130      	b.n	800ae3c <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	795b      	ldrb	r3, [r3, #5]
 800abde:	4619      	mov	r1, r3
 800abe0:	6878      	ldr	r0, [r7, #4]
 800abe2:	f000 ff65 	bl	800bab0 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	791b      	ldrb	r3, [r3, #4]
 800abea:	4619      	mov	r1, r3
 800abec:	6878      	ldr	r0, [r7, #4]
 800abee:	f000 ff5f 	bl	800bab0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	2200      	movs	r2, #0
 800abf6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	2200      	movs	r2, #0
 800abfc:	701a      	strb	r2, [r3, #0]
      break;
 800abfe:	e11d      	b.n	800ae3c <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800ac00:	2101      	movs	r1, #1
 800ac02:	6878      	ldr	r0, [r7, #4]
 800ac04:	f000 fa68 	bl	800b0d8 <USBH_SetAddress>
 800ac08:	4603      	mov	r3, r0
 800ac0a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ac0c:	7bbb      	ldrb	r3, [r7, #14]
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d132      	bne.n	800ac78 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800ac12:	2002      	movs	r0, #2
 800ac14:	f001 fa42 	bl	800c09c <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	2201      	movs	r2, #1
 800ac1c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	2203      	movs	r2, #3
 800ac24:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	7919      	ldrb	r1, [r3, #4]
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800ac36:	687a      	ldr	r2, [r7, #4]
 800ac38:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800ac3a:	b292      	uxth	r2, r2
 800ac3c:	9202      	str	r2, [sp, #8]
 800ac3e:	2200      	movs	r2, #0
 800ac40:	9201      	str	r2, [sp, #4]
 800ac42:	9300      	str	r3, [sp, #0]
 800ac44:	4603      	mov	r3, r0
 800ac46:	2280      	movs	r2, #128	; 0x80
 800ac48:	6878      	ldr	r0, [r7, #4]
 800ac4a:	f000 fee1 	bl	800ba10 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	7959      	ldrb	r1, [r3, #5]
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800ac5e:	687a      	ldr	r2, [r7, #4]
 800ac60:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800ac62:	b292      	uxth	r2, r2
 800ac64:	9202      	str	r2, [sp, #8]
 800ac66:	2200      	movs	r2, #0
 800ac68:	9201      	str	r2, [sp, #4]
 800ac6a:	9300      	str	r3, [sp, #0]
 800ac6c:	4603      	mov	r3, r0
 800ac6e:	2200      	movs	r2, #0
 800ac70:	6878      	ldr	r0, [r7, #4]
 800ac72:	f000 fecd 	bl	800ba10 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800ac76:	e0e3      	b.n	800ae40 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ac78:	7bbb      	ldrb	r3, [r7, #14]
 800ac7a:	2b03      	cmp	r3, #3
 800ac7c:	f040 80e0 	bne.w	800ae40 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	220d      	movs	r2, #13
 800ac84:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	2200      	movs	r2, #0
 800ac8a:	705a      	strb	r2, [r3, #1]
      break;
 800ac8c:	e0d8      	b.n	800ae40 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800ac8e:	2109      	movs	r1, #9
 800ac90:	6878      	ldr	r0, [r7, #4]
 800ac92:	f000 f99d 	bl	800afd0 <USBH_Get_CfgDesc>
 800ac96:	4603      	mov	r3, r0
 800ac98:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ac9a:	7bbb      	ldrb	r3, [r7, #14]
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d103      	bne.n	800aca8 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	2204      	movs	r2, #4
 800aca4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800aca6:	e0cd      	b.n	800ae44 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800aca8:	7bbb      	ldrb	r3, [r7, #14]
 800acaa:	2b03      	cmp	r3, #3
 800acac:	f040 80ca 	bne.w	800ae44 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800acb6:	3301      	adds	r3, #1
 800acb8:	b2da      	uxtb	r2, r3
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800acc6:	2b03      	cmp	r3, #3
 800acc8:	d903      	bls.n	800acd2 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	220d      	movs	r2, #13
 800acce:	701a      	strb	r2, [r3, #0]
      break;
 800acd0:	e0b8      	b.n	800ae44 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	795b      	ldrb	r3, [r3, #5]
 800acd6:	4619      	mov	r1, r3
 800acd8:	6878      	ldr	r0, [r7, #4]
 800acda:	f000 fee9 	bl	800bab0 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	791b      	ldrb	r3, [r3, #4]
 800ace2:	4619      	mov	r1, r3
 800ace4:	6878      	ldr	r0, [r7, #4]
 800ace6:	f000 fee3 	bl	800bab0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	2200      	movs	r2, #0
 800acee:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	2200      	movs	r2, #0
 800acf4:	701a      	strb	r2, [r3, #0]
      break;
 800acf6:	e0a5      	b.n	800ae44 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800acfe:	4619      	mov	r1, r3
 800ad00:	6878      	ldr	r0, [r7, #4]
 800ad02:	f000 f965 	bl	800afd0 <USBH_Get_CfgDesc>
 800ad06:	4603      	mov	r3, r0
 800ad08:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ad0a:	7bbb      	ldrb	r3, [r7, #14]
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d103      	bne.n	800ad18 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	2205      	movs	r2, #5
 800ad14:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800ad16:	e097      	b.n	800ae48 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ad18:	7bbb      	ldrb	r3, [r7, #14]
 800ad1a:	2b03      	cmp	r3, #3
 800ad1c:	f040 8094 	bne.w	800ae48 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ad26:	3301      	adds	r3, #1
 800ad28:	b2da      	uxtb	r2, r3
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ad36:	2b03      	cmp	r3, #3
 800ad38:	d903      	bls.n	800ad42 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	220d      	movs	r2, #13
 800ad3e:	701a      	strb	r2, [r3, #0]
      break;
 800ad40:	e082      	b.n	800ae48 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	795b      	ldrb	r3, [r3, #5]
 800ad46:	4619      	mov	r1, r3
 800ad48:	6878      	ldr	r0, [r7, #4]
 800ad4a:	f000 feb1 	bl	800bab0 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	791b      	ldrb	r3, [r3, #4]
 800ad52:	4619      	mov	r1, r3
 800ad54:	6878      	ldr	r0, [r7, #4]
 800ad56:	f000 feab 	bl	800bab0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	2200      	movs	r2, #0
 800ad5e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	2200      	movs	r2, #0
 800ad64:	701a      	strb	r2, [r3, #0]
      break;
 800ad66:	e06f      	b.n	800ae48 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d019      	beq.n	800ada6 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800ad7e:	23ff      	movs	r3, #255	; 0xff
 800ad80:	6878      	ldr	r0, [r7, #4]
 800ad82:	f000 f949 	bl	800b018 <USBH_Get_StringDesc>
 800ad86:	4603      	mov	r3, r0
 800ad88:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800ad8a:	7bbb      	ldrb	r3, [r7, #14]
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d103      	bne.n	800ad98 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	2206      	movs	r2, #6
 800ad94:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800ad96:	e059      	b.n	800ae4c <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ad98:	7bbb      	ldrb	r3, [r7, #14]
 800ad9a:	2b03      	cmp	r3, #3
 800ad9c:	d156      	bne.n	800ae4c <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	2206      	movs	r2, #6
 800ada2:	705a      	strb	r2, [r3, #1]
      break;
 800ada4:	e052      	b.n	800ae4c <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	2206      	movs	r2, #6
 800adaa:	705a      	strb	r2, [r3, #1]
      break;
 800adac:	e04e      	b.n	800ae4c <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d019      	beq.n	800adec <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800adc4:	23ff      	movs	r3, #255	; 0xff
 800adc6:	6878      	ldr	r0, [r7, #4]
 800adc8:	f000 f926 	bl	800b018 <USBH_Get_StringDesc>
 800adcc:	4603      	mov	r3, r0
 800adce:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800add0:	7bbb      	ldrb	r3, [r7, #14]
 800add2:	2b00      	cmp	r3, #0
 800add4:	d103      	bne.n	800adde <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	2207      	movs	r2, #7
 800adda:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800addc:	e038      	b.n	800ae50 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800adde:	7bbb      	ldrb	r3, [r7, #14]
 800ade0:	2b03      	cmp	r3, #3
 800ade2:	d135      	bne.n	800ae50 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	2207      	movs	r2, #7
 800ade8:	705a      	strb	r2, [r3, #1]
      break;
 800adea:	e031      	b.n	800ae50 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	2207      	movs	r2, #7
 800adf0:	705a      	strb	r2, [r3, #1]
      break;
 800adf2:	e02d      	b.n	800ae50 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d017      	beq.n	800ae2e <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800ae0a:	23ff      	movs	r3, #255	; 0xff
 800ae0c:	6878      	ldr	r0, [r7, #4]
 800ae0e:	f000 f903 	bl	800b018 <USBH_Get_StringDesc>
 800ae12:	4603      	mov	r3, r0
 800ae14:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800ae16:	7bbb      	ldrb	r3, [r7, #14]
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d102      	bne.n	800ae22 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800ae1c:	2300      	movs	r3, #0
 800ae1e:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800ae20:	e018      	b.n	800ae54 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ae22:	7bbb      	ldrb	r3, [r7, #14]
 800ae24:	2b03      	cmp	r3, #3
 800ae26:	d115      	bne.n	800ae54 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800ae28:	2300      	movs	r3, #0
 800ae2a:	73fb      	strb	r3, [r7, #15]
      break;
 800ae2c:	e012      	b.n	800ae54 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800ae2e:	2300      	movs	r3, #0
 800ae30:	73fb      	strb	r3, [r7, #15]
      break;
 800ae32:	e00f      	b.n	800ae54 <USBH_HandleEnum+0x3bc>

    default:
      break;
 800ae34:	bf00      	nop
 800ae36:	e00e      	b.n	800ae56 <USBH_HandleEnum+0x3be>
      break;
 800ae38:	bf00      	nop
 800ae3a:	e00c      	b.n	800ae56 <USBH_HandleEnum+0x3be>
      break;
 800ae3c:	bf00      	nop
 800ae3e:	e00a      	b.n	800ae56 <USBH_HandleEnum+0x3be>
      break;
 800ae40:	bf00      	nop
 800ae42:	e008      	b.n	800ae56 <USBH_HandleEnum+0x3be>
      break;
 800ae44:	bf00      	nop
 800ae46:	e006      	b.n	800ae56 <USBH_HandleEnum+0x3be>
      break;
 800ae48:	bf00      	nop
 800ae4a:	e004      	b.n	800ae56 <USBH_HandleEnum+0x3be>
      break;
 800ae4c:	bf00      	nop
 800ae4e:	e002      	b.n	800ae56 <USBH_HandleEnum+0x3be>
      break;
 800ae50:	bf00      	nop
 800ae52:	e000      	b.n	800ae56 <USBH_HandleEnum+0x3be>
      break;
 800ae54:	bf00      	nop
  }
  return Status;
 800ae56:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae58:	4618      	mov	r0, r3
 800ae5a:	3710      	adds	r7, #16
 800ae5c:	46bd      	mov	sp, r7
 800ae5e:	bd80      	pop	{r7, pc}

0800ae60 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800ae60:	b480      	push	{r7}
 800ae62:	b083      	sub	sp, #12
 800ae64:	af00      	add	r7, sp, #0
 800ae66:	6078      	str	r0, [r7, #4]
 800ae68:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	683a      	ldr	r2, [r7, #0]
 800ae6e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800ae72:	bf00      	nop
 800ae74:	370c      	adds	r7, #12
 800ae76:	46bd      	mov	sp, r7
 800ae78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae7c:	4770      	bx	lr

0800ae7e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800ae7e:	b580      	push	{r7, lr}
 800ae80:	b082      	sub	sp, #8
 800ae82:	af00      	add	r7, sp, #0
 800ae84:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ae8c:	1c5a      	adds	r2, r3, #1
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800ae94:	6878      	ldr	r0, [r7, #4]
 800ae96:	f000 f804 	bl	800aea2 <USBH_HandleSof>
}
 800ae9a:	bf00      	nop
 800ae9c:	3708      	adds	r7, #8
 800ae9e:	46bd      	mov	sp, r7
 800aea0:	bd80      	pop	{r7, pc}

0800aea2 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800aea2:	b580      	push	{r7, lr}
 800aea4:	b082      	sub	sp, #8
 800aea6:	af00      	add	r7, sp, #0
 800aea8:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	781b      	ldrb	r3, [r3, #0]
 800aeae:	b2db      	uxtb	r3, r3
 800aeb0:	2b0b      	cmp	r3, #11
 800aeb2:	d10a      	bne.n	800aeca <USBH_HandleSof+0x28>
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d005      	beq.n	800aeca <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aec4:	699b      	ldr	r3, [r3, #24]
 800aec6:	6878      	ldr	r0, [r7, #4]
 800aec8:	4798      	blx	r3
  }
}
 800aeca:	bf00      	nop
 800aecc:	3708      	adds	r7, #8
 800aece:	46bd      	mov	sp, r7
 800aed0:	bd80      	pop	{r7, pc}

0800aed2 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800aed2:	b480      	push	{r7}
 800aed4:	b083      	sub	sp, #12
 800aed6:	af00      	add	r7, sp, #0
 800aed8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	2201      	movs	r2, #1
 800aede:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800aee2:	bf00      	nop
}
 800aee4:	370c      	adds	r7, #12
 800aee6:	46bd      	mov	sp, r7
 800aee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeec:	4770      	bx	lr

0800aeee <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800aeee:	b480      	push	{r7}
 800aef0:	b083      	sub	sp, #12
 800aef2:	af00      	add	r7, sp, #0
 800aef4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	2200      	movs	r2, #0
 800aefa:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800aefe:	bf00      	nop
}
 800af00:	370c      	adds	r7, #12
 800af02:	46bd      	mov	sp, r7
 800af04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af08:	4770      	bx	lr

0800af0a <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800af0a:	b480      	push	{r7}
 800af0c:	b083      	sub	sp, #12
 800af0e:	af00      	add	r7, sp, #0
 800af10:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	2201      	movs	r2, #1
 800af16:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	2200      	movs	r2, #0
 800af1e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	2200      	movs	r2, #0
 800af26:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800af2a:	2300      	movs	r3, #0
}
 800af2c:	4618      	mov	r0, r3
 800af2e:	370c      	adds	r7, #12
 800af30:	46bd      	mov	sp, r7
 800af32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af36:	4770      	bx	lr

0800af38 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800af38:	b580      	push	{r7, lr}
 800af3a:	b082      	sub	sp, #8
 800af3c:	af00      	add	r7, sp, #0
 800af3e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	2201      	movs	r2, #1
 800af44:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	2200      	movs	r2, #0
 800af4c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	2200      	movs	r2, #0
 800af54:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800af58:	6878      	ldr	r0, [r7, #4]
 800af5a:	f000 ff56 	bl	800be0a <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	791b      	ldrb	r3, [r3, #4]
 800af62:	4619      	mov	r1, r3
 800af64:	6878      	ldr	r0, [r7, #4]
 800af66:	f000 fda3 	bl	800bab0 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	795b      	ldrb	r3, [r3, #5]
 800af6e:	4619      	mov	r1, r3
 800af70:	6878      	ldr	r0, [r7, #4]
 800af72:	f000 fd9d 	bl	800bab0 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800af76:	2300      	movs	r3, #0
}
 800af78:	4618      	mov	r0, r3
 800af7a:	3708      	adds	r7, #8
 800af7c:	46bd      	mov	sp, r7
 800af7e:	bd80      	pop	{r7, pc}

0800af80 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800af80:	b580      	push	{r7, lr}
 800af82:	b086      	sub	sp, #24
 800af84:	af02      	add	r7, sp, #8
 800af86:	6078      	str	r0, [r7, #4]
 800af88:	460b      	mov	r3, r1
 800af8a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800af92:	78fb      	ldrb	r3, [r7, #3]
 800af94:	b29b      	uxth	r3, r3
 800af96:	9300      	str	r3, [sp, #0]
 800af98:	4613      	mov	r3, r2
 800af9a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800af9e:	2100      	movs	r1, #0
 800afa0:	6878      	ldr	r0, [r7, #4]
 800afa2:	f000 f864 	bl	800b06e <USBH_GetDescriptor>
 800afa6:	4603      	mov	r3, r0
 800afa8:	73fb      	strb	r3, [r7, #15]
 800afaa:	7bfb      	ldrb	r3, [r7, #15]
 800afac:	2b00      	cmp	r3, #0
 800afae:	d10a      	bne.n	800afc6 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	f203 3026 	addw	r0, r3, #806	; 0x326
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800afbc:	78fa      	ldrb	r2, [r7, #3]
 800afbe:	b292      	uxth	r2, r2
 800afc0:	4619      	mov	r1, r3
 800afc2:	f000 f918 	bl	800b1f6 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800afc6:	7bfb      	ldrb	r3, [r7, #15]
}
 800afc8:	4618      	mov	r0, r3
 800afca:	3710      	adds	r7, #16
 800afcc:	46bd      	mov	sp, r7
 800afce:	bd80      	pop	{r7, pc}

0800afd0 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800afd0:	b580      	push	{r7, lr}
 800afd2:	b086      	sub	sp, #24
 800afd4:	af02      	add	r7, sp, #8
 800afd6:	6078      	str	r0, [r7, #4]
 800afd8:	460b      	mov	r3, r1
 800afda:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	331c      	adds	r3, #28
 800afe0:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800afe2:	887b      	ldrh	r3, [r7, #2]
 800afe4:	9300      	str	r3, [sp, #0]
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800afec:	2100      	movs	r1, #0
 800afee:	6878      	ldr	r0, [r7, #4]
 800aff0:	f000 f83d 	bl	800b06e <USBH_GetDescriptor>
 800aff4:	4603      	mov	r3, r0
 800aff6:	72fb      	strb	r3, [r7, #11]
 800aff8:	7afb      	ldrb	r3, [r7, #11]
 800affa:	2b00      	cmp	r3, #0
 800affc:	d107      	bne.n	800b00e <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800b004:	887a      	ldrh	r2, [r7, #2]
 800b006:	68f9      	ldr	r1, [r7, #12]
 800b008:	4618      	mov	r0, r3
 800b00a:	f000 f964 	bl	800b2d6 <USBH_ParseCfgDesc>
  }

  return status;
 800b00e:	7afb      	ldrb	r3, [r7, #11]
}
 800b010:	4618      	mov	r0, r3
 800b012:	3710      	adds	r7, #16
 800b014:	46bd      	mov	sp, r7
 800b016:	bd80      	pop	{r7, pc}

0800b018 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800b018:	b580      	push	{r7, lr}
 800b01a:	b088      	sub	sp, #32
 800b01c:	af02      	add	r7, sp, #8
 800b01e:	60f8      	str	r0, [r7, #12]
 800b020:	607a      	str	r2, [r7, #4]
 800b022:	461a      	mov	r2, r3
 800b024:	460b      	mov	r3, r1
 800b026:	72fb      	strb	r3, [r7, #11]
 800b028:	4613      	mov	r3, r2
 800b02a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800b02c:	7afb      	ldrb	r3, [r7, #11]
 800b02e:	b29b      	uxth	r3, r3
 800b030:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800b034:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800b03c:	893b      	ldrh	r3, [r7, #8]
 800b03e:	9300      	str	r3, [sp, #0]
 800b040:	460b      	mov	r3, r1
 800b042:	2100      	movs	r1, #0
 800b044:	68f8      	ldr	r0, [r7, #12]
 800b046:	f000 f812 	bl	800b06e <USBH_GetDescriptor>
 800b04a:	4603      	mov	r3, r0
 800b04c:	75fb      	strb	r3, [r7, #23]
 800b04e:	7dfb      	ldrb	r3, [r7, #23]
 800b050:	2b00      	cmp	r3, #0
 800b052:	d107      	bne.n	800b064 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b05a:	893a      	ldrh	r2, [r7, #8]
 800b05c:	6879      	ldr	r1, [r7, #4]
 800b05e:	4618      	mov	r0, r3
 800b060:	f000 fa37 	bl	800b4d2 <USBH_ParseStringDesc>
  }

  return status;
 800b064:	7dfb      	ldrb	r3, [r7, #23]
}
 800b066:	4618      	mov	r0, r3
 800b068:	3718      	adds	r7, #24
 800b06a:	46bd      	mov	sp, r7
 800b06c:	bd80      	pop	{r7, pc}

0800b06e <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800b06e:	b580      	push	{r7, lr}
 800b070:	b084      	sub	sp, #16
 800b072:	af00      	add	r7, sp, #0
 800b074:	60f8      	str	r0, [r7, #12]
 800b076:	607b      	str	r3, [r7, #4]
 800b078:	460b      	mov	r3, r1
 800b07a:	72fb      	strb	r3, [r7, #11]
 800b07c:	4613      	mov	r3, r2
 800b07e:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	789b      	ldrb	r3, [r3, #2]
 800b084:	2b01      	cmp	r3, #1
 800b086:	d11c      	bne.n	800b0c2 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800b088:	7afb      	ldrb	r3, [r7, #11]
 800b08a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b08e:	b2da      	uxtb	r2, r3
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	2206      	movs	r2, #6
 800b098:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	893a      	ldrh	r2, [r7, #8]
 800b09e:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800b0a0:	893b      	ldrh	r3, [r7, #8]
 800b0a2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800b0a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b0aa:	d104      	bne.n	800b0b6 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	f240 4209 	movw	r2, #1033	; 0x409
 800b0b2:	829a      	strh	r2, [r3, #20]
 800b0b4:	e002      	b.n	800b0bc <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	2200      	movs	r2, #0
 800b0ba:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	8b3a      	ldrh	r2, [r7, #24]
 800b0c0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800b0c2:	8b3b      	ldrh	r3, [r7, #24]
 800b0c4:	461a      	mov	r2, r3
 800b0c6:	6879      	ldr	r1, [r7, #4]
 800b0c8:	68f8      	ldr	r0, [r7, #12]
 800b0ca:	f000 fa50 	bl	800b56e <USBH_CtlReq>
 800b0ce:	4603      	mov	r3, r0
}
 800b0d0:	4618      	mov	r0, r3
 800b0d2:	3710      	adds	r7, #16
 800b0d4:	46bd      	mov	sp, r7
 800b0d6:	bd80      	pop	{r7, pc}

0800b0d8 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800b0d8:	b580      	push	{r7, lr}
 800b0da:	b082      	sub	sp, #8
 800b0dc:	af00      	add	r7, sp, #0
 800b0de:	6078      	str	r0, [r7, #4]
 800b0e0:	460b      	mov	r3, r1
 800b0e2:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	789b      	ldrb	r3, [r3, #2]
 800b0e8:	2b01      	cmp	r3, #1
 800b0ea:	d10f      	bne.n	800b10c <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	2200      	movs	r2, #0
 800b0f0:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	2205      	movs	r2, #5
 800b0f6:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800b0f8:	78fb      	ldrb	r3, [r7, #3]
 800b0fa:	b29a      	uxth	r2, r3
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	2200      	movs	r2, #0
 800b104:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	2200      	movs	r2, #0
 800b10a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800b10c:	2200      	movs	r2, #0
 800b10e:	2100      	movs	r1, #0
 800b110:	6878      	ldr	r0, [r7, #4]
 800b112:	f000 fa2c 	bl	800b56e <USBH_CtlReq>
 800b116:	4603      	mov	r3, r0
}
 800b118:	4618      	mov	r0, r3
 800b11a:	3708      	adds	r7, #8
 800b11c:	46bd      	mov	sp, r7
 800b11e:	bd80      	pop	{r7, pc}

0800b120 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800b120:	b580      	push	{r7, lr}
 800b122:	b082      	sub	sp, #8
 800b124:	af00      	add	r7, sp, #0
 800b126:	6078      	str	r0, [r7, #4]
 800b128:	460b      	mov	r3, r1
 800b12a:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	789b      	ldrb	r3, [r3, #2]
 800b130:	2b01      	cmp	r3, #1
 800b132:	d10e      	bne.n	800b152 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	2200      	movs	r2, #0
 800b138:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	2209      	movs	r2, #9
 800b13e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	887a      	ldrh	r2, [r7, #2]
 800b144:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	2200      	movs	r2, #0
 800b14a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	2200      	movs	r2, #0
 800b150:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800b152:	2200      	movs	r2, #0
 800b154:	2100      	movs	r1, #0
 800b156:	6878      	ldr	r0, [r7, #4]
 800b158:	f000 fa09 	bl	800b56e <USBH_CtlReq>
 800b15c:	4603      	mov	r3, r0
}
 800b15e:	4618      	mov	r0, r3
 800b160:	3708      	adds	r7, #8
 800b162:	46bd      	mov	sp, r7
 800b164:	bd80      	pop	{r7, pc}

0800b166 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800b166:	b580      	push	{r7, lr}
 800b168:	b082      	sub	sp, #8
 800b16a:	af00      	add	r7, sp, #0
 800b16c:	6078      	str	r0, [r7, #4]
 800b16e:	460b      	mov	r3, r1
 800b170:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	789b      	ldrb	r3, [r3, #2]
 800b176:	2b01      	cmp	r3, #1
 800b178:	d10f      	bne.n	800b19a <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	2200      	movs	r2, #0
 800b17e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	2203      	movs	r2, #3
 800b184:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800b186:	78fb      	ldrb	r3, [r7, #3]
 800b188:	b29a      	uxth	r2, r3
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	2200      	movs	r2, #0
 800b192:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	2200      	movs	r2, #0
 800b198:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800b19a:	2200      	movs	r2, #0
 800b19c:	2100      	movs	r1, #0
 800b19e:	6878      	ldr	r0, [r7, #4]
 800b1a0:	f000 f9e5 	bl	800b56e <USBH_CtlReq>
 800b1a4:	4603      	mov	r3, r0
}
 800b1a6:	4618      	mov	r0, r3
 800b1a8:	3708      	adds	r7, #8
 800b1aa:	46bd      	mov	sp, r7
 800b1ac:	bd80      	pop	{r7, pc}

0800b1ae <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800b1ae:	b580      	push	{r7, lr}
 800b1b0:	b082      	sub	sp, #8
 800b1b2:	af00      	add	r7, sp, #0
 800b1b4:	6078      	str	r0, [r7, #4]
 800b1b6:	460b      	mov	r3, r1
 800b1b8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	789b      	ldrb	r3, [r3, #2]
 800b1be:	2b01      	cmp	r3, #1
 800b1c0:	d10f      	bne.n	800b1e2 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	2202      	movs	r2, #2
 800b1c6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	2201      	movs	r2, #1
 800b1cc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	2200      	movs	r2, #0
 800b1d2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800b1d4:	78fb      	ldrb	r3, [r7, #3]
 800b1d6:	b29a      	uxth	r2, r3
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	2200      	movs	r2, #0
 800b1e0:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800b1e2:	2200      	movs	r2, #0
 800b1e4:	2100      	movs	r1, #0
 800b1e6:	6878      	ldr	r0, [r7, #4]
 800b1e8:	f000 f9c1 	bl	800b56e <USBH_CtlReq>
 800b1ec:	4603      	mov	r3, r0
}
 800b1ee:	4618      	mov	r0, r3
 800b1f0:	3708      	adds	r7, #8
 800b1f2:	46bd      	mov	sp, r7
 800b1f4:	bd80      	pop	{r7, pc}

0800b1f6 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800b1f6:	b480      	push	{r7}
 800b1f8:	b085      	sub	sp, #20
 800b1fa:	af00      	add	r7, sp, #0
 800b1fc:	60f8      	str	r0, [r7, #12]
 800b1fe:	60b9      	str	r1, [r7, #8]
 800b200:	4613      	mov	r3, r2
 800b202:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800b204:	68bb      	ldr	r3, [r7, #8]
 800b206:	781a      	ldrb	r2, [r3, #0]
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800b20c:	68bb      	ldr	r3, [r7, #8]
 800b20e:	785a      	ldrb	r2, [r3, #1]
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800b214:	68bb      	ldr	r3, [r7, #8]
 800b216:	3302      	adds	r3, #2
 800b218:	781b      	ldrb	r3, [r3, #0]
 800b21a:	b29a      	uxth	r2, r3
 800b21c:	68bb      	ldr	r3, [r7, #8]
 800b21e:	3303      	adds	r3, #3
 800b220:	781b      	ldrb	r3, [r3, #0]
 800b222:	b29b      	uxth	r3, r3
 800b224:	021b      	lsls	r3, r3, #8
 800b226:	b29b      	uxth	r3, r3
 800b228:	4313      	orrs	r3, r2
 800b22a:	b29a      	uxth	r2, r3
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800b230:	68bb      	ldr	r3, [r7, #8]
 800b232:	791a      	ldrb	r2, [r3, #4]
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800b238:	68bb      	ldr	r3, [r7, #8]
 800b23a:	795a      	ldrb	r2, [r3, #5]
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800b240:	68bb      	ldr	r3, [r7, #8]
 800b242:	799a      	ldrb	r2, [r3, #6]
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800b248:	68bb      	ldr	r3, [r7, #8]
 800b24a:	79da      	ldrb	r2, [r3, #7]
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800b250:	88fb      	ldrh	r3, [r7, #6]
 800b252:	2b08      	cmp	r3, #8
 800b254:	d939      	bls.n	800b2ca <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800b256:	68bb      	ldr	r3, [r7, #8]
 800b258:	3308      	adds	r3, #8
 800b25a:	781b      	ldrb	r3, [r3, #0]
 800b25c:	b29a      	uxth	r2, r3
 800b25e:	68bb      	ldr	r3, [r7, #8]
 800b260:	3309      	adds	r3, #9
 800b262:	781b      	ldrb	r3, [r3, #0]
 800b264:	b29b      	uxth	r3, r3
 800b266:	021b      	lsls	r3, r3, #8
 800b268:	b29b      	uxth	r3, r3
 800b26a:	4313      	orrs	r3, r2
 800b26c:	b29a      	uxth	r2, r3
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800b272:	68bb      	ldr	r3, [r7, #8]
 800b274:	330a      	adds	r3, #10
 800b276:	781b      	ldrb	r3, [r3, #0]
 800b278:	b29a      	uxth	r2, r3
 800b27a:	68bb      	ldr	r3, [r7, #8]
 800b27c:	330b      	adds	r3, #11
 800b27e:	781b      	ldrb	r3, [r3, #0]
 800b280:	b29b      	uxth	r3, r3
 800b282:	021b      	lsls	r3, r3, #8
 800b284:	b29b      	uxth	r3, r3
 800b286:	4313      	orrs	r3, r2
 800b288:	b29a      	uxth	r2, r3
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800b28e:	68bb      	ldr	r3, [r7, #8]
 800b290:	330c      	adds	r3, #12
 800b292:	781b      	ldrb	r3, [r3, #0]
 800b294:	b29a      	uxth	r2, r3
 800b296:	68bb      	ldr	r3, [r7, #8]
 800b298:	330d      	adds	r3, #13
 800b29a:	781b      	ldrb	r3, [r3, #0]
 800b29c:	b29b      	uxth	r3, r3
 800b29e:	021b      	lsls	r3, r3, #8
 800b2a0:	b29b      	uxth	r3, r3
 800b2a2:	4313      	orrs	r3, r2
 800b2a4:	b29a      	uxth	r2, r3
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800b2aa:	68bb      	ldr	r3, [r7, #8]
 800b2ac:	7b9a      	ldrb	r2, [r3, #14]
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800b2b2:	68bb      	ldr	r3, [r7, #8]
 800b2b4:	7bda      	ldrb	r2, [r3, #15]
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800b2ba:	68bb      	ldr	r3, [r7, #8]
 800b2bc:	7c1a      	ldrb	r2, [r3, #16]
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800b2c2:	68bb      	ldr	r3, [r7, #8]
 800b2c4:	7c5a      	ldrb	r2, [r3, #17]
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	745a      	strb	r2, [r3, #17]
  }
}
 800b2ca:	bf00      	nop
 800b2cc:	3714      	adds	r7, #20
 800b2ce:	46bd      	mov	sp, r7
 800b2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d4:	4770      	bx	lr

0800b2d6 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800b2d6:	b580      	push	{r7, lr}
 800b2d8:	b08a      	sub	sp, #40	; 0x28
 800b2da:	af00      	add	r7, sp, #0
 800b2dc:	60f8      	str	r0, [r7, #12]
 800b2de:	60b9      	str	r1, [r7, #8]
 800b2e0:	4613      	mov	r3, r2
 800b2e2:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800b2e4:	68bb      	ldr	r3, [r7, #8]
 800b2e6:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800b2e8:	2300      	movs	r3, #0
 800b2ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800b2ee:	2300      	movs	r3, #0
 800b2f0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800b2f4:	68bb      	ldr	r3, [r7, #8]
 800b2f6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800b2f8:	68bb      	ldr	r3, [r7, #8]
 800b2fa:	781a      	ldrb	r2, [r3, #0]
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800b300:	68bb      	ldr	r3, [r7, #8]
 800b302:	785a      	ldrb	r2, [r3, #1]
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800b308:	68bb      	ldr	r3, [r7, #8]
 800b30a:	3302      	adds	r3, #2
 800b30c:	781b      	ldrb	r3, [r3, #0]
 800b30e:	b29a      	uxth	r2, r3
 800b310:	68bb      	ldr	r3, [r7, #8]
 800b312:	3303      	adds	r3, #3
 800b314:	781b      	ldrb	r3, [r3, #0]
 800b316:	b29b      	uxth	r3, r3
 800b318:	021b      	lsls	r3, r3, #8
 800b31a:	b29b      	uxth	r3, r3
 800b31c:	4313      	orrs	r3, r2
 800b31e:	b29a      	uxth	r2, r3
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800b324:	68bb      	ldr	r3, [r7, #8]
 800b326:	791a      	ldrb	r2, [r3, #4]
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800b32c:	68bb      	ldr	r3, [r7, #8]
 800b32e:	795a      	ldrb	r2, [r3, #5]
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800b334:	68bb      	ldr	r3, [r7, #8]
 800b336:	799a      	ldrb	r2, [r3, #6]
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800b33c:	68bb      	ldr	r3, [r7, #8]
 800b33e:	79da      	ldrb	r2, [r3, #7]
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800b344:	68bb      	ldr	r3, [r7, #8]
 800b346:	7a1a      	ldrb	r2, [r3, #8]
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800b34c:	88fb      	ldrh	r3, [r7, #6]
 800b34e:	2b09      	cmp	r3, #9
 800b350:	d95f      	bls.n	800b412 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800b352:	2309      	movs	r3, #9
 800b354:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800b356:	2300      	movs	r3, #0
 800b358:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b35a:	e051      	b.n	800b400 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800b35c:	f107 0316 	add.w	r3, r7, #22
 800b360:	4619      	mov	r1, r3
 800b362:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b364:	f000 f8e8 	bl	800b538 <USBH_GetNextDesc>
 800b368:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800b36a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b36c:	785b      	ldrb	r3, [r3, #1]
 800b36e:	2b04      	cmp	r3, #4
 800b370:	d146      	bne.n	800b400 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800b372:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b376:	221a      	movs	r2, #26
 800b378:	fb02 f303 	mul.w	r3, r2, r3
 800b37c:	3308      	adds	r3, #8
 800b37e:	68fa      	ldr	r2, [r7, #12]
 800b380:	4413      	add	r3, r2
 800b382:	3302      	adds	r3, #2
 800b384:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800b386:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b388:	69f8      	ldr	r0, [r7, #28]
 800b38a:	f000 f846 	bl	800b41a <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800b38e:	2300      	movs	r3, #0
 800b390:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800b394:	2300      	movs	r3, #0
 800b396:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b398:	e022      	b.n	800b3e0 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800b39a:	f107 0316 	add.w	r3, r7, #22
 800b39e:	4619      	mov	r1, r3
 800b3a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b3a2:	f000 f8c9 	bl	800b538 <USBH_GetNextDesc>
 800b3a6:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800b3a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3aa:	785b      	ldrb	r3, [r3, #1]
 800b3ac:	2b05      	cmp	r3, #5
 800b3ae:	d117      	bne.n	800b3e0 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800b3b0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b3b4:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800b3b8:	3201      	adds	r2, #1
 800b3ba:	00d2      	lsls	r2, r2, #3
 800b3bc:	211a      	movs	r1, #26
 800b3be:	fb01 f303 	mul.w	r3, r1, r3
 800b3c2:	4413      	add	r3, r2
 800b3c4:	3308      	adds	r3, #8
 800b3c6:	68fa      	ldr	r2, [r7, #12]
 800b3c8:	4413      	add	r3, r2
 800b3ca:	3304      	adds	r3, #4
 800b3cc:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800b3ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b3d0:	69b8      	ldr	r0, [r7, #24]
 800b3d2:	f000 f851 	bl	800b478 <USBH_ParseEPDesc>
            ep_ix++;
 800b3d6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800b3da:	3301      	adds	r3, #1
 800b3dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b3e0:	69fb      	ldr	r3, [r7, #28]
 800b3e2:	791b      	ldrb	r3, [r3, #4]
 800b3e4:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800b3e8:	429a      	cmp	r2, r3
 800b3ea:	d204      	bcs.n	800b3f6 <USBH_ParseCfgDesc+0x120>
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	885a      	ldrh	r2, [r3, #2]
 800b3f0:	8afb      	ldrh	r3, [r7, #22]
 800b3f2:	429a      	cmp	r2, r3
 800b3f4:	d8d1      	bhi.n	800b39a <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800b3f6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b3fa:	3301      	adds	r3, #1
 800b3fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b400:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b404:	2b01      	cmp	r3, #1
 800b406:	d804      	bhi.n	800b412 <USBH_ParseCfgDesc+0x13c>
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	885a      	ldrh	r2, [r3, #2]
 800b40c:	8afb      	ldrh	r3, [r7, #22]
 800b40e:	429a      	cmp	r2, r3
 800b410:	d8a4      	bhi.n	800b35c <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800b412:	bf00      	nop
 800b414:	3728      	adds	r7, #40	; 0x28
 800b416:	46bd      	mov	sp, r7
 800b418:	bd80      	pop	{r7, pc}

0800b41a <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800b41a:	b480      	push	{r7}
 800b41c:	b083      	sub	sp, #12
 800b41e:	af00      	add	r7, sp, #0
 800b420:	6078      	str	r0, [r7, #4]
 800b422:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800b424:	683b      	ldr	r3, [r7, #0]
 800b426:	781a      	ldrb	r2, [r3, #0]
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800b42c:	683b      	ldr	r3, [r7, #0]
 800b42e:	785a      	ldrb	r2, [r3, #1]
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800b434:	683b      	ldr	r3, [r7, #0]
 800b436:	789a      	ldrb	r2, [r3, #2]
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800b43c:	683b      	ldr	r3, [r7, #0]
 800b43e:	78da      	ldrb	r2, [r3, #3]
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800b444:	683b      	ldr	r3, [r7, #0]
 800b446:	791a      	ldrb	r2, [r3, #4]
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800b44c:	683b      	ldr	r3, [r7, #0]
 800b44e:	795a      	ldrb	r2, [r3, #5]
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800b454:	683b      	ldr	r3, [r7, #0]
 800b456:	799a      	ldrb	r2, [r3, #6]
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800b45c:	683b      	ldr	r3, [r7, #0]
 800b45e:	79da      	ldrb	r2, [r3, #7]
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800b464:	683b      	ldr	r3, [r7, #0]
 800b466:	7a1a      	ldrb	r2, [r3, #8]
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	721a      	strb	r2, [r3, #8]
}
 800b46c:	bf00      	nop
 800b46e:	370c      	adds	r7, #12
 800b470:	46bd      	mov	sp, r7
 800b472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b476:	4770      	bx	lr

0800b478 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800b478:	b480      	push	{r7}
 800b47a:	b083      	sub	sp, #12
 800b47c:	af00      	add	r7, sp, #0
 800b47e:	6078      	str	r0, [r7, #4]
 800b480:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800b482:	683b      	ldr	r3, [r7, #0]
 800b484:	781a      	ldrb	r2, [r3, #0]
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800b48a:	683b      	ldr	r3, [r7, #0]
 800b48c:	785a      	ldrb	r2, [r3, #1]
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800b492:	683b      	ldr	r3, [r7, #0]
 800b494:	789a      	ldrb	r2, [r3, #2]
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800b49a:	683b      	ldr	r3, [r7, #0]
 800b49c:	78da      	ldrb	r2, [r3, #3]
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800b4a2:	683b      	ldr	r3, [r7, #0]
 800b4a4:	3304      	adds	r3, #4
 800b4a6:	781b      	ldrb	r3, [r3, #0]
 800b4a8:	b29a      	uxth	r2, r3
 800b4aa:	683b      	ldr	r3, [r7, #0]
 800b4ac:	3305      	adds	r3, #5
 800b4ae:	781b      	ldrb	r3, [r3, #0]
 800b4b0:	b29b      	uxth	r3, r3
 800b4b2:	021b      	lsls	r3, r3, #8
 800b4b4:	b29b      	uxth	r3, r3
 800b4b6:	4313      	orrs	r3, r2
 800b4b8:	b29a      	uxth	r2, r3
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800b4be:	683b      	ldr	r3, [r7, #0]
 800b4c0:	799a      	ldrb	r2, [r3, #6]
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	719a      	strb	r2, [r3, #6]
}
 800b4c6:	bf00      	nop
 800b4c8:	370c      	adds	r7, #12
 800b4ca:	46bd      	mov	sp, r7
 800b4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4d0:	4770      	bx	lr

0800b4d2 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800b4d2:	b480      	push	{r7}
 800b4d4:	b087      	sub	sp, #28
 800b4d6:	af00      	add	r7, sp, #0
 800b4d8:	60f8      	str	r0, [r7, #12]
 800b4da:	60b9      	str	r1, [r7, #8]
 800b4dc:	4613      	mov	r3, r2
 800b4de:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	3301      	adds	r3, #1
 800b4e4:	781b      	ldrb	r3, [r3, #0]
 800b4e6:	2b03      	cmp	r3, #3
 800b4e8:	d120      	bne.n	800b52c <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	781b      	ldrb	r3, [r3, #0]
 800b4ee:	1e9a      	subs	r2, r3, #2
 800b4f0:	88fb      	ldrh	r3, [r7, #6]
 800b4f2:	4293      	cmp	r3, r2
 800b4f4:	bf28      	it	cs
 800b4f6:	4613      	movcs	r3, r2
 800b4f8:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	3302      	adds	r3, #2
 800b4fe:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800b500:	2300      	movs	r3, #0
 800b502:	82fb      	strh	r3, [r7, #22]
 800b504:	e00b      	b.n	800b51e <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800b506:	8afb      	ldrh	r3, [r7, #22]
 800b508:	68fa      	ldr	r2, [r7, #12]
 800b50a:	4413      	add	r3, r2
 800b50c:	781a      	ldrb	r2, [r3, #0]
 800b50e:	68bb      	ldr	r3, [r7, #8]
 800b510:	701a      	strb	r2, [r3, #0]
      pdest++;
 800b512:	68bb      	ldr	r3, [r7, #8]
 800b514:	3301      	adds	r3, #1
 800b516:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800b518:	8afb      	ldrh	r3, [r7, #22]
 800b51a:	3302      	adds	r3, #2
 800b51c:	82fb      	strh	r3, [r7, #22]
 800b51e:	8afa      	ldrh	r2, [r7, #22]
 800b520:	8abb      	ldrh	r3, [r7, #20]
 800b522:	429a      	cmp	r2, r3
 800b524:	d3ef      	bcc.n	800b506 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800b526:	68bb      	ldr	r3, [r7, #8]
 800b528:	2200      	movs	r2, #0
 800b52a:	701a      	strb	r2, [r3, #0]
  }
}
 800b52c:	bf00      	nop
 800b52e:	371c      	adds	r7, #28
 800b530:	46bd      	mov	sp, r7
 800b532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b536:	4770      	bx	lr

0800b538 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800b538:	b480      	push	{r7}
 800b53a:	b085      	sub	sp, #20
 800b53c:	af00      	add	r7, sp, #0
 800b53e:	6078      	str	r0, [r7, #4]
 800b540:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800b542:	683b      	ldr	r3, [r7, #0]
 800b544:	881a      	ldrh	r2, [r3, #0]
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	781b      	ldrb	r3, [r3, #0]
 800b54a:	b29b      	uxth	r3, r3
 800b54c:	4413      	add	r3, r2
 800b54e:	b29a      	uxth	r2, r3
 800b550:	683b      	ldr	r3, [r7, #0]
 800b552:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	781b      	ldrb	r3, [r3, #0]
 800b558:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	4413      	add	r3, r2
 800b55e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b560:	68fb      	ldr	r3, [r7, #12]
}
 800b562:	4618      	mov	r0, r3
 800b564:	3714      	adds	r7, #20
 800b566:	46bd      	mov	sp, r7
 800b568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b56c:	4770      	bx	lr

0800b56e <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800b56e:	b580      	push	{r7, lr}
 800b570:	b086      	sub	sp, #24
 800b572:	af00      	add	r7, sp, #0
 800b574:	60f8      	str	r0, [r7, #12]
 800b576:	60b9      	str	r1, [r7, #8]
 800b578:	4613      	mov	r3, r2
 800b57a:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800b57c:	2301      	movs	r3, #1
 800b57e:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	789b      	ldrb	r3, [r3, #2]
 800b584:	2b01      	cmp	r3, #1
 800b586:	d002      	beq.n	800b58e <USBH_CtlReq+0x20>
 800b588:	2b02      	cmp	r3, #2
 800b58a:	d00f      	beq.n	800b5ac <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800b58c:	e027      	b.n	800b5de <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	68ba      	ldr	r2, [r7, #8]
 800b592:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	88fa      	ldrh	r2, [r7, #6]
 800b598:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	2201      	movs	r2, #1
 800b59e:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	2202      	movs	r2, #2
 800b5a4:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800b5a6:	2301      	movs	r3, #1
 800b5a8:	75fb      	strb	r3, [r7, #23]
      break;
 800b5aa:	e018      	b.n	800b5de <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800b5ac:	68f8      	ldr	r0, [r7, #12]
 800b5ae:	f000 f81b 	bl	800b5e8 <USBH_HandleControl>
 800b5b2:	4603      	mov	r3, r0
 800b5b4:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800b5b6:	7dfb      	ldrb	r3, [r7, #23]
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d002      	beq.n	800b5c2 <USBH_CtlReq+0x54>
 800b5bc:	7dfb      	ldrb	r3, [r7, #23]
 800b5be:	2b03      	cmp	r3, #3
 800b5c0:	d106      	bne.n	800b5d0 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	2201      	movs	r2, #1
 800b5c6:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	2200      	movs	r2, #0
 800b5cc:	761a      	strb	r2, [r3, #24]
      break;
 800b5ce:	e005      	b.n	800b5dc <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800b5d0:	7dfb      	ldrb	r3, [r7, #23]
 800b5d2:	2b02      	cmp	r3, #2
 800b5d4:	d102      	bne.n	800b5dc <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	2201      	movs	r2, #1
 800b5da:	709a      	strb	r2, [r3, #2]
      break;
 800b5dc:	bf00      	nop
  }
  return status;
 800b5de:	7dfb      	ldrb	r3, [r7, #23]
}
 800b5e0:	4618      	mov	r0, r3
 800b5e2:	3718      	adds	r7, #24
 800b5e4:	46bd      	mov	sp, r7
 800b5e6:	bd80      	pop	{r7, pc}

0800b5e8 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800b5e8:	b580      	push	{r7, lr}
 800b5ea:	b086      	sub	sp, #24
 800b5ec:	af02      	add	r7, sp, #8
 800b5ee:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800b5f0:	2301      	movs	r3, #1
 800b5f2:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800b5f4:	2300      	movs	r3, #0
 800b5f6:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	7e1b      	ldrb	r3, [r3, #24]
 800b5fc:	3b01      	subs	r3, #1
 800b5fe:	2b0a      	cmp	r3, #10
 800b600:	f200 8156 	bhi.w	800b8b0 <USBH_HandleControl+0x2c8>
 800b604:	a201      	add	r2, pc, #4	; (adr r2, 800b60c <USBH_HandleControl+0x24>)
 800b606:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b60a:	bf00      	nop
 800b60c:	0800b639 	.word	0x0800b639
 800b610:	0800b653 	.word	0x0800b653
 800b614:	0800b6bd 	.word	0x0800b6bd
 800b618:	0800b6e3 	.word	0x0800b6e3
 800b61c:	0800b71b 	.word	0x0800b71b
 800b620:	0800b745 	.word	0x0800b745
 800b624:	0800b797 	.word	0x0800b797
 800b628:	0800b7b9 	.word	0x0800b7b9
 800b62c:	0800b7f5 	.word	0x0800b7f5
 800b630:	0800b81b 	.word	0x0800b81b
 800b634:	0800b859 	.word	0x0800b859
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	f103 0110 	add.w	r1, r3, #16
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	795b      	ldrb	r3, [r3, #5]
 800b642:	461a      	mov	r2, r3
 800b644:	6878      	ldr	r0, [r7, #4]
 800b646:	f000 f943 	bl	800b8d0 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	2202      	movs	r2, #2
 800b64e:	761a      	strb	r2, [r3, #24]
      break;
 800b650:	e139      	b.n	800b8c6 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	795b      	ldrb	r3, [r3, #5]
 800b656:	4619      	mov	r1, r3
 800b658:	6878      	ldr	r0, [r7, #4]
 800b65a:	f000 fcc5 	bl	800bfe8 <USBH_LL_GetURBState>
 800b65e:	4603      	mov	r3, r0
 800b660:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800b662:	7bbb      	ldrb	r3, [r7, #14]
 800b664:	2b01      	cmp	r3, #1
 800b666:	d11e      	bne.n	800b6a6 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	7c1b      	ldrb	r3, [r3, #16]
 800b66c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b670:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	8adb      	ldrh	r3, [r3, #22]
 800b676:	2b00      	cmp	r3, #0
 800b678:	d00a      	beq.n	800b690 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800b67a:	7b7b      	ldrb	r3, [r7, #13]
 800b67c:	2b80      	cmp	r3, #128	; 0x80
 800b67e:	d103      	bne.n	800b688 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	2203      	movs	r2, #3
 800b684:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b686:	e115      	b.n	800b8b4 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	2205      	movs	r2, #5
 800b68c:	761a      	strb	r2, [r3, #24]
      break;
 800b68e:	e111      	b.n	800b8b4 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800b690:	7b7b      	ldrb	r3, [r7, #13]
 800b692:	2b80      	cmp	r3, #128	; 0x80
 800b694:	d103      	bne.n	800b69e <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	2209      	movs	r2, #9
 800b69a:	761a      	strb	r2, [r3, #24]
      break;
 800b69c:	e10a      	b.n	800b8b4 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	2207      	movs	r2, #7
 800b6a2:	761a      	strb	r2, [r3, #24]
      break;
 800b6a4:	e106      	b.n	800b8b4 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800b6a6:	7bbb      	ldrb	r3, [r7, #14]
 800b6a8:	2b04      	cmp	r3, #4
 800b6aa:	d003      	beq.n	800b6b4 <USBH_HandleControl+0xcc>
 800b6ac:	7bbb      	ldrb	r3, [r7, #14]
 800b6ae:	2b02      	cmp	r3, #2
 800b6b0:	f040 8100 	bne.w	800b8b4 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	220b      	movs	r2, #11
 800b6b8:	761a      	strb	r2, [r3, #24]
      break;
 800b6ba:	e0fb      	b.n	800b8b4 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b6c2:	b29a      	uxth	r2, r3
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	6899      	ldr	r1, [r3, #8]
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	899a      	ldrh	r2, [r3, #12]
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	791b      	ldrb	r3, [r3, #4]
 800b6d4:	6878      	ldr	r0, [r7, #4]
 800b6d6:	f000 f93a 	bl	800b94e <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	2204      	movs	r2, #4
 800b6de:	761a      	strb	r2, [r3, #24]
      break;
 800b6e0:	e0f1      	b.n	800b8c6 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	791b      	ldrb	r3, [r3, #4]
 800b6e6:	4619      	mov	r1, r3
 800b6e8:	6878      	ldr	r0, [r7, #4]
 800b6ea:	f000 fc7d 	bl	800bfe8 <USBH_LL_GetURBState>
 800b6ee:	4603      	mov	r3, r0
 800b6f0:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800b6f2:	7bbb      	ldrb	r3, [r7, #14]
 800b6f4:	2b01      	cmp	r3, #1
 800b6f6:	d102      	bne.n	800b6fe <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	2209      	movs	r2, #9
 800b6fc:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800b6fe:	7bbb      	ldrb	r3, [r7, #14]
 800b700:	2b05      	cmp	r3, #5
 800b702:	d102      	bne.n	800b70a <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800b704:	2303      	movs	r3, #3
 800b706:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b708:	e0d6      	b.n	800b8b8 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800b70a:	7bbb      	ldrb	r3, [r7, #14]
 800b70c:	2b04      	cmp	r3, #4
 800b70e:	f040 80d3 	bne.w	800b8b8 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	220b      	movs	r2, #11
 800b716:	761a      	strb	r2, [r3, #24]
      break;
 800b718:	e0ce      	b.n	800b8b8 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	6899      	ldr	r1, [r3, #8]
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	899a      	ldrh	r2, [r3, #12]
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	795b      	ldrb	r3, [r3, #5]
 800b726:	2001      	movs	r0, #1
 800b728:	9000      	str	r0, [sp, #0]
 800b72a:	6878      	ldr	r0, [r7, #4]
 800b72c:	f000 f8ea 	bl	800b904 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b736:	b29a      	uxth	r2, r3
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	2206      	movs	r2, #6
 800b740:	761a      	strb	r2, [r3, #24]
      break;
 800b742:	e0c0      	b.n	800b8c6 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	795b      	ldrb	r3, [r3, #5]
 800b748:	4619      	mov	r1, r3
 800b74a:	6878      	ldr	r0, [r7, #4]
 800b74c:	f000 fc4c 	bl	800bfe8 <USBH_LL_GetURBState>
 800b750:	4603      	mov	r3, r0
 800b752:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800b754:	7bbb      	ldrb	r3, [r7, #14]
 800b756:	2b01      	cmp	r3, #1
 800b758:	d103      	bne.n	800b762 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	2207      	movs	r2, #7
 800b75e:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b760:	e0ac      	b.n	800b8bc <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800b762:	7bbb      	ldrb	r3, [r7, #14]
 800b764:	2b05      	cmp	r3, #5
 800b766:	d105      	bne.n	800b774 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	220c      	movs	r2, #12
 800b76c:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800b76e:	2303      	movs	r3, #3
 800b770:	73fb      	strb	r3, [r7, #15]
      break;
 800b772:	e0a3      	b.n	800b8bc <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b774:	7bbb      	ldrb	r3, [r7, #14]
 800b776:	2b02      	cmp	r3, #2
 800b778:	d103      	bne.n	800b782 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	2205      	movs	r2, #5
 800b77e:	761a      	strb	r2, [r3, #24]
      break;
 800b780:	e09c      	b.n	800b8bc <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800b782:	7bbb      	ldrb	r3, [r7, #14]
 800b784:	2b04      	cmp	r3, #4
 800b786:	f040 8099 	bne.w	800b8bc <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	220b      	movs	r2, #11
 800b78e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800b790:	2302      	movs	r3, #2
 800b792:	73fb      	strb	r3, [r7, #15]
      break;
 800b794:	e092      	b.n	800b8bc <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	791b      	ldrb	r3, [r3, #4]
 800b79a:	2200      	movs	r2, #0
 800b79c:	2100      	movs	r1, #0
 800b79e:	6878      	ldr	r0, [r7, #4]
 800b7a0:	f000 f8d5 	bl	800b94e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b7aa:	b29a      	uxth	r2, r3
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	2208      	movs	r2, #8
 800b7b4:	761a      	strb	r2, [r3, #24]

      break;
 800b7b6:	e086      	b.n	800b8c6 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	791b      	ldrb	r3, [r3, #4]
 800b7bc:	4619      	mov	r1, r3
 800b7be:	6878      	ldr	r0, [r7, #4]
 800b7c0:	f000 fc12 	bl	800bfe8 <USBH_LL_GetURBState>
 800b7c4:	4603      	mov	r3, r0
 800b7c6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800b7c8:	7bbb      	ldrb	r3, [r7, #14]
 800b7ca:	2b01      	cmp	r3, #1
 800b7cc:	d105      	bne.n	800b7da <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	220d      	movs	r2, #13
 800b7d2:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800b7d4:	2300      	movs	r3, #0
 800b7d6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b7d8:	e072      	b.n	800b8c0 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800b7da:	7bbb      	ldrb	r3, [r7, #14]
 800b7dc:	2b04      	cmp	r3, #4
 800b7de:	d103      	bne.n	800b7e8 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	220b      	movs	r2, #11
 800b7e4:	761a      	strb	r2, [r3, #24]
      break;
 800b7e6:	e06b      	b.n	800b8c0 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800b7e8:	7bbb      	ldrb	r3, [r7, #14]
 800b7ea:	2b05      	cmp	r3, #5
 800b7ec:	d168      	bne.n	800b8c0 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800b7ee:	2303      	movs	r3, #3
 800b7f0:	73fb      	strb	r3, [r7, #15]
      break;
 800b7f2:	e065      	b.n	800b8c0 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	795b      	ldrb	r3, [r3, #5]
 800b7f8:	2201      	movs	r2, #1
 800b7fa:	9200      	str	r2, [sp, #0]
 800b7fc:	2200      	movs	r2, #0
 800b7fe:	2100      	movs	r1, #0
 800b800:	6878      	ldr	r0, [r7, #4]
 800b802:	f000 f87f 	bl	800b904 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b80c:	b29a      	uxth	r2, r3
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	220a      	movs	r2, #10
 800b816:	761a      	strb	r2, [r3, #24]
      break;
 800b818:	e055      	b.n	800b8c6 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	795b      	ldrb	r3, [r3, #5]
 800b81e:	4619      	mov	r1, r3
 800b820:	6878      	ldr	r0, [r7, #4]
 800b822:	f000 fbe1 	bl	800bfe8 <USBH_LL_GetURBState>
 800b826:	4603      	mov	r3, r0
 800b828:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800b82a:	7bbb      	ldrb	r3, [r7, #14]
 800b82c:	2b01      	cmp	r3, #1
 800b82e:	d105      	bne.n	800b83c <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800b830:	2300      	movs	r3, #0
 800b832:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	220d      	movs	r2, #13
 800b838:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b83a:	e043      	b.n	800b8c4 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b83c:	7bbb      	ldrb	r3, [r7, #14]
 800b83e:	2b02      	cmp	r3, #2
 800b840:	d103      	bne.n	800b84a <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	2209      	movs	r2, #9
 800b846:	761a      	strb	r2, [r3, #24]
      break;
 800b848:	e03c      	b.n	800b8c4 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800b84a:	7bbb      	ldrb	r3, [r7, #14]
 800b84c:	2b04      	cmp	r3, #4
 800b84e:	d139      	bne.n	800b8c4 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	220b      	movs	r2, #11
 800b854:	761a      	strb	r2, [r3, #24]
      break;
 800b856:	e035      	b.n	800b8c4 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	7e5b      	ldrb	r3, [r3, #25]
 800b85c:	3301      	adds	r3, #1
 800b85e:	b2da      	uxtb	r2, r3
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	765a      	strb	r2, [r3, #25]
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	7e5b      	ldrb	r3, [r3, #25]
 800b868:	2b02      	cmp	r3, #2
 800b86a:	d806      	bhi.n	800b87a <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	2201      	movs	r2, #1
 800b870:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	2201      	movs	r2, #1
 800b876:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800b878:	e025      	b.n	800b8c6 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b880:	2106      	movs	r1, #6
 800b882:	6878      	ldr	r0, [r7, #4]
 800b884:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	2200      	movs	r2, #0
 800b88a:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	795b      	ldrb	r3, [r3, #5]
 800b890:	4619      	mov	r1, r3
 800b892:	6878      	ldr	r0, [r7, #4]
 800b894:	f000 f90c 	bl	800bab0 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	791b      	ldrb	r3, [r3, #4]
 800b89c:	4619      	mov	r1, r3
 800b89e:	6878      	ldr	r0, [r7, #4]
 800b8a0:	f000 f906 	bl	800bab0 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	2200      	movs	r2, #0
 800b8a8:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800b8aa:	2302      	movs	r3, #2
 800b8ac:	73fb      	strb	r3, [r7, #15]
      break;
 800b8ae:	e00a      	b.n	800b8c6 <USBH_HandleControl+0x2de>

    default:
      break;
 800b8b0:	bf00      	nop
 800b8b2:	e008      	b.n	800b8c6 <USBH_HandleControl+0x2de>
      break;
 800b8b4:	bf00      	nop
 800b8b6:	e006      	b.n	800b8c6 <USBH_HandleControl+0x2de>
      break;
 800b8b8:	bf00      	nop
 800b8ba:	e004      	b.n	800b8c6 <USBH_HandleControl+0x2de>
      break;
 800b8bc:	bf00      	nop
 800b8be:	e002      	b.n	800b8c6 <USBH_HandleControl+0x2de>
      break;
 800b8c0:	bf00      	nop
 800b8c2:	e000      	b.n	800b8c6 <USBH_HandleControl+0x2de>
      break;
 800b8c4:	bf00      	nop
  }

  return status;
 800b8c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8c8:	4618      	mov	r0, r3
 800b8ca:	3710      	adds	r7, #16
 800b8cc:	46bd      	mov	sp, r7
 800b8ce:	bd80      	pop	{r7, pc}

0800b8d0 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800b8d0:	b580      	push	{r7, lr}
 800b8d2:	b088      	sub	sp, #32
 800b8d4:	af04      	add	r7, sp, #16
 800b8d6:	60f8      	str	r0, [r7, #12]
 800b8d8:	60b9      	str	r1, [r7, #8]
 800b8da:	4613      	mov	r3, r2
 800b8dc:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b8de:	79f9      	ldrb	r1, [r7, #7]
 800b8e0:	2300      	movs	r3, #0
 800b8e2:	9303      	str	r3, [sp, #12]
 800b8e4:	2308      	movs	r3, #8
 800b8e6:	9302      	str	r3, [sp, #8]
 800b8e8:	68bb      	ldr	r3, [r7, #8]
 800b8ea:	9301      	str	r3, [sp, #4]
 800b8ec:	2300      	movs	r3, #0
 800b8ee:	9300      	str	r3, [sp, #0]
 800b8f0:	2300      	movs	r3, #0
 800b8f2:	2200      	movs	r2, #0
 800b8f4:	68f8      	ldr	r0, [r7, #12]
 800b8f6:	f000 fb46 	bl	800bf86 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800b8fa:	2300      	movs	r3, #0
}
 800b8fc:	4618      	mov	r0, r3
 800b8fe:	3710      	adds	r7, #16
 800b900:	46bd      	mov	sp, r7
 800b902:	bd80      	pop	{r7, pc}

0800b904 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800b904:	b580      	push	{r7, lr}
 800b906:	b088      	sub	sp, #32
 800b908:	af04      	add	r7, sp, #16
 800b90a:	60f8      	str	r0, [r7, #12]
 800b90c:	60b9      	str	r1, [r7, #8]
 800b90e:	4611      	mov	r1, r2
 800b910:	461a      	mov	r2, r3
 800b912:	460b      	mov	r3, r1
 800b914:	80fb      	strh	r3, [r7, #6]
 800b916:	4613      	mov	r3, r2
 800b918:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b920:	2b00      	cmp	r3, #0
 800b922:	d001      	beq.n	800b928 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800b924:	2300      	movs	r3, #0
 800b926:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b928:	7979      	ldrb	r1, [r7, #5]
 800b92a:	7e3b      	ldrb	r3, [r7, #24]
 800b92c:	9303      	str	r3, [sp, #12]
 800b92e:	88fb      	ldrh	r3, [r7, #6]
 800b930:	9302      	str	r3, [sp, #8]
 800b932:	68bb      	ldr	r3, [r7, #8]
 800b934:	9301      	str	r3, [sp, #4]
 800b936:	2301      	movs	r3, #1
 800b938:	9300      	str	r3, [sp, #0]
 800b93a:	2300      	movs	r3, #0
 800b93c:	2200      	movs	r2, #0
 800b93e:	68f8      	ldr	r0, [r7, #12]
 800b940:	f000 fb21 	bl	800bf86 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800b944:	2300      	movs	r3, #0
}
 800b946:	4618      	mov	r0, r3
 800b948:	3710      	adds	r7, #16
 800b94a:	46bd      	mov	sp, r7
 800b94c:	bd80      	pop	{r7, pc}

0800b94e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800b94e:	b580      	push	{r7, lr}
 800b950:	b088      	sub	sp, #32
 800b952:	af04      	add	r7, sp, #16
 800b954:	60f8      	str	r0, [r7, #12]
 800b956:	60b9      	str	r1, [r7, #8]
 800b958:	4611      	mov	r1, r2
 800b95a:	461a      	mov	r2, r3
 800b95c:	460b      	mov	r3, r1
 800b95e:	80fb      	strh	r3, [r7, #6]
 800b960:	4613      	mov	r3, r2
 800b962:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b964:	7979      	ldrb	r1, [r7, #5]
 800b966:	2300      	movs	r3, #0
 800b968:	9303      	str	r3, [sp, #12]
 800b96a:	88fb      	ldrh	r3, [r7, #6]
 800b96c:	9302      	str	r3, [sp, #8]
 800b96e:	68bb      	ldr	r3, [r7, #8]
 800b970:	9301      	str	r3, [sp, #4]
 800b972:	2301      	movs	r3, #1
 800b974:	9300      	str	r3, [sp, #0]
 800b976:	2300      	movs	r3, #0
 800b978:	2201      	movs	r2, #1
 800b97a:	68f8      	ldr	r0, [r7, #12]
 800b97c:	f000 fb03 	bl	800bf86 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800b980:	2300      	movs	r3, #0

}
 800b982:	4618      	mov	r0, r3
 800b984:	3710      	adds	r7, #16
 800b986:	46bd      	mov	sp, r7
 800b988:	bd80      	pop	{r7, pc}

0800b98a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800b98a:	b580      	push	{r7, lr}
 800b98c:	b088      	sub	sp, #32
 800b98e:	af04      	add	r7, sp, #16
 800b990:	60f8      	str	r0, [r7, #12]
 800b992:	60b9      	str	r1, [r7, #8]
 800b994:	4611      	mov	r1, r2
 800b996:	461a      	mov	r2, r3
 800b998:	460b      	mov	r3, r1
 800b99a:	80fb      	strh	r3, [r7, #6]
 800b99c:	4613      	mov	r3, r2
 800b99e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d001      	beq.n	800b9ae <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800b9aa:	2300      	movs	r3, #0
 800b9ac:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b9ae:	7979      	ldrb	r1, [r7, #5]
 800b9b0:	7e3b      	ldrb	r3, [r7, #24]
 800b9b2:	9303      	str	r3, [sp, #12]
 800b9b4:	88fb      	ldrh	r3, [r7, #6]
 800b9b6:	9302      	str	r3, [sp, #8]
 800b9b8:	68bb      	ldr	r3, [r7, #8]
 800b9ba:	9301      	str	r3, [sp, #4]
 800b9bc:	2301      	movs	r3, #1
 800b9be:	9300      	str	r3, [sp, #0]
 800b9c0:	2302      	movs	r3, #2
 800b9c2:	2200      	movs	r2, #0
 800b9c4:	68f8      	ldr	r0, [r7, #12]
 800b9c6:	f000 fade 	bl	800bf86 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800b9ca:	2300      	movs	r3, #0
}
 800b9cc:	4618      	mov	r0, r3
 800b9ce:	3710      	adds	r7, #16
 800b9d0:	46bd      	mov	sp, r7
 800b9d2:	bd80      	pop	{r7, pc}

0800b9d4 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800b9d4:	b580      	push	{r7, lr}
 800b9d6:	b088      	sub	sp, #32
 800b9d8:	af04      	add	r7, sp, #16
 800b9da:	60f8      	str	r0, [r7, #12]
 800b9dc:	60b9      	str	r1, [r7, #8]
 800b9de:	4611      	mov	r1, r2
 800b9e0:	461a      	mov	r2, r3
 800b9e2:	460b      	mov	r3, r1
 800b9e4:	80fb      	strh	r3, [r7, #6]
 800b9e6:	4613      	mov	r3, r2
 800b9e8:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b9ea:	7979      	ldrb	r1, [r7, #5]
 800b9ec:	2300      	movs	r3, #0
 800b9ee:	9303      	str	r3, [sp, #12]
 800b9f0:	88fb      	ldrh	r3, [r7, #6]
 800b9f2:	9302      	str	r3, [sp, #8]
 800b9f4:	68bb      	ldr	r3, [r7, #8]
 800b9f6:	9301      	str	r3, [sp, #4]
 800b9f8:	2301      	movs	r3, #1
 800b9fa:	9300      	str	r3, [sp, #0]
 800b9fc:	2302      	movs	r3, #2
 800b9fe:	2201      	movs	r2, #1
 800ba00:	68f8      	ldr	r0, [r7, #12]
 800ba02:	f000 fac0 	bl	800bf86 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800ba06:	2300      	movs	r3, #0
}
 800ba08:	4618      	mov	r0, r3
 800ba0a:	3710      	adds	r7, #16
 800ba0c:	46bd      	mov	sp, r7
 800ba0e:	bd80      	pop	{r7, pc}

0800ba10 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800ba10:	b580      	push	{r7, lr}
 800ba12:	b086      	sub	sp, #24
 800ba14:	af04      	add	r7, sp, #16
 800ba16:	6078      	str	r0, [r7, #4]
 800ba18:	4608      	mov	r0, r1
 800ba1a:	4611      	mov	r1, r2
 800ba1c:	461a      	mov	r2, r3
 800ba1e:	4603      	mov	r3, r0
 800ba20:	70fb      	strb	r3, [r7, #3]
 800ba22:	460b      	mov	r3, r1
 800ba24:	70bb      	strb	r3, [r7, #2]
 800ba26:	4613      	mov	r3, r2
 800ba28:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800ba2a:	7878      	ldrb	r0, [r7, #1]
 800ba2c:	78ba      	ldrb	r2, [r7, #2]
 800ba2e:	78f9      	ldrb	r1, [r7, #3]
 800ba30:	8b3b      	ldrh	r3, [r7, #24]
 800ba32:	9302      	str	r3, [sp, #8]
 800ba34:	7d3b      	ldrb	r3, [r7, #20]
 800ba36:	9301      	str	r3, [sp, #4]
 800ba38:	7c3b      	ldrb	r3, [r7, #16]
 800ba3a:	9300      	str	r3, [sp, #0]
 800ba3c:	4603      	mov	r3, r0
 800ba3e:	6878      	ldr	r0, [r7, #4]
 800ba40:	f000 fa53 	bl	800beea <USBH_LL_OpenPipe>

  return USBH_OK;
 800ba44:	2300      	movs	r3, #0
}
 800ba46:	4618      	mov	r0, r3
 800ba48:	3708      	adds	r7, #8
 800ba4a:	46bd      	mov	sp, r7
 800ba4c:	bd80      	pop	{r7, pc}

0800ba4e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800ba4e:	b580      	push	{r7, lr}
 800ba50:	b082      	sub	sp, #8
 800ba52:	af00      	add	r7, sp, #0
 800ba54:	6078      	str	r0, [r7, #4]
 800ba56:	460b      	mov	r3, r1
 800ba58:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800ba5a:	78fb      	ldrb	r3, [r7, #3]
 800ba5c:	4619      	mov	r1, r3
 800ba5e:	6878      	ldr	r0, [r7, #4]
 800ba60:	f000 fa72 	bl	800bf48 <USBH_LL_ClosePipe>

  return USBH_OK;
 800ba64:	2300      	movs	r3, #0
}
 800ba66:	4618      	mov	r0, r3
 800ba68:	3708      	adds	r7, #8
 800ba6a:	46bd      	mov	sp, r7
 800ba6c:	bd80      	pop	{r7, pc}

0800ba6e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800ba6e:	b580      	push	{r7, lr}
 800ba70:	b084      	sub	sp, #16
 800ba72:	af00      	add	r7, sp, #0
 800ba74:	6078      	str	r0, [r7, #4]
 800ba76:	460b      	mov	r3, r1
 800ba78:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800ba7a:	6878      	ldr	r0, [r7, #4]
 800ba7c:	f000 f836 	bl	800baec <USBH_GetFreePipe>
 800ba80:	4603      	mov	r3, r0
 800ba82:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800ba84:	89fb      	ldrh	r3, [r7, #14]
 800ba86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ba8a:	4293      	cmp	r3, r2
 800ba8c:	d00a      	beq.n	800baa4 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800ba8e:	78fa      	ldrb	r2, [r7, #3]
 800ba90:	89fb      	ldrh	r3, [r7, #14]
 800ba92:	f003 030f 	and.w	r3, r3, #15
 800ba96:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ba9a:	6879      	ldr	r1, [r7, #4]
 800ba9c:	33e0      	adds	r3, #224	; 0xe0
 800ba9e:	009b      	lsls	r3, r3, #2
 800baa0:	440b      	add	r3, r1
 800baa2:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800baa4:	89fb      	ldrh	r3, [r7, #14]
 800baa6:	b2db      	uxtb	r3, r3
}
 800baa8:	4618      	mov	r0, r3
 800baaa:	3710      	adds	r7, #16
 800baac:	46bd      	mov	sp, r7
 800baae:	bd80      	pop	{r7, pc}

0800bab0 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800bab0:	b480      	push	{r7}
 800bab2:	b083      	sub	sp, #12
 800bab4:	af00      	add	r7, sp, #0
 800bab6:	6078      	str	r0, [r7, #4]
 800bab8:	460b      	mov	r3, r1
 800baba:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800babc:	78fb      	ldrb	r3, [r7, #3]
 800babe:	2b0a      	cmp	r3, #10
 800bac0:	d80d      	bhi.n	800bade <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800bac2:	78fb      	ldrb	r3, [r7, #3]
 800bac4:	687a      	ldr	r2, [r7, #4]
 800bac6:	33e0      	adds	r3, #224	; 0xe0
 800bac8:	009b      	lsls	r3, r3, #2
 800baca:	4413      	add	r3, r2
 800bacc:	685a      	ldr	r2, [r3, #4]
 800bace:	78fb      	ldrb	r3, [r7, #3]
 800bad0:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800bad4:	6879      	ldr	r1, [r7, #4]
 800bad6:	33e0      	adds	r3, #224	; 0xe0
 800bad8:	009b      	lsls	r3, r3, #2
 800bada:	440b      	add	r3, r1
 800badc:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800bade:	2300      	movs	r3, #0
}
 800bae0:	4618      	mov	r0, r3
 800bae2:	370c      	adds	r7, #12
 800bae4:	46bd      	mov	sp, r7
 800bae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baea:	4770      	bx	lr

0800baec <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800baec:	b480      	push	{r7}
 800baee:	b085      	sub	sp, #20
 800baf0:	af00      	add	r7, sp, #0
 800baf2:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800baf4:	2300      	movs	r3, #0
 800baf6:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800baf8:	2300      	movs	r3, #0
 800bafa:	73fb      	strb	r3, [r7, #15]
 800bafc:	e00f      	b.n	800bb1e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800bafe:	7bfb      	ldrb	r3, [r7, #15]
 800bb00:	687a      	ldr	r2, [r7, #4]
 800bb02:	33e0      	adds	r3, #224	; 0xe0
 800bb04:	009b      	lsls	r3, r3, #2
 800bb06:	4413      	add	r3, r2
 800bb08:	685b      	ldr	r3, [r3, #4]
 800bb0a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d102      	bne.n	800bb18 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800bb12:	7bfb      	ldrb	r3, [r7, #15]
 800bb14:	b29b      	uxth	r3, r3
 800bb16:	e007      	b.n	800bb28 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800bb18:	7bfb      	ldrb	r3, [r7, #15]
 800bb1a:	3301      	adds	r3, #1
 800bb1c:	73fb      	strb	r3, [r7, #15]
 800bb1e:	7bfb      	ldrb	r3, [r7, #15]
 800bb20:	2b0a      	cmp	r3, #10
 800bb22:	d9ec      	bls.n	800bafe <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800bb24:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800bb28:	4618      	mov	r0, r3
 800bb2a:	3714      	adds	r7, #20
 800bb2c:	46bd      	mov	sp, r7
 800bb2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb32:	4770      	bx	lr

0800bb34 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800bb34:	b580      	push	{r7, lr}
 800bb36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800bb38:	2201      	movs	r2, #1
 800bb3a:	490e      	ldr	r1, [pc, #56]	; (800bb74 <MX_USB_HOST_Init+0x40>)
 800bb3c:	480e      	ldr	r0, [pc, #56]	; (800bb78 <MX_USB_HOST_Init+0x44>)
 800bb3e:	f7fe fca1 	bl	800a484 <USBH_Init>
 800bb42:	4603      	mov	r3, r0
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d001      	beq.n	800bb4c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800bb48:	f7f5 ff3e 	bl	80019c8 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800bb4c:	490b      	ldr	r1, [pc, #44]	; (800bb7c <MX_USB_HOST_Init+0x48>)
 800bb4e:	480a      	ldr	r0, [pc, #40]	; (800bb78 <MX_USB_HOST_Init+0x44>)
 800bb50:	f7fe fd26 	bl	800a5a0 <USBH_RegisterClass>
 800bb54:	4603      	mov	r3, r0
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d001      	beq.n	800bb5e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800bb5a:	f7f5 ff35 	bl	80019c8 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800bb5e:	4806      	ldr	r0, [pc, #24]	; (800bb78 <MX_USB_HOST_Init+0x44>)
 800bb60:	f7fe fdaa 	bl	800a6b8 <USBH_Start>
 800bb64:	4603      	mov	r3, r0
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d001      	beq.n	800bb6e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800bb6a:	f7f5 ff2d 	bl	80019c8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800bb6e:	bf00      	nop
 800bb70:	bd80      	pop	{r7, pc}
 800bb72:	bf00      	nop
 800bb74:	0800bb95 	.word	0x0800bb95
 800bb78:	20000750 	.word	0x20000750
 800bb7c:	20000014 	.word	0x20000014

0800bb80 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800bb80:	b580      	push	{r7, lr}
 800bb82:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800bb84:	4802      	ldr	r0, [pc, #8]	; (800bb90 <MX_USB_HOST_Process+0x10>)
 800bb86:	f7fe fda7 	bl	800a6d8 <USBH_Process>
}
 800bb8a:	bf00      	nop
 800bb8c:	bd80      	pop	{r7, pc}
 800bb8e:	bf00      	nop
 800bb90:	20000750 	.word	0x20000750

0800bb94 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800bb94:	b480      	push	{r7}
 800bb96:	b083      	sub	sp, #12
 800bb98:	af00      	add	r7, sp, #0
 800bb9a:	6078      	str	r0, [r7, #4]
 800bb9c:	460b      	mov	r3, r1
 800bb9e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800bba0:	78fb      	ldrb	r3, [r7, #3]
 800bba2:	3b01      	subs	r3, #1
 800bba4:	2b04      	cmp	r3, #4
 800bba6:	d819      	bhi.n	800bbdc <USBH_UserProcess+0x48>
 800bba8:	a201      	add	r2, pc, #4	; (adr r2, 800bbb0 <USBH_UserProcess+0x1c>)
 800bbaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbae:	bf00      	nop
 800bbb0:	0800bbdd 	.word	0x0800bbdd
 800bbb4:	0800bbcd 	.word	0x0800bbcd
 800bbb8:	0800bbdd 	.word	0x0800bbdd
 800bbbc:	0800bbd5 	.word	0x0800bbd5
 800bbc0:	0800bbc5 	.word	0x0800bbc5
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800bbc4:	4b09      	ldr	r3, [pc, #36]	; (800bbec <USBH_UserProcess+0x58>)
 800bbc6:	2203      	movs	r2, #3
 800bbc8:	701a      	strb	r2, [r3, #0]
  break;
 800bbca:	e008      	b.n	800bbde <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800bbcc:	4b07      	ldr	r3, [pc, #28]	; (800bbec <USBH_UserProcess+0x58>)
 800bbce:	2202      	movs	r2, #2
 800bbd0:	701a      	strb	r2, [r3, #0]
  break;
 800bbd2:	e004      	b.n	800bbde <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800bbd4:	4b05      	ldr	r3, [pc, #20]	; (800bbec <USBH_UserProcess+0x58>)
 800bbd6:	2201      	movs	r2, #1
 800bbd8:	701a      	strb	r2, [r3, #0]
  break;
 800bbda:	e000      	b.n	800bbde <USBH_UserProcess+0x4a>

  default:
  break;
 800bbdc:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800bbde:	bf00      	nop
 800bbe0:	370c      	adds	r7, #12
 800bbe2:	46bd      	mov	sp, r7
 800bbe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbe8:	4770      	bx	lr
 800bbea:	bf00      	nop
 800bbec:	200000bc 	.word	0x200000bc

0800bbf0 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800bbf0:	b580      	push	{r7, lr}
 800bbf2:	b08a      	sub	sp, #40	; 0x28
 800bbf4:	af00      	add	r7, sp, #0
 800bbf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bbf8:	f107 0314 	add.w	r3, r7, #20
 800bbfc:	2200      	movs	r2, #0
 800bbfe:	601a      	str	r2, [r3, #0]
 800bc00:	605a      	str	r2, [r3, #4]
 800bc02:	609a      	str	r2, [r3, #8]
 800bc04:	60da      	str	r2, [r3, #12]
 800bc06:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bc10:	d147      	bne.n	800bca2 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bc12:	2300      	movs	r3, #0
 800bc14:	613b      	str	r3, [r7, #16]
 800bc16:	4b25      	ldr	r3, [pc, #148]	; (800bcac <HAL_HCD_MspInit+0xbc>)
 800bc18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc1a:	4a24      	ldr	r2, [pc, #144]	; (800bcac <HAL_HCD_MspInit+0xbc>)
 800bc1c:	f043 0301 	orr.w	r3, r3, #1
 800bc20:	6313      	str	r3, [r2, #48]	; 0x30
 800bc22:	4b22      	ldr	r3, [pc, #136]	; (800bcac <HAL_HCD_MspInit+0xbc>)
 800bc24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc26:	f003 0301 	and.w	r3, r3, #1
 800bc2a:	613b      	str	r3, [r7, #16]
 800bc2c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800bc2e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bc32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800bc34:	2300      	movs	r3, #0
 800bc36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bc38:	2300      	movs	r3, #0
 800bc3a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800bc3c:	f107 0314 	add.w	r3, r7, #20
 800bc40:	4619      	mov	r1, r3
 800bc42:	481b      	ldr	r0, [pc, #108]	; (800bcb0 <HAL_HCD_MspInit+0xc0>)
 800bc44:	f7f7 fba6 	bl	8003394 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800bc48:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800bc4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bc4e:	2302      	movs	r3, #2
 800bc50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bc52:	2300      	movs	r3, #0
 800bc54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bc56:	2300      	movs	r3, #0
 800bc58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800bc5a:	230a      	movs	r3, #10
 800bc5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bc5e:	f107 0314 	add.w	r3, r7, #20
 800bc62:	4619      	mov	r1, r3
 800bc64:	4812      	ldr	r0, [pc, #72]	; (800bcb0 <HAL_HCD_MspInit+0xc0>)
 800bc66:	f7f7 fb95 	bl	8003394 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800bc6a:	4b10      	ldr	r3, [pc, #64]	; (800bcac <HAL_HCD_MspInit+0xbc>)
 800bc6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc6e:	4a0f      	ldr	r2, [pc, #60]	; (800bcac <HAL_HCD_MspInit+0xbc>)
 800bc70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bc74:	6353      	str	r3, [r2, #52]	; 0x34
 800bc76:	2300      	movs	r3, #0
 800bc78:	60fb      	str	r3, [r7, #12]
 800bc7a:	4b0c      	ldr	r3, [pc, #48]	; (800bcac <HAL_HCD_MspInit+0xbc>)
 800bc7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc7e:	4a0b      	ldr	r2, [pc, #44]	; (800bcac <HAL_HCD_MspInit+0xbc>)
 800bc80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800bc84:	6453      	str	r3, [r2, #68]	; 0x44
 800bc86:	4b09      	ldr	r3, [pc, #36]	; (800bcac <HAL_HCD_MspInit+0xbc>)
 800bc88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bc8e:	60fb      	str	r3, [r7, #12]
 800bc90:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800bc92:	2200      	movs	r2, #0
 800bc94:	2100      	movs	r1, #0
 800bc96:	2043      	movs	r0, #67	; 0x43
 800bc98:	f7f6 ff3b 	bl	8002b12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800bc9c:	2043      	movs	r0, #67	; 0x43
 800bc9e:	f7f6 ff54 	bl	8002b4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800bca2:	bf00      	nop
 800bca4:	3728      	adds	r7, #40	; 0x28
 800bca6:	46bd      	mov	sp, r7
 800bca8:	bd80      	pop	{r7, pc}
 800bcaa:	bf00      	nop
 800bcac:	40023800 	.word	0x40023800
 800bcb0:	40020000 	.word	0x40020000

0800bcb4 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800bcb4:	b580      	push	{r7, lr}
 800bcb6:	b082      	sub	sp, #8
 800bcb8:	af00      	add	r7, sp, #0
 800bcba:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800bcc2:	4618      	mov	r0, r3
 800bcc4:	f7ff f8db 	bl	800ae7e <USBH_LL_IncTimer>
}
 800bcc8:	bf00      	nop
 800bcca:	3708      	adds	r7, #8
 800bccc:	46bd      	mov	sp, r7
 800bcce:	bd80      	pop	{r7, pc}

0800bcd0 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800bcd0:	b580      	push	{r7, lr}
 800bcd2:	b082      	sub	sp, #8
 800bcd4:	af00      	add	r7, sp, #0
 800bcd6:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800bcde:	4618      	mov	r0, r3
 800bce0:	f7ff f913 	bl	800af0a <USBH_LL_Connect>
}
 800bce4:	bf00      	nop
 800bce6:	3708      	adds	r7, #8
 800bce8:	46bd      	mov	sp, r7
 800bcea:	bd80      	pop	{r7, pc}

0800bcec <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800bcec:	b580      	push	{r7, lr}
 800bcee:	b082      	sub	sp, #8
 800bcf0:	af00      	add	r7, sp, #0
 800bcf2:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800bcfa:	4618      	mov	r0, r3
 800bcfc:	f7ff f91c 	bl	800af38 <USBH_LL_Disconnect>
}
 800bd00:	bf00      	nop
 800bd02:	3708      	adds	r7, #8
 800bd04:	46bd      	mov	sp, r7
 800bd06:	bd80      	pop	{r7, pc}

0800bd08 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800bd08:	b480      	push	{r7}
 800bd0a:	b083      	sub	sp, #12
 800bd0c:	af00      	add	r7, sp, #0
 800bd0e:	6078      	str	r0, [r7, #4]
 800bd10:	460b      	mov	r3, r1
 800bd12:	70fb      	strb	r3, [r7, #3]
 800bd14:	4613      	mov	r3, r2
 800bd16:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800bd18:	bf00      	nop
 800bd1a:	370c      	adds	r7, #12
 800bd1c:	46bd      	mov	sp, r7
 800bd1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd22:	4770      	bx	lr

0800bd24 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800bd24:	b580      	push	{r7, lr}
 800bd26:	b082      	sub	sp, #8
 800bd28:	af00      	add	r7, sp, #0
 800bd2a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800bd32:	4618      	mov	r0, r3
 800bd34:	f7ff f8cd 	bl	800aed2 <USBH_LL_PortEnabled>
}
 800bd38:	bf00      	nop
 800bd3a:	3708      	adds	r7, #8
 800bd3c:	46bd      	mov	sp, r7
 800bd3e:	bd80      	pop	{r7, pc}

0800bd40 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800bd40:	b580      	push	{r7, lr}
 800bd42:	b082      	sub	sp, #8
 800bd44:	af00      	add	r7, sp, #0
 800bd46:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800bd4e:	4618      	mov	r0, r3
 800bd50:	f7ff f8cd 	bl	800aeee <USBH_LL_PortDisabled>
}
 800bd54:	bf00      	nop
 800bd56:	3708      	adds	r7, #8
 800bd58:	46bd      	mov	sp, r7
 800bd5a:	bd80      	pop	{r7, pc}

0800bd5c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800bd5c:	b580      	push	{r7, lr}
 800bd5e:	b082      	sub	sp, #8
 800bd60:	af00      	add	r7, sp, #0
 800bd62:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800bd6a:	2b01      	cmp	r3, #1
 800bd6c:	d12a      	bne.n	800bdc4 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800bd6e:	4a18      	ldr	r2, [pc, #96]	; (800bdd0 <USBH_LL_Init+0x74>)
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	4a15      	ldr	r2, [pc, #84]	; (800bdd0 <USBH_LL_Init+0x74>)
 800bd7a:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800bd7e:	4b14      	ldr	r3, [pc, #80]	; (800bdd0 <USBH_LL_Init+0x74>)
 800bd80:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800bd84:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800bd86:	4b12      	ldr	r3, [pc, #72]	; (800bdd0 <USBH_LL_Init+0x74>)
 800bd88:	2208      	movs	r2, #8
 800bd8a:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800bd8c:	4b10      	ldr	r3, [pc, #64]	; (800bdd0 <USBH_LL_Init+0x74>)
 800bd8e:	2201      	movs	r2, #1
 800bd90:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800bd92:	4b0f      	ldr	r3, [pc, #60]	; (800bdd0 <USBH_LL_Init+0x74>)
 800bd94:	2200      	movs	r2, #0
 800bd96:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800bd98:	4b0d      	ldr	r3, [pc, #52]	; (800bdd0 <USBH_LL_Init+0x74>)
 800bd9a:	2202      	movs	r2, #2
 800bd9c:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800bd9e:	4b0c      	ldr	r3, [pc, #48]	; (800bdd0 <USBH_LL_Init+0x74>)
 800bda0:	2200      	movs	r2, #0
 800bda2:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800bda4:	480a      	ldr	r0, [pc, #40]	; (800bdd0 <USBH_LL_Init+0x74>)
 800bda6:	f7f7 fcaa 	bl	80036fe <HAL_HCD_Init>
 800bdaa:	4603      	mov	r3, r0
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d001      	beq.n	800bdb4 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800bdb0:	f7f5 fe0a 	bl	80019c8 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800bdb4:	4806      	ldr	r0, [pc, #24]	; (800bdd0 <USBH_LL_Init+0x74>)
 800bdb6:	f7f8 f88e 	bl	8003ed6 <HAL_HCD_GetCurrentFrame>
 800bdba:	4603      	mov	r3, r0
 800bdbc:	4619      	mov	r1, r3
 800bdbe:	6878      	ldr	r0, [r7, #4]
 800bdc0:	f7ff f84e 	bl	800ae60 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800bdc4:	2300      	movs	r3, #0
}
 800bdc6:	4618      	mov	r0, r3
 800bdc8:	3708      	adds	r7, #8
 800bdca:	46bd      	mov	sp, r7
 800bdcc:	bd80      	pop	{r7, pc}
 800bdce:	bf00      	nop
 800bdd0:	20000b28 	.word	0x20000b28

0800bdd4 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800bdd4:	b580      	push	{r7, lr}
 800bdd6:	b084      	sub	sp, #16
 800bdd8:	af00      	add	r7, sp, #0
 800bdda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bddc:	2300      	movs	r3, #0
 800bdde:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bde0:	2300      	movs	r3, #0
 800bde2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800bdea:	4618      	mov	r0, r3
 800bdec:	f7f7 fffd 	bl	8003dea <HAL_HCD_Start>
 800bdf0:	4603      	mov	r3, r0
 800bdf2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800bdf4:	7bfb      	ldrb	r3, [r7, #15]
 800bdf6:	4618      	mov	r0, r3
 800bdf8:	f000 f95c 	bl	800c0b4 <USBH_Get_USB_Status>
 800bdfc:	4603      	mov	r3, r0
 800bdfe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800be00:	7bbb      	ldrb	r3, [r7, #14]
}
 800be02:	4618      	mov	r0, r3
 800be04:	3710      	adds	r7, #16
 800be06:	46bd      	mov	sp, r7
 800be08:	bd80      	pop	{r7, pc}

0800be0a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800be0a:	b580      	push	{r7, lr}
 800be0c:	b084      	sub	sp, #16
 800be0e:	af00      	add	r7, sp, #0
 800be10:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800be12:	2300      	movs	r3, #0
 800be14:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800be16:	2300      	movs	r3, #0
 800be18:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800be20:	4618      	mov	r0, r3
 800be22:	f7f8 f805 	bl	8003e30 <HAL_HCD_Stop>
 800be26:	4603      	mov	r3, r0
 800be28:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800be2a:	7bfb      	ldrb	r3, [r7, #15]
 800be2c:	4618      	mov	r0, r3
 800be2e:	f000 f941 	bl	800c0b4 <USBH_Get_USB_Status>
 800be32:	4603      	mov	r3, r0
 800be34:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800be36:	7bbb      	ldrb	r3, [r7, #14]
}
 800be38:	4618      	mov	r0, r3
 800be3a:	3710      	adds	r7, #16
 800be3c:	46bd      	mov	sp, r7
 800be3e:	bd80      	pop	{r7, pc}

0800be40 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800be40:	b580      	push	{r7, lr}
 800be42:	b084      	sub	sp, #16
 800be44:	af00      	add	r7, sp, #0
 800be46:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800be48:	2301      	movs	r3, #1
 800be4a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800be52:	4618      	mov	r0, r3
 800be54:	f7f8 f84d 	bl	8003ef2 <HAL_HCD_GetCurrentSpeed>
 800be58:	4603      	mov	r3, r0
 800be5a:	2b02      	cmp	r3, #2
 800be5c:	d00c      	beq.n	800be78 <USBH_LL_GetSpeed+0x38>
 800be5e:	2b02      	cmp	r3, #2
 800be60:	d80d      	bhi.n	800be7e <USBH_LL_GetSpeed+0x3e>
 800be62:	2b00      	cmp	r3, #0
 800be64:	d002      	beq.n	800be6c <USBH_LL_GetSpeed+0x2c>
 800be66:	2b01      	cmp	r3, #1
 800be68:	d003      	beq.n	800be72 <USBH_LL_GetSpeed+0x32>
 800be6a:	e008      	b.n	800be7e <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800be6c:	2300      	movs	r3, #0
 800be6e:	73fb      	strb	r3, [r7, #15]
    break;
 800be70:	e008      	b.n	800be84 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800be72:	2301      	movs	r3, #1
 800be74:	73fb      	strb	r3, [r7, #15]
    break;
 800be76:	e005      	b.n	800be84 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800be78:	2302      	movs	r3, #2
 800be7a:	73fb      	strb	r3, [r7, #15]
    break;
 800be7c:	e002      	b.n	800be84 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800be7e:	2301      	movs	r3, #1
 800be80:	73fb      	strb	r3, [r7, #15]
    break;
 800be82:	bf00      	nop
  }
  return  speed;
 800be84:	7bfb      	ldrb	r3, [r7, #15]
}
 800be86:	4618      	mov	r0, r3
 800be88:	3710      	adds	r7, #16
 800be8a:	46bd      	mov	sp, r7
 800be8c:	bd80      	pop	{r7, pc}

0800be8e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800be8e:	b580      	push	{r7, lr}
 800be90:	b084      	sub	sp, #16
 800be92:	af00      	add	r7, sp, #0
 800be94:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800be96:	2300      	movs	r3, #0
 800be98:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800be9a:	2300      	movs	r3, #0
 800be9c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800bea4:	4618      	mov	r0, r3
 800bea6:	f7f7 ffe0 	bl	8003e6a <HAL_HCD_ResetPort>
 800beaa:	4603      	mov	r3, r0
 800beac:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800beae:	7bfb      	ldrb	r3, [r7, #15]
 800beb0:	4618      	mov	r0, r3
 800beb2:	f000 f8ff 	bl	800c0b4 <USBH_Get_USB_Status>
 800beb6:	4603      	mov	r3, r0
 800beb8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800beba:	7bbb      	ldrb	r3, [r7, #14]
}
 800bebc:	4618      	mov	r0, r3
 800bebe:	3710      	adds	r7, #16
 800bec0:	46bd      	mov	sp, r7
 800bec2:	bd80      	pop	{r7, pc}

0800bec4 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800bec4:	b580      	push	{r7, lr}
 800bec6:	b082      	sub	sp, #8
 800bec8:	af00      	add	r7, sp, #0
 800beca:	6078      	str	r0, [r7, #4]
 800becc:	460b      	mov	r3, r1
 800bece:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800bed6:	78fa      	ldrb	r2, [r7, #3]
 800bed8:	4611      	mov	r1, r2
 800beda:	4618      	mov	r0, r3
 800bedc:	f7f7 ffe7 	bl	8003eae <HAL_HCD_HC_GetXferCount>
 800bee0:	4603      	mov	r3, r0
}
 800bee2:	4618      	mov	r0, r3
 800bee4:	3708      	adds	r7, #8
 800bee6:	46bd      	mov	sp, r7
 800bee8:	bd80      	pop	{r7, pc}

0800beea <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800beea:	b590      	push	{r4, r7, lr}
 800beec:	b089      	sub	sp, #36	; 0x24
 800beee:	af04      	add	r7, sp, #16
 800bef0:	6078      	str	r0, [r7, #4]
 800bef2:	4608      	mov	r0, r1
 800bef4:	4611      	mov	r1, r2
 800bef6:	461a      	mov	r2, r3
 800bef8:	4603      	mov	r3, r0
 800befa:	70fb      	strb	r3, [r7, #3]
 800befc:	460b      	mov	r3, r1
 800befe:	70bb      	strb	r3, [r7, #2]
 800bf00:	4613      	mov	r3, r2
 800bf02:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bf04:	2300      	movs	r3, #0
 800bf06:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bf08:	2300      	movs	r3, #0
 800bf0a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800bf12:	787c      	ldrb	r4, [r7, #1]
 800bf14:	78ba      	ldrb	r2, [r7, #2]
 800bf16:	78f9      	ldrb	r1, [r7, #3]
 800bf18:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800bf1a:	9302      	str	r3, [sp, #8]
 800bf1c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800bf20:	9301      	str	r3, [sp, #4]
 800bf22:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bf26:	9300      	str	r3, [sp, #0]
 800bf28:	4623      	mov	r3, r4
 800bf2a:	f7f7 fc4a 	bl	80037c2 <HAL_HCD_HC_Init>
 800bf2e:	4603      	mov	r3, r0
 800bf30:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800bf32:	7bfb      	ldrb	r3, [r7, #15]
 800bf34:	4618      	mov	r0, r3
 800bf36:	f000 f8bd 	bl	800c0b4 <USBH_Get_USB_Status>
 800bf3a:	4603      	mov	r3, r0
 800bf3c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bf3e:	7bbb      	ldrb	r3, [r7, #14]
}
 800bf40:	4618      	mov	r0, r3
 800bf42:	3714      	adds	r7, #20
 800bf44:	46bd      	mov	sp, r7
 800bf46:	bd90      	pop	{r4, r7, pc}

0800bf48 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800bf48:	b580      	push	{r7, lr}
 800bf4a:	b084      	sub	sp, #16
 800bf4c:	af00      	add	r7, sp, #0
 800bf4e:	6078      	str	r0, [r7, #4]
 800bf50:	460b      	mov	r3, r1
 800bf52:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bf54:	2300      	movs	r3, #0
 800bf56:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bf58:	2300      	movs	r3, #0
 800bf5a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800bf62:	78fa      	ldrb	r2, [r7, #3]
 800bf64:	4611      	mov	r1, r2
 800bf66:	4618      	mov	r0, r3
 800bf68:	f7f7 fcba 	bl	80038e0 <HAL_HCD_HC_Halt>
 800bf6c:	4603      	mov	r3, r0
 800bf6e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800bf70:	7bfb      	ldrb	r3, [r7, #15]
 800bf72:	4618      	mov	r0, r3
 800bf74:	f000 f89e 	bl	800c0b4 <USBH_Get_USB_Status>
 800bf78:	4603      	mov	r3, r0
 800bf7a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bf7c:	7bbb      	ldrb	r3, [r7, #14]
}
 800bf7e:	4618      	mov	r0, r3
 800bf80:	3710      	adds	r7, #16
 800bf82:	46bd      	mov	sp, r7
 800bf84:	bd80      	pop	{r7, pc}

0800bf86 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800bf86:	b590      	push	{r4, r7, lr}
 800bf88:	b089      	sub	sp, #36	; 0x24
 800bf8a:	af04      	add	r7, sp, #16
 800bf8c:	6078      	str	r0, [r7, #4]
 800bf8e:	4608      	mov	r0, r1
 800bf90:	4611      	mov	r1, r2
 800bf92:	461a      	mov	r2, r3
 800bf94:	4603      	mov	r3, r0
 800bf96:	70fb      	strb	r3, [r7, #3]
 800bf98:	460b      	mov	r3, r1
 800bf9a:	70bb      	strb	r3, [r7, #2]
 800bf9c:	4613      	mov	r3, r2
 800bf9e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bfa0:	2300      	movs	r3, #0
 800bfa2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bfa4:	2300      	movs	r3, #0
 800bfa6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800bfae:	787c      	ldrb	r4, [r7, #1]
 800bfb0:	78ba      	ldrb	r2, [r7, #2]
 800bfb2:	78f9      	ldrb	r1, [r7, #3]
 800bfb4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800bfb8:	9303      	str	r3, [sp, #12]
 800bfba:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800bfbc:	9302      	str	r3, [sp, #8]
 800bfbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfc0:	9301      	str	r3, [sp, #4]
 800bfc2:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bfc6:	9300      	str	r3, [sp, #0]
 800bfc8:	4623      	mov	r3, r4
 800bfca:	f7f7 fcad 	bl	8003928 <HAL_HCD_HC_SubmitRequest>
 800bfce:	4603      	mov	r3, r0
 800bfd0:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800bfd2:	7bfb      	ldrb	r3, [r7, #15]
 800bfd4:	4618      	mov	r0, r3
 800bfd6:	f000 f86d 	bl	800c0b4 <USBH_Get_USB_Status>
 800bfda:	4603      	mov	r3, r0
 800bfdc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bfde:	7bbb      	ldrb	r3, [r7, #14]
}
 800bfe0:	4618      	mov	r0, r3
 800bfe2:	3714      	adds	r7, #20
 800bfe4:	46bd      	mov	sp, r7
 800bfe6:	bd90      	pop	{r4, r7, pc}

0800bfe8 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800bfe8:	b580      	push	{r7, lr}
 800bfea:	b082      	sub	sp, #8
 800bfec:	af00      	add	r7, sp, #0
 800bfee:	6078      	str	r0, [r7, #4]
 800bff0:	460b      	mov	r3, r1
 800bff2:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800bffa:	78fa      	ldrb	r2, [r7, #3]
 800bffc:	4611      	mov	r1, r2
 800bffe:	4618      	mov	r0, r3
 800c000:	f7f7 ff41 	bl	8003e86 <HAL_HCD_HC_GetURBState>
 800c004:	4603      	mov	r3, r0
}
 800c006:	4618      	mov	r0, r3
 800c008:	3708      	adds	r7, #8
 800c00a:	46bd      	mov	sp, r7
 800c00c:	bd80      	pop	{r7, pc}

0800c00e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800c00e:	b580      	push	{r7, lr}
 800c010:	b082      	sub	sp, #8
 800c012:	af00      	add	r7, sp, #0
 800c014:	6078      	str	r0, [r7, #4]
 800c016:	460b      	mov	r3, r1
 800c018:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800c020:	2b01      	cmp	r3, #1
 800c022:	d103      	bne.n	800c02c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800c024:	78fb      	ldrb	r3, [r7, #3]
 800c026:	4618      	mov	r0, r3
 800c028:	f000 f870 	bl	800c10c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800c02c:	20c8      	movs	r0, #200	; 0xc8
 800c02e:	f7f6 fc71 	bl	8002914 <HAL_Delay>
  return USBH_OK;
 800c032:	2300      	movs	r3, #0
}
 800c034:	4618      	mov	r0, r3
 800c036:	3708      	adds	r7, #8
 800c038:	46bd      	mov	sp, r7
 800c03a:	bd80      	pop	{r7, pc}

0800c03c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800c03c:	b480      	push	{r7}
 800c03e:	b085      	sub	sp, #20
 800c040:	af00      	add	r7, sp, #0
 800c042:	6078      	str	r0, [r7, #4]
 800c044:	460b      	mov	r3, r1
 800c046:	70fb      	strb	r3, [r7, #3]
 800c048:	4613      	mov	r3, r2
 800c04a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c052:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800c054:	78fb      	ldrb	r3, [r7, #3]
 800c056:	68fa      	ldr	r2, [r7, #12]
 800c058:	212c      	movs	r1, #44	; 0x2c
 800c05a:	fb01 f303 	mul.w	r3, r1, r3
 800c05e:	4413      	add	r3, r2
 800c060:	333b      	adds	r3, #59	; 0x3b
 800c062:	781b      	ldrb	r3, [r3, #0]
 800c064:	2b00      	cmp	r3, #0
 800c066:	d009      	beq.n	800c07c <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800c068:	78fb      	ldrb	r3, [r7, #3]
 800c06a:	68fa      	ldr	r2, [r7, #12]
 800c06c:	212c      	movs	r1, #44	; 0x2c
 800c06e:	fb01 f303 	mul.w	r3, r1, r3
 800c072:	4413      	add	r3, r2
 800c074:	3354      	adds	r3, #84	; 0x54
 800c076:	78ba      	ldrb	r2, [r7, #2]
 800c078:	701a      	strb	r2, [r3, #0]
 800c07a:	e008      	b.n	800c08e <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800c07c:	78fb      	ldrb	r3, [r7, #3]
 800c07e:	68fa      	ldr	r2, [r7, #12]
 800c080:	212c      	movs	r1, #44	; 0x2c
 800c082:	fb01 f303 	mul.w	r3, r1, r3
 800c086:	4413      	add	r3, r2
 800c088:	3355      	adds	r3, #85	; 0x55
 800c08a:	78ba      	ldrb	r2, [r7, #2]
 800c08c:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800c08e:	2300      	movs	r3, #0
}
 800c090:	4618      	mov	r0, r3
 800c092:	3714      	adds	r7, #20
 800c094:	46bd      	mov	sp, r7
 800c096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c09a:	4770      	bx	lr

0800c09c <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800c09c:	b580      	push	{r7, lr}
 800c09e:	b082      	sub	sp, #8
 800c0a0:	af00      	add	r7, sp, #0
 800c0a2:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800c0a4:	6878      	ldr	r0, [r7, #4]
 800c0a6:	f7f6 fc35 	bl	8002914 <HAL_Delay>
}
 800c0aa:	bf00      	nop
 800c0ac:	3708      	adds	r7, #8
 800c0ae:	46bd      	mov	sp, r7
 800c0b0:	bd80      	pop	{r7, pc}
	...

0800c0b4 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c0b4:	b480      	push	{r7}
 800c0b6:	b085      	sub	sp, #20
 800c0b8:	af00      	add	r7, sp, #0
 800c0ba:	4603      	mov	r3, r0
 800c0bc:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c0be:	2300      	movs	r3, #0
 800c0c0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c0c2:	79fb      	ldrb	r3, [r7, #7]
 800c0c4:	2b03      	cmp	r3, #3
 800c0c6:	d817      	bhi.n	800c0f8 <USBH_Get_USB_Status+0x44>
 800c0c8:	a201      	add	r2, pc, #4	; (adr r2, 800c0d0 <USBH_Get_USB_Status+0x1c>)
 800c0ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0ce:	bf00      	nop
 800c0d0:	0800c0e1 	.word	0x0800c0e1
 800c0d4:	0800c0e7 	.word	0x0800c0e7
 800c0d8:	0800c0ed 	.word	0x0800c0ed
 800c0dc:	0800c0f3 	.word	0x0800c0f3
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800c0e0:	2300      	movs	r3, #0
 800c0e2:	73fb      	strb	r3, [r7, #15]
    break;
 800c0e4:	e00b      	b.n	800c0fe <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800c0e6:	2302      	movs	r3, #2
 800c0e8:	73fb      	strb	r3, [r7, #15]
    break;
 800c0ea:	e008      	b.n	800c0fe <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800c0ec:	2301      	movs	r3, #1
 800c0ee:	73fb      	strb	r3, [r7, #15]
    break;
 800c0f0:	e005      	b.n	800c0fe <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800c0f2:	2302      	movs	r3, #2
 800c0f4:	73fb      	strb	r3, [r7, #15]
    break;
 800c0f6:	e002      	b.n	800c0fe <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800c0f8:	2302      	movs	r3, #2
 800c0fa:	73fb      	strb	r3, [r7, #15]
    break;
 800c0fc:	bf00      	nop
  }
  return usb_status;
 800c0fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800c100:	4618      	mov	r0, r3
 800c102:	3714      	adds	r7, #20
 800c104:	46bd      	mov	sp, r7
 800c106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c10a:	4770      	bx	lr

0800c10c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800c10c:	b580      	push	{r7, lr}
 800c10e:	b084      	sub	sp, #16
 800c110:	af00      	add	r7, sp, #0
 800c112:	4603      	mov	r3, r0
 800c114:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800c116:	79fb      	ldrb	r3, [r7, #7]
 800c118:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800c11a:	79fb      	ldrb	r3, [r7, #7]
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d102      	bne.n	800c126 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800c120:	2300      	movs	r3, #0
 800c122:	73fb      	strb	r3, [r7, #15]
 800c124:	e001      	b.n	800c12a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800c126:	2301      	movs	r3, #1
 800c128:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800c12a:	7bfb      	ldrb	r3, [r7, #15]
 800c12c:	461a      	mov	r2, r3
 800c12e:	2101      	movs	r1, #1
 800c130:	4803      	ldr	r0, [pc, #12]	; (800c140 <MX_DriverVbusFS+0x34>)
 800c132:	f7f7 facb 	bl	80036cc <HAL_GPIO_WritePin>
}
 800c136:	bf00      	nop
 800c138:	3710      	adds	r7, #16
 800c13a:	46bd      	mov	sp, r7
 800c13c:	bd80      	pop	{r7, pc}
 800c13e:	bf00      	nop
 800c140:	40020800 	.word	0x40020800

0800c144 <__errno>:
 800c144:	4b01      	ldr	r3, [pc, #4]	; (800c14c <__errno+0x8>)
 800c146:	6818      	ldr	r0, [r3, #0]
 800c148:	4770      	bx	lr
 800c14a:	bf00      	nop
 800c14c:	20000034 	.word	0x20000034

0800c150 <__libc_init_array>:
 800c150:	b570      	push	{r4, r5, r6, lr}
 800c152:	4d0d      	ldr	r5, [pc, #52]	; (800c188 <__libc_init_array+0x38>)
 800c154:	4c0d      	ldr	r4, [pc, #52]	; (800c18c <__libc_init_array+0x3c>)
 800c156:	1b64      	subs	r4, r4, r5
 800c158:	10a4      	asrs	r4, r4, #2
 800c15a:	2600      	movs	r6, #0
 800c15c:	42a6      	cmp	r6, r4
 800c15e:	d109      	bne.n	800c174 <__libc_init_array+0x24>
 800c160:	4d0b      	ldr	r5, [pc, #44]	; (800c190 <__libc_init_array+0x40>)
 800c162:	4c0c      	ldr	r4, [pc, #48]	; (800c194 <__libc_init_array+0x44>)
 800c164:	f000 fe80 	bl	800ce68 <_init>
 800c168:	1b64      	subs	r4, r4, r5
 800c16a:	10a4      	asrs	r4, r4, #2
 800c16c:	2600      	movs	r6, #0
 800c16e:	42a6      	cmp	r6, r4
 800c170:	d105      	bne.n	800c17e <__libc_init_array+0x2e>
 800c172:	bd70      	pop	{r4, r5, r6, pc}
 800c174:	f855 3b04 	ldr.w	r3, [r5], #4
 800c178:	4798      	blx	r3
 800c17a:	3601      	adds	r6, #1
 800c17c:	e7ee      	b.n	800c15c <__libc_init_array+0xc>
 800c17e:	f855 3b04 	ldr.w	r3, [r5], #4
 800c182:	4798      	blx	r3
 800c184:	3601      	adds	r6, #1
 800c186:	e7f2      	b.n	800c16e <__libc_init_array+0x1e>
 800c188:	0800d060 	.word	0x0800d060
 800c18c:	0800d060 	.word	0x0800d060
 800c190:	0800d060 	.word	0x0800d060
 800c194:	0800d064 	.word	0x0800d064

0800c198 <malloc>:
 800c198:	4b02      	ldr	r3, [pc, #8]	; (800c1a4 <malloc+0xc>)
 800c19a:	4601      	mov	r1, r0
 800c19c:	6818      	ldr	r0, [r3, #0]
 800c19e:	f000 b863 	b.w	800c268 <_malloc_r>
 800c1a2:	bf00      	nop
 800c1a4:	20000034 	.word	0x20000034

0800c1a8 <free>:
 800c1a8:	4b02      	ldr	r3, [pc, #8]	; (800c1b4 <free+0xc>)
 800c1aa:	4601      	mov	r1, r0
 800c1ac:	6818      	ldr	r0, [r3, #0]
 800c1ae:	f000 b80b 	b.w	800c1c8 <_free_r>
 800c1b2:	bf00      	nop
 800c1b4:	20000034 	.word	0x20000034

0800c1b8 <memset>:
 800c1b8:	4402      	add	r2, r0
 800c1ba:	4603      	mov	r3, r0
 800c1bc:	4293      	cmp	r3, r2
 800c1be:	d100      	bne.n	800c1c2 <memset+0xa>
 800c1c0:	4770      	bx	lr
 800c1c2:	f803 1b01 	strb.w	r1, [r3], #1
 800c1c6:	e7f9      	b.n	800c1bc <memset+0x4>

0800c1c8 <_free_r>:
 800c1c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c1ca:	2900      	cmp	r1, #0
 800c1cc:	d048      	beq.n	800c260 <_free_r+0x98>
 800c1ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c1d2:	9001      	str	r0, [sp, #4]
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	f1a1 0404 	sub.w	r4, r1, #4
 800c1da:	bfb8      	it	lt
 800c1dc:	18e4      	addlt	r4, r4, r3
 800c1de:	f000 f8cd 	bl	800c37c <__malloc_lock>
 800c1e2:	4a20      	ldr	r2, [pc, #128]	; (800c264 <_free_r+0x9c>)
 800c1e4:	9801      	ldr	r0, [sp, #4]
 800c1e6:	6813      	ldr	r3, [r2, #0]
 800c1e8:	4615      	mov	r5, r2
 800c1ea:	b933      	cbnz	r3, 800c1fa <_free_r+0x32>
 800c1ec:	6063      	str	r3, [r4, #4]
 800c1ee:	6014      	str	r4, [r2, #0]
 800c1f0:	b003      	add	sp, #12
 800c1f2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c1f6:	f000 b8c7 	b.w	800c388 <__malloc_unlock>
 800c1fa:	42a3      	cmp	r3, r4
 800c1fc:	d90b      	bls.n	800c216 <_free_r+0x4e>
 800c1fe:	6821      	ldr	r1, [r4, #0]
 800c200:	1862      	adds	r2, r4, r1
 800c202:	4293      	cmp	r3, r2
 800c204:	bf04      	itt	eq
 800c206:	681a      	ldreq	r2, [r3, #0]
 800c208:	685b      	ldreq	r3, [r3, #4]
 800c20a:	6063      	str	r3, [r4, #4]
 800c20c:	bf04      	itt	eq
 800c20e:	1852      	addeq	r2, r2, r1
 800c210:	6022      	streq	r2, [r4, #0]
 800c212:	602c      	str	r4, [r5, #0]
 800c214:	e7ec      	b.n	800c1f0 <_free_r+0x28>
 800c216:	461a      	mov	r2, r3
 800c218:	685b      	ldr	r3, [r3, #4]
 800c21a:	b10b      	cbz	r3, 800c220 <_free_r+0x58>
 800c21c:	42a3      	cmp	r3, r4
 800c21e:	d9fa      	bls.n	800c216 <_free_r+0x4e>
 800c220:	6811      	ldr	r1, [r2, #0]
 800c222:	1855      	adds	r5, r2, r1
 800c224:	42a5      	cmp	r5, r4
 800c226:	d10b      	bne.n	800c240 <_free_r+0x78>
 800c228:	6824      	ldr	r4, [r4, #0]
 800c22a:	4421      	add	r1, r4
 800c22c:	1854      	adds	r4, r2, r1
 800c22e:	42a3      	cmp	r3, r4
 800c230:	6011      	str	r1, [r2, #0]
 800c232:	d1dd      	bne.n	800c1f0 <_free_r+0x28>
 800c234:	681c      	ldr	r4, [r3, #0]
 800c236:	685b      	ldr	r3, [r3, #4]
 800c238:	6053      	str	r3, [r2, #4]
 800c23a:	4421      	add	r1, r4
 800c23c:	6011      	str	r1, [r2, #0]
 800c23e:	e7d7      	b.n	800c1f0 <_free_r+0x28>
 800c240:	d902      	bls.n	800c248 <_free_r+0x80>
 800c242:	230c      	movs	r3, #12
 800c244:	6003      	str	r3, [r0, #0]
 800c246:	e7d3      	b.n	800c1f0 <_free_r+0x28>
 800c248:	6825      	ldr	r5, [r4, #0]
 800c24a:	1961      	adds	r1, r4, r5
 800c24c:	428b      	cmp	r3, r1
 800c24e:	bf04      	itt	eq
 800c250:	6819      	ldreq	r1, [r3, #0]
 800c252:	685b      	ldreq	r3, [r3, #4]
 800c254:	6063      	str	r3, [r4, #4]
 800c256:	bf04      	itt	eq
 800c258:	1949      	addeq	r1, r1, r5
 800c25a:	6021      	streq	r1, [r4, #0]
 800c25c:	6054      	str	r4, [r2, #4]
 800c25e:	e7c7      	b.n	800c1f0 <_free_r+0x28>
 800c260:	b003      	add	sp, #12
 800c262:	bd30      	pop	{r4, r5, pc}
 800c264:	200000c0 	.word	0x200000c0

0800c268 <_malloc_r>:
 800c268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c26a:	1ccd      	adds	r5, r1, #3
 800c26c:	f025 0503 	bic.w	r5, r5, #3
 800c270:	3508      	adds	r5, #8
 800c272:	2d0c      	cmp	r5, #12
 800c274:	bf38      	it	cc
 800c276:	250c      	movcc	r5, #12
 800c278:	2d00      	cmp	r5, #0
 800c27a:	4606      	mov	r6, r0
 800c27c:	db01      	blt.n	800c282 <_malloc_r+0x1a>
 800c27e:	42a9      	cmp	r1, r5
 800c280:	d903      	bls.n	800c28a <_malloc_r+0x22>
 800c282:	230c      	movs	r3, #12
 800c284:	6033      	str	r3, [r6, #0]
 800c286:	2000      	movs	r0, #0
 800c288:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c28a:	f000 f877 	bl	800c37c <__malloc_lock>
 800c28e:	4921      	ldr	r1, [pc, #132]	; (800c314 <_malloc_r+0xac>)
 800c290:	680a      	ldr	r2, [r1, #0]
 800c292:	4614      	mov	r4, r2
 800c294:	b99c      	cbnz	r4, 800c2be <_malloc_r+0x56>
 800c296:	4f20      	ldr	r7, [pc, #128]	; (800c318 <_malloc_r+0xb0>)
 800c298:	683b      	ldr	r3, [r7, #0]
 800c29a:	b923      	cbnz	r3, 800c2a6 <_malloc_r+0x3e>
 800c29c:	4621      	mov	r1, r4
 800c29e:	4630      	mov	r0, r6
 800c2a0:	f000 f83c 	bl	800c31c <_sbrk_r>
 800c2a4:	6038      	str	r0, [r7, #0]
 800c2a6:	4629      	mov	r1, r5
 800c2a8:	4630      	mov	r0, r6
 800c2aa:	f000 f837 	bl	800c31c <_sbrk_r>
 800c2ae:	1c43      	adds	r3, r0, #1
 800c2b0:	d123      	bne.n	800c2fa <_malloc_r+0x92>
 800c2b2:	230c      	movs	r3, #12
 800c2b4:	6033      	str	r3, [r6, #0]
 800c2b6:	4630      	mov	r0, r6
 800c2b8:	f000 f866 	bl	800c388 <__malloc_unlock>
 800c2bc:	e7e3      	b.n	800c286 <_malloc_r+0x1e>
 800c2be:	6823      	ldr	r3, [r4, #0]
 800c2c0:	1b5b      	subs	r3, r3, r5
 800c2c2:	d417      	bmi.n	800c2f4 <_malloc_r+0x8c>
 800c2c4:	2b0b      	cmp	r3, #11
 800c2c6:	d903      	bls.n	800c2d0 <_malloc_r+0x68>
 800c2c8:	6023      	str	r3, [r4, #0]
 800c2ca:	441c      	add	r4, r3
 800c2cc:	6025      	str	r5, [r4, #0]
 800c2ce:	e004      	b.n	800c2da <_malloc_r+0x72>
 800c2d0:	6863      	ldr	r3, [r4, #4]
 800c2d2:	42a2      	cmp	r2, r4
 800c2d4:	bf0c      	ite	eq
 800c2d6:	600b      	streq	r3, [r1, #0]
 800c2d8:	6053      	strne	r3, [r2, #4]
 800c2da:	4630      	mov	r0, r6
 800c2dc:	f000 f854 	bl	800c388 <__malloc_unlock>
 800c2e0:	f104 000b 	add.w	r0, r4, #11
 800c2e4:	1d23      	adds	r3, r4, #4
 800c2e6:	f020 0007 	bic.w	r0, r0, #7
 800c2ea:	1ac2      	subs	r2, r0, r3
 800c2ec:	d0cc      	beq.n	800c288 <_malloc_r+0x20>
 800c2ee:	1a1b      	subs	r3, r3, r0
 800c2f0:	50a3      	str	r3, [r4, r2]
 800c2f2:	e7c9      	b.n	800c288 <_malloc_r+0x20>
 800c2f4:	4622      	mov	r2, r4
 800c2f6:	6864      	ldr	r4, [r4, #4]
 800c2f8:	e7cc      	b.n	800c294 <_malloc_r+0x2c>
 800c2fa:	1cc4      	adds	r4, r0, #3
 800c2fc:	f024 0403 	bic.w	r4, r4, #3
 800c300:	42a0      	cmp	r0, r4
 800c302:	d0e3      	beq.n	800c2cc <_malloc_r+0x64>
 800c304:	1a21      	subs	r1, r4, r0
 800c306:	4630      	mov	r0, r6
 800c308:	f000 f808 	bl	800c31c <_sbrk_r>
 800c30c:	3001      	adds	r0, #1
 800c30e:	d1dd      	bne.n	800c2cc <_malloc_r+0x64>
 800c310:	e7cf      	b.n	800c2b2 <_malloc_r+0x4a>
 800c312:	bf00      	nop
 800c314:	200000c0 	.word	0x200000c0
 800c318:	200000c4 	.word	0x200000c4

0800c31c <_sbrk_r>:
 800c31c:	b538      	push	{r3, r4, r5, lr}
 800c31e:	4d06      	ldr	r5, [pc, #24]	; (800c338 <_sbrk_r+0x1c>)
 800c320:	2300      	movs	r3, #0
 800c322:	4604      	mov	r4, r0
 800c324:	4608      	mov	r0, r1
 800c326:	602b      	str	r3, [r5, #0]
 800c328:	f7f5 fdaa 	bl	8001e80 <_sbrk>
 800c32c:	1c43      	adds	r3, r0, #1
 800c32e:	d102      	bne.n	800c336 <_sbrk_r+0x1a>
 800c330:	682b      	ldr	r3, [r5, #0]
 800c332:	b103      	cbz	r3, 800c336 <_sbrk_r+0x1a>
 800c334:	6023      	str	r3, [r4, #0]
 800c336:	bd38      	pop	{r3, r4, r5, pc}
 800c338:	20000e2c 	.word	0x20000e2c

0800c33c <siprintf>:
 800c33c:	b40e      	push	{r1, r2, r3}
 800c33e:	b500      	push	{lr}
 800c340:	b09c      	sub	sp, #112	; 0x70
 800c342:	ab1d      	add	r3, sp, #116	; 0x74
 800c344:	9002      	str	r0, [sp, #8]
 800c346:	9006      	str	r0, [sp, #24]
 800c348:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c34c:	4809      	ldr	r0, [pc, #36]	; (800c374 <siprintf+0x38>)
 800c34e:	9107      	str	r1, [sp, #28]
 800c350:	9104      	str	r1, [sp, #16]
 800c352:	4909      	ldr	r1, [pc, #36]	; (800c378 <siprintf+0x3c>)
 800c354:	f853 2b04 	ldr.w	r2, [r3], #4
 800c358:	9105      	str	r1, [sp, #20]
 800c35a:	6800      	ldr	r0, [r0, #0]
 800c35c:	9301      	str	r3, [sp, #4]
 800c35e:	a902      	add	r1, sp, #8
 800c360:	f000 f874 	bl	800c44c <_svfiprintf_r>
 800c364:	9b02      	ldr	r3, [sp, #8]
 800c366:	2200      	movs	r2, #0
 800c368:	701a      	strb	r2, [r3, #0]
 800c36a:	b01c      	add	sp, #112	; 0x70
 800c36c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c370:	b003      	add	sp, #12
 800c372:	4770      	bx	lr
 800c374:	20000034 	.word	0x20000034
 800c378:	ffff0208 	.word	0xffff0208

0800c37c <__malloc_lock>:
 800c37c:	4801      	ldr	r0, [pc, #4]	; (800c384 <__malloc_lock+0x8>)
 800c37e:	f000 baf9 	b.w	800c974 <__retarget_lock_acquire_recursive>
 800c382:	bf00      	nop
 800c384:	20000e34 	.word	0x20000e34

0800c388 <__malloc_unlock>:
 800c388:	4801      	ldr	r0, [pc, #4]	; (800c390 <__malloc_unlock+0x8>)
 800c38a:	f000 baf4 	b.w	800c976 <__retarget_lock_release_recursive>
 800c38e:	bf00      	nop
 800c390:	20000e34 	.word	0x20000e34

0800c394 <__ssputs_r>:
 800c394:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c398:	688e      	ldr	r6, [r1, #8]
 800c39a:	429e      	cmp	r6, r3
 800c39c:	4682      	mov	sl, r0
 800c39e:	460c      	mov	r4, r1
 800c3a0:	4690      	mov	r8, r2
 800c3a2:	461f      	mov	r7, r3
 800c3a4:	d838      	bhi.n	800c418 <__ssputs_r+0x84>
 800c3a6:	898a      	ldrh	r2, [r1, #12]
 800c3a8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c3ac:	d032      	beq.n	800c414 <__ssputs_r+0x80>
 800c3ae:	6825      	ldr	r5, [r4, #0]
 800c3b0:	6909      	ldr	r1, [r1, #16]
 800c3b2:	eba5 0901 	sub.w	r9, r5, r1
 800c3b6:	6965      	ldr	r5, [r4, #20]
 800c3b8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c3bc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c3c0:	3301      	adds	r3, #1
 800c3c2:	444b      	add	r3, r9
 800c3c4:	106d      	asrs	r5, r5, #1
 800c3c6:	429d      	cmp	r5, r3
 800c3c8:	bf38      	it	cc
 800c3ca:	461d      	movcc	r5, r3
 800c3cc:	0553      	lsls	r3, r2, #21
 800c3ce:	d531      	bpl.n	800c434 <__ssputs_r+0xa0>
 800c3d0:	4629      	mov	r1, r5
 800c3d2:	f7ff ff49 	bl	800c268 <_malloc_r>
 800c3d6:	4606      	mov	r6, r0
 800c3d8:	b950      	cbnz	r0, 800c3f0 <__ssputs_r+0x5c>
 800c3da:	230c      	movs	r3, #12
 800c3dc:	f8ca 3000 	str.w	r3, [sl]
 800c3e0:	89a3      	ldrh	r3, [r4, #12]
 800c3e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c3e6:	81a3      	strh	r3, [r4, #12]
 800c3e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c3ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c3f0:	6921      	ldr	r1, [r4, #16]
 800c3f2:	464a      	mov	r2, r9
 800c3f4:	f000 fac0 	bl	800c978 <memcpy>
 800c3f8:	89a3      	ldrh	r3, [r4, #12]
 800c3fa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c3fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c402:	81a3      	strh	r3, [r4, #12]
 800c404:	6126      	str	r6, [r4, #16]
 800c406:	6165      	str	r5, [r4, #20]
 800c408:	444e      	add	r6, r9
 800c40a:	eba5 0509 	sub.w	r5, r5, r9
 800c40e:	6026      	str	r6, [r4, #0]
 800c410:	60a5      	str	r5, [r4, #8]
 800c412:	463e      	mov	r6, r7
 800c414:	42be      	cmp	r6, r7
 800c416:	d900      	bls.n	800c41a <__ssputs_r+0x86>
 800c418:	463e      	mov	r6, r7
 800c41a:	4632      	mov	r2, r6
 800c41c:	6820      	ldr	r0, [r4, #0]
 800c41e:	4641      	mov	r1, r8
 800c420:	f000 fab8 	bl	800c994 <memmove>
 800c424:	68a3      	ldr	r3, [r4, #8]
 800c426:	6822      	ldr	r2, [r4, #0]
 800c428:	1b9b      	subs	r3, r3, r6
 800c42a:	4432      	add	r2, r6
 800c42c:	60a3      	str	r3, [r4, #8]
 800c42e:	6022      	str	r2, [r4, #0]
 800c430:	2000      	movs	r0, #0
 800c432:	e7db      	b.n	800c3ec <__ssputs_r+0x58>
 800c434:	462a      	mov	r2, r5
 800c436:	f000 fac7 	bl	800c9c8 <_realloc_r>
 800c43a:	4606      	mov	r6, r0
 800c43c:	2800      	cmp	r0, #0
 800c43e:	d1e1      	bne.n	800c404 <__ssputs_r+0x70>
 800c440:	6921      	ldr	r1, [r4, #16]
 800c442:	4650      	mov	r0, sl
 800c444:	f7ff fec0 	bl	800c1c8 <_free_r>
 800c448:	e7c7      	b.n	800c3da <__ssputs_r+0x46>
	...

0800c44c <_svfiprintf_r>:
 800c44c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c450:	4698      	mov	r8, r3
 800c452:	898b      	ldrh	r3, [r1, #12]
 800c454:	061b      	lsls	r3, r3, #24
 800c456:	b09d      	sub	sp, #116	; 0x74
 800c458:	4607      	mov	r7, r0
 800c45a:	460d      	mov	r5, r1
 800c45c:	4614      	mov	r4, r2
 800c45e:	d50e      	bpl.n	800c47e <_svfiprintf_r+0x32>
 800c460:	690b      	ldr	r3, [r1, #16]
 800c462:	b963      	cbnz	r3, 800c47e <_svfiprintf_r+0x32>
 800c464:	2140      	movs	r1, #64	; 0x40
 800c466:	f7ff feff 	bl	800c268 <_malloc_r>
 800c46a:	6028      	str	r0, [r5, #0]
 800c46c:	6128      	str	r0, [r5, #16]
 800c46e:	b920      	cbnz	r0, 800c47a <_svfiprintf_r+0x2e>
 800c470:	230c      	movs	r3, #12
 800c472:	603b      	str	r3, [r7, #0]
 800c474:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c478:	e0d1      	b.n	800c61e <_svfiprintf_r+0x1d2>
 800c47a:	2340      	movs	r3, #64	; 0x40
 800c47c:	616b      	str	r3, [r5, #20]
 800c47e:	2300      	movs	r3, #0
 800c480:	9309      	str	r3, [sp, #36]	; 0x24
 800c482:	2320      	movs	r3, #32
 800c484:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c488:	f8cd 800c 	str.w	r8, [sp, #12]
 800c48c:	2330      	movs	r3, #48	; 0x30
 800c48e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c638 <_svfiprintf_r+0x1ec>
 800c492:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c496:	f04f 0901 	mov.w	r9, #1
 800c49a:	4623      	mov	r3, r4
 800c49c:	469a      	mov	sl, r3
 800c49e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c4a2:	b10a      	cbz	r2, 800c4a8 <_svfiprintf_r+0x5c>
 800c4a4:	2a25      	cmp	r2, #37	; 0x25
 800c4a6:	d1f9      	bne.n	800c49c <_svfiprintf_r+0x50>
 800c4a8:	ebba 0b04 	subs.w	fp, sl, r4
 800c4ac:	d00b      	beq.n	800c4c6 <_svfiprintf_r+0x7a>
 800c4ae:	465b      	mov	r3, fp
 800c4b0:	4622      	mov	r2, r4
 800c4b2:	4629      	mov	r1, r5
 800c4b4:	4638      	mov	r0, r7
 800c4b6:	f7ff ff6d 	bl	800c394 <__ssputs_r>
 800c4ba:	3001      	adds	r0, #1
 800c4bc:	f000 80aa 	beq.w	800c614 <_svfiprintf_r+0x1c8>
 800c4c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c4c2:	445a      	add	r2, fp
 800c4c4:	9209      	str	r2, [sp, #36]	; 0x24
 800c4c6:	f89a 3000 	ldrb.w	r3, [sl]
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	f000 80a2 	beq.w	800c614 <_svfiprintf_r+0x1c8>
 800c4d0:	2300      	movs	r3, #0
 800c4d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c4d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c4da:	f10a 0a01 	add.w	sl, sl, #1
 800c4de:	9304      	str	r3, [sp, #16]
 800c4e0:	9307      	str	r3, [sp, #28]
 800c4e2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c4e6:	931a      	str	r3, [sp, #104]	; 0x68
 800c4e8:	4654      	mov	r4, sl
 800c4ea:	2205      	movs	r2, #5
 800c4ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c4f0:	4851      	ldr	r0, [pc, #324]	; (800c638 <_svfiprintf_r+0x1ec>)
 800c4f2:	f7f3 fe6d 	bl	80001d0 <memchr>
 800c4f6:	9a04      	ldr	r2, [sp, #16]
 800c4f8:	b9d8      	cbnz	r0, 800c532 <_svfiprintf_r+0xe6>
 800c4fa:	06d0      	lsls	r0, r2, #27
 800c4fc:	bf44      	itt	mi
 800c4fe:	2320      	movmi	r3, #32
 800c500:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c504:	0711      	lsls	r1, r2, #28
 800c506:	bf44      	itt	mi
 800c508:	232b      	movmi	r3, #43	; 0x2b
 800c50a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c50e:	f89a 3000 	ldrb.w	r3, [sl]
 800c512:	2b2a      	cmp	r3, #42	; 0x2a
 800c514:	d015      	beq.n	800c542 <_svfiprintf_r+0xf6>
 800c516:	9a07      	ldr	r2, [sp, #28]
 800c518:	4654      	mov	r4, sl
 800c51a:	2000      	movs	r0, #0
 800c51c:	f04f 0c0a 	mov.w	ip, #10
 800c520:	4621      	mov	r1, r4
 800c522:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c526:	3b30      	subs	r3, #48	; 0x30
 800c528:	2b09      	cmp	r3, #9
 800c52a:	d94e      	bls.n	800c5ca <_svfiprintf_r+0x17e>
 800c52c:	b1b0      	cbz	r0, 800c55c <_svfiprintf_r+0x110>
 800c52e:	9207      	str	r2, [sp, #28]
 800c530:	e014      	b.n	800c55c <_svfiprintf_r+0x110>
 800c532:	eba0 0308 	sub.w	r3, r0, r8
 800c536:	fa09 f303 	lsl.w	r3, r9, r3
 800c53a:	4313      	orrs	r3, r2
 800c53c:	9304      	str	r3, [sp, #16]
 800c53e:	46a2      	mov	sl, r4
 800c540:	e7d2      	b.n	800c4e8 <_svfiprintf_r+0x9c>
 800c542:	9b03      	ldr	r3, [sp, #12]
 800c544:	1d19      	adds	r1, r3, #4
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	9103      	str	r1, [sp, #12]
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	bfbb      	ittet	lt
 800c54e:	425b      	neglt	r3, r3
 800c550:	f042 0202 	orrlt.w	r2, r2, #2
 800c554:	9307      	strge	r3, [sp, #28]
 800c556:	9307      	strlt	r3, [sp, #28]
 800c558:	bfb8      	it	lt
 800c55a:	9204      	strlt	r2, [sp, #16]
 800c55c:	7823      	ldrb	r3, [r4, #0]
 800c55e:	2b2e      	cmp	r3, #46	; 0x2e
 800c560:	d10c      	bne.n	800c57c <_svfiprintf_r+0x130>
 800c562:	7863      	ldrb	r3, [r4, #1]
 800c564:	2b2a      	cmp	r3, #42	; 0x2a
 800c566:	d135      	bne.n	800c5d4 <_svfiprintf_r+0x188>
 800c568:	9b03      	ldr	r3, [sp, #12]
 800c56a:	1d1a      	adds	r2, r3, #4
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	9203      	str	r2, [sp, #12]
 800c570:	2b00      	cmp	r3, #0
 800c572:	bfb8      	it	lt
 800c574:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c578:	3402      	adds	r4, #2
 800c57a:	9305      	str	r3, [sp, #20]
 800c57c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c648 <_svfiprintf_r+0x1fc>
 800c580:	7821      	ldrb	r1, [r4, #0]
 800c582:	2203      	movs	r2, #3
 800c584:	4650      	mov	r0, sl
 800c586:	f7f3 fe23 	bl	80001d0 <memchr>
 800c58a:	b140      	cbz	r0, 800c59e <_svfiprintf_r+0x152>
 800c58c:	2340      	movs	r3, #64	; 0x40
 800c58e:	eba0 000a 	sub.w	r0, r0, sl
 800c592:	fa03 f000 	lsl.w	r0, r3, r0
 800c596:	9b04      	ldr	r3, [sp, #16]
 800c598:	4303      	orrs	r3, r0
 800c59a:	3401      	adds	r4, #1
 800c59c:	9304      	str	r3, [sp, #16]
 800c59e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c5a2:	4826      	ldr	r0, [pc, #152]	; (800c63c <_svfiprintf_r+0x1f0>)
 800c5a4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c5a8:	2206      	movs	r2, #6
 800c5aa:	f7f3 fe11 	bl	80001d0 <memchr>
 800c5ae:	2800      	cmp	r0, #0
 800c5b0:	d038      	beq.n	800c624 <_svfiprintf_r+0x1d8>
 800c5b2:	4b23      	ldr	r3, [pc, #140]	; (800c640 <_svfiprintf_r+0x1f4>)
 800c5b4:	bb1b      	cbnz	r3, 800c5fe <_svfiprintf_r+0x1b2>
 800c5b6:	9b03      	ldr	r3, [sp, #12]
 800c5b8:	3307      	adds	r3, #7
 800c5ba:	f023 0307 	bic.w	r3, r3, #7
 800c5be:	3308      	adds	r3, #8
 800c5c0:	9303      	str	r3, [sp, #12]
 800c5c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c5c4:	4433      	add	r3, r6
 800c5c6:	9309      	str	r3, [sp, #36]	; 0x24
 800c5c8:	e767      	b.n	800c49a <_svfiprintf_r+0x4e>
 800c5ca:	fb0c 3202 	mla	r2, ip, r2, r3
 800c5ce:	460c      	mov	r4, r1
 800c5d0:	2001      	movs	r0, #1
 800c5d2:	e7a5      	b.n	800c520 <_svfiprintf_r+0xd4>
 800c5d4:	2300      	movs	r3, #0
 800c5d6:	3401      	adds	r4, #1
 800c5d8:	9305      	str	r3, [sp, #20]
 800c5da:	4619      	mov	r1, r3
 800c5dc:	f04f 0c0a 	mov.w	ip, #10
 800c5e0:	4620      	mov	r0, r4
 800c5e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c5e6:	3a30      	subs	r2, #48	; 0x30
 800c5e8:	2a09      	cmp	r2, #9
 800c5ea:	d903      	bls.n	800c5f4 <_svfiprintf_r+0x1a8>
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d0c5      	beq.n	800c57c <_svfiprintf_r+0x130>
 800c5f0:	9105      	str	r1, [sp, #20]
 800c5f2:	e7c3      	b.n	800c57c <_svfiprintf_r+0x130>
 800c5f4:	fb0c 2101 	mla	r1, ip, r1, r2
 800c5f8:	4604      	mov	r4, r0
 800c5fa:	2301      	movs	r3, #1
 800c5fc:	e7f0      	b.n	800c5e0 <_svfiprintf_r+0x194>
 800c5fe:	ab03      	add	r3, sp, #12
 800c600:	9300      	str	r3, [sp, #0]
 800c602:	462a      	mov	r2, r5
 800c604:	4b0f      	ldr	r3, [pc, #60]	; (800c644 <_svfiprintf_r+0x1f8>)
 800c606:	a904      	add	r1, sp, #16
 800c608:	4638      	mov	r0, r7
 800c60a:	f3af 8000 	nop.w
 800c60e:	1c42      	adds	r2, r0, #1
 800c610:	4606      	mov	r6, r0
 800c612:	d1d6      	bne.n	800c5c2 <_svfiprintf_r+0x176>
 800c614:	89ab      	ldrh	r3, [r5, #12]
 800c616:	065b      	lsls	r3, r3, #25
 800c618:	f53f af2c 	bmi.w	800c474 <_svfiprintf_r+0x28>
 800c61c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c61e:	b01d      	add	sp, #116	; 0x74
 800c620:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c624:	ab03      	add	r3, sp, #12
 800c626:	9300      	str	r3, [sp, #0]
 800c628:	462a      	mov	r2, r5
 800c62a:	4b06      	ldr	r3, [pc, #24]	; (800c644 <_svfiprintf_r+0x1f8>)
 800c62c:	a904      	add	r1, sp, #16
 800c62e:	4638      	mov	r0, r7
 800c630:	f000 f87a 	bl	800c728 <_printf_i>
 800c634:	e7eb      	b.n	800c60e <_svfiprintf_r+0x1c2>
 800c636:	bf00      	nop
 800c638:	0800cfc4 	.word	0x0800cfc4
 800c63c:	0800cfce 	.word	0x0800cfce
 800c640:	00000000 	.word	0x00000000
 800c644:	0800c395 	.word	0x0800c395
 800c648:	0800cfca 	.word	0x0800cfca

0800c64c <_printf_common>:
 800c64c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c650:	4616      	mov	r6, r2
 800c652:	4699      	mov	r9, r3
 800c654:	688a      	ldr	r2, [r1, #8]
 800c656:	690b      	ldr	r3, [r1, #16]
 800c658:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c65c:	4293      	cmp	r3, r2
 800c65e:	bfb8      	it	lt
 800c660:	4613      	movlt	r3, r2
 800c662:	6033      	str	r3, [r6, #0]
 800c664:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c668:	4607      	mov	r7, r0
 800c66a:	460c      	mov	r4, r1
 800c66c:	b10a      	cbz	r2, 800c672 <_printf_common+0x26>
 800c66e:	3301      	adds	r3, #1
 800c670:	6033      	str	r3, [r6, #0]
 800c672:	6823      	ldr	r3, [r4, #0]
 800c674:	0699      	lsls	r1, r3, #26
 800c676:	bf42      	ittt	mi
 800c678:	6833      	ldrmi	r3, [r6, #0]
 800c67a:	3302      	addmi	r3, #2
 800c67c:	6033      	strmi	r3, [r6, #0]
 800c67e:	6825      	ldr	r5, [r4, #0]
 800c680:	f015 0506 	ands.w	r5, r5, #6
 800c684:	d106      	bne.n	800c694 <_printf_common+0x48>
 800c686:	f104 0a19 	add.w	sl, r4, #25
 800c68a:	68e3      	ldr	r3, [r4, #12]
 800c68c:	6832      	ldr	r2, [r6, #0]
 800c68e:	1a9b      	subs	r3, r3, r2
 800c690:	42ab      	cmp	r3, r5
 800c692:	dc26      	bgt.n	800c6e2 <_printf_common+0x96>
 800c694:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c698:	1e13      	subs	r3, r2, #0
 800c69a:	6822      	ldr	r2, [r4, #0]
 800c69c:	bf18      	it	ne
 800c69e:	2301      	movne	r3, #1
 800c6a0:	0692      	lsls	r2, r2, #26
 800c6a2:	d42b      	bmi.n	800c6fc <_printf_common+0xb0>
 800c6a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c6a8:	4649      	mov	r1, r9
 800c6aa:	4638      	mov	r0, r7
 800c6ac:	47c0      	blx	r8
 800c6ae:	3001      	adds	r0, #1
 800c6b0:	d01e      	beq.n	800c6f0 <_printf_common+0xa4>
 800c6b2:	6823      	ldr	r3, [r4, #0]
 800c6b4:	68e5      	ldr	r5, [r4, #12]
 800c6b6:	6832      	ldr	r2, [r6, #0]
 800c6b8:	f003 0306 	and.w	r3, r3, #6
 800c6bc:	2b04      	cmp	r3, #4
 800c6be:	bf08      	it	eq
 800c6c0:	1aad      	subeq	r5, r5, r2
 800c6c2:	68a3      	ldr	r3, [r4, #8]
 800c6c4:	6922      	ldr	r2, [r4, #16]
 800c6c6:	bf0c      	ite	eq
 800c6c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c6cc:	2500      	movne	r5, #0
 800c6ce:	4293      	cmp	r3, r2
 800c6d0:	bfc4      	itt	gt
 800c6d2:	1a9b      	subgt	r3, r3, r2
 800c6d4:	18ed      	addgt	r5, r5, r3
 800c6d6:	2600      	movs	r6, #0
 800c6d8:	341a      	adds	r4, #26
 800c6da:	42b5      	cmp	r5, r6
 800c6dc:	d11a      	bne.n	800c714 <_printf_common+0xc8>
 800c6de:	2000      	movs	r0, #0
 800c6e0:	e008      	b.n	800c6f4 <_printf_common+0xa8>
 800c6e2:	2301      	movs	r3, #1
 800c6e4:	4652      	mov	r2, sl
 800c6e6:	4649      	mov	r1, r9
 800c6e8:	4638      	mov	r0, r7
 800c6ea:	47c0      	blx	r8
 800c6ec:	3001      	adds	r0, #1
 800c6ee:	d103      	bne.n	800c6f8 <_printf_common+0xac>
 800c6f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c6f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c6f8:	3501      	adds	r5, #1
 800c6fa:	e7c6      	b.n	800c68a <_printf_common+0x3e>
 800c6fc:	18e1      	adds	r1, r4, r3
 800c6fe:	1c5a      	adds	r2, r3, #1
 800c700:	2030      	movs	r0, #48	; 0x30
 800c702:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c706:	4422      	add	r2, r4
 800c708:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c70c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c710:	3302      	adds	r3, #2
 800c712:	e7c7      	b.n	800c6a4 <_printf_common+0x58>
 800c714:	2301      	movs	r3, #1
 800c716:	4622      	mov	r2, r4
 800c718:	4649      	mov	r1, r9
 800c71a:	4638      	mov	r0, r7
 800c71c:	47c0      	blx	r8
 800c71e:	3001      	adds	r0, #1
 800c720:	d0e6      	beq.n	800c6f0 <_printf_common+0xa4>
 800c722:	3601      	adds	r6, #1
 800c724:	e7d9      	b.n	800c6da <_printf_common+0x8e>
	...

0800c728 <_printf_i>:
 800c728:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c72c:	460c      	mov	r4, r1
 800c72e:	4691      	mov	r9, r2
 800c730:	7e27      	ldrb	r7, [r4, #24]
 800c732:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c734:	2f78      	cmp	r7, #120	; 0x78
 800c736:	4680      	mov	r8, r0
 800c738:	469a      	mov	sl, r3
 800c73a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c73e:	d807      	bhi.n	800c750 <_printf_i+0x28>
 800c740:	2f62      	cmp	r7, #98	; 0x62
 800c742:	d80a      	bhi.n	800c75a <_printf_i+0x32>
 800c744:	2f00      	cmp	r7, #0
 800c746:	f000 80d8 	beq.w	800c8fa <_printf_i+0x1d2>
 800c74a:	2f58      	cmp	r7, #88	; 0x58
 800c74c:	f000 80a3 	beq.w	800c896 <_printf_i+0x16e>
 800c750:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c754:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c758:	e03a      	b.n	800c7d0 <_printf_i+0xa8>
 800c75a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c75e:	2b15      	cmp	r3, #21
 800c760:	d8f6      	bhi.n	800c750 <_printf_i+0x28>
 800c762:	a001      	add	r0, pc, #4	; (adr r0, 800c768 <_printf_i+0x40>)
 800c764:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800c768:	0800c7c1 	.word	0x0800c7c1
 800c76c:	0800c7d5 	.word	0x0800c7d5
 800c770:	0800c751 	.word	0x0800c751
 800c774:	0800c751 	.word	0x0800c751
 800c778:	0800c751 	.word	0x0800c751
 800c77c:	0800c751 	.word	0x0800c751
 800c780:	0800c7d5 	.word	0x0800c7d5
 800c784:	0800c751 	.word	0x0800c751
 800c788:	0800c751 	.word	0x0800c751
 800c78c:	0800c751 	.word	0x0800c751
 800c790:	0800c751 	.word	0x0800c751
 800c794:	0800c8e1 	.word	0x0800c8e1
 800c798:	0800c805 	.word	0x0800c805
 800c79c:	0800c8c3 	.word	0x0800c8c3
 800c7a0:	0800c751 	.word	0x0800c751
 800c7a4:	0800c751 	.word	0x0800c751
 800c7a8:	0800c903 	.word	0x0800c903
 800c7ac:	0800c751 	.word	0x0800c751
 800c7b0:	0800c805 	.word	0x0800c805
 800c7b4:	0800c751 	.word	0x0800c751
 800c7b8:	0800c751 	.word	0x0800c751
 800c7bc:	0800c8cb 	.word	0x0800c8cb
 800c7c0:	680b      	ldr	r3, [r1, #0]
 800c7c2:	1d1a      	adds	r2, r3, #4
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	600a      	str	r2, [r1, #0]
 800c7c8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c7cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c7d0:	2301      	movs	r3, #1
 800c7d2:	e0a3      	b.n	800c91c <_printf_i+0x1f4>
 800c7d4:	6825      	ldr	r5, [r4, #0]
 800c7d6:	6808      	ldr	r0, [r1, #0]
 800c7d8:	062e      	lsls	r6, r5, #24
 800c7da:	f100 0304 	add.w	r3, r0, #4
 800c7de:	d50a      	bpl.n	800c7f6 <_printf_i+0xce>
 800c7e0:	6805      	ldr	r5, [r0, #0]
 800c7e2:	600b      	str	r3, [r1, #0]
 800c7e4:	2d00      	cmp	r5, #0
 800c7e6:	da03      	bge.n	800c7f0 <_printf_i+0xc8>
 800c7e8:	232d      	movs	r3, #45	; 0x2d
 800c7ea:	426d      	negs	r5, r5
 800c7ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c7f0:	485e      	ldr	r0, [pc, #376]	; (800c96c <_printf_i+0x244>)
 800c7f2:	230a      	movs	r3, #10
 800c7f4:	e019      	b.n	800c82a <_printf_i+0x102>
 800c7f6:	f015 0f40 	tst.w	r5, #64	; 0x40
 800c7fa:	6805      	ldr	r5, [r0, #0]
 800c7fc:	600b      	str	r3, [r1, #0]
 800c7fe:	bf18      	it	ne
 800c800:	b22d      	sxthne	r5, r5
 800c802:	e7ef      	b.n	800c7e4 <_printf_i+0xbc>
 800c804:	680b      	ldr	r3, [r1, #0]
 800c806:	6825      	ldr	r5, [r4, #0]
 800c808:	1d18      	adds	r0, r3, #4
 800c80a:	6008      	str	r0, [r1, #0]
 800c80c:	0628      	lsls	r0, r5, #24
 800c80e:	d501      	bpl.n	800c814 <_printf_i+0xec>
 800c810:	681d      	ldr	r5, [r3, #0]
 800c812:	e002      	b.n	800c81a <_printf_i+0xf2>
 800c814:	0669      	lsls	r1, r5, #25
 800c816:	d5fb      	bpl.n	800c810 <_printf_i+0xe8>
 800c818:	881d      	ldrh	r5, [r3, #0]
 800c81a:	4854      	ldr	r0, [pc, #336]	; (800c96c <_printf_i+0x244>)
 800c81c:	2f6f      	cmp	r7, #111	; 0x6f
 800c81e:	bf0c      	ite	eq
 800c820:	2308      	moveq	r3, #8
 800c822:	230a      	movne	r3, #10
 800c824:	2100      	movs	r1, #0
 800c826:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c82a:	6866      	ldr	r6, [r4, #4]
 800c82c:	60a6      	str	r6, [r4, #8]
 800c82e:	2e00      	cmp	r6, #0
 800c830:	bfa2      	ittt	ge
 800c832:	6821      	ldrge	r1, [r4, #0]
 800c834:	f021 0104 	bicge.w	r1, r1, #4
 800c838:	6021      	strge	r1, [r4, #0]
 800c83a:	b90d      	cbnz	r5, 800c840 <_printf_i+0x118>
 800c83c:	2e00      	cmp	r6, #0
 800c83e:	d04d      	beq.n	800c8dc <_printf_i+0x1b4>
 800c840:	4616      	mov	r6, r2
 800c842:	fbb5 f1f3 	udiv	r1, r5, r3
 800c846:	fb03 5711 	mls	r7, r3, r1, r5
 800c84a:	5dc7      	ldrb	r7, [r0, r7]
 800c84c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c850:	462f      	mov	r7, r5
 800c852:	42bb      	cmp	r3, r7
 800c854:	460d      	mov	r5, r1
 800c856:	d9f4      	bls.n	800c842 <_printf_i+0x11a>
 800c858:	2b08      	cmp	r3, #8
 800c85a:	d10b      	bne.n	800c874 <_printf_i+0x14c>
 800c85c:	6823      	ldr	r3, [r4, #0]
 800c85e:	07df      	lsls	r7, r3, #31
 800c860:	d508      	bpl.n	800c874 <_printf_i+0x14c>
 800c862:	6923      	ldr	r3, [r4, #16]
 800c864:	6861      	ldr	r1, [r4, #4]
 800c866:	4299      	cmp	r1, r3
 800c868:	bfde      	ittt	le
 800c86a:	2330      	movle	r3, #48	; 0x30
 800c86c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c870:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800c874:	1b92      	subs	r2, r2, r6
 800c876:	6122      	str	r2, [r4, #16]
 800c878:	f8cd a000 	str.w	sl, [sp]
 800c87c:	464b      	mov	r3, r9
 800c87e:	aa03      	add	r2, sp, #12
 800c880:	4621      	mov	r1, r4
 800c882:	4640      	mov	r0, r8
 800c884:	f7ff fee2 	bl	800c64c <_printf_common>
 800c888:	3001      	adds	r0, #1
 800c88a:	d14c      	bne.n	800c926 <_printf_i+0x1fe>
 800c88c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c890:	b004      	add	sp, #16
 800c892:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c896:	4835      	ldr	r0, [pc, #212]	; (800c96c <_printf_i+0x244>)
 800c898:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c89c:	6823      	ldr	r3, [r4, #0]
 800c89e:	680e      	ldr	r6, [r1, #0]
 800c8a0:	061f      	lsls	r7, r3, #24
 800c8a2:	f856 5b04 	ldr.w	r5, [r6], #4
 800c8a6:	600e      	str	r6, [r1, #0]
 800c8a8:	d514      	bpl.n	800c8d4 <_printf_i+0x1ac>
 800c8aa:	07d9      	lsls	r1, r3, #31
 800c8ac:	bf44      	itt	mi
 800c8ae:	f043 0320 	orrmi.w	r3, r3, #32
 800c8b2:	6023      	strmi	r3, [r4, #0]
 800c8b4:	b91d      	cbnz	r5, 800c8be <_printf_i+0x196>
 800c8b6:	6823      	ldr	r3, [r4, #0]
 800c8b8:	f023 0320 	bic.w	r3, r3, #32
 800c8bc:	6023      	str	r3, [r4, #0]
 800c8be:	2310      	movs	r3, #16
 800c8c0:	e7b0      	b.n	800c824 <_printf_i+0xfc>
 800c8c2:	6823      	ldr	r3, [r4, #0]
 800c8c4:	f043 0320 	orr.w	r3, r3, #32
 800c8c8:	6023      	str	r3, [r4, #0]
 800c8ca:	2378      	movs	r3, #120	; 0x78
 800c8cc:	4828      	ldr	r0, [pc, #160]	; (800c970 <_printf_i+0x248>)
 800c8ce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c8d2:	e7e3      	b.n	800c89c <_printf_i+0x174>
 800c8d4:	065e      	lsls	r6, r3, #25
 800c8d6:	bf48      	it	mi
 800c8d8:	b2ad      	uxthmi	r5, r5
 800c8da:	e7e6      	b.n	800c8aa <_printf_i+0x182>
 800c8dc:	4616      	mov	r6, r2
 800c8de:	e7bb      	b.n	800c858 <_printf_i+0x130>
 800c8e0:	680b      	ldr	r3, [r1, #0]
 800c8e2:	6826      	ldr	r6, [r4, #0]
 800c8e4:	6960      	ldr	r0, [r4, #20]
 800c8e6:	1d1d      	adds	r5, r3, #4
 800c8e8:	600d      	str	r5, [r1, #0]
 800c8ea:	0635      	lsls	r5, r6, #24
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	d501      	bpl.n	800c8f4 <_printf_i+0x1cc>
 800c8f0:	6018      	str	r0, [r3, #0]
 800c8f2:	e002      	b.n	800c8fa <_printf_i+0x1d2>
 800c8f4:	0671      	lsls	r1, r6, #25
 800c8f6:	d5fb      	bpl.n	800c8f0 <_printf_i+0x1c8>
 800c8f8:	8018      	strh	r0, [r3, #0]
 800c8fa:	2300      	movs	r3, #0
 800c8fc:	6123      	str	r3, [r4, #16]
 800c8fe:	4616      	mov	r6, r2
 800c900:	e7ba      	b.n	800c878 <_printf_i+0x150>
 800c902:	680b      	ldr	r3, [r1, #0]
 800c904:	1d1a      	adds	r2, r3, #4
 800c906:	600a      	str	r2, [r1, #0]
 800c908:	681e      	ldr	r6, [r3, #0]
 800c90a:	6862      	ldr	r2, [r4, #4]
 800c90c:	2100      	movs	r1, #0
 800c90e:	4630      	mov	r0, r6
 800c910:	f7f3 fc5e 	bl	80001d0 <memchr>
 800c914:	b108      	cbz	r0, 800c91a <_printf_i+0x1f2>
 800c916:	1b80      	subs	r0, r0, r6
 800c918:	6060      	str	r0, [r4, #4]
 800c91a:	6863      	ldr	r3, [r4, #4]
 800c91c:	6123      	str	r3, [r4, #16]
 800c91e:	2300      	movs	r3, #0
 800c920:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c924:	e7a8      	b.n	800c878 <_printf_i+0x150>
 800c926:	6923      	ldr	r3, [r4, #16]
 800c928:	4632      	mov	r2, r6
 800c92a:	4649      	mov	r1, r9
 800c92c:	4640      	mov	r0, r8
 800c92e:	47d0      	blx	sl
 800c930:	3001      	adds	r0, #1
 800c932:	d0ab      	beq.n	800c88c <_printf_i+0x164>
 800c934:	6823      	ldr	r3, [r4, #0]
 800c936:	079b      	lsls	r3, r3, #30
 800c938:	d413      	bmi.n	800c962 <_printf_i+0x23a>
 800c93a:	68e0      	ldr	r0, [r4, #12]
 800c93c:	9b03      	ldr	r3, [sp, #12]
 800c93e:	4298      	cmp	r0, r3
 800c940:	bfb8      	it	lt
 800c942:	4618      	movlt	r0, r3
 800c944:	e7a4      	b.n	800c890 <_printf_i+0x168>
 800c946:	2301      	movs	r3, #1
 800c948:	4632      	mov	r2, r6
 800c94a:	4649      	mov	r1, r9
 800c94c:	4640      	mov	r0, r8
 800c94e:	47d0      	blx	sl
 800c950:	3001      	adds	r0, #1
 800c952:	d09b      	beq.n	800c88c <_printf_i+0x164>
 800c954:	3501      	adds	r5, #1
 800c956:	68e3      	ldr	r3, [r4, #12]
 800c958:	9903      	ldr	r1, [sp, #12]
 800c95a:	1a5b      	subs	r3, r3, r1
 800c95c:	42ab      	cmp	r3, r5
 800c95e:	dcf2      	bgt.n	800c946 <_printf_i+0x21e>
 800c960:	e7eb      	b.n	800c93a <_printf_i+0x212>
 800c962:	2500      	movs	r5, #0
 800c964:	f104 0619 	add.w	r6, r4, #25
 800c968:	e7f5      	b.n	800c956 <_printf_i+0x22e>
 800c96a:	bf00      	nop
 800c96c:	0800cfd5 	.word	0x0800cfd5
 800c970:	0800cfe6 	.word	0x0800cfe6

0800c974 <__retarget_lock_acquire_recursive>:
 800c974:	4770      	bx	lr

0800c976 <__retarget_lock_release_recursive>:
 800c976:	4770      	bx	lr

0800c978 <memcpy>:
 800c978:	440a      	add	r2, r1
 800c97a:	4291      	cmp	r1, r2
 800c97c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800c980:	d100      	bne.n	800c984 <memcpy+0xc>
 800c982:	4770      	bx	lr
 800c984:	b510      	push	{r4, lr}
 800c986:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c98a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c98e:	4291      	cmp	r1, r2
 800c990:	d1f9      	bne.n	800c986 <memcpy+0xe>
 800c992:	bd10      	pop	{r4, pc}

0800c994 <memmove>:
 800c994:	4288      	cmp	r0, r1
 800c996:	b510      	push	{r4, lr}
 800c998:	eb01 0402 	add.w	r4, r1, r2
 800c99c:	d902      	bls.n	800c9a4 <memmove+0x10>
 800c99e:	4284      	cmp	r4, r0
 800c9a0:	4623      	mov	r3, r4
 800c9a2:	d807      	bhi.n	800c9b4 <memmove+0x20>
 800c9a4:	1e43      	subs	r3, r0, #1
 800c9a6:	42a1      	cmp	r1, r4
 800c9a8:	d008      	beq.n	800c9bc <memmove+0x28>
 800c9aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c9ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c9b2:	e7f8      	b.n	800c9a6 <memmove+0x12>
 800c9b4:	4402      	add	r2, r0
 800c9b6:	4601      	mov	r1, r0
 800c9b8:	428a      	cmp	r2, r1
 800c9ba:	d100      	bne.n	800c9be <memmove+0x2a>
 800c9bc:	bd10      	pop	{r4, pc}
 800c9be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c9c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c9c6:	e7f7      	b.n	800c9b8 <memmove+0x24>

0800c9c8 <_realloc_r>:
 800c9c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9ca:	4607      	mov	r7, r0
 800c9cc:	4614      	mov	r4, r2
 800c9ce:	460e      	mov	r6, r1
 800c9d0:	b921      	cbnz	r1, 800c9dc <_realloc_r+0x14>
 800c9d2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c9d6:	4611      	mov	r1, r2
 800c9d8:	f7ff bc46 	b.w	800c268 <_malloc_r>
 800c9dc:	b922      	cbnz	r2, 800c9e8 <_realloc_r+0x20>
 800c9de:	f7ff fbf3 	bl	800c1c8 <_free_r>
 800c9e2:	4625      	mov	r5, r4
 800c9e4:	4628      	mov	r0, r5
 800c9e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c9e8:	f000 f814 	bl	800ca14 <_malloc_usable_size_r>
 800c9ec:	42a0      	cmp	r0, r4
 800c9ee:	d20f      	bcs.n	800ca10 <_realloc_r+0x48>
 800c9f0:	4621      	mov	r1, r4
 800c9f2:	4638      	mov	r0, r7
 800c9f4:	f7ff fc38 	bl	800c268 <_malloc_r>
 800c9f8:	4605      	mov	r5, r0
 800c9fa:	2800      	cmp	r0, #0
 800c9fc:	d0f2      	beq.n	800c9e4 <_realloc_r+0x1c>
 800c9fe:	4631      	mov	r1, r6
 800ca00:	4622      	mov	r2, r4
 800ca02:	f7ff ffb9 	bl	800c978 <memcpy>
 800ca06:	4631      	mov	r1, r6
 800ca08:	4638      	mov	r0, r7
 800ca0a:	f7ff fbdd 	bl	800c1c8 <_free_r>
 800ca0e:	e7e9      	b.n	800c9e4 <_realloc_r+0x1c>
 800ca10:	4635      	mov	r5, r6
 800ca12:	e7e7      	b.n	800c9e4 <_realloc_r+0x1c>

0800ca14 <_malloc_usable_size_r>:
 800ca14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ca18:	1f18      	subs	r0, r3, #4
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	bfbc      	itt	lt
 800ca1e:	580b      	ldrlt	r3, [r1, r0]
 800ca20:	18c0      	addlt	r0, r0, r3
 800ca22:	4770      	bx	lr
 800ca24:	0000      	movs	r0, r0
	...

0800ca28 <log2>:
 800ca28:	b508      	push	{r3, lr}
 800ca2a:	f000 f811 	bl	800ca50 <log>
 800ca2e:	a306      	add	r3, pc, #24	; (adr r3, 800ca48 <log2+0x20>)
 800ca30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca34:	ec51 0b10 	vmov	r0, r1, d0
 800ca38:	f7f3 ff00 	bl	800083c <__aeabi_ddiv>
 800ca3c:	ec41 0b10 	vmov	d0, r0, r1
 800ca40:	bd08      	pop	{r3, pc}
 800ca42:	bf00      	nop
 800ca44:	f3af 8000 	nop.w
 800ca48:	fefa39ef 	.word	0xfefa39ef
 800ca4c:	3fe62e42 	.word	0x3fe62e42

0800ca50 <log>:
 800ca50:	b538      	push	{r3, r4, r5, lr}
 800ca52:	ed2d 8b02 	vpush	{d8}
 800ca56:	ec55 4b10 	vmov	r4, r5, d0
 800ca5a:	f000 f841 	bl	800cae0 <__ieee754_log>
 800ca5e:	4b1e      	ldr	r3, [pc, #120]	; (800cad8 <log+0x88>)
 800ca60:	eeb0 8a40 	vmov.f32	s16, s0
 800ca64:	eef0 8a60 	vmov.f32	s17, s1
 800ca68:	f993 3000 	ldrsb.w	r3, [r3]
 800ca6c:	3301      	adds	r3, #1
 800ca6e:	d01a      	beq.n	800caa6 <log+0x56>
 800ca70:	4622      	mov	r2, r4
 800ca72:	462b      	mov	r3, r5
 800ca74:	4620      	mov	r0, r4
 800ca76:	4629      	mov	r1, r5
 800ca78:	f7f4 f850 	bl	8000b1c <__aeabi_dcmpun>
 800ca7c:	b998      	cbnz	r0, 800caa6 <log+0x56>
 800ca7e:	2200      	movs	r2, #0
 800ca80:	2300      	movs	r3, #0
 800ca82:	4620      	mov	r0, r4
 800ca84:	4629      	mov	r1, r5
 800ca86:	f7f4 f83f 	bl	8000b08 <__aeabi_dcmpgt>
 800ca8a:	b960      	cbnz	r0, 800caa6 <log+0x56>
 800ca8c:	2200      	movs	r2, #0
 800ca8e:	2300      	movs	r3, #0
 800ca90:	4620      	mov	r0, r4
 800ca92:	4629      	mov	r1, r5
 800ca94:	f7f4 f810 	bl	8000ab8 <__aeabi_dcmpeq>
 800ca98:	b160      	cbz	r0, 800cab4 <log+0x64>
 800ca9a:	f7ff fb53 	bl	800c144 <__errno>
 800ca9e:	ed9f 8b0c 	vldr	d8, [pc, #48]	; 800cad0 <log+0x80>
 800caa2:	2322      	movs	r3, #34	; 0x22
 800caa4:	6003      	str	r3, [r0, #0]
 800caa6:	eeb0 0a48 	vmov.f32	s0, s16
 800caaa:	eef0 0a68 	vmov.f32	s1, s17
 800caae:	ecbd 8b02 	vpop	{d8}
 800cab2:	bd38      	pop	{r3, r4, r5, pc}
 800cab4:	f7ff fb46 	bl	800c144 <__errno>
 800cab8:	ecbd 8b02 	vpop	{d8}
 800cabc:	2321      	movs	r3, #33	; 0x21
 800cabe:	6003      	str	r3, [r0, #0]
 800cac0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cac4:	4805      	ldr	r0, [pc, #20]	; (800cadc <log+0x8c>)
 800cac6:	f000 b9c7 	b.w	800ce58 <nan>
 800caca:	bf00      	nop
 800cacc:	f3af 8000 	nop.w
 800cad0:	00000000 	.word	0x00000000
 800cad4:	fff00000 	.word	0xfff00000
 800cad8:	20000098 	.word	0x20000098
 800cadc:	0800cfc9 	.word	0x0800cfc9

0800cae0 <__ieee754_log>:
 800cae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cae4:	ec51 0b10 	vmov	r0, r1, d0
 800cae8:	ed2d 8b04 	vpush	{d8-d9}
 800caec:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800caf0:	b083      	sub	sp, #12
 800caf2:	460d      	mov	r5, r1
 800caf4:	da29      	bge.n	800cb4a <__ieee754_log+0x6a>
 800caf6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800cafa:	4303      	orrs	r3, r0
 800cafc:	ee10 2a10 	vmov	r2, s0
 800cb00:	d10c      	bne.n	800cb1c <__ieee754_log+0x3c>
 800cb02:	49cf      	ldr	r1, [pc, #828]	; (800ce40 <__ieee754_log+0x360>)
 800cb04:	2200      	movs	r2, #0
 800cb06:	2300      	movs	r3, #0
 800cb08:	2000      	movs	r0, #0
 800cb0a:	f7f3 fe97 	bl	800083c <__aeabi_ddiv>
 800cb0e:	ec41 0b10 	vmov	d0, r0, r1
 800cb12:	b003      	add	sp, #12
 800cb14:	ecbd 8b04 	vpop	{d8-d9}
 800cb18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb1c:	2900      	cmp	r1, #0
 800cb1e:	da05      	bge.n	800cb2c <__ieee754_log+0x4c>
 800cb20:	460b      	mov	r3, r1
 800cb22:	f7f3 fba9 	bl	8000278 <__aeabi_dsub>
 800cb26:	2200      	movs	r2, #0
 800cb28:	2300      	movs	r3, #0
 800cb2a:	e7ee      	b.n	800cb0a <__ieee754_log+0x2a>
 800cb2c:	4bc5      	ldr	r3, [pc, #788]	; (800ce44 <__ieee754_log+0x364>)
 800cb2e:	2200      	movs	r2, #0
 800cb30:	f7f3 fd5a 	bl	80005e8 <__aeabi_dmul>
 800cb34:	f06f 0335 	mvn.w	r3, #53	; 0x35
 800cb38:	460d      	mov	r5, r1
 800cb3a:	4ac3      	ldr	r2, [pc, #780]	; (800ce48 <__ieee754_log+0x368>)
 800cb3c:	4295      	cmp	r5, r2
 800cb3e:	dd06      	ble.n	800cb4e <__ieee754_log+0x6e>
 800cb40:	4602      	mov	r2, r0
 800cb42:	460b      	mov	r3, r1
 800cb44:	f7f3 fb9a 	bl	800027c <__adddf3>
 800cb48:	e7e1      	b.n	800cb0e <__ieee754_log+0x2e>
 800cb4a:	2300      	movs	r3, #0
 800cb4c:	e7f5      	b.n	800cb3a <__ieee754_log+0x5a>
 800cb4e:	152c      	asrs	r4, r5, #20
 800cb50:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800cb54:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800cb58:	441c      	add	r4, r3
 800cb5a:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 800cb5e:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 800cb62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cb66:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 800cb6a:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 800cb6e:	ea42 0105 	orr.w	r1, r2, r5
 800cb72:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800cb76:	2200      	movs	r2, #0
 800cb78:	4bb4      	ldr	r3, [pc, #720]	; (800ce4c <__ieee754_log+0x36c>)
 800cb7a:	f7f3 fb7d 	bl	8000278 <__aeabi_dsub>
 800cb7e:	1cab      	adds	r3, r5, #2
 800cb80:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cb84:	2b02      	cmp	r3, #2
 800cb86:	4682      	mov	sl, r0
 800cb88:	468b      	mov	fp, r1
 800cb8a:	f04f 0200 	mov.w	r2, #0
 800cb8e:	dc53      	bgt.n	800cc38 <__ieee754_log+0x158>
 800cb90:	2300      	movs	r3, #0
 800cb92:	f7f3 ff91 	bl	8000ab8 <__aeabi_dcmpeq>
 800cb96:	b1d0      	cbz	r0, 800cbce <__ieee754_log+0xee>
 800cb98:	2c00      	cmp	r4, #0
 800cb9a:	f000 8122 	beq.w	800cde2 <__ieee754_log+0x302>
 800cb9e:	4620      	mov	r0, r4
 800cba0:	f7f3 fcb8 	bl	8000514 <__aeabi_i2d>
 800cba4:	a390      	add	r3, pc, #576	; (adr r3, 800cde8 <__ieee754_log+0x308>)
 800cba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbaa:	4606      	mov	r6, r0
 800cbac:	460f      	mov	r7, r1
 800cbae:	f7f3 fd1b 	bl	80005e8 <__aeabi_dmul>
 800cbb2:	a38f      	add	r3, pc, #572	; (adr r3, 800cdf0 <__ieee754_log+0x310>)
 800cbb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbb8:	4604      	mov	r4, r0
 800cbba:	460d      	mov	r5, r1
 800cbbc:	4630      	mov	r0, r6
 800cbbe:	4639      	mov	r1, r7
 800cbc0:	f7f3 fd12 	bl	80005e8 <__aeabi_dmul>
 800cbc4:	4602      	mov	r2, r0
 800cbc6:	460b      	mov	r3, r1
 800cbc8:	4620      	mov	r0, r4
 800cbca:	4629      	mov	r1, r5
 800cbcc:	e7ba      	b.n	800cb44 <__ieee754_log+0x64>
 800cbce:	a38a      	add	r3, pc, #552	; (adr r3, 800cdf8 <__ieee754_log+0x318>)
 800cbd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbd4:	4650      	mov	r0, sl
 800cbd6:	4659      	mov	r1, fp
 800cbd8:	f7f3 fd06 	bl	80005e8 <__aeabi_dmul>
 800cbdc:	4602      	mov	r2, r0
 800cbde:	460b      	mov	r3, r1
 800cbe0:	2000      	movs	r0, #0
 800cbe2:	499b      	ldr	r1, [pc, #620]	; (800ce50 <__ieee754_log+0x370>)
 800cbe4:	f7f3 fb48 	bl	8000278 <__aeabi_dsub>
 800cbe8:	4652      	mov	r2, sl
 800cbea:	4606      	mov	r6, r0
 800cbec:	460f      	mov	r7, r1
 800cbee:	465b      	mov	r3, fp
 800cbf0:	4650      	mov	r0, sl
 800cbf2:	4659      	mov	r1, fp
 800cbf4:	f7f3 fcf8 	bl	80005e8 <__aeabi_dmul>
 800cbf8:	4602      	mov	r2, r0
 800cbfa:	460b      	mov	r3, r1
 800cbfc:	4630      	mov	r0, r6
 800cbfe:	4639      	mov	r1, r7
 800cc00:	f7f3 fcf2 	bl	80005e8 <__aeabi_dmul>
 800cc04:	4606      	mov	r6, r0
 800cc06:	460f      	mov	r7, r1
 800cc08:	b914      	cbnz	r4, 800cc10 <__ieee754_log+0x130>
 800cc0a:	4632      	mov	r2, r6
 800cc0c:	463b      	mov	r3, r7
 800cc0e:	e0a2      	b.n	800cd56 <__ieee754_log+0x276>
 800cc10:	4620      	mov	r0, r4
 800cc12:	f7f3 fc7f 	bl	8000514 <__aeabi_i2d>
 800cc16:	a374      	add	r3, pc, #464	; (adr r3, 800cde8 <__ieee754_log+0x308>)
 800cc18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc1c:	4680      	mov	r8, r0
 800cc1e:	4689      	mov	r9, r1
 800cc20:	f7f3 fce2 	bl	80005e8 <__aeabi_dmul>
 800cc24:	a372      	add	r3, pc, #456	; (adr r3, 800cdf0 <__ieee754_log+0x310>)
 800cc26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc2a:	4604      	mov	r4, r0
 800cc2c:	460d      	mov	r5, r1
 800cc2e:	4640      	mov	r0, r8
 800cc30:	4649      	mov	r1, r9
 800cc32:	f7f3 fcd9 	bl	80005e8 <__aeabi_dmul>
 800cc36:	e0a7      	b.n	800cd88 <__ieee754_log+0x2a8>
 800cc38:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800cc3c:	f7f3 fb1e 	bl	800027c <__adddf3>
 800cc40:	4602      	mov	r2, r0
 800cc42:	460b      	mov	r3, r1
 800cc44:	4650      	mov	r0, sl
 800cc46:	4659      	mov	r1, fp
 800cc48:	f7f3 fdf8 	bl	800083c <__aeabi_ddiv>
 800cc4c:	ec41 0b18 	vmov	d8, r0, r1
 800cc50:	4620      	mov	r0, r4
 800cc52:	f7f3 fc5f 	bl	8000514 <__aeabi_i2d>
 800cc56:	ec53 2b18 	vmov	r2, r3, d8
 800cc5a:	ec41 0b19 	vmov	d9, r0, r1
 800cc5e:	ec51 0b18 	vmov	r0, r1, d8
 800cc62:	f7f3 fcc1 	bl	80005e8 <__aeabi_dmul>
 800cc66:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 800cc6a:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 800cc6e:	9301      	str	r3, [sp, #4]
 800cc70:	4602      	mov	r2, r0
 800cc72:	460b      	mov	r3, r1
 800cc74:	4680      	mov	r8, r0
 800cc76:	4689      	mov	r9, r1
 800cc78:	f7f3 fcb6 	bl	80005e8 <__aeabi_dmul>
 800cc7c:	a360      	add	r3, pc, #384	; (adr r3, 800ce00 <__ieee754_log+0x320>)
 800cc7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc82:	4606      	mov	r6, r0
 800cc84:	460f      	mov	r7, r1
 800cc86:	f7f3 fcaf 	bl	80005e8 <__aeabi_dmul>
 800cc8a:	a35f      	add	r3, pc, #380	; (adr r3, 800ce08 <__ieee754_log+0x328>)
 800cc8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc90:	f7f3 faf4 	bl	800027c <__adddf3>
 800cc94:	4632      	mov	r2, r6
 800cc96:	463b      	mov	r3, r7
 800cc98:	f7f3 fca6 	bl	80005e8 <__aeabi_dmul>
 800cc9c:	a35c      	add	r3, pc, #368	; (adr r3, 800ce10 <__ieee754_log+0x330>)
 800cc9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cca2:	f7f3 faeb 	bl	800027c <__adddf3>
 800cca6:	4632      	mov	r2, r6
 800cca8:	463b      	mov	r3, r7
 800ccaa:	f7f3 fc9d 	bl	80005e8 <__aeabi_dmul>
 800ccae:	a35a      	add	r3, pc, #360	; (adr r3, 800ce18 <__ieee754_log+0x338>)
 800ccb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccb4:	f7f3 fae2 	bl	800027c <__adddf3>
 800ccb8:	4642      	mov	r2, r8
 800ccba:	464b      	mov	r3, r9
 800ccbc:	f7f3 fc94 	bl	80005e8 <__aeabi_dmul>
 800ccc0:	a357      	add	r3, pc, #348	; (adr r3, 800ce20 <__ieee754_log+0x340>)
 800ccc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccc6:	4680      	mov	r8, r0
 800ccc8:	4689      	mov	r9, r1
 800ccca:	4630      	mov	r0, r6
 800cccc:	4639      	mov	r1, r7
 800ccce:	f7f3 fc8b 	bl	80005e8 <__aeabi_dmul>
 800ccd2:	a355      	add	r3, pc, #340	; (adr r3, 800ce28 <__ieee754_log+0x348>)
 800ccd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccd8:	f7f3 fad0 	bl	800027c <__adddf3>
 800ccdc:	4632      	mov	r2, r6
 800ccde:	463b      	mov	r3, r7
 800cce0:	f7f3 fc82 	bl	80005e8 <__aeabi_dmul>
 800cce4:	a352      	add	r3, pc, #328	; (adr r3, 800ce30 <__ieee754_log+0x350>)
 800cce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccea:	f7f3 fac7 	bl	800027c <__adddf3>
 800ccee:	4632      	mov	r2, r6
 800ccf0:	463b      	mov	r3, r7
 800ccf2:	f7f3 fc79 	bl	80005e8 <__aeabi_dmul>
 800ccf6:	460b      	mov	r3, r1
 800ccf8:	4602      	mov	r2, r0
 800ccfa:	4649      	mov	r1, r9
 800ccfc:	4640      	mov	r0, r8
 800ccfe:	f7f3 fabd 	bl	800027c <__adddf3>
 800cd02:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800cd06:	9b01      	ldr	r3, [sp, #4]
 800cd08:	3551      	adds	r5, #81	; 0x51
 800cd0a:	431d      	orrs	r5, r3
 800cd0c:	2d00      	cmp	r5, #0
 800cd0e:	4680      	mov	r8, r0
 800cd10:	4689      	mov	r9, r1
 800cd12:	dd48      	ble.n	800cda6 <__ieee754_log+0x2c6>
 800cd14:	4b4e      	ldr	r3, [pc, #312]	; (800ce50 <__ieee754_log+0x370>)
 800cd16:	2200      	movs	r2, #0
 800cd18:	4650      	mov	r0, sl
 800cd1a:	4659      	mov	r1, fp
 800cd1c:	f7f3 fc64 	bl	80005e8 <__aeabi_dmul>
 800cd20:	4652      	mov	r2, sl
 800cd22:	465b      	mov	r3, fp
 800cd24:	f7f3 fc60 	bl	80005e8 <__aeabi_dmul>
 800cd28:	4602      	mov	r2, r0
 800cd2a:	460b      	mov	r3, r1
 800cd2c:	4606      	mov	r6, r0
 800cd2e:	460f      	mov	r7, r1
 800cd30:	4640      	mov	r0, r8
 800cd32:	4649      	mov	r1, r9
 800cd34:	f7f3 faa2 	bl	800027c <__adddf3>
 800cd38:	ec53 2b18 	vmov	r2, r3, d8
 800cd3c:	f7f3 fc54 	bl	80005e8 <__aeabi_dmul>
 800cd40:	4680      	mov	r8, r0
 800cd42:	4689      	mov	r9, r1
 800cd44:	b964      	cbnz	r4, 800cd60 <__ieee754_log+0x280>
 800cd46:	4602      	mov	r2, r0
 800cd48:	460b      	mov	r3, r1
 800cd4a:	4630      	mov	r0, r6
 800cd4c:	4639      	mov	r1, r7
 800cd4e:	f7f3 fa93 	bl	8000278 <__aeabi_dsub>
 800cd52:	4602      	mov	r2, r0
 800cd54:	460b      	mov	r3, r1
 800cd56:	4650      	mov	r0, sl
 800cd58:	4659      	mov	r1, fp
 800cd5a:	f7f3 fa8d 	bl	8000278 <__aeabi_dsub>
 800cd5e:	e6d6      	b.n	800cb0e <__ieee754_log+0x2e>
 800cd60:	a321      	add	r3, pc, #132	; (adr r3, 800cde8 <__ieee754_log+0x308>)
 800cd62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd66:	ec51 0b19 	vmov	r0, r1, d9
 800cd6a:	f7f3 fc3d 	bl	80005e8 <__aeabi_dmul>
 800cd6e:	a320      	add	r3, pc, #128	; (adr r3, 800cdf0 <__ieee754_log+0x310>)
 800cd70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd74:	4604      	mov	r4, r0
 800cd76:	460d      	mov	r5, r1
 800cd78:	ec51 0b19 	vmov	r0, r1, d9
 800cd7c:	f7f3 fc34 	bl	80005e8 <__aeabi_dmul>
 800cd80:	4642      	mov	r2, r8
 800cd82:	464b      	mov	r3, r9
 800cd84:	f7f3 fa7a 	bl	800027c <__adddf3>
 800cd88:	4602      	mov	r2, r0
 800cd8a:	460b      	mov	r3, r1
 800cd8c:	4630      	mov	r0, r6
 800cd8e:	4639      	mov	r1, r7
 800cd90:	f7f3 fa72 	bl	8000278 <__aeabi_dsub>
 800cd94:	4652      	mov	r2, sl
 800cd96:	465b      	mov	r3, fp
 800cd98:	f7f3 fa6e 	bl	8000278 <__aeabi_dsub>
 800cd9c:	4602      	mov	r2, r0
 800cd9e:	460b      	mov	r3, r1
 800cda0:	4620      	mov	r0, r4
 800cda2:	4629      	mov	r1, r5
 800cda4:	e7d9      	b.n	800cd5a <__ieee754_log+0x27a>
 800cda6:	4602      	mov	r2, r0
 800cda8:	460b      	mov	r3, r1
 800cdaa:	4650      	mov	r0, sl
 800cdac:	4659      	mov	r1, fp
 800cdae:	f7f3 fa63 	bl	8000278 <__aeabi_dsub>
 800cdb2:	ec53 2b18 	vmov	r2, r3, d8
 800cdb6:	f7f3 fc17 	bl	80005e8 <__aeabi_dmul>
 800cdba:	4606      	mov	r6, r0
 800cdbc:	460f      	mov	r7, r1
 800cdbe:	2c00      	cmp	r4, #0
 800cdc0:	f43f af23 	beq.w	800cc0a <__ieee754_log+0x12a>
 800cdc4:	a308      	add	r3, pc, #32	; (adr r3, 800cde8 <__ieee754_log+0x308>)
 800cdc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdca:	ec51 0b19 	vmov	r0, r1, d9
 800cdce:	f7f3 fc0b 	bl	80005e8 <__aeabi_dmul>
 800cdd2:	a307      	add	r3, pc, #28	; (adr r3, 800cdf0 <__ieee754_log+0x310>)
 800cdd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdd8:	4604      	mov	r4, r0
 800cdda:	460d      	mov	r5, r1
 800cddc:	ec51 0b19 	vmov	r0, r1, d9
 800cde0:	e727      	b.n	800cc32 <__ieee754_log+0x152>
 800cde2:	ed9f 0b15 	vldr	d0, [pc, #84]	; 800ce38 <__ieee754_log+0x358>
 800cde6:	e694      	b.n	800cb12 <__ieee754_log+0x32>
 800cde8:	fee00000 	.word	0xfee00000
 800cdec:	3fe62e42 	.word	0x3fe62e42
 800cdf0:	35793c76 	.word	0x35793c76
 800cdf4:	3dea39ef 	.word	0x3dea39ef
 800cdf8:	55555555 	.word	0x55555555
 800cdfc:	3fd55555 	.word	0x3fd55555
 800ce00:	df3e5244 	.word	0xdf3e5244
 800ce04:	3fc2f112 	.word	0x3fc2f112
 800ce08:	96cb03de 	.word	0x96cb03de
 800ce0c:	3fc74664 	.word	0x3fc74664
 800ce10:	94229359 	.word	0x94229359
 800ce14:	3fd24924 	.word	0x3fd24924
 800ce18:	55555593 	.word	0x55555593
 800ce1c:	3fe55555 	.word	0x3fe55555
 800ce20:	d078c69f 	.word	0xd078c69f
 800ce24:	3fc39a09 	.word	0x3fc39a09
 800ce28:	1d8e78af 	.word	0x1d8e78af
 800ce2c:	3fcc71c5 	.word	0x3fcc71c5
 800ce30:	9997fa04 	.word	0x9997fa04
 800ce34:	3fd99999 	.word	0x3fd99999
	...
 800ce40:	c3500000 	.word	0xc3500000
 800ce44:	43500000 	.word	0x43500000
 800ce48:	7fefffff 	.word	0x7fefffff
 800ce4c:	3ff00000 	.word	0x3ff00000
 800ce50:	3fe00000 	.word	0x3fe00000
 800ce54:	00000000 	.word	0x00000000

0800ce58 <nan>:
 800ce58:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800ce60 <nan+0x8>
 800ce5c:	4770      	bx	lr
 800ce5e:	bf00      	nop
 800ce60:	00000000 	.word	0x00000000
 800ce64:	7ff80000 	.word	0x7ff80000

0800ce68 <_init>:
 800ce68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce6a:	bf00      	nop
 800ce6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce6e:	bc08      	pop	{r3}
 800ce70:	469e      	mov	lr, r3
 800ce72:	4770      	bx	lr

0800ce74 <_fini>:
 800ce74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce76:	bf00      	nop
 800ce78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce7a:	bc08      	pop	{r3}
 800ce7c:	469e      	mov	lr, r3
 800ce7e:	4770      	bx	lr
