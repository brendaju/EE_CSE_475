
CapTouch.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c9c8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d8  0800cb58  0800cb58  0001cb58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cd30  0800cd30  0002009c  2**0
                  CONTENTS
  4 .ARM          00000008  0800cd30  0800cd30  0001cd30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cd38  0800cd38  0002009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cd38  0800cd38  0001cd38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cd3c  0800cd3c  0001cd3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  0800cd40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002009c  2**0
                  CONTENTS
 10 .bss          00000da0  2000009c  2000009c  0002009c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000e3c  20000e3c  0002009c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000264de  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004b48  00000000  00000000  000465aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001a10  00000000  00000000  0004b0f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001880  00000000  00000000  0004cb08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026105  00000000  00000000  0004e388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000227ae  00000000  00000000  0007448d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d6df7  00000000  00000000  00096c3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0016da32  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007724  00000000  00000000  0016da88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000009c 	.word	0x2000009c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800cb40 	.word	0x0800cb40

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000a0 	.word	0x200000a0
 80001cc:	0800cb40 	.word	0x0800cb40

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpun>:
 8000b1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b24:	d102      	bne.n	8000b2c <__aeabi_dcmpun+0x10>
 8000b26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b2a:	d10a      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x20>
 8000b36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b3a:	d102      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	f04f 0001 	mov.w	r0, #1
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_d2uiz>:
 8000b48:	004a      	lsls	r2, r1, #1
 8000b4a:	d211      	bcs.n	8000b70 <__aeabi_d2uiz+0x28>
 8000b4c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b50:	d211      	bcs.n	8000b76 <__aeabi_d2uiz+0x2e>
 8000b52:	d50d      	bpl.n	8000b70 <__aeabi_d2uiz+0x28>
 8000b54:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b5c:	d40e      	bmi.n	8000b7c <__aeabi_d2uiz+0x34>
 8000b5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b6e:	4770      	bx	lr
 8000b70:	f04f 0000 	mov.w	r0, #0
 8000b74:	4770      	bx	lr
 8000b76:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_d2uiz+0x3a>
 8000b7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0000 	mov.w	r0, #0
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_uldivmod>:
 8000b88:	b953      	cbnz	r3, 8000ba0 <__aeabi_uldivmod+0x18>
 8000b8a:	b94a      	cbnz	r2, 8000ba0 <__aeabi_uldivmod+0x18>
 8000b8c:	2900      	cmp	r1, #0
 8000b8e:	bf08      	it	eq
 8000b90:	2800      	cmpeq	r0, #0
 8000b92:	bf1c      	itt	ne
 8000b94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b9c:	f000 b96e 	b.w	8000e7c <__aeabi_idiv0>
 8000ba0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ba4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ba8:	f000 f806 	bl	8000bb8 <__udivmoddi4>
 8000bac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bb4:	b004      	add	sp, #16
 8000bb6:	4770      	bx	lr

08000bb8 <__udivmoddi4>:
 8000bb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bbc:	9d08      	ldr	r5, [sp, #32]
 8000bbe:	4604      	mov	r4, r0
 8000bc0:	468c      	mov	ip, r1
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	f040 8083 	bne.w	8000cce <__udivmoddi4+0x116>
 8000bc8:	428a      	cmp	r2, r1
 8000bca:	4617      	mov	r7, r2
 8000bcc:	d947      	bls.n	8000c5e <__udivmoddi4+0xa6>
 8000bce:	fab2 f282 	clz	r2, r2
 8000bd2:	b142      	cbz	r2, 8000be6 <__udivmoddi4+0x2e>
 8000bd4:	f1c2 0020 	rsb	r0, r2, #32
 8000bd8:	fa24 f000 	lsr.w	r0, r4, r0
 8000bdc:	4091      	lsls	r1, r2
 8000bde:	4097      	lsls	r7, r2
 8000be0:	ea40 0c01 	orr.w	ip, r0, r1
 8000be4:	4094      	lsls	r4, r2
 8000be6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000bea:	0c23      	lsrs	r3, r4, #16
 8000bec:	fbbc f6f8 	udiv	r6, ip, r8
 8000bf0:	fa1f fe87 	uxth.w	lr, r7
 8000bf4:	fb08 c116 	mls	r1, r8, r6, ip
 8000bf8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bfc:	fb06 f10e 	mul.w	r1, r6, lr
 8000c00:	4299      	cmp	r1, r3
 8000c02:	d909      	bls.n	8000c18 <__udivmoddi4+0x60>
 8000c04:	18fb      	adds	r3, r7, r3
 8000c06:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c0a:	f080 8119 	bcs.w	8000e40 <__udivmoddi4+0x288>
 8000c0e:	4299      	cmp	r1, r3
 8000c10:	f240 8116 	bls.w	8000e40 <__udivmoddi4+0x288>
 8000c14:	3e02      	subs	r6, #2
 8000c16:	443b      	add	r3, r7
 8000c18:	1a5b      	subs	r3, r3, r1
 8000c1a:	b2a4      	uxth	r4, r4
 8000c1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c20:	fb08 3310 	mls	r3, r8, r0, r3
 8000c24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c28:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c2c:	45a6      	cmp	lr, r4
 8000c2e:	d909      	bls.n	8000c44 <__udivmoddi4+0x8c>
 8000c30:	193c      	adds	r4, r7, r4
 8000c32:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c36:	f080 8105 	bcs.w	8000e44 <__udivmoddi4+0x28c>
 8000c3a:	45a6      	cmp	lr, r4
 8000c3c:	f240 8102 	bls.w	8000e44 <__udivmoddi4+0x28c>
 8000c40:	3802      	subs	r0, #2
 8000c42:	443c      	add	r4, r7
 8000c44:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c48:	eba4 040e 	sub.w	r4, r4, lr
 8000c4c:	2600      	movs	r6, #0
 8000c4e:	b11d      	cbz	r5, 8000c58 <__udivmoddi4+0xa0>
 8000c50:	40d4      	lsrs	r4, r2
 8000c52:	2300      	movs	r3, #0
 8000c54:	e9c5 4300 	strd	r4, r3, [r5]
 8000c58:	4631      	mov	r1, r6
 8000c5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c5e:	b902      	cbnz	r2, 8000c62 <__udivmoddi4+0xaa>
 8000c60:	deff      	udf	#255	; 0xff
 8000c62:	fab2 f282 	clz	r2, r2
 8000c66:	2a00      	cmp	r2, #0
 8000c68:	d150      	bne.n	8000d0c <__udivmoddi4+0x154>
 8000c6a:	1bcb      	subs	r3, r1, r7
 8000c6c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c70:	fa1f f887 	uxth.w	r8, r7
 8000c74:	2601      	movs	r6, #1
 8000c76:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c7a:	0c21      	lsrs	r1, r4, #16
 8000c7c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c84:	fb08 f30c 	mul.w	r3, r8, ip
 8000c88:	428b      	cmp	r3, r1
 8000c8a:	d907      	bls.n	8000c9c <__udivmoddi4+0xe4>
 8000c8c:	1879      	adds	r1, r7, r1
 8000c8e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000c92:	d202      	bcs.n	8000c9a <__udivmoddi4+0xe2>
 8000c94:	428b      	cmp	r3, r1
 8000c96:	f200 80e9 	bhi.w	8000e6c <__udivmoddi4+0x2b4>
 8000c9a:	4684      	mov	ip, r0
 8000c9c:	1ac9      	subs	r1, r1, r3
 8000c9e:	b2a3      	uxth	r3, r4
 8000ca0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ca4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ca8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cac:	fb08 f800 	mul.w	r8, r8, r0
 8000cb0:	45a0      	cmp	r8, r4
 8000cb2:	d907      	bls.n	8000cc4 <__udivmoddi4+0x10c>
 8000cb4:	193c      	adds	r4, r7, r4
 8000cb6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cba:	d202      	bcs.n	8000cc2 <__udivmoddi4+0x10a>
 8000cbc:	45a0      	cmp	r8, r4
 8000cbe:	f200 80d9 	bhi.w	8000e74 <__udivmoddi4+0x2bc>
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	eba4 0408 	sub.w	r4, r4, r8
 8000cc8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ccc:	e7bf      	b.n	8000c4e <__udivmoddi4+0x96>
 8000cce:	428b      	cmp	r3, r1
 8000cd0:	d909      	bls.n	8000ce6 <__udivmoddi4+0x12e>
 8000cd2:	2d00      	cmp	r5, #0
 8000cd4:	f000 80b1 	beq.w	8000e3a <__udivmoddi4+0x282>
 8000cd8:	2600      	movs	r6, #0
 8000cda:	e9c5 0100 	strd	r0, r1, [r5]
 8000cde:	4630      	mov	r0, r6
 8000ce0:	4631      	mov	r1, r6
 8000ce2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce6:	fab3 f683 	clz	r6, r3
 8000cea:	2e00      	cmp	r6, #0
 8000cec:	d14a      	bne.n	8000d84 <__udivmoddi4+0x1cc>
 8000cee:	428b      	cmp	r3, r1
 8000cf0:	d302      	bcc.n	8000cf8 <__udivmoddi4+0x140>
 8000cf2:	4282      	cmp	r2, r0
 8000cf4:	f200 80b8 	bhi.w	8000e68 <__udivmoddi4+0x2b0>
 8000cf8:	1a84      	subs	r4, r0, r2
 8000cfa:	eb61 0103 	sbc.w	r1, r1, r3
 8000cfe:	2001      	movs	r0, #1
 8000d00:	468c      	mov	ip, r1
 8000d02:	2d00      	cmp	r5, #0
 8000d04:	d0a8      	beq.n	8000c58 <__udivmoddi4+0xa0>
 8000d06:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d0a:	e7a5      	b.n	8000c58 <__udivmoddi4+0xa0>
 8000d0c:	f1c2 0320 	rsb	r3, r2, #32
 8000d10:	fa20 f603 	lsr.w	r6, r0, r3
 8000d14:	4097      	lsls	r7, r2
 8000d16:	fa01 f002 	lsl.w	r0, r1, r2
 8000d1a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d1e:	40d9      	lsrs	r1, r3
 8000d20:	4330      	orrs	r0, r6
 8000d22:	0c03      	lsrs	r3, r0, #16
 8000d24:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d28:	fa1f f887 	uxth.w	r8, r7
 8000d2c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d30:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d34:	fb06 f108 	mul.w	r1, r6, r8
 8000d38:	4299      	cmp	r1, r3
 8000d3a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d3e:	d909      	bls.n	8000d54 <__udivmoddi4+0x19c>
 8000d40:	18fb      	adds	r3, r7, r3
 8000d42:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000d46:	f080 808d 	bcs.w	8000e64 <__udivmoddi4+0x2ac>
 8000d4a:	4299      	cmp	r1, r3
 8000d4c:	f240 808a 	bls.w	8000e64 <__udivmoddi4+0x2ac>
 8000d50:	3e02      	subs	r6, #2
 8000d52:	443b      	add	r3, r7
 8000d54:	1a5b      	subs	r3, r3, r1
 8000d56:	b281      	uxth	r1, r0
 8000d58:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d5c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d60:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d64:	fb00 f308 	mul.w	r3, r0, r8
 8000d68:	428b      	cmp	r3, r1
 8000d6a:	d907      	bls.n	8000d7c <__udivmoddi4+0x1c4>
 8000d6c:	1879      	adds	r1, r7, r1
 8000d6e:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000d72:	d273      	bcs.n	8000e5c <__udivmoddi4+0x2a4>
 8000d74:	428b      	cmp	r3, r1
 8000d76:	d971      	bls.n	8000e5c <__udivmoddi4+0x2a4>
 8000d78:	3802      	subs	r0, #2
 8000d7a:	4439      	add	r1, r7
 8000d7c:	1acb      	subs	r3, r1, r3
 8000d7e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d82:	e778      	b.n	8000c76 <__udivmoddi4+0xbe>
 8000d84:	f1c6 0c20 	rsb	ip, r6, #32
 8000d88:	fa03 f406 	lsl.w	r4, r3, r6
 8000d8c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d90:	431c      	orrs	r4, r3
 8000d92:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d96:	fa01 f306 	lsl.w	r3, r1, r6
 8000d9a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d9e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000da2:	431f      	orrs	r7, r3
 8000da4:	0c3b      	lsrs	r3, r7, #16
 8000da6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000daa:	fa1f f884 	uxth.w	r8, r4
 8000dae:	fb0e 1119 	mls	r1, lr, r9, r1
 8000db2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000db6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dba:	458a      	cmp	sl, r1
 8000dbc:	fa02 f206 	lsl.w	r2, r2, r6
 8000dc0:	fa00 f306 	lsl.w	r3, r0, r6
 8000dc4:	d908      	bls.n	8000dd8 <__udivmoddi4+0x220>
 8000dc6:	1861      	adds	r1, r4, r1
 8000dc8:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000dcc:	d248      	bcs.n	8000e60 <__udivmoddi4+0x2a8>
 8000dce:	458a      	cmp	sl, r1
 8000dd0:	d946      	bls.n	8000e60 <__udivmoddi4+0x2a8>
 8000dd2:	f1a9 0902 	sub.w	r9, r9, #2
 8000dd6:	4421      	add	r1, r4
 8000dd8:	eba1 010a 	sub.w	r1, r1, sl
 8000ddc:	b2bf      	uxth	r7, r7
 8000dde:	fbb1 f0fe 	udiv	r0, r1, lr
 8000de2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000de6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000dea:	fb00 f808 	mul.w	r8, r0, r8
 8000dee:	45b8      	cmp	r8, r7
 8000df0:	d907      	bls.n	8000e02 <__udivmoddi4+0x24a>
 8000df2:	19e7      	adds	r7, r4, r7
 8000df4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000df8:	d22e      	bcs.n	8000e58 <__udivmoddi4+0x2a0>
 8000dfa:	45b8      	cmp	r8, r7
 8000dfc:	d92c      	bls.n	8000e58 <__udivmoddi4+0x2a0>
 8000dfe:	3802      	subs	r0, #2
 8000e00:	4427      	add	r7, r4
 8000e02:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e06:	eba7 0708 	sub.w	r7, r7, r8
 8000e0a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e0e:	454f      	cmp	r7, r9
 8000e10:	46c6      	mov	lr, r8
 8000e12:	4649      	mov	r1, r9
 8000e14:	d31a      	bcc.n	8000e4c <__udivmoddi4+0x294>
 8000e16:	d017      	beq.n	8000e48 <__udivmoddi4+0x290>
 8000e18:	b15d      	cbz	r5, 8000e32 <__udivmoddi4+0x27a>
 8000e1a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e1e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e22:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e26:	40f2      	lsrs	r2, r6
 8000e28:	ea4c 0202 	orr.w	r2, ip, r2
 8000e2c:	40f7      	lsrs	r7, r6
 8000e2e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e32:	2600      	movs	r6, #0
 8000e34:	4631      	mov	r1, r6
 8000e36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e3a:	462e      	mov	r6, r5
 8000e3c:	4628      	mov	r0, r5
 8000e3e:	e70b      	b.n	8000c58 <__udivmoddi4+0xa0>
 8000e40:	4606      	mov	r6, r0
 8000e42:	e6e9      	b.n	8000c18 <__udivmoddi4+0x60>
 8000e44:	4618      	mov	r0, r3
 8000e46:	e6fd      	b.n	8000c44 <__udivmoddi4+0x8c>
 8000e48:	4543      	cmp	r3, r8
 8000e4a:	d2e5      	bcs.n	8000e18 <__udivmoddi4+0x260>
 8000e4c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e50:	eb69 0104 	sbc.w	r1, r9, r4
 8000e54:	3801      	subs	r0, #1
 8000e56:	e7df      	b.n	8000e18 <__udivmoddi4+0x260>
 8000e58:	4608      	mov	r0, r1
 8000e5a:	e7d2      	b.n	8000e02 <__udivmoddi4+0x24a>
 8000e5c:	4660      	mov	r0, ip
 8000e5e:	e78d      	b.n	8000d7c <__udivmoddi4+0x1c4>
 8000e60:	4681      	mov	r9, r0
 8000e62:	e7b9      	b.n	8000dd8 <__udivmoddi4+0x220>
 8000e64:	4666      	mov	r6, ip
 8000e66:	e775      	b.n	8000d54 <__udivmoddi4+0x19c>
 8000e68:	4630      	mov	r0, r6
 8000e6a:	e74a      	b.n	8000d02 <__udivmoddi4+0x14a>
 8000e6c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e70:	4439      	add	r1, r7
 8000e72:	e713      	b.n	8000c9c <__udivmoddi4+0xe4>
 8000e74:	3802      	subs	r0, #2
 8000e76:	443c      	add	r4, r7
 8000e78:	e724      	b.n	8000cc4 <__udivmoddi4+0x10c>
 8000e7a:	bf00      	nop

08000e7c <__aeabi_idiv0>:
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop

08000e80 <visInit>:




void visInit()
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0

	// 4 parallel output LED strips needs 18% overhead during TX
	// 8 parallel output LED strips overhead is 8us of 30us period which is 28% - see the debug output PD15/13

	// If you need more parallel LED strips, increase the WS2812_BUFFER_COUNT value
	for( i = 0; i < WS2812_BUFFER_COUNT; i++)
 8000e86:	2300      	movs	r3, #0
 8000e88:	71fb      	strb	r3, [r7, #7]
 8000e8a:	e02b      	b.n	8000ee4 <visInit+0x64>
	{

		// Set output channel/pin, GPIO_PIN_0 = 0, for GPIO_PIN_5 = 5 - this has to correspond to WS2812B_PINS
		ws2812b.item[i].channel = 1;
 8000e8c:	79fb      	ldrb	r3, [r7, #7]
 8000e8e:	4a1a      	ldr	r2, [pc, #104]	; (8000ef8 <visInit+0x78>)
 8000e90:	011b      	lsls	r3, r3, #4
 8000e92:	4413      	add	r3, r2
 8000e94:	330c      	adds	r3, #12
 8000e96:	2201      	movs	r2, #1
 8000e98:	701a      	strb	r2, [r3, #0]

		// Every even output line has second frameBuffer2 with different effect
		if(i % 2 == 0)
 8000e9a:	79fb      	ldrb	r3, [r7, #7]
 8000e9c:	f003 0301 	and.w	r3, r3, #1
 8000ea0:	b2db      	uxtb	r3, r3
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d10e      	bne.n	8000ec4 <visInit+0x44>
		{
			// Your RGB framebuffer
			ws2812b.item[i].frameBufferPointer = frameBuffer;
 8000ea6:	79fb      	ldrb	r3, [r7, #7]
 8000ea8:	4a13      	ldr	r2, [pc, #76]	; (8000ef8 <visInit+0x78>)
 8000eaa:	011b      	lsls	r3, r3, #4
 8000eac:	4413      	add	r3, r2
 8000eae:	4a13      	ldr	r2, [pc, #76]	; (8000efc <visInit+0x7c>)
 8000eb0:	601a      	str	r2, [r3, #0]
			// RAW size of framebuffer
			ws2812b.item[i].frameBufferSize = sizeof(frameBuffer);
 8000eb2:	79fb      	ldrb	r3, [r7, #7]
 8000eb4:	4a10      	ldr	r2, [pc, #64]	; (8000ef8 <visInit+0x78>)
 8000eb6:	011b      	lsls	r3, r3, #4
 8000eb8:	4413      	add	r3, r2
 8000eba:	3304      	adds	r3, #4
 8000ebc:	f44f 7210 	mov.w	r2, #576	; 0x240
 8000ec0:	601a      	str	r2, [r3, #0]
 8000ec2:	e00c      	b.n	8000ede <visInit+0x5e>
		} else {
			ws2812b.item[i].frameBufferPointer = frameBuffer2;
 8000ec4:	79fb      	ldrb	r3, [r7, #7]
 8000ec6:	4a0c      	ldr	r2, [pc, #48]	; (8000ef8 <visInit+0x78>)
 8000ec8:	011b      	lsls	r3, r3, #4
 8000eca:	4413      	add	r3, r2
 8000ecc:	4a0c      	ldr	r2, [pc, #48]	; (8000f00 <visInit+0x80>)
 8000ece:	601a      	str	r2, [r3, #0]
			ws2812b.item[i].frameBufferSize = sizeof(frameBuffer2);
 8000ed0:	79fb      	ldrb	r3, [r7, #7]
 8000ed2:	4a09      	ldr	r2, [pc, #36]	; (8000ef8 <visInit+0x78>)
 8000ed4:	011b      	lsls	r3, r3, #4
 8000ed6:	4413      	add	r3, r2
 8000ed8:	3304      	adds	r3, #4
 8000eda:	223c      	movs	r2, #60	; 0x3c
 8000edc:	601a      	str	r2, [r3, #0]
	for( i = 0; i < WS2812_BUFFER_COUNT; i++)
 8000ede:	79fb      	ldrb	r3, [r7, #7]
 8000ee0:	3301      	adds	r3, #1
 8000ee2:	71fb      	strb	r3, [r7, #7]
 8000ee4:	79fb      	ldrb	r3, [r7, #7]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d0d0      	beq.n	8000e8c <visInit+0xc>
		}

	}


	ws2812b_init();
 8000eea:	f001 fc53 	bl	8002794 <ws2812b_init>
}
 8000eee:	bf00      	nop
 8000ef0:	3708      	adds	r7, #8
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	20000104 	.word	0x20000104
 8000efc:	20000120 	.word	0x20000120
 8000f00:	200000c8 	.word	0x200000c8

08000f04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f04:	b590      	push	{r4, r7, lr}
 8000f06:	b099      	sub	sp, #100	; 0x64
 8000f08:	af04      	add	r7, sp, #16
	uint8_t bufTouch1[2];
	uint8_t bufTouch2[2];
	uint16_t capTouch[3];
	uint16_t oldCapTouch[3];
	uint8_t gridLoc[2];
	uint8_t UART1_rxBuffer[12] = {0};
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	627b      	str	r3, [r7, #36]	; 0x24
 8000f0e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f12:	2200      	movs	r2, #0
 8000f14:	601a      	str	r2, [r3, #0]
 8000f16:	605a      	str	r2, [r3, #4]
	//float val0;
	uint8_t newTouch = 0;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f1e:	f001 fc73 	bl	8002808 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f22:	f000 f89f 	bl	8001064 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f26:	f000 fa75 	bl	8001414 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000f2a:	f000 f905 	bl	8001138 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000f2e:	f000 f931 	bl	8001194 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000f32:	f000 f95f 	bl	80011f4 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000f36:	f00a fc69 	bl	800b80c <MX_USB_HOST_Init>
  MX_USART2_UART_Init();
 8000f3a:	f000 fa21 	bl	8001380 <MX_USART2_UART_Init>
  MX_DMA_Init();
 8000f3e:	f000 fa49 	bl	80013d4 <MX_DMA_Init>
  MX_TIM1_Init();
 8000f42:	f000 f98d 	bl	8001260 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  visInit();
 8000f46:	f7ff ff9b 	bl	8000e80 <visInit>
  MPR121_init(MPR121_ADDR0);
 8000f4a:	23b4      	movs	r3, #180	; 0xb4
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f000 fb81 	bl	8001654 <MPR121_init>
  MPR121_init(MPR121_ADDR1);
 8000f52:	23b8      	movs	r3, #184	; 0xb8
 8000f54:	4618      	mov	r0, r3
 8000f56:	f000 fb7d 	bl	8001654 <MPR121_init>
  MPR121_init(MPR121_ADDR2);
 8000f5a:	23ba      	movs	r3, #186	; 0xba
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f000 fb79 	bl	8001654 <MPR121_init>
  while (1)
  {

	//bufTouch0[0] = REG_TOUCH0;
	//ret0 = HAL_I2C_Master_Transmit(&hi2c1, MPR121_ADDR0, bufTouch0, 1, HAL_MAX_DELAY);
	ret0 = HAL_I2C_Mem_Read(&hi2c1, MPR121_ADDR0, REG_TOUCH0, I2C_MEMADD_SIZE_8BIT, bufTouch0, 2, HAL_MAX_DELAY);
 8000f62:	23b4      	movs	r3, #180	; 0xb4
 8000f64:	b299      	uxth	r1, r3
 8000f66:	2300      	movs	r3, #0
 8000f68:	b29a      	uxth	r2, r3
 8000f6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f6e:	9302      	str	r3, [sp, #8]
 8000f70:	2302      	movs	r3, #2
 8000f72:	9301      	str	r3, [sp, #4]
 8000f74:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000f78:	9300      	str	r3, [sp, #0]
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	4835      	ldr	r0, [pc, #212]	; (8001054 <main+0x150>)
 8000f7e:	f004 fb59 	bl	8005634 <HAL_I2C_Mem_Read>
 8000f82:	4603      	mov	r3, r0
 8000f84:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
	ret0 = HAL_I2C_Mem_Read(&hi2c1, MPR121_ADDR1, REG_TOUCH0, I2C_MEMADD_SIZE_8BIT, bufTouch1, 2, HAL_MAX_DELAY);
 8000f88:	23b8      	movs	r3, #184	; 0xb8
 8000f8a:	b299      	uxth	r1, r3
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	b29a      	uxth	r2, r3
 8000f90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f94:	9302      	str	r3, [sp, #8]
 8000f96:	2302      	movs	r3, #2
 8000f98:	9301      	str	r3, [sp, #4]
 8000f9a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000f9e:	9300      	str	r3, [sp, #0]
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	482c      	ldr	r0, [pc, #176]	; (8001054 <main+0x150>)
 8000fa4:	f004 fb46 	bl	8005634 <HAL_I2C_Mem_Read>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
	ret0 = HAL_I2C_Mem_Read(&hi2c1, MPR121_ADDR2, REG_TOUCH0, I2C_MEMADD_SIZE_8BIT, bufTouch2, 2, HAL_MAX_DELAY);
 8000fae:	23ba      	movs	r3, #186	; 0xba
 8000fb0:	b299      	uxth	r1, r3
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	b29a      	uxth	r2, r3
 8000fb6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000fba:	9302      	str	r3, [sp, #8]
 8000fbc:	2302      	movs	r3, #2
 8000fbe:	9301      	str	r3, [sp, #4]
 8000fc0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000fc4:	9300      	str	r3, [sp, #0]
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	4822      	ldr	r0, [pc, #136]	; (8001054 <main+0x150>)
 8000fca:	f004 fb33 	bl	8005634 <HAL_I2C_Mem_Read>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8000fd4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
	memcpy(capTouch, bufTouch0, 2*sizeof(uint8_t));
 8000fd8:	87bb      	strh	r3, [r7, #60]	; 0x3c
	memcpy(capTouch+1, bufTouch1, 2*sizeof(uint8_t));
 8000fda:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000fde:	3302      	adds	r3, #2
 8000fe0:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8000fe4:	801a      	strh	r2, [r3, #0]
	memcpy(capTouch+2, bufTouch2, 2*sizeof(uint8_t));
 8000fe6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000fea:	3304      	adds	r3, #4
 8000fec:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8000ff0:	801a      	strh	r2, [r3, #0]
		//tester = 10;
	} else {

		//sprintf((char*)bufTouch0, "%u\r\n", (unsigned int)val0);
	}
	newTouch = determinePixel(capTouch, gridLoc);
 8000ff2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8000ff6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000ffa:	4611      	mov	r1, r2
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f000 fc41 	bl	8001884 <determinePixel>
 8001002:	4603      	mov	r3, r0
 8001004:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	//visHandle(capTouch, gridLoc, newTouch);
	uint8_t data[] = "HELLO WORLD \r\n";
 8001008:	4b13      	ldr	r3, [pc, #76]	; (8001058 <main+0x154>)
 800100a:	f107 0414 	add.w	r4, r7, #20
 800100e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001010:	c407      	stmia	r4!, {r0, r1, r2}
 8001012:	8023      	strh	r3, [r4, #0]
 8001014:	3402      	adds	r4, #2
 8001016:	0c1b      	lsrs	r3, r3, #16
 8001018:	7023      	strb	r3, [r4, #0]
	//HAL_UART_Transmit (&huart2, data, sizeof (data), 10);
	//ret0 = HAL_UART_Receive (&huart2, UART1_rxBuffer, 12, 5000);

	if (newTouch == 1) {
 800101a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800101e:	2b01      	cmp	r3, #1
 8001020:	d112      	bne.n	8001048 <main+0x144>
		char buffer[20];
		sprintf(buffer, "x: %i, y: %i\r\n", gridLoc[0], gridLoc[1]);
 8001022:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001026:	461a      	mov	r2, r3
 8001028:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800102c:	4638      	mov	r0, r7
 800102e:	490b      	ldr	r1, [pc, #44]	; (800105c <main+0x158>)
 8001030:	f00a fff0 	bl	800c014 <siprintf>
		ret0 = HAL_UART_Transmit(&huart2, buffer, sizeof(buffer), HAL_MAX_DELAY);
 8001034:	4639      	mov	r1, r7
 8001036:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800103a:	2214      	movs	r2, #20
 800103c:	4808      	ldr	r0, [pc, #32]	; (8001060 <main+0x15c>)
 800103e:	f007 fa70 	bl	8008522 <HAL_UART_Transmit>
 8001042:	4603      	mov	r3, r0
 8001044:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
	}
	HAL_Delay(250);
 8001048:	20fa      	movs	r0, #250	; 0xfa
 800104a:	f001 fc4f 	bl	80028ec <HAL_Delay>
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 800104e:	f00a fc03 	bl	800b858 <MX_USB_HOST_Process>
  {
 8001052:	e786      	b.n	8000f62 <main+0x5e>
 8001054:	20000360 	.word	0x20000360
 8001058:	0800cb68 	.word	0x0800cb68
 800105c:	0800cb58 	.word	0x0800cb58
 8001060:	200004b4 	.word	0x200004b4

08001064 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b094      	sub	sp, #80	; 0x50
 8001068:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800106a:	f107 0320 	add.w	r3, r7, #32
 800106e:	2230      	movs	r2, #48	; 0x30
 8001070:	2100      	movs	r1, #0
 8001072:	4618      	mov	r0, r3
 8001074:	f00a ff0c 	bl	800be90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001078:	f107 030c 	add.w	r3, r7, #12
 800107c:	2200      	movs	r2, #0
 800107e:	601a      	str	r2, [r3, #0]
 8001080:	605a      	str	r2, [r3, #4]
 8001082:	609a      	str	r2, [r3, #8]
 8001084:	60da      	str	r2, [r3, #12]
 8001086:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001088:	2300      	movs	r3, #0
 800108a:	60bb      	str	r3, [r7, #8]
 800108c:	4b28      	ldr	r3, [pc, #160]	; (8001130 <SystemClock_Config+0xcc>)
 800108e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001090:	4a27      	ldr	r2, [pc, #156]	; (8001130 <SystemClock_Config+0xcc>)
 8001092:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001096:	6413      	str	r3, [r2, #64]	; 0x40
 8001098:	4b25      	ldr	r3, [pc, #148]	; (8001130 <SystemClock_Config+0xcc>)
 800109a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010a0:	60bb      	str	r3, [r7, #8]
 80010a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010a4:	2300      	movs	r3, #0
 80010a6:	607b      	str	r3, [r7, #4]
 80010a8:	4b22      	ldr	r3, [pc, #136]	; (8001134 <SystemClock_Config+0xd0>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4a21      	ldr	r2, [pc, #132]	; (8001134 <SystemClock_Config+0xd0>)
 80010ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010b2:	6013      	str	r3, [r2, #0]
 80010b4:	4b1f      	ldr	r3, [pc, #124]	; (8001134 <SystemClock_Config+0xd0>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010bc:	607b      	str	r3, [r7, #4]
 80010be:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010c0:	2301      	movs	r3, #1
 80010c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010c8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010ca:	2302      	movs	r3, #2
 80010cc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010ce:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80010d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80010d4:	2308      	movs	r3, #8
 80010d6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80010d8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80010dc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010de:	2302      	movs	r3, #2
 80010e0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80010e2:	2307      	movs	r3, #7
 80010e4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010e6:	f107 0320 	add.w	r3, r7, #32
 80010ea:	4618      	mov	r0, r3
 80010ec:	f005 fcc4 	bl	8006a78 <HAL_RCC_OscConfig>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <SystemClock_Config+0x96>
  {
    Error_Handler();
 80010f6:	f000 fc53 	bl	80019a0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010fa:	230f      	movs	r3, #15
 80010fc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010fe:	2302      	movs	r3, #2
 8001100:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001102:	2300      	movs	r3, #0
 8001104:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001106:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800110a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800110c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001110:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001112:	f107 030c 	add.w	r3, r7, #12
 8001116:	2105      	movs	r1, #5
 8001118:	4618      	mov	r0, r3
 800111a:	f005 ff25 	bl	8006f68 <HAL_RCC_ClockConfig>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d001      	beq.n	8001128 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001124:	f000 fc3c 	bl	80019a0 <Error_Handler>
  }
}
 8001128:	bf00      	nop
 800112a:	3750      	adds	r7, #80	; 0x50
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	40023800 	.word	0x40023800
 8001134:	40007000 	.word	0x40007000

08001138 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800113c:	4b12      	ldr	r3, [pc, #72]	; (8001188 <MX_I2C1_Init+0x50>)
 800113e:	4a13      	ldr	r2, [pc, #76]	; (800118c <MX_I2C1_Init+0x54>)
 8001140:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001142:	4b11      	ldr	r3, [pc, #68]	; (8001188 <MX_I2C1_Init+0x50>)
 8001144:	4a12      	ldr	r2, [pc, #72]	; (8001190 <MX_I2C1_Init+0x58>)
 8001146:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001148:	4b0f      	ldr	r3, [pc, #60]	; (8001188 <MX_I2C1_Init+0x50>)
 800114a:	2200      	movs	r2, #0
 800114c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800114e:	4b0e      	ldr	r3, [pc, #56]	; (8001188 <MX_I2C1_Init+0x50>)
 8001150:	2200      	movs	r2, #0
 8001152:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001154:	4b0c      	ldr	r3, [pc, #48]	; (8001188 <MX_I2C1_Init+0x50>)
 8001156:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800115a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800115c:	4b0a      	ldr	r3, [pc, #40]	; (8001188 <MX_I2C1_Init+0x50>)
 800115e:	2200      	movs	r2, #0
 8001160:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001162:	4b09      	ldr	r3, [pc, #36]	; (8001188 <MX_I2C1_Init+0x50>)
 8001164:	2200      	movs	r2, #0
 8001166:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001168:	4b07      	ldr	r3, [pc, #28]	; (8001188 <MX_I2C1_Init+0x50>)
 800116a:	2200      	movs	r2, #0
 800116c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800116e:	4b06      	ldr	r3, [pc, #24]	; (8001188 <MX_I2C1_Init+0x50>)
 8001170:	2200      	movs	r2, #0
 8001172:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001174:	4804      	ldr	r0, [pc, #16]	; (8001188 <MX_I2C1_Init+0x50>)
 8001176:	f004 f81f 	bl	80051b8 <HAL_I2C_Init>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d001      	beq.n	8001184 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001180:	f000 fc0e 	bl	80019a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001184:	bf00      	nop
 8001186:	bd80      	pop	{r7, pc}
 8001188:	20000360 	.word	0x20000360
 800118c:	40005400 	.word	0x40005400
 8001190:	000186a0 	.word	0x000186a0

08001194 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8001198:	4b13      	ldr	r3, [pc, #76]	; (80011e8 <MX_I2S3_Init+0x54>)
 800119a:	4a14      	ldr	r2, [pc, #80]	; (80011ec <MX_I2S3_Init+0x58>)
 800119c:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800119e:	4b12      	ldr	r3, [pc, #72]	; (80011e8 <MX_I2S3_Init+0x54>)
 80011a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011a4:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80011a6:	4b10      	ldr	r3, [pc, #64]	; (80011e8 <MX_I2S3_Init+0x54>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80011ac:	4b0e      	ldr	r3, [pc, #56]	; (80011e8 <MX_I2S3_Init+0x54>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80011b2:	4b0d      	ldr	r3, [pc, #52]	; (80011e8 <MX_I2S3_Init+0x54>)
 80011b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011b8:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80011ba:	4b0b      	ldr	r3, [pc, #44]	; (80011e8 <MX_I2S3_Init+0x54>)
 80011bc:	4a0c      	ldr	r2, [pc, #48]	; (80011f0 <MX_I2S3_Init+0x5c>)
 80011be:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80011c0:	4b09      	ldr	r3, [pc, #36]	; (80011e8 <MX_I2S3_Init+0x54>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80011c6:	4b08      	ldr	r3, [pc, #32]	; (80011e8 <MX_I2S3_Init+0x54>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80011cc:	4b06      	ldr	r3, [pc, #24]	; (80011e8 <MX_I2S3_Init+0x54>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80011d2:	4805      	ldr	r0, [pc, #20]	; (80011e8 <MX_I2S3_Init+0x54>)
 80011d4:	f004 ffb0 	bl	8006138 <HAL_I2S_Init>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80011de:	f000 fbdf 	bl	80019a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80011e2:	bf00      	nop
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	200004f8 	.word	0x200004f8
 80011ec:	40003c00 	.word	0x40003c00
 80011f0:	00017700 	.word	0x00017700

080011f4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80011f8:	4b17      	ldr	r3, [pc, #92]	; (8001258 <MX_SPI1_Init+0x64>)
 80011fa:	4a18      	ldr	r2, [pc, #96]	; (800125c <MX_SPI1_Init+0x68>)
 80011fc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80011fe:	4b16      	ldr	r3, [pc, #88]	; (8001258 <MX_SPI1_Init+0x64>)
 8001200:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001204:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001206:	4b14      	ldr	r3, [pc, #80]	; (8001258 <MX_SPI1_Init+0x64>)
 8001208:	2200      	movs	r2, #0
 800120a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800120c:	4b12      	ldr	r3, [pc, #72]	; (8001258 <MX_SPI1_Init+0x64>)
 800120e:	2200      	movs	r2, #0
 8001210:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001212:	4b11      	ldr	r3, [pc, #68]	; (8001258 <MX_SPI1_Init+0x64>)
 8001214:	2200      	movs	r2, #0
 8001216:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001218:	4b0f      	ldr	r3, [pc, #60]	; (8001258 <MX_SPI1_Init+0x64>)
 800121a:	2200      	movs	r2, #0
 800121c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800121e:	4b0e      	ldr	r3, [pc, #56]	; (8001258 <MX_SPI1_Init+0x64>)
 8001220:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001224:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001226:	4b0c      	ldr	r3, [pc, #48]	; (8001258 <MX_SPI1_Init+0x64>)
 8001228:	2200      	movs	r2, #0
 800122a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800122c:	4b0a      	ldr	r3, [pc, #40]	; (8001258 <MX_SPI1_Init+0x64>)
 800122e:	2200      	movs	r2, #0
 8001230:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001232:	4b09      	ldr	r3, [pc, #36]	; (8001258 <MX_SPI1_Init+0x64>)
 8001234:	2200      	movs	r2, #0
 8001236:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001238:	4b07      	ldr	r3, [pc, #28]	; (8001258 <MX_SPI1_Init+0x64>)
 800123a:	2200      	movs	r2, #0
 800123c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800123e:	4b06      	ldr	r3, [pc, #24]	; (8001258 <MX_SPI1_Init+0x64>)
 8001240:	220a      	movs	r2, #10
 8001242:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001244:	4804      	ldr	r0, [pc, #16]	; (8001258 <MX_SPI1_Init+0x64>)
 8001246:	f006 f9cb 	bl	80075e0 <HAL_SPI_Init>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001250:	f000 fba6 	bl	80019a0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001254:	bf00      	nop
 8001256:	bd80      	pop	{r7, pc}
 8001258:	2000045c 	.word	0x2000045c
 800125c:	40013000 	.word	0x40013000

08001260 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b092      	sub	sp, #72	; 0x48
 8001264:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001266:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800126a:	2200      	movs	r2, #0
 800126c:	601a      	str	r2, [r3, #0]
 800126e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001270:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001274:	2200      	movs	r2, #0
 8001276:	601a      	str	r2, [r3, #0]
 8001278:	605a      	str	r2, [r3, #4]
 800127a:	609a      	str	r2, [r3, #8]
 800127c:	60da      	str	r2, [r3, #12]
 800127e:	611a      	str	r2, [r3, #16]
 8001280:	615a      	str	r2, [r3, #20]
 8001282:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001284:	1d3b      	adds	r3, r7, #4
 8001286:	2220      	movs	r2, #32
 8001288:	2100      	movs	r1, #0
 800128a:	4618      	mov	r0, r3
 800128c:	f00a fe00 	bl	800be90 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001290:	4b39      	ldr	r3, [pc, #228]	; (8001378 <MX_TIM1_Init+0x118>)
 8001292:	4a3a      	ldr	r2, [pc, #232]	; (800137c <MX_TIM1_Init+0x11c>)
 8001294:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001296:	4b38      	ldr	r3, [pc, #224]	; (8001378 <MX_TIM1_Init+0x118>)
 8001298:	2200      	movs	r2, #0
 800129a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800129c:	4b36      	ldr	r3, [pc, #216]	; (8001378 <MX_TIM1_Init+0x118>)
 800129e:	2200      	movs	r2, #0
 80012a0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80012a2:	4b35      	ldr	r3, [pc, #212]	; (8001378 <MX_TIM1_Init+0x118>)
 80012a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012a8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012aa:	4b33      	ldr	r3, [pc, #204]	; (8001378 <MX_TIM1_Init+0x118>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80012b0:	4b31      	ldr	r3, [pc, #196]	; (8001378 <MX_TIM1_Init+0x118>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012b6:	4b30      	ldr	r3, [pc, #192]	; (8001378 <MX_TIM1_Init+0x118>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80012bc:	482e      	ldr	r0, [pc, #184]	; (8001378 <MX_TIM1_Init+0x118>)
 80012be:	f006 fa81 	bl	80077c4 <HAL_TIM_PWM_Init>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 80012c8:	f000 fb6a 	bl	80019a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012cc:	2300      	movs	r3, #0
 80012ce:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012d0:	2300      	movs	r3, #0
 80012d2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80012d4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80012d8:	4619      	mov	r1, r3
 80012da:	4827      	ldr	r0, [pc, #156]	; (8001378 <MX_TIM1_Init+0x118>)
 80012dc:	f006 fff2 	bl	80082c4 <HAL_TIMEx_MasterConfigSynchronization>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 80012e6:	f000 fb5b 	bl	80019a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012ea:	2360      	movs	r3, #96	; 0x60
 80012ec:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80012ee:	2300      	movs	r3, #0
 80012f0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012f2:	2300      	movs	r3, #0
 80012f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80012f6:	2300      	movs	r3, #0
 80012f8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012fa:	2300      	movs	r3, #0
 80012fc:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80012fe:	2300      	movs	r3, #0
 8001300:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001302:	2300      	movs	r3, #0
 8001304:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001306:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800130a:	2200      	movs	r2, #0
 800130c:	4619      	mov	r1, r3
 800130e:	481a      	ldr	r0, [pc, #104]	; (8001378 <MX_TIM1_Init+0x118>)
 8001310:	f006 fc78 	bl	8007c04 <HAL_TIM_PWM_ConfigChannel>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 800131a:	f000 fb41 	bl	80019a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800131e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001322:	2204      	movs	r2, #4
 8001324:	4619      	mov	r1, r3
 8001326:	4814      	ldr	r0, [pc, #80]	; (8001378 <MX_TIM1_Init+0x118>)
 8001328:	f006 fc6c 	bl	8007c04 <HAL_TIM_PWM_ConfigChannel>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8001332:	f000 fb35 	bl	80019a0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001336:	2300      	movs	r3, #0
 8001338:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800133a:	2300      	movs	r3, #0
 800133c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800133e:	2300      	movs	r3, #0
 8001340:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001342:	2300      	movs	r3, #0
 8001344:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001346:	2300      	movs	r3, #0
 8001348:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800134a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800134e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001350:	2300      	movs	r3, #0
 8001352:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001354:	1d3b      	adds	r3, r7, #4
 8001356:	4619      	mov	r1, r3
 8001358:	4807      	ldr	r0, [pc, #28]	; (8001378 <MX_TIM1_Init+0x118>)
 800135a:	f007 f82f 	bl	80083bc <HAL_TIMEx_ConfigBreakDeadTime>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8001364:	f000 fb1c 	bl	80019a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001368:	4803      	ldr	r0, [pc, #12]	; (8001378 <MX_TIM1_Init+0x118>)
 800136a:	f000 fcb5 	bl	8001cd8 <HAL_TIM_MspPostInit>

}
 800136e:	bf00      	nop
 8001370:	3748      	adds	r7, #72	; 0x48
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	20000414 	.word	0x20000414
 800137c:	40010000 	.word	0x40010000

08001380 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001384:	4b11      	ldr	r3, [pc, #68]	; (80013cc <MX_USART2_UART_Init+0x4c>)
 8001386:	4a12      	ldr	r2, [pc, #72]	; (80013d0 <MX_USART2_UART_Init+0x50>)
 8001388:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800138a:	4b10      	ldr	r3, [pc, #64]	; (80013cc <MX_USART2_UART_Init+0x4c>)
 800138c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001390:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001392:	4b0e      	ldr	r3, [pc, #56]	; (80013cc <MX_USART2_UART_Init+0x4c>)
 8001394:	2200      	movs	r2, #0
 8001396:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001398:	4b0c      	ldr	r3, [pc, #48]	; (80013cc <MX_USART2_UART_Init+0x4c>)
 800139a:	2200      	movs	r2, #0
 800139c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800139e:	4b0b      	ldr	r3, [pc, #44]	; (80013cc <MX_USART2_UART_Init+0x4c>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013a4:	4b09      	ldr	r3, [pc, #36]	; (80013cc <MX_USART2_UART_Init+0x4c>)
 80013a6:	220c      	movs	r2, #12
 80013a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013aa:	4b08      	ldr	r3, [pc, #32]	; (80013cc <MX_USART2_UART_Init+0x4c>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013b0:	4b06      	ldr	r3, [pc, #24]	; (80013cc <MX_USART2_UART_Init+0x4c>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013b6:	4805      	ldr	r0, [pc, #20]	; (80013cc <MX_USART2_UART_Init+0x4c>)
 80013b8:	f007 f866 	bl	8008488 <HAL_UART_Init>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80013c2:	f000 faed 	bl	80019a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013c6:	bf00      	nop
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	200004b4 	.word	0x200004b4
 80013d0:	40004400 	.word	0x40004400

080013d4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80013da:	2300      	movs	r3, #0
 80013dc:	607b      	str	r3, [r7, #4]
 80013de:	4b0c      	ldr	r3, [pc, #48]	; (8001410 <MX_DMA_Init+0x3c>)
 80013e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e2:	4a0b      	ldr	r2, [pc, #44]	; (8001410 <MX_DMA_Init+0x3c>)
 80013e4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80013e8:	6313      	str	r3, [r2, #48]	; 0x30
 80013ea:	4b09      	ldr	r3, [pc, #36]	; (8001410 <MX_DMA_Init+0x3c>)
 80013ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013f2:	607b      	str	r3, [r7, #4]
 80013f4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 80013f6:	2200      	movs	r2, #0
 80013f8:	2100      	movs	r1, #0
 80013fa:	2045      	movs	r0, #69	; 0x45
 80013fc:	f001 fb75 	bl	8002aea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8001400:	2045      	movs	r0, #69	; 0x45
 8001402:	f001 fb8e 	bl	8002b22 <HAL_NVIC_EnableIRQ>

}
 8001406:	bf00      	nop
 8001408:	3708      	adds	r7, #8
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	40023800 	.word	0x40023800

08001414 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b08c      	sub	sp, #48	; 0x30
 8001418:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800141a:	f107 031c 	add.w	r3, r7, #28
 800141e:	2200      	movs	r2, #0
 8001420:	601a      	str	r2, [r3, #0]
 8001422:	605a      	str	r2, [r3, #4]
 8001424:	609a      	str	r2, [r3, #8]
 8001426:	60da      	str	r2, [r3, #12]
 8001428:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800142a:	2300      	movs	r3, #0
 800142c:	61bb      	str	r3, [r7, #24]
 800142e:	4b74      	ldr	r3, [pc, #464]	; (8001600 <MX_GPIO_Init+0x1ec>)
 8001430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001432:	4a73      	ldr	r2, [pc, #460]	; (8001600 <MX_GPIO_Init+0x1ec>)
 8001434:	f043 0310 	orr.w	r3, r3, #16
 8001438:	6313      	str	r3, [r2, #48]	; 0x30
 800143a:	4b71      	ldr	r3, [pc, #452]	; (8001600 <MX_GPIO_Init+0x1ec>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143e:	f003 0310 	and.w	r3, r3, #16
 8001442:	61bb      	str	r3, [r7, #24]
 8001444:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001446:	2300      	movs	r3, #0
 8001448:	617b      	str	r3, [r7, #20]
 800144a:	4b6d      	ldr	r3, [pc, #436]	; (8001600 <MX_GPIO_Init+0x1ec>)
 800144c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144e:	4a6c      	ldr	r2, [pc, #432]	; (8001600 <MX_GPIO_Init+0x1ec>)
 8001450:	f043 0304 	orr.w	r3, r3, #4
 8001454:	6313      	str	r3, [r2, #48]	; 0x30
 8001456:	4b6a      	ldr	r3, [pc, #424]	; (8001600 <MX_GPIO_Init+0x1ec>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145a:	f003 0304 	and.w	r3, r3, #4
 800145e:	617b      	str	r3, [r7, #20]
 8001460:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001462:	2300      	movs	r3, #0
 8001464:	613b      	str	r3, [r7, #16]
 8001466:	4b66      	ldr	r3, [pc, #408]	; (8001600 <MX_GPIO_Init+0x1ec>)
 8001468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146a:	4a65      	ldr	r2, [pc, #404]	; (8001600 <MX_GPIO_Init+0x1ec>)
 800146c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001470:	6313      	str	r3, [r2, #48]	; 0x30
 8001472:	4b63      	ldr	r3, [pc, #396]	; (8001600 <MX_GPIO_Init+0x1ec>)
 8001474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001476:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800147a:	613b      	str	r3, [r7, #16]
 800147c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800147e:	2300      	movs	r3, #0
 8001480:	60fb      	str	r3, [r7, #12]
 8001482:	4b5f      	ldr	r3, [pc, #380]	; (8001600 <MX_GPIO_Init+0x1ec>)
 8001484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001486:	4a5e      	ldr	r2, [pc, #376]	; (8001600 <MX_GPIO_Init+0x1ec>)
 8001488:	f043 0301 	orr.w	r3, r3, #1
 800148c:	6313      	str	r3, [r2, #48]	; 0x30
 800148e:	4b5c      	ldr	r3, [pc, #368]	; (8001600 <MX_GPIO_Init+0x1ec>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001492:	f003 0301 	and.w	r3, r3, #1
 8001496:	60fb      	str	r3, [r7, #12]
 8001498:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800149a:	2300      	movs	r3, #0
 800149c:	60bb      	str	r3, [r7, #8]
 800149e:	4b58      	ldr	r3, [pc, #352]	; (8001600 <MX_GPIO_Init+0x1ec>)
 80014a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a2:	4a57      	ldr	r2, [pc, #348]	; (8001600 <MX_GPIO_Init+0x1ec>)
 80014a4:	f043 0302 	orr.w	r3, r3, #2
 80014a8:	6313      	str	r3, [r2, #48]	; 0x30
 80014aa:	4b55      	ldr	r3, [pc, #340]	; (8001600 <MX_GPIO_Init+0x1ec>)
 80014ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ae:	f003 0302 	and.w	r3, r3, #2
 80014b2:	60bb      	str	r3, [r7, #8]
 80014b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014b6:	2300      	movs	r3, #0
 80014b8:	607b      	str	r3, [r7, #4]
 80014ba:	4b51      	ldr	r3, [pc, #324]	; (8001600 <MX_GPIO_Init+0x1ec>)
 80014bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014be:	4a50      	ldr	r2, [pc, #320]	; (8001600 <MX_GPIO_Init+0x1ec>)
 80014c0:	f043 0308 	orr.w	r3, r3, #8
 80014c4:	6313      	str	r3, [r2, #48]	; 0x30
 80014c6:	4b4e      	ldr	r3, [pc, #312]	; (8001600 <MX_GPIO_Init+0x1ec>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ca:	f003 0308 	and.w	r3, r3, #8
 80014ce:	607b      	str	r3, [r7, #4]
 80014d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80014d2:	2200      	movs	r2, #0
 80014d4:	2108      	movs	r1, #8
 80014d6:	484b      	ldr	r0, [pc, #300]	; (8001604 <MX_GPIO_Init+0x1f0>)
 80014d8:	f002 f8e4 	bl	80036a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80014dc:	2201      	movs	r2, #1
 80014de:	2101      	movs	r1, #1
 80014e0:	4849      	ldr	r0, [pc, #292]	; (8001608 <MX_GPIO_Init+0x1f4>)
 80014e2:	f002 f8df 	bl	80036a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 80014e6:	2200      	movs	r2, #0
 80014e8:	2102      	movs	r1, #2
 80014ea:	4847      	ldr	r0, [pc, #284]	; (8001608 <MX_GPIO_Init+0x1f4>)
 80014ec:	f002 f8da 	bl	80036a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80014f0:	2200      	movs	r2, #0
 80014f2:	f24f 0110 	movw	r1, #61456	; 0xf010
 80014f6:	4845      	ldr	r0, [pc, #276]	; (800160c <MX_GPIO_Init+0x1f8>)
 80014f8:	f002 f8d4 	bl	80036a4 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80014fc:	2308      	movs	r3, #8
 80014fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001500:	2301      	movs	r3, #1
 8001502:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001504:	2300      	movs	r3, #0
 8001506:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001508:	2300      	movs	r3, #0
 800150a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800150c:	f107 031c 	add.w	r3, r7, #28
 8001510:	4619      	mov	r1, r3
 8001512:	483c      	ldr	r0, [pc, #240]	; (8001604 <MX_GPIO_Init+0x1f0>)
 8001514:	f001 ff2a 	bl	800336c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin PC1 */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|GPIO_PIN_1;
 8001518:	2303      	movs	r3, #3
 800151a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800151c:	2301      	movs	r3, #1
 800151e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001520:	2300      	movs	r3, #0
 8001522:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001524:	2300      	movs	r3, #0
 8001526:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001528:	f107 031c 	add.w	r3, r7, #28
 800152c:	4619      	mov	r1, r3
 800152e:	4836      	ldr	r0, [pc, #216]	; (8001608 <MX_GPIO_Init+0x1f4>)
 8001530:	f001 ff1c 	bl	800336c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001534:	2308      	movs	r3, #8
 8001536:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001538:	2302      	movs	r3, #2
 800153a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153c:	2300      	movs	r3, #0
 800153e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001540:	2300      	movs	r3, #0
 8001542:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001544:	2305      	movs	r3, #5
 8001546:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001548:	f107 031c 	add.w	r3, r7, #28
 800154c:	4619      	mov	r1, r3
 800154e:	482e      	ldr	r0, [pc, #184]	; (8001608 <MX_GPIO_Init+0x1f4>)
 8001550:	f001 ff0c 	bl	800336c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001554:	2301      	movs	r3, #1
 8001556:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001558:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800155c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155e:	2300      	movs	r3, #0
 8001560:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001562:	f107 031c 	add.w	r3, r7, #28
 8001566:	4619      	mov	r1, r3
 8001568:	4829      	ldr	r0, [pc, #164]	; (8001610 <MX_GPIO_Init+0x1fc>)
 800156a:	f001 feff 	bl	800336c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800156e:	2304      	movs	r3, #4
 8001570:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001572:	2300      	movs	r3, #0
 8001574:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001576:	2300      	movs	r3, #0
 8001578:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800157a:	f107 031c 	add.w	r3, r7, #28
 800157e:	4619      	mov	r1, r3
 8001580:	4824      	ldr	r0, [pc, #144]	; (8001614 <MX_GPIO_Init+0x200>)
 8001582:	f001 fef3 	bl	800336c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8001586:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800158a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800158c:	2302      	movs	r3, #2
 800158e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001590:	2300      	movs	r3, #0
 8001592:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001594:	2300      	movs	r3, #0
 8001596:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001598:	2305      	movs	r3, #5
 800159a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800159c:	f107 031c 	add.w	r3, r7, #28
 80015a0:	4619      	mov	r1, r3
 80015a2:	481c      	ldr	r0, [pc, #112]	; (8001614 <MX_GPIO_Init+0x200>)
 80015a4:	f001 fee2 	bl	800336c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80015a8:	f24f 0310 	movw	r3, #61456	; 0xf010
 80015ac:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ae:	2301      	movs	r3, #1
 80015b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b2:	2300      	movs	r3, #0
 80015b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b6:	2300      	movs	r3, #0
 80015b8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015ba:	f107 031c 	add.w	r3, r7, #28
 80015be:	4619      	mov	r1, r3
 80015c0:	4812      	ldr	r0, [pc, #72]	; (800160c <MX_GPIO_Init+0x1f8>)
 80015c2:	f001 fed3 	bl	800336c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80015c6:	2320      	movs	r3, #32
 80015c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015ca:	2300      	movs	r3, #0
 80015cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ce:	2300      	movs	r3, #0
 80015d0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80015d2:	f107 031c 	add.w	r3, r7, #28
 80015d6:	4619      	mov	r1, r3
 80015d8:	480c      	ldr	r0, [pc, #48]	; (800160c <MX_GPIO_Init+0x1f8>)
 80015da:	f001 fec7 	bl	800336c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80015de:	2302      	movs	r3, #2
 80015e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80015e2:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80015e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e8:	2300      	movs	r3, #0
 80015ea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80015ec:	f107 031c 	add.w	r3, r7, #28
 80015f0:	4619      	mov	r1, r3
 80015f2:	4804      	ldr	r0, [pc, #16]	; (8001604 <MX_GPIO_Init+0x1f0>)
 80015f4:	f001 feba 	bl	800336c <HAL_GPIO_Init>

}
 80015f8:	bf00      	nop
 80015fa:	3730      	adds	r7, #48	; 0x30
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	40023800 	.word	0x40023800
 8001604:	40021000 	.word	0x40021000
 8001608:	40020800 	.word	0x40020800
 800160c:	40020c00 	.word	0x40020c00
 8001610:	40020000 	.word	0x40020000
 8001614:	40020400 	.word	0x40020400

08001618 <IIC_ByteWrite>:

/* USER CODE BEGIN 4 */

void IIC_ByteWrite(uint8_t dev_addr, uint8_t reg_addr, uint8_t data) {
 8001618:	b580      	push	{r7, lr}
 800161a:	b086      	sub	sp, #24
 800161c:	af04      	add	r7, sp, #16
 800161e:	4603      	mov	r3, r0
 8001620:	71fb      	strb	r3, [r7, #7]
 8001622:	460b      	mov	r3, r1
 8001624:	71bb      	strb	r3, [r7, #6]
 8001626:	4613      	mov	r3, r2
 8001628:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Write(&hi2c1, dev_addr, reg_addr, I2C_MEMADD_SIZE_8BIT, (uint8_t*)(&data), 1, HAL_MAX_DELAY);
 800162a:	79fb      	ldrb	r3, [r7, #7]
 800162c:	b299      	uxth	r1, r3
 800162e:	79bb      	ldrb	r3, [r7, #6]
 8001630:	b29a      	uxth	r2, r3
 8001632:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001636:	9302      	str	r3, [sp, #8]
 8001638:	2301      	movs	r3, #1
 800163a:	9301      	str	r3, [sp, #4]
 800163c:	1d7b      	adds	r3, r7, #5
 800163e:	9300      	str	r3, [sp, #0]
 8001640:	2301      	movs	r3, #1
 8001642:	4803      	ldr	r0, [pc, #12]	; (8001650 <IIC_ByteWrite+0x38>)
 8001644:	f003 fefc 	bl	8005440 <HAL_I2C_Mem_Write>
}
 8001648:	bf00      	nop
 800164a:	3708      	adds	r7, #8
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	20000360 	.word	0x20000360

08001654 <MPR121_init>:

void MPR121_init(uint8_t addr) {
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0
 800165a:	4603      	mov	r3, r0
 800165c:	71fb      	strb	r3, [r7, #7]
  //Reset MPR121 if not reset correctly

	IIC_ByteWrite(addr ,0x80,0x63);  //Soft reset
 800165e:	79fb      	ldrb	r3, [r7, #7]
 8001660:	2263      	movs	r2, #99	; 0x63
 8001662:	2180      	movs	r1, #128	; 0x80
 8001664:	4618      	mov	r0, r3
 8001666:	f7ff ffd7 	bl	8001618 <IIC_ByteWrite>
	IIC_ByteWrite(addr ,0x5E,0x00);  //Stop mode
 800166a:	79fb      	ldrb	r3, [r7, #7]
 800166c:	2200      	movs	r2, #0
 800166e:	215e      	movs	r1, #94	; 0x5e
 8001670:	4618      	mov	r0, r3
 8001672:	f7ff ffd1 	bl	8001618 <IIC_ByteWrite>

	  //touch pad baseline filter
	  //rising
	IIC_ByteWrite(addr ,0x2B,0x01); // MAX HALF DELTA Rising
 8001676:	79fb      	ldrb	r3, [r7, #7]
 8001678:	2201      	movs	r2, #1
 800167a:	212b      	movs	r1, #43	; 0x2b
 800167c:	4618      	mov	r0, r3
 800167e:	f7ff ffcb 	bl	8001618 <IIC_ByteWrite>
	IIC_ByteWrite(addr ,0x2C,0x01); // NOISE HALF DELTA Rising
 8001682:	79fb      	ldrb	r3, [r7, #7]
 8001684:	2201      	movs	r2, #1
 8001686:	212c      	movs	r1, #44	; 0x2c
 8001688:	4618      	mov	r0, r3
 800168a:	f7ff ffc5 	bl	8001618 <IIC_ByteWrite>
	IIC_ByteWrite(addr ,0x2D,0x0E); // NOISE COUNT LIMIT Rising
 800168e:	79fb      	ldrb	r3, [r7, #7]
 8001690:	220e      	movs	r2, #14
 8001692:	212d      	movs	r1, #45	; 0x2d
 8001694:	4618      	mov	r0, r3
 8001696:	f7ff ffbf 	bl	8001618 <IIC_ByteWrite>
	IIC_ByteWrite(addr ,0x2E,0x00); // DELAY LIMIT Rising
 800169a:	79fb      	ldrb	r3, [r7, #7]
 800169c:	2200      	movs	r2, #0
 800169e:	212e      	movs	r1, #46	; 0x2e
 80016a0:	4618      	mov	r0, r3
 80016a2:	f7ff ffb9 	bl	8001618 <IIC_ByteWrite>

	  //falling
	IIC_ByteWrite(addr ,0x2F,0x01); // MAX HALF DELTA Falling
 80016a6:	79fb      	ldrb	r3, [r7, #7]
 80016a8:	2201      	movs	r2, #1
 80016aa:	212f      	movs	r1, #47	; 0x2f
 80016ac:	4618      	mov	r0, r3
 80016ae:	f7ff ffb3 	bl	8001618 <IIC_ByteWrite>
	IIC_ByteWrite(addr ,0x30,0x05); // NOISE HALF DELTA Falling
 80016b2:	79fb      	ldrb	r3, [r7, #7]
 80016b4:	2205      	movs	r2, #5
 80016b6:	2130      	movs	r1, #48	; 0x30
 80016b8:	4618      	mov	r0, r3
 80016ba:	f7ff ffad 	bl	8001618 <IIC_ByteWrite>
	IIC_ByteWrite(addr ,0x31,0x01); // NOISE COUNT LIMIT Falling
 80016be:	79fb      	ldrb	r3, [r7, #7]
 80016c0:	2201      	movs	r2, #1
 80016c2:	2131      	movs	r1, #49	; 0x31
 80016c4:	4618      	mov	r0, r3
 80016c6:	f7ff ffa7 	bl	8001618 <IIC_ByteWrite>
	IIC_ByteWrite(addr ,0x32,0x00); // DELAY LIMIT Falling
 80016ca:	79fb      	ldrb	r3, [r7, #7]
 80016cc:	2200      	movs	r2, #0
 80016ce:	2132      	movs	r1, #50	; 0x32
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7ff ffa1 	bl	8001618 <IIC_ByteWrite>

	  //touched
	IIC_ByteWrite(addr ,0x33,0x00); // Noise half delta touched
 80016d6:	79fb      	ldrb	r3, [r7, #7]
 80016d8:	2200      	movs	r2, #0
 80016da:	2133      	movs	r1, #51	; 0x33
 80016dc:	4618      	mov	r0, r3
 80016de:	f7ff ff9b 	bl	8001618 <IIC_ByteWrite>
	IIC_ByteWrite(addr ,0x34,0x00); // Noise counts touched
 80016e2:	79fb      	ldrb	r3, [r7, #7]
 80016e4:	2200      	movs	r2, #0
 80016e6:	2134      	movs	r1, #52	; 0x34
 80016e8:	4618      	mov	r0, r3
 80016ea:	f7ff ff95 	bl	8001618 <IIC_ByteWrite>
	IIC_ByteWrite(addr ,0x35,0x00); // Filter delay touched
 80016ee:	79fb      	ldrb	r3, [r7, #7]
 80016f0:	2200      	movs	r2, #0
 80016f2:	2135      	movs	r1, #53	; 0x35
 80016f4:	4618      	mov	r0, r3
 80016f6:	f7ff ff8f 	bl	8001618 <IIC_ByteWrite>

	  //Touch pad threshold
	IIC_ByteWrite(addr ,0x41,TouchThre); // ELE0 TOUCH THRESHOLD
 80016fa:	79fb      	ldrb	r3, [r7, #7]
 80016fc:	2296      	movs	r2, #150	; 0x96
 80016fe:	2141      	movs	r1, #65	; 0x41
 8001700:	4618      	mov	r0, r3
 8001702:	f7ff ff89 	bl	8001618 <IIC_ByteWrite>
	IIC_ByteWrite(addr ,0x42,ReleaThre); // ELE0 RELEASE THRESHOLD
 8001706:	79fb      	ldrb	r3, [r7, #7]
 8001708:	227d      	movs	r2, #125	; 0x7d
 800170a:	2142      	movs	r1, #66	; 0x42
 800170c:	4618      	mov	r0, r3
 800170e:	f7ff ff83 	bl	8001618 <IIC_ByteWrite>
	IIC_ByteWrite(addr ,0x43,TouchThre); // ELE1 TOUCH THRESHOLD
 8001712:	79fb      	ldrb	r3, [r7, #7]
 8001714:	2296      	movs	r2, #150	; 0x96
 8001716:	2143      	movs	r1, #67	; 0x43
 8001718:	4618      	mov	r0, r3
 800171a:	f7ff ff7d 	bl	8001618 <IIC_ByteWrite>
	IIC_ByteWrite(addr ,0x44,ReleaThre); // ELE1 RELEASE THRESHOLD
 800171e:	79fb      	ldrb	r3, [r7, #7]
 8001720:	227d      	movs	r2, #125	; 0x7d
 8001722:	2144      	movs	r1, #68	; 0x44
 8001724:	4618      	mov	r0, r3
 8001726:	f7ff ff77 	bl	8001618 <IIC_ByteWrite>
	IIC_ByteWrite(addr ,0x45,TouchThre); // ELE2 TOUCH THRESHOLD
 800172a:	79fb      	ldrb	r3, [r7, #7]
 800172c:	2296      	movs	r2, #150	; 0x96
 800172e:	2145      	movs	r1, #69	; 0x45
 8001730:	4618      	mov	r0, r3
 8001732:	f7ff ff71 	bl	8001618 <IIC_ByteWrite>
	IIC_ByteWrite(addr ,0x46,ReleaThre); // ELE2 RELEASE THRESHOLD
 8001736:	79fb      	ldrb	r3, [r7, #7]
 8001738:	227d      	movs	r2, #125	; 0x7d
 800173a:	2146      	movs	r1, #70	; 0x46
 800173c:	4618      	mov	r0, r3
 800173e:	f7ff ff6b 	bl	8001618 <IIC_ByteWrite>
	IIC_ByteWrite(addr ,0x47,TouchThre); // ELE3 TOUCH THRESHOLD
 8001742:	79fb      	ldrb	r3, [r7, #7]
 8001744:	2296      	movs	r2, #150	; 0x96
 8001746:	2147      	movs	r1, #71	; 0x47
 8001748:	4618      	mov	r0, r3
 800174a:	f7ff ff65 	bl	8001618 <IIC_ByteWrite>
	IIC_ByteWrite(addr ,0x48,ReleaThre); // ELE3 RELEASE THRESHOLD
 800174e:	79fb      	ldrb	r3, [r7, #7]
 8001750:	227d      	movs	r2, #125	; 0x7d
 8001752:	2148      	movs	r1, #72	; 0x48
 8001754:	4618      	mov	r0, r3
 8001756:	f7ff ff5f 	bl	8001618 <IIC_ByteWrite>
	IIC_ByteWrite(addr ,0x49,TouchThre); // ELE4 TOUCH THRESHOLD
 800175a:	79fb      	ldrb	r3, [r7, #7]
 800175c:	2296      	movs	r2, #150	; 0x96
 800175e:	2149      	movs	r1, #73	; 0x49
 8001760:	4618      	mov	r0, r3
 8001762:	f7ff ff59 	bl	8001618 <IIC_ByteWrite>
	IIC_ByteWrite(addr ,0x4A,ReleaThre); // ELE4 RELEASE THRESHOLD
 8001766:	79fb      	ldrb	r3, [r7, #7]
 8001768:	227d      	movs	r2, #125	; 0x7d
 800176a:	214a      	movs	r1, #74	; 0x4a
 800176c:	4618      	mov	r0, r3
 800176e:	f7ff ff53 	bl	8001618 <IIC_ByteWrite>
	IIC_ByteWrite(addr ,0x4B,TouchThre); // ELE5 TOUCH THRESHOLD
 8001772:	79fb      	ldrb	r3, [r7, #7]
 8001774:	2296      	movs	r2, #150	; 0x96
 8001776:	214b      	movs	r1, #75	; 0x4b
 8001778:	4618      	mov	r0, r3
 800177a:	f7ff ff4d 	bl	8001618 <IIC_ByteWrite>
	IIC_ByteWrite(addr ,0x4C,ReleaThre); // ELE5 RELEASE THRESHOLD
 800177e:	79fb      	ldrb	r3, [r7, #7]
 8001780:	227d      	movs	r2, #125	; 0x7d
 8001782:	214c      	movs	r1, #76	; 0x4c
 8001784:	4618      	mov	r0, r3
 8001786:	f7ff ff47 	bl	8001618 <IIC_ByteWrite>
	IIC_ByteWrite(addr ,0x4D,TouchThre); // ELE6 TOUCH THRESHOLD
 800178a:	79fb      	ldrb	r3, [r7, #7]
 800178c:	2296      	movs	r2, #150	; 0x96
 800178e:	214d      	movs	r1, #77	; 0x4d
 8001790:	4618      	mov	r0, r3
 8001792:	f7ff ff41 	bl	8001618 <IIC_ByteWrite>
	IIC_ByteWrite(addr ,0x4E,ReleaThre); // ELE6 RELEASE THRESHOLD
 8001796:	79fb      	ldrb	r3, [r7, #7]
 8001798:	227d      	movs	r2, #125	; 0x7d
 800179a:	214e      	movs	r1, #78	; 0x4e
 800179c:	4618      	mov	r0, r3
 800179e:	f7ff ff3b 	bl	8001618 <IIC_ByteWrite>
	IIC_ByteWrite(addr ,0x4F,TouchThre); // ELE7 TOUCH THRESHOLD
 80017a2:	79fb      	ldrb	r3, [r7, #7]
 80017a4:	2296      	movs	r2, #150	; 0x96
 80017a6:	214f      	movs	r1, #79	; 0x4f
 80017a8:	4618      	mov	r0, r3
 80017aa:	f7ff ff35 	bl	8001618 <IIC_ByteWrite>
	IIC_ByteWrite(addr ,0x50,ReleaThre); // ELE7 RELEASE THRESHOLD
 80017ae:	79fb      	ldrb	r3, [r7, #7]
 80017b0:	227d      	movs	r2, #125	; 0x7d
 80017b2:	2150      	movs	r1, #80	; 0x50
 80017b4:	4618      	mov	r0, r3
 80017b6:	f7ff ff2f 	bl	8001618 <IIC_ByteWrite>
	IIC_ByteWrite(addr ,0x51,TouchThre); // ELE8 TOUCH THRESHOLD
 80017ba:	79fb      	ldrb	r3, [r7, #7]
 80017bc:	2296      	movs	r2, #150	; 0x96
 80017be:	2151      	movs	r1, #81	; 0x51
 80017c0:	4618      	mov	r0, r3
 80017c2:	f7ff ff29 	bl	8001618 <IIC_ByteWrite>
	IIC_ByteWrite(addr ,0x52,ReleaThre); // ELE8 RELEASE THRESHOLD
 80017c6:	79fb      	ldrb	r3, [r7, #7]
 80017c8:	227d      	movs	r2, #125	; 0x7d
 80017ca:	2152      	movs	r1, #82	; 0x52
 80017cc:	4618      	mov	r0, r3
 80017ce:	f7ff ff23 	bl	8001618 <IIC_ByteWrite>
	IIC_ByteWrite(addr ,0x53,TouchThre); // ELE9 TOUCH THRESHOLD
 80017d2:	79fb      	ldrb	r3, [r7, #7]
 80017d4:	2296      	movs	r2, #150	; 0x96
 80017d6:	2153      	movs	r1, #83	; 0x53
 80017d8:	4618      	mov	r0, r3
 80017da:	f7ff ff1d 	bl	8001618 <IIC_ByteWrite>
	IIC_ByteWrite(addr ,0x54,ReleaThre); // ELE9 RELEASE THRESHOLD
 80017de:	79fb      	ldrb	r3, [r7, #7]
 80017e0:	227d      	movs	r2, #125	; 0x7d
 80017e2:	2154      	movs	r1, #84	; 0x54
 80017e4:	4618      	mov	r0, r3
 80017e6:	f7ff ff17 	bl	8001618 <IIC_ByteWrite>
	IIC_ByteWrite(addr ,0x55,TouchThre); // ELE10 TOUCH THRESHOLD
 80017ea:	79fb      	ldrb	r3, [r7, #7]
 80017ec:	2296      	movs	r2, #150	; 0x96
 80017ee:	2155      	movs	r1, #85	; 0x55
 80017f0:	4618      	mov	r0, r3
 80017f2:	f7ff ff11 	bl	8001618 <IIC_ByteWrite>
	IIC_ByteWrite(addr ,0x56,ReleaThre); // ELE10 RELEASE THRESHOLD
 80017f6:	79fb      	ldrb	r3, [r7, #7]
 80017f8:	227d      	movs	r2, #125	; 0x7d
 80017fa:	2156      	movs	r1, #86	; 0x56
 80017fc:	4618      	mov	r0, r3
 80017fe:	f7ff ff0b 	bl	8001618 <IIC_ByteWrite>
	IIC_ByteWrite(addr ,0x57,TouchThre); // ELE11 TOUCH THRESHOLD
 8001802:	79fb      	ldrb	r3, [r7, #7]
 8001804:	2296      	movs	r2, #150	; 0x96
 8001806:	2157      	movs	r1, #87	; 0x57
 8001808:	4618      	mov	r0, r3
 800180a:	f7ff ff05 	bl	8001618 <IIC_ByteWrite>
	IIC_ByteWrite(addr ,0x58,ReleaThre); // ELE11 RELEASE THRESHOLD
 800180e:	79fb      	ldrb	r3, [r7, #7]
 8001810:	227d      	movs	r2, #125	; 0x7d
 8001812:	2158      	movs	r1, #88	; 0x58
 8001814:	4618      	mov	r0, r3
 8001816:	f7ff feff 	bl	8001618 <IIC_ByteWrite>

	  //touch /release debounce

	IIC_ByteWrite(addr ,0x5B,0x00);
 800181a:	79fb      	ldrb	r3, [r7, #7]
 800181c:	2200      	movs	r2, #0
 800181e:	215b      	movs	r1, #91	; 0x5b
 8001820:	4618      	mov	r0, r3
 8001822:	f7ff fef9 	bl	8001618 <IIC_ByteWrite>

	  // response time = SFI(10) X ESI(8ms) = 80ms

	IIC_ByteWrite(addr ,0x5D,0x13);
 8001826:	79fb      	ldrb	r3, [r7, #7]
 8001828:	2213      	movs	r2, #19
 800182a:	215d      	movs	r1, #93	; 0x5d
 800182c:	4618      	mov	r0, r3
 800182e:	f7ff fef3 	bl	8001618 <IIC_ByteWrite>

	  //FFI=18

	IIC_ByteWrite(addr ,0x5C,0x80);
 8001832:	79fb      	ldrb	r3, [r7, #7]
 8001834:	2280      	movs	r2, #128	; 0x80
 8001836:	215c      	movs	r1, #92	; 0x5c
 8001838:	4618      	mov	r0, r3
 800183a:	f7ff feed 	bl	8001618 <IIC_ByteWrite>

	  //Auto configuration

	IIC_ByteWrite(addr ,0x7B,0x8F);
 800183e:	79fb      	ldrb	r3, [r7, #7]
 8001840:	228f      	movs	r2, #143	; 0x8f
 8001842:	217b      	movs	r1, #123	; 0x7b
 8001844:	4618      	mov	r0, r3
 8001846:	f7ff fee7 	bl	8001618 <IIC_ByteWrite>

	  // charge to 70% of Vdd , high sensitivity

	IIC_ByteWrite(addr ,0x7D,0xE4);
 800184a:	79fb      	ldrb	r3, [r7, #7]
 800184c:	22e4      	movs	r2, #228	; 0xe4
 800184e:	217d      	movs	r1, #125	; 0x7d
 8001850:	4618      	mov	r0, r3
 8001852:	f7ff fee1 	bl	8001618 <IIC_ByteWrite>
	IIC_ByteWrite(addr ,0x7E,0x94);
 8001856:	79fb      	ldrb	r3, [r7, #7]
 8001858:	2294      	movs	r2, #148	; 0x94
 800185a:	217e      	movs	r1, #126	; 0x7e
 800185c:	4618      	mov	r0, r3
 800185e:	f7ff fedb 	bl	8001618 <IIC_ByteWrite>
	IIC_ByteWrite(addr ,0x7F,0xCD);
 8001862:	79fb      	ldrb	r3, [r7, #7]
 8001864:	22cd      	movs	r2, #205	; 0xcd
 8001866:	217f      	movs	r1, #127	; 0x7f
 8001868:	4618      	mov	r0, r3
 800186a:	f7ff fed5 	bl	8001618 <IIC_ByteWrite>

	  // 12 electrodes enabled

	IIC_ByteWrite(addr ,0x5E,0xCC);
 800186e:	79fb      	ldrb	r3, [r7, #7]
 8001870:	22cc      	movs	r2, #204	; 0xcc
 8001872:	215e      	movs	r1, #94	; 0x5e
 8001874:	4618      	mov	r0, r3
 8001876:	f7ff fecf 	bl	8001618 <IIC_ByteWrite>

}
 800187a:	bf00      	nop
 800187c:	3708      	adds	r7, #8
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
	...

08001884 <determinePixel>:

// Returns a 2 wide array of which pixel was touched on the board
// Input is the concatenated version of each capacitive touch board
uint8_t determinePixel(uint16_t* input, uint8_t* pixelSelected) {
 8001884:	b5b0      	push	{r4, r5, r7, lr}
 8001886:	b086      	sub	sp, #24
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
 800188c:	6039      	str	r1, [r7, #0]
	if ((input[0] & 0x0FFF) == 0 | (((input[2] & 0x0FFF)) << 12 | (input[1] & 0x0FFF)) == 0)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	881b      	ldrh	r3, [r3, #0]
 8001892:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001896:	2b00      	cmp	r3, #0
 8001898:	bf0c      	ite	eq
 800189a:	2301      	moveq	r3, #1
 800189c:	2300      	movne	r3, #0
 800189e:	b2da      	uxtb	r2, r3
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	3304      	adds	r3, #4
 80018a4:	881b      	ldrh	r3, [r3, #0]
 80018a6:	0319      	lsls	r1, r3, #12
 80018a8:	4b3c      	ldr	r3, [pc, #240]	; (800199c <determinePixel+0x118>)
 80018aa:	400b      	ands	r3, r1
 80018ac:	6879      	ldr	r1, [r7, #4]
 80018ae:	3102      	adds	r1, #2
 80018b0:	8809      	ldrh	r1, [r1, #0]
 80018b2:	f3c1 010b 	ubfx	r1, r1, #0, #12
 80018b6:	430b      	orrs	r3, r1
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	bf0c      	ite	eq
 80018bc:	2301      	moveq	r3, #1
 80018be:	2300      	movne	r3, #0
 80018c0:	b2db      	uxtb	r3, r3
 80018c2:	4313      	orrs	r3, r2
 80018c4:	b2db      	uxtb	r3, r3
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d001      	beq.n	80018ce <determinePixel+0x4a>
			return 0;
 80018ca:	2300      	movs	r3, #0
 80018cc:	e062      	b.n	8001994 <determinePixel+0x110>
	uint16_t log2X = log2(input[0] & 0x0FFF);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	881b      	ldrh	r3, [r3, #0]
 80018d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018d6:	4618      	mov	r0, r3
 80018d8:	f7fe fe1c 	bl	8000514 <__aeabi_i2d>
 80018dc:	4602      	mov	r2, r0
 80018de:	460b      	mov	r3, r1
 80018e0:	ec43 2b10 	vmov	d0, r2, r3
 80018e4:	f00a ff0c 	bl	800c700 <log2>
 80018e8:	ec53 2b10 	vmov	r2, r3, d0
 80018ec:	4610      	mov	r0, r2
 80018ee:	4619      	mov	r1, r3
 80018f0:	f7ff f92a 	bl	8000b48 <__aeabi_d2uiz>
 80018f4:	4603      	mov	r3, r0
 80018f6:	82fb      	strh	r3, [r7, #22]
	// X is a power of 2
	if (ceil(log2X) == floor(log2X))
 80018f8:	8afb      	ldrh	r3, [r7, #22]
 80018fa:	4618      	mov	r0, r3
 80018fc:	f7fe fdfa 	bl	80004f4 <__aeabi_ui2d>
 8001900:	4604      	mov	r4, r0
 8001902:	460d      	mov	r5, r1
 8001904:	8afb      	ldrh	r3, [r7, #22]
 8001906:	4618      	mov	r0, r3
 8001908:	f7fe fdf4 	bl	80004f4 <__aeabi_ui2d>
 800190c:	4602      	mov	r2, r0
 800190e:	460b      	mov	r3, r1
 8001910:	4620      	mov	r0, r4
 8001912:	4629      	mov	r1, r5
 8001914:	f7ff f8d0 	bl	8000ab8 <__aeabi_dcmpeq>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d003      	beq.n	8001926 <determinePixel+0xa2>
		pixelSelected[0] = log2X;
 800191e:	8afb      	ldrh	r3, [r7, #22]
 8001920:	b2da      	uxtb	r2, r3
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	701a      	strb	r2, [r3, #0]
	uint32_t yInput = ((input[2] & 0x0FFF)) << 12 | (input[1] & 0x0FFF);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	3304      	adds	r3, #4
 800192a:	881b      	ldrh	r3, [r3, #0]
 800192c:	031a      	lsls	r2, r3, #12
 800192e:	4b1b      	ldr	r3, [pc, #108]	; (800199c <determinePixel+0x118>)
 8001930:	4013      	ands	r3, r2
 8001932:	687a      	ldr	r2, [r7, #4]
 8001934:	3202      	adds	r2, #2
 8001936:	8812      	ldrh	r2, [r2, #0]
 8001938:	f3c2 020b 	ubfx	r2, r2, #0, #12
 800193c:	4313      	orrs	r3, r2
 800193e:	613b      	str	r3, [r7, #16]
	uint16_t log2Y = log2(yInput);
 8001940:	6938      	ldr	r0, [r7, #16]
 8001942:	f7fe fdd7 	bl	80004f4 <__aeabi_ui2d>
 8001946:	4602      	mov	r2, r0
 8001948:	460b      	mov	r3, r1
 800194a:	ec43 2b10 	vmov	d0, r2, r3
 800194e:	f00a fed7 	bl	800c700 <log2>
 8001952:	ec53 2b10 	vmov	r2, r3, d0
 8001956:	4610      	mov	r0, r2
 8001958:	4619      	mov	r1, r3
 800195a:	f7ff f8f5 	bl	8000b48 <__aeabi_d2uiz>
 800195e:	4603      	mov	r3, r0
 8001960:	81fb      	strh	r3, [r7, #14]
	if (ceil(log2Y) == floor (log2Y))
 8001962:	89fb      	ldrh	r3, [r7, #14]
 8001964:	4618      	mov	r0, r3
 8001966:	f7fe fdc5 	bl	80004f4 <__aeabi_ui2d>
 800196a:	4604      	mov	r4, r0
 800196c:	460d      	mov	r5, r1
 800196e:	89fb      	ldrh	r3, [r7, #14]
 8001970:	4618      	mov	r0, r3
 8001972:	f7fe fdbf 	bl	80004f4 <__aeabi_ui2d>
 8001976:	4602      	mov	r2, r0
 8001978:	460b      	mov	r3, r1
 800197a:	4620      	mov	r0, r4
 800197c:	4629      	mov	r1, r5
 800197e:	f7ff f89b 	bl	8000ab8 <__aeabi_dcmpeq>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d004      	beq.n	8001992 <determinePixel+0x10e>
		pixelSelected[1] = log2Y;
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	3301      	adds	r3, #1
 800198c:	89fa      	ldrh	r2, [r7, #14]
 800198e:	b2d2      	uxtb	r2, r2
 8001990:	701a      	strb	r2, [r3, #0]
	return 1;
 8001992:	2301      	movs	r3, #1
}
 8001994:	4618      	mov	r0, r3
 8001996:	3718      	adds	r7, #24
 8001998:	46bd      	mov	sp, r7
 800199a:	bdb0      	pop	{r4, r5, r7, pc}
 800199c:	00fff000 	.word	0x00fff000

080019a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019a4:	b672      	cpsid	i
}
 80019a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019a8:	e7fe      	b.n	80019a8 <Error_Handler+0x8>
	...

080019ac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019b2:	2300      	movs	r3, #0
 80019b4:	607b      	str	r3, [r7, #4]
 80019b6:	4b10      	ldr	r3, [pc, #64]	; (80019f8 <HAL_MspInit+0x4c>)
 80019b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ba:	4a0f      	ldr	r2, [pc, #60]	; (80019f8 <HAL_MspInit+0x4c>)
 80019bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019c0:	6453      	str	r3, [r2, #68]	; 0x44
 80019c2:	4b0d      	ldr	r3, [pc, #52]	; (80019f8 <HAL_MspInit+0x4c>)
 80019c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019ca:	607b      	str	r3, [r7, #4]
 80019cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019ce:	2300      	movs	r3, #0
 80019d0:	603b      	str	r3, [r7, #0]
 80019d2:	4b09      	ldr	r3, [pc, #36]	; (80019f8 <HAL_MspInit+0x4c>)
 80019d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d6:	4a08      	ldr	r2, [pc, #32]	; (80019f8 <HAL_MspInit+0x4c>)
 80019d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019dc:	6413      	str	r3, [r2, #64]	; 0x40
 80019de:	4b06      	ldr	r3, [pc, #24]	; (80019f8 <HAL_MspInit+0x4c>)
 80019e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019e6:	603b      	str	r3, [r7, #0]
 80019e8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80019ea:	2007      	movs	r0, #7
 80019ec:	f001 f872 	bl	8002ad4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019f0:	bf00      	nop
 80019f2:	3708      	adds	r7, #8
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	40023800 	.word	0x40023800

080019fc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b08a      	sub	sp, #40	; 0x28
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a04:	f107 0314 	add.w	r3, r7, #20
 8001a08:	2200      	movs	r2, #0
 8001a0a:	601a      	str	r2, [r3, #0]
 8001a0c:	605a      	str	r2, [r3, #4]
 8001a0e:	609a      	str	r2, [r3, #8]
 8001a10:	60da      	str	r2, [r3, #12]
 8001a12:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a19      	ldr	r2, [pc, #100]	; (8001a80 <HAL_I2C_MspInit+0x84>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d12c      	bne.n	8001a78 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a1e:	2300      	movs	r3, #0
 8001a20:	613b      	str	r3, [r7, #16]
 8001a22:	4b18      	ldr	r3, [pc, #96]	; (8001a84 <HAL_I2C_MspInit+0x88>)
 8001a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a26:	4a17      	ldr	r2, [pc, #92]	; (8001a84 <HAL_I2C_MspInit+0x88>)
 8001a28:	f043 0302 	orr.w	r3, r3, #2
 8001a2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a2e:	4b15      	ldr	r3, [pc, #84]	; (8001a84 <HAL_I2C_MspInit+0x88>)
 8001a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a32:	f003 0302 	and.w	r3, r3, #2
 8001a36:	613b      	str	r3, [r7, #16]
 8001a38:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001a3a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001a3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a40:	2312      	movs	r3, #18
 8001a42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a44:	2301      	movs	r3, #1
 8001a46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a4c:	2304      	movs	r3, #4
 8001a4e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a50:	f107 0314 	add.w	r3, r7, #20
 8001a54:	4619      	mov	r1, r3
 8001a56:	480c      	ldr	r0, [pc, #48]	; (8001a88 <HAL_I2C_MspInit+0x8c>)
 8001a58:	f001 fc88 	bl	800336c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	60fb      	str	r3, [r7, #12]
 8001a60:	4b08      	ldr	r3, [pc, #32]	; (8001a84 <HAL_I2C_MspInit+0x88>)
 8001a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a64:	4a07      	ldr	r2, [pc, #28]	; (8001a84 <HAL_I2C_MspInit+0x88>)
 8001a66:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a6a:	6413      	str	r3, [r2, #64]	; 0x40
 8001a6c:	4b05      	ldr	r3, [pc, #20]	; (8001a84 <HAL_I2C_MspInit+0x88>)
 8001a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a74:	60fb      	str	r3, [r7, #12]
 8001a76:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001a78:	bf00      	nop
 8001a7a:	3728      	adds	r7, #40	; 0x28
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	40005400 	.word	0x40005400
 8001a84:	40023800 	.word	0x40023800
 8001a88:	40020400 	.word	0x40020400

08001a8c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b08e      	sub	sp, #56	; 0x38
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a98:	2200      	movs	r2, #0
 8001a9a:	601a      	str	r2, [r3, #0]
 8001a9c:	605a      	str	r2, [r3, #4]
 8001a9e:	609a      	str	r2, [r3, #8]
 8001aa0:	60da      	str	r2, [r3, #12]
 8001aa2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001aa4:	f107 0314 	add.w	r3, r7, #20
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	601a      	str	r2, [r3, #0]
 8001aac:	605a      	str	r2, [r3, #4]
 8001aae:	609a      	str	r2, [r3, #8]
 8001ab0:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a31      	ldr	r2, [pc, #196]	; (8001b7c <HAL_I2S_MspInit+0xf0>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d15a      	bne.n	8001b72 <HAL_I2S_MspInit+0xe6>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001abc:	2301      	movs	r3, #1
 8001abe:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8001ac0:	23c0      	movs	r3, #192	; 0xc0
 8001ac2:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001ac4:	2302      	movs	r3, #2
 8001ac6:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ac8:	f107 0314 	add.w	r3, r7, #20
 8001acc:	4618      	mov	r0, r3
 8001ace:	f005 fc47 	bl	8007360 <HAL_RCCEx_PeriphCLKConfig>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d001      	beq.n	8001adc <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8001ad8:	f7ff ff62 	bl	80019a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001adc:	2300      	movs	r3, #0
 8001ade:	613b      	str	r3, [r7, #16]
 8001ae0:	4b27      	ldr	r3, [pc, #156]	; (8001b80 <HAL_I2S_MspInit+0xf4>)
 8001ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae4:	4a26      	ldr	r2, [pc, #152]	; (8001b80 <HAL_I2S_MspInit+0xf4>)
 8001ae6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001aea:	6413      	str	r3, [r2, #64]	; 0x40
 8001aec:	4b24      	ldr	r3, [pc, #144]	; (8001b80 <HAL_I2S_MspInit+0xf4>)
 8001aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001af4:	613b      	str	r3, [r7, #16]
 8001af6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001af8:	2300      	movs	r3, #0
 8001afa:	60fb      	str	r3, [r7, #12]
 8001afc:	4b20      	ldr	r3, [pc, #128]	; (8001b80 <HAL_I2S_MspInit+0xf4>)
 8001afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b00:	4a1f      	ldr	r2, [pc, #124]	; (8001b80 <HAL_I2S_MspInit+0xf4>)
 8001b02:	f043 0301 	orr.w	r3, r3, #1
 8001b06:	6313      	str	r3, [r2, #48]	; 0x30
 8001b08:	4b1d      	ldr	r3, [pc, #116]	; (8001b80 <HAL_I2S_MspInit+0xf4>)
 8001b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0c:	f003 0301 	and.w	r3, r3, #1
 8001b10:	60fb      	str	r3, [r7, #12]
 8001b12:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b14:	2300      	movs	r3, #0
 8001b16:	60bb      	str	r3, [r7, #8]
 8001b18:	4b19      	ldr	r3, [pc, #100]	; (8001b80 <HAL_I2S_MspInit+0xf4>)
 8001b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1c:	4a18      	ldr	r2, [pc, #96]	; (8001b80 <HAL_I2S_MspInit+0xf4>)
 8001b1e:	f043 0304 	orr.w	r3, r3, #4
 8001b22:	6313      	str	r3, [r2, #48]	; 0x30
 8001b24:	4b16      	ldr	r3, [pc, #88]	; (8001b80 <HAL_I2S_MspInit+0xf4>)
 8001b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b28:	f003 0304 	and.w	r3, r3, #4
 8001b2c:	60bb      	str	r3, [r7, #8]
 8001b2e:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001b30:	2310      	movs	r3, #16
 8001b32:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b34:	2302      	movs	r3, #2
 8001b36:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001b40:	2306      	movs	r3, #6
 8001b42:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001b44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b48:	4619      	mov	r1, r3
 8001b4a:	480e      	ldr	r0, [pc, #56]	; (8001b84 <HAL_I2S_MspInit+0xf8>)
 8001b4c:	f001 fc0e 	bl	800336c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001b50:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001b54:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b56:	2302      	movs	r3, #2
 8001b58:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001b62:	2306      	movs	r3, #6
 8001b64:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	4806      	ldr	r0, [pc, #24]	; (8001b88 <HAL_I2S_MspInit+0xfc>)
 8001b6e:	f001 fbfd 	bl	800336c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001b72:	bf00      	nop
 8001b74:	3738      	adds	r7, #56	; 0x38
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	40003c00 	.word	0x40003c00
 8001b80:	40023800 	.word	0x40023800
 8001b84:	40020000 	.word	0x40020000
 8001b88:	40020800 	.word	0x40020800

08001b8c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b08a      	sub	sp, #40	; 0x28
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b94:	f107 0314 	add.w	r3, r7, #20
 8001b98:	2200      	movs	r2, #0
 8001b9a:	601a      	str	r2, [r3, #0]
 8001b9c:	605a      	str	r2, [r3, #4]
 8001b9e:	609a      	str	r2, [r3, #8]
 8001ba0:	60da      	str	r2, [r3, #12]
 8001ba2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a19      	ldr	r2, [pc, #100]	; (8001c10 <HAL_SPI_MspInit+0x84>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d12b      	bne.n	8001c06 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001bae:	2300      	movs	r3, #0
 8001bb0:	613b      	str	r3, [r7, #16]
 8001bb2:	4b18      	ldr	r3, [pc, #96]	; (8001c14 <HAL_SPI_MspInit+0x88>)
 8001bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bb6:	4a17      	ldr	r2, [pc, #92]	; (8001c14 <HAL_SPI_MspInit+0x88>)
 8001bb8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001bbc:	6453      	str	r3, [r2, #68]	; 0x44
 8001bbe:	4b15      	ldr	r3, [pc, #84]	; (8001c14 <HAL_SPI_MspInit+0x88>)
 8001bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bc2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001bc6:	613b      	str	r3, [r7, #16]
 8001bc8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bca:	2300      	movs	r3, #0
 8001bcc:	60fb      	str	r3, [r7, #12]
 8001bce:	4b11      	ldr	r3, [pc, #68]	; (8001c14 <HAL_SPI_MspInit+0x88>)
 8001bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd2:	4a10      	ldr	r2, [pc, #64]	; (8001c14 <HAL_SPI_MspInit+0x88>)
 8001bd4:	f043 0301 	orr.w	r3, r3, #1
 8001bd8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bda:	4b0e      	ldr	r3, [pc, #56]	; (8001c14 <HAL_SPI_MspInit+0x88>)
 8001bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bde:	f003 0301 	and.w	r3, r3, #1
 8001be2:	60fb      	str	r3, [r7, #12]
 8001be4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001be6:	23e0      	movs	r3, #224	; 0xe0
 8001be8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bea:	2302      	movs	r3, #2
 8001bec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001bf6:	2305      	movs	r3, #5
 8001bf8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bfa:	f107 0314 	add.w	r3, r7, #20
 8001bfe:	4619      	mov	r1, r3
 8001c00:	4805      	ldr	r0, [pc, #20]	; (8001c18 <HAL_SPI_MspInit+0x8c>)
 8001c02:	f001 fbb3 	bl	800336c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001c06:	bf00      	nop
 8001c08:	3728      	adds	r7, #40	; 0x28
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	40013000 	.word	0x40013000
 8001c14:	40023800 	.word	0x40023800
 8001c18:	40020000 	.word	0x40020000

08001c1c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b084      	sub	sp, #16
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a27      	ldr	r2, [pc, #156]	; (8001cc8 <HAL_TIM_PWM_MspInit+0xac>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d148      	bne.n	8001cc0 <HAL_TIM_PWM_MspInit+0xa4>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c2e:	2300      	movs	r3, #0
 8001c30:	60fb      	str	r3, [r7, #12]
 8001c32:	4b26      	ldr	r3, [pc, #152]	; (8001ccc <HAL_TIM_PWM_MspInit+0xb0>)
 8001c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c36:	4a25      	ldr	r2, [pc, #148]	; (8001ccc <HAL_TIM_PWM_MspInit+0xb0>)
 8001c38:	f043 0301 	orr.w	r3, r3, #1
 8001c3c:	6453      	str	r3, [r2, #68]	; 0x44
 8001c3e:	4b23      	ldr	r3, [pc, #140]	; (8001ccc <HAL_TIM_PWM_MspInit+0xb0>)
 8001c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c42:	f003 0301 	and.w	r3, r3, #1
 8001c46:	60fb      	str	r3, [r7, #12]
 8001c48:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1_CH2_CH3 Init */
    hdma_tim1_ch1_ch2_ch3.Instance = DMA2_Stream6;
 8001c4a:	4b21      	ldr	r3, [pc, #132]	; (8001cd0 <HAL_TIM_PWM_MspInit+0xb4>)
 8001c4c:	4a21      	ldr	r2, [pc, #132]	; (8001cd4 <HAL_TIM_PWM_MspInit+0xb8>)
 8001c4e:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1_ch2_ch3.Init.Channel = DMA_CHANNEL_0;
 8001c50:	4b1f      	ldr	r3, [pc, #124]	; (8001cd0 <HAL_TIM_PWM_MspInit+0xb4>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1_ch2_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001c56:	4b1e      	ldr	r3, [pc, #120]	; (8001cd0 <HAL_TIM_PWM_MspInit+0xb4>)
 8001c58:	2240      	movs	r2, #64	; 0x40
 8001c5a:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1_ch2_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c5c:	4b1c      	ldr	r3, [pc, #112]	; (8001cd0 <HAL_TIM_PWM_MspInit+0xb4>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1_ch2_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8001c62:	4b1b      	ldr	r3, [pc, #108]	; (8001cd0 <HAL_TIM_PWM_MspInit+0xb4>)
 8001c64:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c68:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1_ch2_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001c6a:	4b19      	ldr	r3, [pc, #100]	; (8001cd0 <HAL_TIM_PWM_MspInit+0xb4>)
 8001c6c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001c70:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1_ch2_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001c72:	4b17      	ldr	r3, [pc, #92]	; (8001cd0 <HAL_TIM_PWM_MspInit+0xb4>)
 8001c74:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c78:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1_ch2_ch3.Init.Mode = DMA_NORMAL;
 8001c7a:	4b15      	ldr	r3, [pc, #84]	; (8001cd0 <HAL_TIM_PWM_MspInit+0xb4>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1_ch2_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8001c80:	4b13      	ldr	r3, [pc, #76]	; (8001cd0 <HAL_TIM_PWM_MspInit+0xb4>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1_ch2_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c86:	4b12      	ldr	r3, [pc, #72]	; (8001cd0 <HAL_TIM_PWM_MspInit+0xb4>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1_ch2_ch3) != HAL_OK)
 8001c8c:	4810      	ldr	r0, [pc, #64]	; (8001cd0 <HAL_TIM_PWM_MspInit+0xb4>)
 8001c8e:	f000 ff63 	bl	8002b58 <HAL_DMA_Init>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d001      	beq.n	8001c9c <HAL_TIM_PWM_MspInit+0x80>
    {
      Error_Handler();
 8001c98:	f7ff fe82 	bl	80019a0 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1_ch2_ch3);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	4a0c      	ldr	r2, [pc, #48]	; (8001cd0 <HAL_TIM_PWM_MspInit+0xb4>)
 8001ca0:	625a      	str	r2, [r3, #36]	; 0x24
 8001ca2:	4a0b      	ldr	r2, [pc, #44]	; (8001cd0 <HAL_TIM_PWM_MspInit+0xb4>)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC2],hdma_tim1_ch1_ch2_ch3);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	4a09      	ldr	r2, [pc, #36]	; (8001cd0 <HAL_TIM_PWM_MspInit+0xb4>)
 8001cac:	629a      	str	r2, [r3, #40]	; 0x28
 8001cae:	4a08      	ldr	r2, [pc, #32]	; (8001cd0 <HAL_TIM_PWM_MspInit+0xb4>)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim1_ch1_ch2_ch3);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	4a06      	ldr	r2, [pc, #24]	; (8001cd0 <HAL_TIM_PWM_MspInit+0xb4>)
 8001cb8:	62da      	str	r2, [r3, #44]	; 0x2c
 8001cba:	4a05      	ldr	r2, [pc, #20]	; (8001cd0 <HAL_TIM_PWM_MspInit+0xb4>)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001cc0:	bf00      	nop
 8001cc2:	3710      	adds	r7, #16
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	40010000 	.word	0x40010000
 8001ccc:	40023800 	.word	0x40023800
 8001cd0:	200003b4 	.word	0x200003b4
 8001cd4:	400264a0 	.word	0x400264a0

08001cd8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b088      	sub	sp, #32
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ce0:	f107 030c 	add.w	r3, r7, #12
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	601a      	str	r2, [r3, #0]
 8001ce8:	605a      	str	r2, [r3, #4]
 8001cea:	609a      	str	r2, [r3, #8]
 8001cec:	60da      	str	r2, [r3, #12]
 8001cee:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a12      	ldr	r2, [pc, #72]	; (8001d40 <HAL_TIM_MspPostInit+0x68>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d11e      	bne.n	8001d38 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	60bb      	str	r3, [r7, #8]
 8001cfe:	4b11      	ldr	r3, [pc, #68]	; (8001d44 <HAL_TIM_MspPostInit+0x6c>)
 8001d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d02:	4a10      	ldr	r2, [pc, #64]	; (8001d44 <HAL_TIM_MspPostInit+0x6c>)
 8001d04:	f043 0310 	orr.w	r3, r3, #16
 8001d08:	6313      	str	r3, [r2, #48]	; 0x30
 8001d0a:	4b0e      	ldr	r3, [pc, #56]	; (8001d44 <HAL_TIM_MspPostInit+0x6c>)
 8001d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0e:	f003 0310 	and.w	r3, r3, #16
 8001d12:	60bb      	str	r3, [r7, #8]
 8001d14:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8001d16:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8001d1a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d1c:	2302      	movs	r3, #2
 8001d1e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d20:	2300      	movs	r3, #0
 8001d22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d24:	2300      	movs	r3, #0
 8001d26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d2c:	f107 030c 	add.w	r3, r7, #12
 8001d30:	4619      	mov	r1, r3
 8001d32:	4805      	ldr	r0, [pc, #20]	; (8001d48 <HAL_TIM_MspPostInit+0x70>)
 8001d34:	f001 fb1a 	bl	800336c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001d38:	bf00      	nop
 8001d3a:	3720      	adds	r7, #32
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	40010000 	.word	0x40010000
 8001d44:	40023800 	.word	0x40023800
 8001d48:	40021000 	.word	0x40021000

08001d4c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b08a      	sub	sp, #40	; 0x28
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d54:	f107 0314 	add.w	r3, r7, #20
 8001d58:	2200      	movs	r2, #0
 8001d5a:	601a      	str	r2, [r3, #0]
 8001d5c:	605a      	str	r2, [r3, #4]
 8001d5e:	609a      	str	r2, [r3, #8]
 8001d60:	60da      	str	r2, [r3, #12]
 8001d62:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a19      	ldr	r2, [pc, #100]	; (8001dd0 <HAL_UART_MspInit+0x84>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d12b      	bne.n	8001dc6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d6e:	2300      	movs	r3, #0
 8001d70:	613b      	str	r3, [r7, #16]
 8001d72:	4b18      	ldr	r3, [pc, #96]	; (8001dd4 <HAL_UART_MspInit+0x88>)
 8001d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d76:	4a17      	ldr	r2, [pc, #92]	; (8001dd4 <HAL_UART_MspInit+0x88>)
 8001d78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d7c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d7e:	4b15      	ldr	r3, [pc, #84]	; (8001dd4 <HAL_UART_MspInit+0x88>)
 8001d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d86:	613b      	str	r3, [r7, #16]
 8001d88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	60fb      	str	r3, [r7, #12]
 8001d8e:	4b11      	ldr	r3, [pc, #68]	; (8001dd4 <HAL_UART_MspInit+0x88>)
 8001d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d92:	4a10      	ldr	r2, [pc, #64]	; (8001dd4 <HAL_UART_MspInit+0x88>)
 8001d94:	f043 0301 	orr.w	r3, r3, #1
 8001d98:	6313      	str	r3, [r2, #48]	; 0x30
 8001d9a:	4b0e      	ldr	r3, [pc, #56]	; (8001dd4 <HAL_UART_MspInit+0x88>)
 8001d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d9e:	f003 0301 	and.w	r3, r3, #1
 8001da2:	60fb      	str	r3, [r7, #12]
 8001da4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001da6:	230c      	movs	r3, #12
 8001da8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001daa:	2302      	movs	r3, #2
 8001dac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dae:	2300      	movs	r3, #0
 8001db0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001db2:	2303      	movs	r3, #3
 8001db4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001db6:	2307      	movs	r3, #7
 8001db8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dba:	f107 0314 	add.w	r3, r7, #20
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	4805      	ldr	r0, [pc, #20]	; (8001dd8 <HAL_UART_MspInit+0x8c>)
 8001dc2:	f001 fad3 	bl	800336c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001dc6:	bf00      	nop
 8001dc8:	3728      	adds	r7, #40	; 0x28
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	40004400 	.word	0x40004400
 8001dd4:	40023800 	.word	0x40023800
 8001dd8:	40020000 	.word	0x40020000

08001ddc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001de0:	e7fe      	b.n	8001de0 <NMI_Handler+0x4>

08001de2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001de2:	b480      	push	{r7}
 8001de4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001de6:	e7fe      	b.n	8001de6 <HardFault_Handler+0x4>

08001de8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001de8:	b480      	push	{r7}
 8001dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001dec:	e7fe      	b.n	8001dec <MemManage_Handler+0x4>

08001dee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001dee:	b480      	push	{r7}
 8001df0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001df2:	e7fe      	b.n	8001df2 <BusFault_Handler+0x4>

08001df4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001df8:	e7fe      	b.n	8001df8 <UsageFault_Handler+0x4>

08001dfa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001dfa:	b480      	push	{r7}
 8001dfc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001dfe:	bf00      	nop
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr

08001e08 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e0c:	bf00      	nop
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr

08001e16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e16:	b480      	push	{r7}
 8001e18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e1a:	bf00      	nop
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr

08001e24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e28:	f000 fd40 	bl	80028ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e2c:	bf00      	nop
 8001e2e:	bd80      	pop	{r7, pc}

08001e30 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001e34:	4802      	ldr	r0, [pc, #8]	; (8001e40 <OTG_FS_IRQHandler+0x10>)
 8001e36:	f001 feb9 	bl	8003bac <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001e3a:	bf00      	nop
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	20000b28 	.word	0x20000b28

08001e44 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1_ch2_ch3);
 8001e48:	4802      	ldr	r0, [pc, #8]	; (8001e54 <DMA2_Stream6_IRQHandler+0x10>)
 8001e4a:	f001 f825 	bl	8002e98 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8001e4e:	bf00      	nop
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	200003b4 	.word	0x200003b4

08001e58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b086      	sub	sp, #24
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e60:	4a14      	ldr	r2, [pc, #80]	; (8001eb4 <_sbrk+0x5c>)
 8001e62:	4b15      	ldr	r3, [pc, #84]	; (8001eb8 <_sbrk+0x60>)
 8001e64:	1ad3      	subs	r3, r2, r3
 8001e66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e6c:	4b13      	ldr	r3, [pc, #76]	; (8001ebc <_sbrk+0x64>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d102      	bne.n	8001e7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e74:	4b11      	ldr	r3, [pc, #68]	; (8001ebc <_sbrk+0x64>)
 8001e76:	4a12      	ldr	r2, [pc, #72]	; (8001ec0 <_sbrk+0x68>)
 8001e78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e7a:	4b10      	ldr	r3, [pc, #64]	; (8001ebc <_sbrk+0x64>)
 8001e7c:	681a      	ldr	r2, [r3, #0]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	4413      	add	r3, r2
 8001e82:	693a      	ldr	r2, [r7, #16]
 8001e84:	429a      	cmp	r2, r3
 8001e86:	d207      	bcs.n	8001e98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e88:	f009 ffc8 	bl	800be1c <__errno>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	220c      	movs	r2, #12
 8001e90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e96:	e009      	b.n	8001eac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e98:	4b08      	ldr	r3, [pc, #32]	; (8001ebc <_sbrk+0x64>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e9e:	4b07      	ldr	r3, [pc, #28]	; (8001ebc <_sbrk+0x64>)
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	4413      	add	r3, r2
 8001ea6:	4a05      	ldr	r2, [pc, #20]	; (8001ebc <_sbrk+0x64>)
 8001ea8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	3718      	adds	r7, #24
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	20020000 	.word	0x20020000
 8001eb8:	00000400 	.word	0x00000400
 8001ebc:	200000b8 	.word	0x200000b8
 8001ec0:	20000e40 	.word	0x20000e40

08001ec4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ec8:	4b06      	ldr	r3, [pc, #24]	; (8001ee4 <SystemInit+0x20>)
 8001eca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ece:	4a05      	ldr	r2, [pc, #20]	; (8001ee4 <SystemInit+0x20>)
 8001ed0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ed4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ed8:	bf00      	nop
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr
 8001ee2:	bf00      	nop
 8001ee4:	e000ed00 	.word	0xe000ed00

08001ee8 <ws2812b_gpio_init>:
  144,146,148,150,152,154,156,158,160,162,164,167,169,171,173,175,
  177,180,182,184,186,189,191,193,196,198,200,203,205,208,210,213,
  215,218,220,223,225,228,231,233,236,239,241,244,247,249,252,255 };

static void ws2812b_gpio_init(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b088      	sub	sp, #32
 8001eec:	af00      	add	r7, sp, #0
	// WS2812B outputs
	WS2812B_GPIO_CLK_ENABLE();
 8001eee:	2300      	movs	r3, #0
 8001ef0:	60bb      	str	r3, [r7, #8]
 8001ef2:	4b22      	ldr	r3, [pc, #136]	; (8001f7c <ws2812b_gpio_init+0x94>)
 8001ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef6:	4a21      	ldr	r2, [pc, #132]	; (8001f7c <ws2812b_gpio_init+0x94>)
 8001ef8:	f043 0304 	orr.w	r3, r3, #4
 8001efc:	6313      	str	r3, [r2, #48]	; 0x30
 8001efe:	4b1f      	ldr	r3, [pc, #124]	; (8001f7c <ws2812b_gpio_init+0x94>)
 8001f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f02:	f003 0304 	and.w	r3, r3, #4
 8001f06:	60bb      	str	r3, [r7, #8]
 8001f08:	68bb      	ldr	r3, [r7, #8]
	GPIO_InitTypeDef  GPIO_InitStruct;
	GPIO_InitStruct.Pin       = WS2812B_PINS;
 8001f0a:	230f      	movs	r3, #15
 8001f0c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode      = GPIO_MODE_OUTPUT_PP;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8001f12:	2300      	movs	r3, #0
 8001f14:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_LOW;
 8001f16:	2300      	movs	r3, #0
 8001f18:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(WS2812B_PORT, &GPIO_InitStruct);
 8001f1a:	f107 030c 	add.w	r3, r7, #12
 8001f1e:	4619      	mov	r1, r3
 8001f20:	4817      	ldr	r0, [pc, #92]	; (8001f80 <ws2812b_gpio_init+0x98>)
 8001f22:	f001 fa23 	bl	800336c <HAL_GPIO_Init>

	// Enable output pins for debuging to see DMA Full and Half transfer interrupts
	#if defined(LED_BLUE_PORT) && defined(LED_ORANGE_PORT)
		__HAL_RCC_GPIOD_CLK_ENABLE();
 8001f26:	2300      	movs	r3, #0
 8001f28:	607b      	str	r3, [r7, #4]
 8001f2a:	4b14      	ldr	r3, [pc, #80]	; (8001f7c <ws2812b_gpio_init+0x94>)
 8001f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2e:	4a13      	ldr	r2, [pc, #76]	; (8001f7c <ws2812b_gpio_init+0x94>)
 8001f30:	f043 0308 	orr.w	r3, r3, #8
 8001f34:	6313      	str	r3, [r2, #48]	; 0x30
 8001f36:	4b11      	ldr	r3, [pc, #68]	; (8001f7c <ws2812b_gpio_init+0x94>)
 8001f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3a:	f003 0308 	and.w	r3, r3, #8
 8001f3e:	607b      	str	r3, [r7, #4]
 8001f40:	687b      	ldr	r3, [r7, #4]

		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f42:	2301      	movs	r3, #1
 8001f44:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f46:	2300      	movs	r3, #0
 8001f48:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f4a:	2302      	movs	r3, #2
 8001f4c:	61bb      	str	r3, [r7, #24]

		GPIO_InitStruct.Pin = LED_BLUE_PIN;
 8001f4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001f52:	60fb      	str	r3, [r7, #12]
		HAL_GPIO_Init(LED_BLUE_PORT, &GPIO_InitStruct);
 8001f54:	f107 030c 	add.w	r3, r7, #12
 8001f58:	4619      	mov	r1, r3
 8001f5a:	480a      	ldr	r0, [pc, #40]	; (8001f84 <ws2812b_gpio_init+0x9c>)
 8001f5c:	f001 fa06 	bl	800336c <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = LED_ORANGE_PIN;
 8001f60:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f64:	60fb      	str	r3, [r7, #12]
		HAL_GPIO_Init(LED_ORANGE_PORT, &GPIO_InitStruct);
 8001f66:	f107 030c 	add.w	r3, r7, #12
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	4805      	ldr	r0, [pc, #20]	; (8001f84 <ws2812b_gpio_init+0x9c>)
 8001f6e:	f001 f9fd 	bl	800336c <HAL_GPIO_Init>
	#endif
}
 8001f72:	bf00      	nop
 8001f74:	3720      	adds	r7, #32
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	40023800 	.word	0x40023800
 8001f80:	40020800 	.word	0x40020800
 8001f84:	40020c00 	.word	0x40020c00

08001f88 <TIM1_init>:

uint32_t tim_period;
uint32_t timer_reset_pulse_period;

static void TIM1_init(void)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b084      	sub	sp, #16
 8001f8c:	af00      	add	r7, sp, #0
	// TIM2 Periph clock enable
	__HAL_RCC_TIM1_CLK_ENABLE();
 8001f8e:	2300      	movs	r3, #0
 8001f90:	607b      	str	r3, [r7, #4]
 8001f92:	4b52      	ldr	r3, [pc, #328]	; (80020dc <TIM1_init+0x154>)
 8001f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f96:	4a51      	ldr	r2, [pc, #324]	; (80020dc <TIM1_init+0x154>)
 8001f98:	f043 0301 	orr.w	r3, r3, #1
 8001f9c:	6453      	str	r3, [r2, #68]	; 0x44
 8001f9e:	4b4f      	ldr	r3, [pc, #316]	; (80020dc <TIM1_init+0x154>)
 8001fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fa2:	f003 0301 	and.w	r3, r3, #1
 8001fa6:	607b      	str	r3, [r7, #4]
 8001fa8:	687b      	ldr	r3, [r7, #4]

	// This computation of pulse length should work ok,
	// at some slower core speeds it needs some tuning.
	tim_period =  SystemCoreClock / 800000; // 0,125us period (10 times lower the 1,25us period to have fixed math below)
 8001faa:	4b4d      	ldr	r3, [pc, #308]	; (80020e0 <TIM1_init+0x158>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	0a1b      	lsrs	r3, r3, #8
 8001fb0:	4a4c      	ldr	r2, [pc, #304]	; (80020e4 <TIM1_init+0x15c>)
 8001fb2:	fba2 2303 	umull	r2, r3, r2, r3
 8001fb6:	091b      	lsrs	r3, r3, #4
 8001fb8:	4a4b      	ldr	r2, [pc, #300]	; (80020e8 <TIM1_init+0x160>)
 8001fba:	6013      	str	r3, [r2, #0]
	timer_reset_pulse_period = (SystemCoreClock / (320 * 60)); // 60us just to be sure
 8001fbc:	4b48      	ldr	r3, [pc, #288]	; (80020e0 <TIM1_init+0x158>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a4a      	ldr	r2, [pc, #296]	; (80020ec <TIM1_init+0x164>)
 8001fc2:	fba2 2303 	umull	r2, r3, r2, r3
 8001fc6:	0adb      	lsrs	r3, r3, #11
 8001fc8:	4a49      	ldr	r2, [pc, #292]	; (80020f0 <TIM1_init+0x168>)
 8001fca:	6013      	str	r3, [r2, #0]

	uint32_t cc1 = (10 * tim_period) / 36;
 8001fcc:	4b46      	ldr	r3, [pc, #280]	; (80020e8 <TIM1_init+0x160>)
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	4613      	mov	r3, r2
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	4413      	add	r3, r2
 8001fd6:	005b      	lsls	r3, r3, #1
 8001fd8:	461a      	mov	r2, r3
 8001fda:	4b46      	ldr	r3, [pc, #280]	; (80020f4 <TIM1_init+0x16c>)
 8001fdc:	fba3 2302 	umull	r2, r3, r3, r2
 8001fe0:	08db      	lsrs	r3, r3, #3
 8001fe2:	60fb      	str	r3, [r7, #12]
	uint32_t cc2 = (10 * tim_period) / 15;
 8001fe4:	4b40      	ldr	r3, [pc, #256]	; (80020e8 <TIM1_init+0x160>)
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	4613      	mov	r3, r2
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	4413      	add	r3, r2
 8001fee:	005b      	lsls	r3, r3, #1
 8001ff0:	461a      	mov	r2, r3
 8001ff2:	4b41      	ldr	r3, [pc, #260]	; (80020f8 <TIM1_init+0x170>)
 8001ff4:	fba3 2302 	umull	r2, r3, r3, r2
 8001ff8:	08db      	lsrs	r3, r3, #3
 8001ffa:	60bb      	str	r3, [r7, #8]

	TIM1_handle.Instance = TIM1;
 8001ffc:	4b3f      	ldr	r3, [pc, #252]	; (80020fc <TIM1_init+0x174>)
 8001ffe:	4a40      	ldr	r2, [pc, #256]	; (8002100 <TIM1_init+0x178>)
 8002000:	601a      	str	r2, [r3, #0]

	TIM1_handle.Init.Period            = tim_period;
 8002002:	4b39      	ldr	r3, [pc, #228]	; (80020e8 <TIM1_init+0x160>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a3d      	ldr	r2, [pc, #244]	; (80020fc <TIM1_init+0x174>)
 8002008:	60d3      	str	r3, [r2, #12]
	TIM1_handle.Init.RepetitionCounter = 0;
 800200a:	4b3c      	ldr	r3, [pc, #240]	; (80020fc <TIM1_init+0x174>)
 800200c:	2200      	movs	r2, #0
 800200e:	615a      	str	r2, [r3, #20]
	TIM1_handle.Init.Prescaler         = 0;
 8002010:	4b3a      	ldr	r3, [pc, #232]	; (80020fc <TIM1_init+0x174>)
 8002012:	2200      	movs	r2, #0
 8002014:	605a      	str	r2, [r3, #4]
	TIM1_handle.Init.ClockDivision     = TIM_CLOCKDIVISION_DIV1;
 8002016:	4b39      	ldr	r3, [pc, #228]	; (80020fc <TIM1_init+0x174>)
 8002018:	2200      	movs	r2, #0
 800201a:	611a      	str	r2, [r3, #16]
	TIM1_handle.Init.CounterMode       = TIM_COUNTERMODE_UP;
 800201c:	4b37      	ldr	r3, [pc, #220]	; (80020fc <TIM1_init+0x174>)
 800201e:	2200      	movs	r2, #0
 8002020:	609a      	str	r2, [r3, #8]
	HAL_TIM_PWM_Init(&TIM1_handle);
 8002022:	4836      	ldr	r0, [pc, #216]	; (80020fc <TIM1_init+0x174>)
 8002024:	f005 fbce 	bl	80077c4 <HAL_TIM_PWM_Init>

	HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002028:	2200      	movs	r2, #0
 800202a:	2100      	movs	r1, #0
 800202c:	2019      	movs	r0, #25
 800202e:	f000 fd5c 	bl	8002aea <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002032:	2019      	movs	r0, #25
 8002034:	f000 fd75 	bl	8002b22 <HAL_NVIC_EnableIRQ>

	tim2OC1.OCMode       = TIM_OCMODE_PWM1;
 8002038:	4b32      	ldr	r3, [pc, #200]	; (8002104 <TIM1_init+0x17c>)
 800203a:	2260      	movs	r2, #96	; 0x60
 800203c:	601a      	str	r2, [r3, #0]
	tim2OC1.OCPolarity   = TIM_OCPOLARITY_HIGH;
 800203e:	4b31      	ldr	r3, [pc, #196]	; (8002104 <TIM1_init+0x17c>)
 8002040:	2200      	movs	r2, #0
 8002042:	609a      	str	r2, [r3, #8]
	tim2OC1.Pulse        = cc1;
 8002044:	4a2f      	ldr	r2, [pc, #188]	; (8002104 <TIM1_init+0x17c>)
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	6053      	str	r3, [r2, #4]
	tim2OC1.OCNPolarity  = TIM_OCNPOLARITY_HIGH;
 800204a:	4b2e      	ldr	r3, [pc, #184]	; (8002104 <TIM1_init+0x17c>)
 800204c:	2200      	movs	r2, #0
 800204e:	60da      	str	r2, [r3, #12]
	tim2OC1.OCFastMode   = TIM_OCFAST_DISABLE;
 8002050:	4b2c      	ldr	r3, [pc, #176]	; (8002104 <TIM1_init+0x17c>)
 8002052:	2200      	movs	r2, #0
 8002054:	611a      	str	r2, [r3, #16]
	HAL_TIM_PWM_ConfigChannel(&TIM1_handle, &tim2OC1, TIM_CHANNEL_1);
 8002056:	2200      	movs	r2, #0
 8002058:	492a      	ldr	r1, [pc, #168]	; (8002104 <TIM1_init+0x17c>)
 800205a:	4828      	ldr	r0, [pc, #160]	; (80020fc <TIM1_init+0x174>)
 800205c:	f005 fdd2 	bl	8007c04 <HAL_TIM_PWM_ConfigChannel>

	tim2OC2.OCMode       = TIM_OCMODE_PWM1;
 8002060:	4b29      	ldr	r3, [pc, #164]	; (8002108 <TIM1_init+0x180>)
 8002062:	2260      	movs	r2, #96	; 0x60
 8002064:	601a      	str	r2, [r3, #0]
	tim2OC2.OCPolarity   = TIM_OCPOLARITY_HIGH;
 8002066:	4b28      	ldr	r3, [pc, #160]	; (8002108 <TIM1_init+0x180>)
 8002068:	2200      	movs	r2, #0
 800206a:	609a      	str	r2, [r3, #8]
	tim2OC2.Pulse        = cc2;
 800206c:	4a26      	ldr	r2, [pc, #152]	; (8002108 <TIM1_init+0x180>)
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	6053      	str	r3, [r2, #4]
	tim2OC2.OCNPolarity  = TIM_OCNPOLARITY_HIGH;
 8002072:	4b25      	ldr	r3, [pc, #148]	; (8002108 <TIM1_init+0x180>)
 8002074:	2200      	movs	r2, #0
 8002076:	60da      	str	r2, [r3, #12]
	tim2OC2.OCFastMode   = TIM_OCFAST_DISABLE;
 8002078:	4b23      	ldr	r3, [pc, #140]	; (8002108 <TIM1_init+0x180>)
 800207a:	2200      	movs	r2, #0
 800207c:	611a      	str	r2, [r3, #16]
	tim2OC2.OCIdleState  = TIM_OCIDLESTATE_RESET;
 800207e:	4b22      	ldr	r3, [pc, #136]	; (8002108 <TIM1_init+0x180>)
 8002080:	2200      	movs	r2, #0
 8002082:	615a      	str	r2, [r3, #20]
	tim2OC2.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002084:	4b20      	ldr	r3, [pc, #128]	; (8002108 <TIM1_init+0x180>)
 8002086:	2200      	movs	r2, #0
 8002088:	619a      	str	r2, [r3, #24]
	HAL_TIM_PWM_ConfigChannel(&TIM1_handle, &tim2OC2, TIM_CHANNEL_2);
 800208a:	2204      	movs	r2, #4
 800208c:	491e      	ldr	r1, [pc, #120]	; (8002108 <TIM1_init+0x180>)
 800208e:	481b      	ldr	r0, [pc, #108]	; (80020fc <TIM1_init+0x174>)
 8002090:	f005 fdb8 	bl	8007c04 <HAL_TIM_PWM_ConfigChannel>


	HAL_TIM_Base_Start(&TIM1_handle);
 8002094:	4819      	ldr	r0, [pc, #100]	; (80020fc <TIM1_init+0x174>)
 8002096:	f005 fb2d 	bl	80076f4 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&TIM1_handle, TIM_CHANNEL_1);
 800209a:	2100      	movs	r1, #0
 800209c:	4817      	ldr	r0, [pc, #92]	; (80020fc <TIM1_init+0x174>)
 800209e:	f005 fbe1 	bl	8007864 <HAL_TIM_PWM_Start>

	__HAL_TIM_DISABLE(&TIM1_handle);
 80020a2:	4b16      	ldr	r3, [pc, #88]	; (80020fc <TIM1_init+0x174>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	6a1a      	ldr	r2, [r3, #32]
 80020a8:	f241 1311 	movw	r3, #4369	; 0x1111
 80020ac:	4013      	ands	r3, r2
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d10f      	bne.n	80020d2 <TIM1_init+0x14a>
 80020b2:	4b12      	ldr	r3, [pc, #72]	; (80020fc <TIM1_init+0x174>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	6a1a      	ldr	r2, [r3, #32]
 80020b8:	f240 4344 	movw	r3, #1092	; 0x444
 80020bc:	4013      	ands	r3, r2
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d107      	bne.n	80020d2 <TIM1_init+0x14a>
 80020c2:	4b0e      	ldr	r3, [pc, #56]	; (80020fc <TIM1_init+0x174>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	4b0c      	ldr	r3, [pc, #48]	; (80020fc <TIM1_init+0x174>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f022 0201 	bic.w	r2, r2, #1
 80020d0:	601a      	str	r2, [r3, #0]

}
 80020d2:	bf00      	nop
 80020d4:	3710      	adds	r7, #16
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	40023800 	.word	0x40023800
 80020e0:	20000000 	.word	0x20000000
 80020e4:	014f8b59 	.word	0x014f8b59
 80020e8:	20000624 	.word	0x20000624
 80020ec:	1b4e81b5 	.word	0x1b4e81b5
 80020f0:	2000055c 	.word	0x2000055c
 80020f4:	38e38e39 	.word	0x38e38e39
 80020f8:	88888889 	.word	0x88888889
 80020fc:	200005dc 	.word	0x200005dc
 8002100:	40010000 	.word	0x40010000
 8002104:	200005c0 	.word	0x200005c0
 8002108:	20000540 	.word	0x20000540

0800210c <DMA2_init>:

uint32_t dummy;


static void DMA2_init(void)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b082      	sub	sp, #8
 8002110:	af00      	add	r7, sp, #0

	// TIM2 Update event
	__HAL_RCC_DMA2_CLK_ENABLE();
 8002112:	2300      	movs	r3, #0
 8002114:	607b      	str	r3, [r7, #4]
 8002116:	4b65      	ldr	r3, [pc, #404]	; (80022ac <DMA2_init+0x1a0>)
 8002118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211a:	4a64      	ldr	r2, [pc, #400]	; (80022ac <DMA2_init+0x1a0>)
 800211c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002120:	6313      	str	r3, [r2, #48]	; 0x30
 8002122:	4b62      	ldr	r3, [pc, #392]	; (80022ac <DMA2_init+0x1a0>)
 8002124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002126:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800212a:	607b      	str	r3, [r7, #4]
 800212c:	687b      	ldr	r3, [r7, #4]

	dmaUpdate.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800212e:	4b60      	ldr	r3, [pc, #384]	; (80022b0 <DMA2_init+0x1a4>)
 8002130:	2240      	movs	r2, #64	; 0x40
 8002132:	609a      	str	r2, [r3, #8]
	dmaUpdate.Init.PeriphInc = DMA_PINC_DISABLE;
 8002134:	4b5e      	ldr	r3, [pc, #376]	; (80022b0 <DMA2_init+0x1a4>)
 8002136:	2200      	movs	r2, #0
 8002138:	60da      	str	r2, [r3, #12]
	dmaUpdate.Init.MemInc = DMA_MINC_DISABLE;
 800213a:	4b5d      	ldr	r3, [pc, #372]	; (80022b0 <DMA2_init+0x1a4>)
 800213c:	2200      	movs	r2, #0
 800213e:	611a      	str	r2, [r3, #16]
	dmaUpdate.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002140:	4b5b      	ldr	r3, [pc, #364]	; (80022b0 <DMA2_init+0x1a4>)
 8002142:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002146:	615a      	str	r2, [r3, #20]
	dmaUpdate.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002148:	4b59      	ldr	r3, [pc, #356]	; (80022b0 <DMA2_init+0x1a4>)
 800214a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800214e:	619a      	str	r2, [r3, #24]
	dmaUpdate.Init.Mode = DMA_CIRCULAR;
 8002150:	4b57      	ldr	r3, [pc, #348]	; (80022b0 <DMA2_init+0x1a4>)
 8002152:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002156:	61da      	str	r2, [r3, #28]
	dmaUpdate.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002158:	4b55      	ldr	r3, [pc, #340]	; (80022b0 <DMA2_init+0x1a4>)
 800215a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800215e:	621a      	str	r2, [r3, #32]
	dmaUpdate.Init.Channel = DMA_CHANNEL_6;
 8002160:	4b53      	ldr	r3, [pc, #332]	; (80022b0 <DMA2_init+0x1a4>)
 8002162:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8002166:	605a      	str	r2, [r3, #4]

	dmaUpdate.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002168:	4b51      	ldr	r3, [pc, #324]	; (80022b0 <DMA2_init+0x1a4>)
 800216a:	2200      	movs	r2, #0
 800216c:	625a      	str	r2, [r3, #36]	; 0x24
	dmaUpdate.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800216e:	4b50      	ldr	r3, [pc, #320]	; (80022b0 <DMA2_init+0x1a4>)
 8002170:	2203      	movs	r2, #3
 8002172:	629a      	str	r2, [r3, #40]	; 0x28
	dmaUpdate.Init.MemBurst = DMA_MBURST_SINGLE;
 8002174:	4b4e      	ldr	r3, [pc, #312]	; (80022b0 <DMA2_init+0x1a4>)
 8002176:	2200      	movs	r2, #0
 8002178:	62da      	str	r2, [r3, #44]	; 0x2c
	dmaUpdate.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800217a:	4b4d      	ldr	r3, [pc, #308]	; (80022b0 <DMA2_init+0x1a4>)
 800217c:	2200      	movs	r2, #0
 800217e:	631a      	str	r2, [r3, #48]	; 0x30

	dmaUpdate.Instance = DMA2_Stream5;
 8002180:	4b4b      	ldr	r3, [pc, #300]	; (80022b0 <DMA2_init+0x1a4>)
 8002182:	4a4c      	ldr	r2, [pc, #304]	; (80022b4 <DMA2_init+0x1a8>)
 8002184:	601a      	str	r2, [r3, #0]
	//dmaUpdate.XferCpltCallback  = TransferComplete;
	//dmaUpdate.XferErrorCallback = TransferError;

	HAL_DMA_DeInit(&dmaUpdate);
 8002186:	484a      	ldr	r0, [pc, #296]	; (80022b0 <DMA2_init+0x1a4>)
 8002188:	f000 fd94 	bl	8002cb4 <HAL_DMA_DeInit>
	HAL_DMA_Init(&dmaUpdate);
 800218c:	4848      	ldr	r0, [pc, #288]	; (80022b0 <DMA2_init+0x1a4>)
 800218e:	f000 fce3 	bl	8002b58 <HAL_DMA_Init>
	//HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
	//HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
	HAL_DMA_Start(&dmaUpdate, (uint32_t)WS2812_IO_High, (uint32_t)(&WS2812B_PORT->BSRR), BUFFER_SIZE);
 8002192:	4949      	ldr	r1, [pc, #292]	; (80022b8 <DMA2_init+0x1ac>)
 8002194:	2330      	movs	r3, #48	; 0x30
 8002196:	4a49      	ldr	r2, [pc, #292]	; (80022bc <DMA2_init+0x1b0>)
 8002198:	4845      	ldr	r0, [pc, #276]	; (80022b0 <DMA2_init+0x1a4>)
 800219a:	f000 fde9 	bl	8002d70 <HAL_DMA_Start>
	//HAL_DMA_Start(&dmaUpdate, (uint32_t)WS2812_IO_High, (uint32_t)&dummy, BUFFER_SIZE);


	// TIM2 CC1 event
	dmaCC1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800219e:	4b48      	ldr	r3, [pc, #288]	; (80022c0 <DMA2_init+0x1b4>)
 80021a0:	2240      	movs	r2, #64	; 0x40
 80021a2:	609a      	str	r2, [r3, #8]
	dmaCC1.Init.PeriphInc = DMA_PINC_DISABLE;
 80021a4:	4b46      	ldr	r3, [pc, #280]	; (80022c0 <DMA2_init+0x1b4>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	60da      	str	r2, [r3, #12]
	dmaCC1.Init.MemInc = DMA_MINC_ENABLE;
 80021aa:	4b45      	ldr	r3, [pc, #276]	; (80022c0 <DMA2_init+0x1b4>)
 80021ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80021b0:	611a      	str	r2, [r3, #16]
	dmaCC1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80021b2:	4b43      	ldr	r3, [pc, #268]	; (80022c0 <DMA2_init+0x1b4>)
 80021b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80021b8:	615a      	str	r2, [r3, #20]
	dmaCC1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80021ba:	4b41      	ldr	r3, [pc, #260]	; (80022c0 <DMA2_init+0x1b4>)
 80021bc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80021c0:	619a      	str	r2, [r3, #24]
	dmaCC1.Init.Mode = DMA_CIRCULAR;
 80021c2:	4b3f      	ldr	r3, [pc, #252]	; (80022c0 <DMA2_init+0x1b4>)
 80021c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80021c8:	61da      	str	r2, [r3, #28]
	dmaCC1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80021ca:	4b3d      	ldr	r3, [pc, #244]	; (80022c0 <DMA2_init+0x1b4>)
 80021cc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80021d0:	621a      	str	r2, [r3, #32]
	dmaCC1.Init.Channel = DMA_CHANNEL_6;
 80021d2:	4b3b      	ldr	r3, [pc, #236]	; (80022c0 <DMA2_init+0x1b4>)
 80021d4:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 80021d8:	605a      	str	r2, [r3, #4]

	dmaCC1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80021da:	4b39      	ldr	r3, [pc, #228]	; (80022c0 <DMA2_init+0x1b4>)
 80021dc:	2200      	movs	r2, #0
 80021de:	625a      	str	r2, [r3, #36]	; 0x24
	dmaCC1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80021e0:	4b37      	ldr	r3, [pc, #220]	; (80022c0 <DMA2_init+0x1b4>)
 80021e2:	2203      	movs	r2, #3
 80021e4:	629a      	str	r2, [r3, #40]	; 0x28
	dmaCC1.Init.MemBurst = DMA_MBURST_SINGLE;
 80021e6:	4b36      	ldr	r3, [pc, #216]	; (80022c0 <DMA2_init+0x1b4>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	62da      	str	r2, [r3, #44]	; 0x2c
	dmaCC1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80021ec:	4b34      	ldr	r3, [pc, #208]	; (80022c0 <DMA2_init+0x1b4>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	631a      	str	r2, [r3, #48]	; 0x30

	dmaCC1.Instance = DMA2_Stream1;
 80021f2:	4b33      	ldr	r3, [pc, #204]	; (80022c0 <DMA2_init+0x1b4>)
 80021f4:	4a33      	ldr	r2, [pc, #204]	; (80022c4 <DMA2_init+0x1b8>)
 80021f6:	601a      	str	r2, [r3, #0]
	//dmaUpdate.XferCpltCallback  = TransferComplete;
	//dmaUpdate.XferErrorCallback = TransferError;
	//dmaUpdate.XferHalfCpltCallback = TransferHalf;
	//HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
	//HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
	HAL_DMA_DeInit(&dmaCC1);
 80021f8:	4831      	ldr	r0, [pc, #196]	; (80022c0 <DMA2_init+0x1b4>)
 80021fa:	f000 fd5b 	bl	8002cb4 <HAL_DMA_DeInit>
	HAL_DMA_Init(&dmaCC1);
 80021fe:	4830      	ldr	r0, [pc, #192]	; (80022c0 <DMA2_init+0x1b4>)
 8002200:	f000 fcaa 	bl	8002b58 <HAL_DMA_Init>
	HAL_DMA_Start(&dmaCC1, (uint32_t)ws2812bDmaBitBuffer, (uint32_t)(&WS2812B_PORT->BSRR) + 2, BUFFER_SIZE); //BRR
 8002204:	4930      	ldr	r1, [pc, #192]	; (80022c8 <DMA2_init+0x1bc>)
 8002206:	2330      	movs	r3, #48	; 0x30
 8002208:	4a30      	ldr	r2, [pc, #192]	; (80022cc <DMA2_init+0x1c0>)
 800220a:	482d      	ldr	r0, [pc, #180]	; (80022c0 <DMA2_init+0x1b4>)
 800220c:	f000 fdb0 	bl	8002d70 <HAL_DMA_Start>
	//HAL_DMA_Start(&dmaCC1, (uint32_t)ws2812bDmaBitBuffer, (uint32_t)&dummy, BUFFER_SIZE); //BRR


	// TIM2 CC2 event
	dmaCC2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002210:	4b2f      	ldr	r3, [pc, #188]	; (80022d0 <DMA2_init+0x1c4>)
 8002212:	2240      	movs	r2, #64	; 0x40
 8002214:	609a      	str	r2, [r3, #8]
	dmaCC2.Init.PeriphInc = DMA_PINC_DISABLE;
 8002216:	4b2e      	ldr	r3, [pc, #184]	; (80022d0 <DMA2_init+0x1c4>)
 8002218:	2200      	movs	r2, #0
 800221a:	60da      	str	r2, [r3, #12]
	dmaCC2.Init.MemInc = DMA_MINC_DISABLE;
 800221c:	4b2c      	ldr	r3, [pc, #176]	; (80022d0 <DMA2_init+0x1c4>)
 800221e:	2200      	movs	r2, #0
 8002220:	611a      	str	r2, [r3, #16]
	dmaCC2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002222:	4b2b      	ldr	r3, [pc, #172]	; (80022d0 <DMA2_init+0x1c4>)
 8002224:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002228:	615a      	str	r2, [r3, #20]
	dmaCC2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800222a:	4b29      	ldr	r3, [pc, #164]	; (80022d0 <DMA2_init+0x1c4>)
 800222c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002230:	619a      	str	r2, [r3, #24]
	dmaCC2.Init.Mode = DMA_CIRCULAR;
 8002232:	4b27      	ldr	r3, [pc, #156]	; (80022d0 <DMA2_init+0x1c4>)
 8002234:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002238:	61da      	str	r2, [r3, #28]
	dmaCC2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800223a:	4b25      	ldr	r3, [pc, #148]	; (80022d0 <DMA2_init+0x1c4>)
 800223c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002240:	621a      	str	r2, [r3, #32]
	dmaCC2.Init.Channel = DMA_CHANNEL_6;
 8002242:	4b23      	ldr	r3, [pc, #140]	; (80022d0 <DMA2_init+0x1c4>)
 8002244:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8002248:	605a      	str	r2, [r3, #4]

	dmaCC2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800224a:	4b21      	ldr	r3, [pc, #132]	; (80022d0 <DMA2_init+0x1c4>)
 800224c:	2200      	movs	r2, #0
 800224e:	625a      	str	r2, [r3, #36]	; 0x24
	dmaCC2.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002250:	4b1f      	ldr	r3, [pc, #124]	; (80022d0 <DMA2_init+0x1c4>)
 8002252:	2203      	movs	r2, #3
 8002254:	629a      	str	r2, [r3, #40]	; 0x28
	dmaCC2.Init.MemBurst = DMA_MBURST_SINGLE;
 8002256:	4b1e      	ldr	r3, [pc, #120]	; (80022d0 <DMA2_init+0x1c4>)
 8002258:	2200      	movs	r2, #0
 800225a:	62da      	str	r2, [r3, #44]	; 0x2c
	dmaCC2.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800225c:	4b1c      	ldr	r3, [pc, #112]	; (80022d0 <DMA2_init+0x1c4>)
 800225e:	2200      	movs	r2, #0
 8002260:	631a      	str	r2, [r3, #48]	; 0x30

	dmaCC2.Instance = DMA2_Stream2;
 8002262:	4b1b      	ldr	r3, [pc, #108]	; (80022d0 <DMA2_init+0x1c4>)
 8002264:	4a1b      	ldr	r2, [pc, #108]	; (80022d4 <DMA2_init+0x1c8>)
 8002266:	601a      	str	r2, [r3, #0]

	HAL_DMA_DeInit(&dmaCC2);
 8002268:	4819      	ldr	r0, [pc, #100]	; (80022d0 <DMA2_init+0x1c4>)
 800226a:	f000 fd23 	bl	8002cb4 <HAL_DMA_DeInit>

	dmaCC2.XferCpltCallback  = DMA_TransferCompleteHandler;
 800226e:	4b18      	ldr	r3, [pc, #96]	; (80022d0 <DMA2_init+0x1c4>)
 8002270:	4a19      	ldr	r2, [pc, #100]	; (80022d8 <DMA2_init+0x1cc>)
 8002272:	63da      	str	r2, [r3, #60]	; 0x3c
	dmaCC2.XferHalfCpltCallback = DMA_TransferHalfHandler;
 8002274:	4b16      	ldr	r3, [pc, #88]	; (80022d0 <DMA2_init+0x1c4>)
 8002276:	4a19      	ldr	r2, [pc, #100]	; (80022dc <DMA2_init+0x1d0>)
 8002278:	641a      	str	r2, [r3, #64]	; 0x40
	dmaCC2.XferErrorCallback = DMA_TransferError;
 800227a:	4b15      	ldr	r3, [pc, #84]	; (80022d0 <DMA2_init+0x1c4>)
 800227c:	4a18      	ldr	r2, [pc, #96]	; (80022e0 <DMA2_init+0x1d4>)
 800227e:	64da      	str	r2, [r3, #76]	; 0x4c

	HAL_DMA_Init(&dmaCC2);
 8002280:	4813      	ldr	r0, [pc, #76]	; (80022d0 <DMA2_init+0x1c4>)
 8002282:	f000 fc69 	bl	8002b58 <HAL_DMA_Init>
	HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8002286:	2200      	movs	r2, #0
 8002288:	2100      	movs	r1, #0
 800228a:	203a      	movs	r0, #58	; 0x3a
 800228c:	f000 fc2d 	bl	8002aea <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8002290:	203a      	movs	r0, #58	; 0x3a
 8002292:	f000 fc46 	bl	8002b22 <HAL_NVIC_EnableIRQ>
	HAL_DMA_Start_IT(&dmaCC2, (uint32_t)WS2812_IO_Low, (uint32_t)&WS2812B_PORT->BSRR, BUFFER_SIZE);
 8002296:	4913      	ldr	r1, [pc, #76]	; (80022e4 <DMA2_init+0x1d8>)
 8002298:	2330      	movs	r3, #48	; 0x30
 800229a:	4a08      	ldr	r2, [pc, #32]	; (80022bc <DMA2_init+0x1b0>)
 800229c:	480c      	ldr	r0, [pc, #48]	; (80022d0 <DMA2_init+0x1c4>)
 800229e:	f000 fda2 	bl	8002de6 <HAL_DMA_Start_IT>
	//HAL_DMA_Start_IT(&dmaCC2, (uint32_t)WS2812_IO_Low, (uint32_t)&dummy, BUFFER_SIZE);

	//__HAL_LINKDMA(&Tim2Handle, hdma,  &dmaCC2);

}
 80022a2:	bf00      	nop
 80022a4:	3708      	adds	r7, #8
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	40023800 	.word	0x40023800
 80022b0:	200006ec 	.word	0x200006ec
 80022b4:	40026488 	.word	0x40026488
 80022b8:	20000004 	.word	0x20000004
 80022bc:	40020818 	.word	0x40020818
 80022c0:	20000628 	.word	0x20000628
 80022c4:	40026428 	.word	0x40026428
 80022c8:	2000068c 	.word	0x2000068c
 80022cc:	4002081a 	.word	0x4002081a
 80022d0:	20000560 	.word	0x20000560
 80022d4:	40026440 	.word	0x40026440
 80022d8:	080023e1 	.word	0x080023e1
 80022dc:	08002385 	.word	0x08002385
 80022e0:	08002365 	.word	0x08002365
 80022e4:	20000008 	.word	0x20000008

080022e8 <loadNextFramebufferData>:




static void loadNextFramebufferData(WS2812_BufferItem *bItem, uint32_t row)
{
 80022e8:	b590      	push	{r4, r7, lr}
 80022ea:	b089      	sub	sp, #36	; 0x24
 80022ec:	af02      	add	r7, sp, #8
 80022ee:	6078      	str	r0, [r7, #4]
 80022f0:	6039      	str	r1, [r7, #0]

	uint32_t r = bItem->frameBufferPointer[bItem->frameBufferCounter++];
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	1c58      	adds	r0, r3, #1
 80022fc:	6879      	ldr	r1, [r7, #4]
 80022fe:	6088      	str	r0, [r1, #8]
 8002300:	4413      	add	r3, r2
 8002302:	781b      	ldrb	r3, [r3, #0]
 8002304:	617b      	str	r3, [r7, #20]
	uint32_t g = bItem->frameBufferPointer[bItem->frameBufferCounter++];
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681a      	ldr	r2, [r3, #0]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	689b      	ldr	r3, [r3, #8]
 800230e:	1c58      	adds	r0, r3, #1
 8002310:	6879      	ldr	r1, [r7, #4]
 8002312:	6088      	str	r0, [r1, #8]
 8002314:	4413      	add	r3, r2
 8002316:	781b      	ldrb	r3, [r3, #0]
 8002318:	613b      	str	r3, [r7, #16]
	uint32_t b = bItem->frameBufferPointer[bItem->frameBufferCounter++];
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	1c58      	adds	r0, r3, #1
 8002324:	6879      	ldr	r1, [r7, #4]
 8002326:	6088      	str	r0, [r1, #8]
 8002328:	4413      	add	r3, r2
 800232a:	781b      	ldrb	r3, [r3, #0]
 800232c:	60fb      	str	r3, [r7, #12]

	if(bItem->frameBufferCounter == bItem->frameBufferSize)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	689a      	ldr	r2, [r3, #8]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	429a      	cmp	r2, r3
 8002338:	d102      	bne.n	8002340 <loadNextFramebufferData+0x58>
		bItem->frameBufferCounter = 0;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2200      	movs	r2, #0
 800233e:	609a      	str	r2, [r3, #8]

	ws2812b_set_pixel(bItem->channel, row, r, g, b);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	7b18      	ldrb	r0, [r3, #12]
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	b299      	uxth	r1, r3
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	b2da      	uxtb	r2, r3
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	b2dc      	uxtb	r4, r3
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	b2db      	uxtb	r3, r3
 8002354:	9300      	str	r3, [sp, #0]
 8002356:	4623      	mov	r3, r4
 8002358:	f000 f934 	bl	80025c4 <ws2812b_set_pixel>
}
 800235c:	bf00      	nop
 800235e:	371c      	adds	r7, #28
 8002360:	46bd      	mov	sp, r7
 8002362:	bd90      	pop	{r4, r7, pc}

08002364 <DMA_TransferError>:
	__HAL_TIM_ENABLE(&TIM1_handle);
}


void DMA_TransferError(DMA_HandleTypeDef *DmaHandle)
{
 8002364:	b480      	push	{r7}
 8002366:	b085      	sub	sp, #20
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
	volatile int i = 0;
 800236c:	2300      	movs	r3, #0
 800236e:	60fb      	str	r3, [r7, #12]
	i++;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	3301      	adds	r3, #1
 8002374:	60fb      	str	r3, [r7, #12]
}
 8002376:	bf00      	nop
 8002378:	3714      	adds	r7, #20
 800237a:	46bd      	mov	sp, r7
 800237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002380:	4770      	bx	lr
	...

08002384 <DMA_TransferHalfHandler>:


void DMA_TransferHalfHandler(DMA_HandleTypeDef *DmaHandle)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b086      	sub	sp, #24
 8002388:	af02      	add	r7, sp, #8
 800238a:	6078      	str	r0, [r7, #4]

	// Is this the last LED?
	if(ws2812b.repeatCounter == WS2812B_NUMBER_OF_LEDS)
 800238c:	4b13      	ldr	r3, [pc, #76]	; (80023dc <DMA_TransferHalfHandler+0x58>)
 800238e:	699b      	ldr	r3, [r3, #24]
 8002390:	2bc0      	cmp	r3, #192	; 0xc0
 8002392:	d108      	bne.n	80023a6 <DMA_TransferHalfHandler+0x22>
	 {

		// If this is the last pixel, set the next pixel value to zeros, because
		// the DMA would not stop exactly at the last bit.
		ws2812b_set_pixel(0, 0, 0, 0, 0);
 8002394:	2300      	movs	r3, #0
 8002396:	9300      	str	r3, [sp, #0]
 8002398:	2300      	movs	r3, #0
 800239a:	2200      	movs	r2, #0
 800239c:	2100      	movs	r1, #0
 800239e:	2000      	movs	r0, #0
 80023a0:	f000 f910 	bl	80025c4 <ws2812b_set_pixel>
		ws2812b.repeatCounter++;
	}



}
 80023a4:	e015      	b.n	80023d2 <DMA_TransferHalfHandler+0x4e>
		for( i = 0; i < WS2812_BUFFER_COUNT; i++ )
 80023a6:	2300      	movs	r3, #0
 80023a8:	60fb      	str	r3, [r7, #12]
 80023aa:	e00a      	b.n	80023c2 <DMA_TransferHalfHandler+0x3e>
			loadNextFramebufferData(&ws2812b.item[i], 0);
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	011b      	lsls	r3, r3, #4
 80023b0:	4a0a      	ldr	r2, [pc, #40]	; (80023dc <DMA_TransferHalfHandler+0x58>)
 80023b2:	4413      	add	r3, r2
 80023b4:	2100      	movs	r1, #0
 80023b6:	4618      	mov	r0, r3
 80023b8:	f7ff ff96 	bl	80022e8 <loadNextFramebufferData>
		for( i = 0; i < WS2812_BUFFER_COUNT; i++ )
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	3301      	adds	r3, #1
 80023c0:	60fb      	str	r3, [r7, #12]
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d0f1      	beq.n	80023ac <DMA_TransferHalfHandler+0x28>
		ws2812b.repeatCounter++;
 80023c8:	4b04      	ldr	r3, [pc, #16]	; (80023dc <DMA_TransferHalfHandler+0x58>)
 80023ca:	699b      	ldr	r3, [r3, #24]
 80023cc:	3301      	adds	r3, #1
 80023ce:	4a03      	ldr	r2, [pc, #12]	; (80023dc <DMA_TransferHalfHandler+0x58>)
 80023d0:	6193      	str	r3, [r2, #24]
}
 80023d2:	bf00      	nop
 80023d4:	3710      	adds	r7, #16
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	20000104 	.word	0x20000104

080023e0 <DMA_TransferCompleteHandler>:

void DMA_TransferCompleteHandler(DMA_HandleTypeDef *DmaHandle)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b084      	sub	sp, #16
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]

	#if defined(LED_ORANGE_PORT)
		LED_ORANGE_PORT->BSRR = LED_ORANGE_PIN;
 80023e8:	4b40      	ldr	r3, [pc, #256]	; (80024ec <DMA_TransferCompleteHandler+0x10c>)
 80023ea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80023ee:	619a      	str	r2, [r3, #24]
	#endif

	if(ws2812b.repeatCounter == WS2812B_NUMBER_OF_LEDS)
 80023f0:	4b3f      	ldr	r3, [pc, #252]	; (80024f0 <DMA_TransferCompleteHandler+0x110>)
 80023f2:	699b      	ldr	r3, [r3, #24]
 80023f4:	2bc0      	cmp	r3, #192	; 0xc0
 80023f6:	d15a      	bne.n	80024ae <DMA_TransferCompleteHandler+0xce>
	{
		// Transfer of all LEDs is done, disable DMA but enable tiemr update IRQ to stop the 50us pulse
		ws2812b.repeatCounter = 0;
 80023f8:	4b3d      	ldr	r3, [pc, #244]	; (80024f0 <DMA_TransferCompleteHandler+0x110>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	619a      	str	r2, [r3, #24]

		// Stop timer
		TIM1->CR1 &= ~TIM_CR1_CEN;
 80023fe:	4b3d      	ldr	r3, [pc, #244]	; (80024f4 <DMA_TransferCompleteHandler+0x114>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a3c      	ldr	r2, [pc, #240]	; (80024f4 <DMA_TransferCompleteHandler+0x114>)
 8002404:	f023 0301 	bic.w	r3, r3, #1
 8002408:	6013      	str	r3, [r2, #0]

		// Disable DMA
		__HAL_DMA_DISABLE(&dmaUpdate);
 800240a:	4b3b      	ldr	r3, [pc, #236]	; (80024f8 <DMA_TransferCompleteHandler+0x118>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	4b39      	ldr	r3, [pc, #228]	; (80024f8 <DMA_TransferCompleteHandler+0x118>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f022 0201 	bic.w	r2, r2, #1
 8002418:	601a      	str	r2, [r3, #0]
		__HAL_DMA_DISABLE(&dmaCC1);
 800241a:	4b38      	ldr	r3, [pc, #224]	; (80024fc <DMA_TransferCompleteHandler+0x11c>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	681a      	ldr	r2, [r3, #0]
 8002420:	4b36      	ldr	r3, [pc, #216]	; (80024fc <DMA_TransferCompleteHandler+0x11c>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f022 0201 	bic.w	r2, r2, #1
 8002428:	601a      	str	r2, [r3, #0]
		__HAL_DMA_DISABLE(&dmaCC2);
 800242a:	4b35      	ldr	r3, [pc, #212]	; (8002500 <DMA_TransferCompleteHandler+0x120>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	4b33      	ldr	r3, [pc, #204]	; (8002500 <DMA_TransferCompleteHandler+0x120>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f022 0201 	bic.w	r2, r2, #1
 8002438:	601a      	str	r2, [r3, #0]

		// Disable the DMA requests
		__HAL_TIM_DISABLE_DMA(&TIM1_handle, TIM_DMA_UPDATE);
 800243a:	4b32      	ldr	r3, [pc, #200]	; (8002504 <DMA_TransferCompleteHandler+0x124>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	68da      	ldr	r2, [r3, #12]
 8002440:	4b30      	ldr	r3, [pc, #192]	; (8002504 <DMA_TransferCompleteHandler+0x124>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002448:	60da      	str	r2, [r3, #12]
		__HAL_TIM_DISABLE_DMA(&TIM1_handle, TIM_DMA_CC1);
 800244a:	4b2e      	ldr	r3, [pc, #184]	; (8002504 <DMA_TransferCompleteHandler+0x124>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	68da      	ldr	r2, [r3, #12]
 8002450:	4b2c      	ldr	r3, [pc, #176]	; (8002504 <DMA_TransferCompleteHandler+0x124>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002458:	60da      	str	r2, [r3, #12]
		__HAL_TIM_DISABLE_DMA(&TIM1_handle, TIM_DMA_CC2);
 800245a:	4b2a      	ldr	r3, [pc, #168]	; (8002504 <DMA_TransferCompleteHandler+0x124>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	68da      	ldr	r2, [r3, #12]
 8002460:	4b28      	ldr	r3, [pc, #160]	; (8002504 <DMA_TransferCompleteHandler+0x124>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002468:	60da      	str	r2, [r3, #12]

		// Set 50us period for Treset pulse
		//TIM2->PSC = 1000; // For this long period we need prescaler 1000
		TIM1->ARR = timer_reset_pulse_period;
 800246a:	4a22      	ldr	r2, [pc, #136]	; (80024f4 <DMA_TransferCompleteHandler+0x114>)
 800246c:	4b26      	ldr	r3, [pc, #152]	; (8002508 <DMA_TransferCompleteHandler+0x128>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	62d3      	str	r3, [r2, #44]	; 0x2c
		// Reset the timer
		TIM1->CNT = 0;
 8002472:	4b20      	ldr	r3, [pc, #128]	; (80024f4 <DMA_TransferCompleteHandler+0x114>)
 8002474:	2200      	movs	r2, #0
 8002476:	625a      	str	r2, [r3, #36]	; 0x24

		// Generate an update event to reload the prescaler value immediately
		TIM1->EGR = TIM_EGR_UG;
 8002478:	4b1e      	ldr	r3, [pc, #120]	; (80024f4 <DMA_TransferCompleteHandler+0x114>)
 800247a:	2201      	movs	r2, #1
 800247c:	615a      	str	r2, [r3, #20]
		__HAL_TIM_CLEAR_FLAG(&TIM1_handle, TIM_FLAG_UPDATE);
 800247e:	4b21      	ldr	r3, [pc, #132]	; (8002504 <DMA_TransferCompleteHandler+0x124>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f06f 0201 	mvn.w	r2, #1
 8002486:	611a      	str	r2, [r3, #16]

		// Enable TIM2 Update interrupt for 50us Treset signal
		__HAL_TIM_ENABLE_IT(&TIM1_handle, TIM_IT_UPDATE);
 8002488:	4b1e      	ldr	r3, [pc, #120]	; (8002504 <DMA_TransferCompleteHandler+0x124>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	68da      	ldr	r2, [r3, #12]
 800248e:	4b1d      	ldr	r3, [pc, #116]	; (8002504 <DMA_TransferCompleteHandler+0x124>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f042 0201 	orr.w	r2, r2, #1
 8002496:	60da      	str	r2, [r3, #12]
		// Enable timer
		TIM1->CR1 |= TIM_CR1_CEN;
 8002498:	4b16      	ldr	r3, [pc, #88]	; (80024f4 <DMA_TransferCompleteHandler+0x114>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a15      	ldr	r2, [pc, #84]	; (80024f4 <DMA_TransferCompleteHandler+0x114>)
 800249e:	f043 0301 	orr.w	r3, r3, #1
 80024a2:	6013      	str	r3, [r2, #0]

		// Manually set outputs to low to generate 50us reset impulse
		WS2812B_PORT->BSRR = WS2812_IO_Low[0];
 80024a4:	4a19      	ldr	r2, [pc, #100]	; (800250c <DMA_TransferCompleteHandler+0x12c>)
 80024a6:	4b1a      	ldr	r3, [pc, #104]	; (8002510 <DMA_TransferCompleteHandler+0x130>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	6193      	str	r3, [r2, #24]
 80024ac:	e015      	b.n	80024da <DMA_TransferCompleteHandler+0xfa>
	} else {

		// Load bitbuffer with next RGB LED values
		uint32_t i;
		for( i = 0; i < WS2812_BUFFER_COUNT; i++ )
 80024ae:	2300      	movs	r3, #0
 80024b0:	60fb      	str	r3, [r7, #12]
 80024b2:	e00a      	b.n	80024ca <DMA_TransferCompleteHandler+0xea>
		{
			loadNextFramebufferData(&ws2812b.item[i], 1);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	011b      	lsls	r3, r3, #4
 80024b8:	4a0d      	ldr	r2, [pc, #52]	; (80024f0 <DMA_TransferCompleteHandler+0x110>)
 80024ba:	4413      	add	r3, r2
 80024bc:	2101      	movs	r1, #1
 80024be:	4618      	mov	r0, r3
 80024c0:	f7ff ff12 	bl	80022e8 <loadNextFramebufferData>
		for( i = 0; i < WS2812_BUFFER_COUNT; i++ )
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	3301      	adds	r3, #1
 80024c8:	60fb      	str	r3, [r7, #12]
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d0f1      	beq.n	80024b4 <DMA_TransferCompleteHandler+0xd4>
		}

		ws2812b.repeatCounter++;
 80024d0:	4b07      	ldr	r3, [pc, #28]	; (80024f0 <DMA_TransferCompleteHandler+0x110>)
 80024d2:	699b      	ldr	r3, [r3, #24]
 80024d4:	3301      	adds	r3, #1
 80024d6:	4a06      	ldr	r2, [pc, #24]	; (80024f0 <DMA_TransferCompleteHandler+0x110>)
 80024d8:	6193      	str	r3, [r2, #24]
	}



	#if defined(LED_ORANGE_PORT)
		LED_ORANGE_PORT->BSRR = LED_ORANGE_PIN << 16;
 80024da:	4b04      	ldr	r3, [pc, #16]	; (80024ec <DMA_TransferCompleteHandler+0x10c>)
 80024dc:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80024e0:	619a      	str	r2, [r3, #24]
	#endif

}
 80024e2:	bf00      	nop
 80024e4:	3710      	adds	r7, #16
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	40020c00 	.word	0x40020c00
 80024f0:	20000104 	.word	0x20000104
 80024f4:	40010000 	.word	0x40010000
 80024f8:	200006ec 	.word	0x200006ec
 80024fc:	20000628 	.word	0x20000628
 8002500:	20000560 	.word	0x20000560
 8002504:	200005dc 	.word	0x200005dc
 8002508:	2000055c 	.word	0x2000055c
 800250c:	40020800 	.word	0x40020800
 8002510:	20000008 	.word	0x20000008

08002514 <DMA2_Stream2_IRQHandler>:

void DMA2_Stream2_IRQHandler(void)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	af00      	add	r7, sp, #0

	#if defined(LED_BLUE_PORT)
		LED_BLUE_PORT->BSRR = LED_BLUE_PIN;
 8002518:	4b06      	ldr	r3, [pc, #24]	; (8002534 <DMA2_Stream2_IRQHandler+0x20>)
 800251a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800251e:	619a      	str	r2, [r3, #24]
	#endif

	// Check the interrupt and clear flag
	  HAL_DMA_IRQHandler(&dmaCC2);
 8002520:	4805      	ldr	r0, [pc, #20]	; (8002538 <DMA2_Stream2_IRQHandler+0x24>)
 8002522:	f000 fcb9 	bl	8002e98 <HAL_DMA_IRQHandler>

	#if defined(LED_BLUE_PORT)
		LED_BLUE_PORT->BSRR = LED_BLUE_PIN << 16;
 8002526:	4b03      	ldr	r3, [pc, #12]	; (8002534 <DMA2_Stream2_IRQHandler+0x20>)
 8002528:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800252c:	619a      	str	r2, [r3, #24]
	#endif
}
 800252e:	bf00      	nop
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	40020c00 	.word	0x40020c00
 8002538:	20000560 	.word	0x20000560

0800253c <TIM1_UP_TIM10_IRQHandler>:

void TIM1_UP_TIM10_IRQHandler(void)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	af00      	add	r7, sp, #0
	#if defined(LED_ORANGE_PORT)
		LED_ORANGE_PORT->BSRR = LED_ORANGE_PIN;
 8002540:	4b06      	ldr	r3, [pc, #24]	; (800255c <TIM1_UP_TIM10_IRQHandler+0x20>)
 8002542:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002546:	619a      	str	r2, [r3, #24]
	#endif

	HAL_TIM_IRQHandler(&TIM1_handle);
 8002548:	4805      	ldr	r0, [pc, #20]	; (8002560 <TIM1_UP_TIM10_IRQHandler+0x24>)
 800254a:	f005 fa53 	bl	80079f4 <HAL_TIM_IRQHandler>

	#if defined(LED_ORANGE_PORT)
		LED_ORANGE_PORT->BSRR = LED_ORANGE_PIN << 16;
 800254e:	4b03      	ldr	r3, [pc, #12]	; (800255c <TIM1_UP_TIM10_IRQHandler+0x20>)
 8002550:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002554:	619a      	str	r2, [r3, #24]
	#endif
}
 8002556:	bf00      	nop
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	40020c00 	.word	0x40020c00
 8002560:	200005dc 	.word	0x200005dc

08002564 <HAL_TIM_PeriodElapsedCallback>:

// TIM2 Interrupt Handler gets executed on every TIM2 Update if enabled
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002564:	b480      	push	{r7}
 8002566:	b083      	sub	sp, #12
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
		__HAL_TIM_DISABLE_IT(&TIM1_handle, TIM_IT_UPDATE);
		// set TransferComplete flag
		ws2812b.transferComplete = 1;
	}*/

    ws2812b.timerPeriodCounter = 0;
 800256c:	4b11      	ldr	r3, [pc, #68]	; (80025b4 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800256e:	2200      	movs	r2, #0
 8002570:	615a      	str	r2, [r3, #20]
    TIM1->CR1 = 0; // disable timer
 8002572:	4b11      	ldr	r3, [pc, #68]	; (80025b8 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8002574:	2200      	movs	r2, #0
 8002576:	601a      	str	r2, [r3, #0]

    // disable the TIM2 Update IRQ
    __HAL_TIM_DISABLE_IT(&TIM1_handle, TIM_IT_UPDATE);
 8002578:	4b10      	ldr	r3, [pc, #64]	; (80025bc <HAL_TIM_PeriodElapsedCallback+0x58>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	68da      	ldr	r2, [r3, #12]
 800257e:	4b0f      	ldr	r3, [pc, #60]	; (80025bc <HAL_TIM_PeriodElapsedCallback+0x58>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f022 0201 	bic.w	r2, r2, #1
 8002586:	60da      	str	r2, [r3, #12]

    // Set back 1,25us period
    TIM1->ARR = tim_period;
 8002588:	4a0b      	ldr	r2, [pc, #44]	; (80025b8 <HAL_TIM_PeriodElapsedCallback+0x54>)
 800258a:	4b0d      	ldr	r3, [pc, #52]	; (80025c0 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	62d3      	str	r3, [r2, #44]	; 0x2c

    // Generate an update event to reload the Prescaler value immediatly
    TIM1->EGR = TIM_EGR_UG;
 8002590:	4b09      	ldr	r3, [pc, #36]	; (80025b8 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8002592:	2201      	movs	r2, #1
 8002594:	615a      	str	r2, [r3, #20]
    __HAL_TIM_CLEAR_FLAG(&TIM1_handle, TIM_FLAG_UPDATE);
 8002596:	4b09      	ldr	r3, [pc, #36]	; (80025bc <HAL_TIM_PeriodElapsedCallback+0x58>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f06f 0201 	mvn.w	r2, #1
 800259e:	611a      	str	r2, [r3, #16]

    // set transfer_complete flag
    ws2812b.transferComplete = 1;
 80025a0:	4b04      	ldr	r3, [pc, #16]	; (80025b4 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80025a2:	2201      	movs	r2, #1
 80025a4:	741a      	strb	r2, [r3, #16]

}
 80025a6:	bf00      	nop
 80025a8:	370c      	adds	r7, #12
 80025aa:	46bd      	mov	sp, r7
 80025ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b0:	4770      	bx	lr
 80025b2:	bf00      	nop
 80025b4:	20000104 	.word	0x20000104
 80025b8:	40010000 	.word	0x40010000
 80025bc:	200005dc 	.word	0x200005dc
 80025c0:	20000624 	.word	0x20000624

080025c4 <ws2812b_set_pixel>:



static void ws2812b_set_pixel(uint8_t row, uint16_t column, uint8_t red, uint8_t green, uint8_t blue)
{
 80025c4:	b490      	push	{r4, r7}
 80025c6:	b088      	sub	sp, #32
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	4604      	mov	r4, r0
 80025cc:	4608      	mov	r0, r1
 80025ce:	4611      	mov	r1, r2
 80025d0:	461a      	mov	r2, r3
 80025d2:	4623      	mov	r3, r4
 80025d4:	71fb      	strb	r3, [r7, #7]
 80025d6:	4603      	mov	r3, r0
 80025d8:	80bb      	strh	r3, [r7, #4]
 80025da:	460b      	mov	r3, r1
 80025dc:	71bb      	strb	r3, [r7, #6]
 80025de:	4613      	mov	r3, r2
 80025e0:	70fb      	strb	r3, [r7, #3]

	// Apply gamma
	red = gammaTable[red];
 80025e2:	79bb      	ldrb	r3, [r7, #6]
 80025e4:	4a69      	ldr	r2, [pc, #420]	; (800278c <ws2812b_set_pixel+0x1c8>)
 80025e6:	5cd3      	ldrb	r3, [r2, r3]
 80025e8:	71bb      	strb	r3, [r7, #6]
	green = gammaTable[green];
 80025ea:	78fb      	ldrb	r3, [r7, #3]
 80025ec:	4a67      	ldr	r2, [pc, #412]	; (800278c <ws2812b_set_pixel+0x1c8>)
 80025ee:	5cd3      	ldrb	r3, [r2, r3]
 80025f0:	70fb      	strb	r3, [r7, #3]
	blue = gammaTable[blue];
 80025f2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80025f6:	4a65      	ldr	r2, [pc, #404]	; (800278c <ws2812b_set_pixel+0x1c8>)
 80025f8:	5cd3      	ldrb	r3, [r2, r3]
 80025fa:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28


	uint32_t calcCol = (column*24);
 80025fe:	88ba      	ldrh	r2, [r7, #4]
 8002600:	4613      	mov	r3, r2
 8002602:	005b      	lsls	r3, r3, #1
 8002604:	4413      	add	r3, r2
 8002606:	00db      	lsls	r3, r3, #3
 8002608:	61fb      	str	r3, [r7, #28]
	uint32_t invRed = ~red;
 800260a:	79bb      	ldrb	r3, [r7, #6]
 800260c:	43db      	mvns	r3, r3
 800260e:	61bb      	str	r3, [r7, #24]
	uint32_t invGreen = ~green;
 8002610:	78fb      	ldrb	r3, [r7, #3]
 8002612:	43db      	mvns	r3, r3
 8002614:	617b      	str	r3, [r7, #20]
	uint32_t invBlue = ~blue;
 8002616:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800261a:	43db      	mvns	r3, r3
 800261c:	613b      	str	r3, [r7, #16]
	ws2812bDmaBitBuffer[(calcCol+8+7)] |= (((((invRed)<<7) & 0x80)>>7)<<row);
	ws2812bDmaBitBuffer[(calcCol+16+7)] |= (((((invBlue)<<7) & 0x80)>>7)<<row);
#elif defined(SETPIX_4)

	// Bitband optimizations with pure increments, 5us interrupts
	uint32_t *bitBand = BITBAND_SRAM(&ws2812bDmaBitBuffer[(calcCol)], row);
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	005b      	lsls	r3, r3, #1
 8002622:	4a5b      	ldr	r2, [pc, #364]	; (8002790 <ws2812b_set_pixel+0x1cc>)
 8002624:	4413      	add	r3, r2
 8002626:	f103 4361 	add.w	r3, r3, #3774873600	; 0xe1000000
 800262a:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800262e:	015b      	lsls	r3, r3, #5
 8002630:	79fa      	ldrb	r2, [r7, #7]
 8002632:	0092      	lsls	r2, r2, #2
 8002634:	4413      	add	r3, r2
 8002636:	60fb      	str	r3, [r7, #12]

	*bitBand =  (invGreen >> 7);
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	09da      	lsrs	r2, r3, #7
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	3340      	adds	r3, #64	; 0x40
 8002644:	60fb      	str	r3, [r7, #12]

	*bitBand = (invGreen >> 6);
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	099a      	lsrs	r2, r3, #6
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	3340      	adds	r3, #64	; 0x40
 8002652:	60fb      	str	r3, [r7, #12]

	*bitBand = (invGreen >> 5);
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	095a      	lsrs	r2, r3, #5
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	3340      	adds	r3, #64	; 0x40
 8002660:	60fb      	str	r3, [r7, #12]

	*bitBand = (invGreen >> 4);
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	091a      	lsrs	r2, r3, #4
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	3340      	adds	r3, #64	; 0x40
 800266e:	60fb      	str	r3, [r7, #12]

	*bitBand = (invGreen >> 3);
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	08da      	lsrs	r2, r3, #3
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	3340      	adds	r3, #64	; 0x40
 800267c:	60fb      	str	r3, [r7, #12]

	*bitBand = (invGreen >> 2);
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	089a      	lsrs	r2, r3, #2
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	3340      	adds	r3, #64	; 0x40
 800268a:	60fb      	str	r3, [r7, #12]

	*bitBand = (invGreen >> 1);
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	085a      	lsrs	r2, r3, #1
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	3340      	adds	r3, #64	; 0x40
 8002698:	60fb      	str	r3, [r7, #12]

	*bitBand = (invGreen >> 0);
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	697a      	ldr	r2, [r7, #20]
 800269e:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	3340      	adds	r3, #64	; 0x40
 80026a4:	60fb      	str	r3, [r7, #12]

	// RED
	*bitBand =  (invRed >> 7);
 80026a6:	69bb      	ldr	r3, [r7, #24]
 80026a8:	09da      	lsrs	r2, r3, #7
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	3340      	adds	r3, #64	; 0x40
 80026b2:	60fb      	str	r3, [r7, #12]

	*bitBand = (invRed >> 6);
 80026b4:	69bb      	ldr	r3, [r7, #24]
 80026b6:	099a      	lsrs	r2, r3, #6
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	3340      	adds	r3, #64	; 0x40
 80026c0:	60fb      	str	r3, [r7, #12]

	*bitBand = (invRed >> 5);
 80026c2:	69bb      	ldr	r3, [r7, #24]
 80026c4:	095a      	lsrs	r2, r3, #5
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	3340      	adds	r3, #64	; 0x40
 80026ce:	60fb      	str	r3, [r7, #12]

	*bitBand = (invRed >> 4);
 80026d0:	69bb      	ldr	r3, [r7, #24]
 80026d2:	091a      	lsrs	r2, r3, #4
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	3340      	adds	r3, #64	; 0x40
 80026dc:	60fb      	str	r3, [r7, #12]

	*bitBand = (invRed >> 3);
 80026de:	69bb      	ldr	r3, [r7, #24]
 80026e0:	08da      	lsrs	r2, r3, #3
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	3340      	adds	r3, #64	; 0x40
 80026ea:	60fb      	str	r3, [r7, #12]

	*bitBand = (invRed >> 2);
 80026ec:	69bb      	ldr	r3, [r7, #24]
 80026ee:	089a      	lsrs	r2, r3, #2
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	3340      	adds	r3, #64	; 0x40
 80026f8:	60fb      	str	r3, [r7, #12]

	*bitBand = (invRed >> 1);
 80026fa:	69bb      	ldr	r3, [r7, #24]
 80026fc:	085a      	lsrs	r2, r3, #1
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	3340      	adds	r3, #64	; 0x40
 8002706:	60fb      	str	r3, [r7, #12]

	*bitBand = (invRed >> 0);
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	69ba      	ldr	r2, [r7, #24]
 800270c:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	3340      	adds	r3, #64	; 0x40
 8002712:	60fb      	str	r3, [r7, #12]

	// BLUE
	*bitBand =  (invBlue >> 7);
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	09da      	lsrs	r2, r3, #7
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	3340      	adds	r3, #64	; 0x40
 8002720:	60fb      	str	r3, [r7, #12]

	*bitBand = (invBlue >> 6);
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	099a      	lsrs	r2, r3, #6
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	3340      	adds	r3, #64	; 0x40
 800272e:	60fb      	str	r3, [r7, #12]

	*bitBand = (invBlue >> 5);
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	095a      	lsrs	r2, r3, #5
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	3340      	adds	r3, #64	; 0x40
 800273c:	60fb      	str	r3, [r7, #12]

	*bitBand = (invBlue >> 4);
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	091a      	lsrs	r2, r3, #4
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	3340      	adds	r3, #64	; 0x40
 800274a:	60fb      	str	r3, [r7, #12]

	*bitBand = (invBlue >> 3);
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	08da      	lsrs	r2, r3, #3
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	3340      	adds	r3, #64	; 0x40
 8002758:	60fb      	str	r3, [r7, #12]

	*bitBand = (invBlue >> 2);
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	089a      	lsrs	r2, r3, #2
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	3340      	adds	r3, #64	; 0x40
 8002766:	60fb      	str	r3, [r7, #12]

	*bitBand = (invBlue >> 1);
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	085a      	lsrs	r2, r3, #1
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	3340      	adds	r3, #64	; 0x40
 8002774:	60fb      	str	r3, [r7, #12]

	*bitBand = (invBlue >> 0);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	693a      	ldr	r2, [r7, #16]
 800277a:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	3340      	adds	r3, #64	; 0x40
 8002780:	60fb      	str	r3, [r7, #12]

#endif
}
 8002782:	bf00      	nop
 8002784:	3720      	adds	r7, #32
 8002786:	46bd      	mov	sp, r7
 8002788:	bc90      	pop	{r4, r7}
 800278a:	4770      	bx	lr
 800278c:	0800cb94 	.word	0x0800cb94
 8002790:	2000068c 	.word	0x2000068c

08002794 <ws2812b_init>:


void ws2812b_init()
{
 8002794:	b580      	push	{r7, lr}
 8002796:	af00      	add	r7, sp, #0
	ws2812b_gpio_init();
 8002798:	f7ff fba6 	bl	8001ee8 <ws2812b_gpio_init>

	/*TIM2_init();
	DMA_init();*/


	DMA2_init();
 800279c:	f7ff fcb6 	bl	800210c <DMA2_init>
	TIM1_init();
 80027a0:	f7ff fbf2 	bl	8001f88 <TIM1_init>


	// Need to start the first transfer
	ws2812b.transferComplete = 1;
 80027a4:	4b02      	ldr	r3, [pc, #8]	; (80027b0 <ws2812b_init+0x1c>)
 80027a6:	2201      	movs	r2, #1
 80027a8:	741a      	strb	r2, [r3, #16]
}
 80027aa:	bf00      	nop
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	20000104 	.word	0x20000104

080027b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80027b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80027ec <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80027b8:	480d      	ldr	r0, [pc, #52]	; (80027f0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80027ba:	490e      	ldr	r1, [pc, #56]	; (80027f4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80027bc:	4a0e      	ldr	r2, [pc, #56]	; (80027f8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80027be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80027c0:	e002      	b.n	80027c8 <LoopCopyDataInit>

080027c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027c6:	3304      	adds	r3, #4

080027c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027cc:	d3f9      	bcc.n	80027c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027ce:	4a0b      	ldr	r2, [pc, #44]	; (80027fc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80027d0:	4c0b      	ldr	r4, [pc, #44]	; (8002800 <LoopFillZerobss+0x26>)
  movs r3, #0
 80027d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027d4:	e001      	b.n	80027da <LoopFillZerobss>

080027d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027d8:	3204      	adds	r2, #4

080027da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027dc:	d3fb      	bcc.n	80027d6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80027de:	f7ff fb71 	bl	8001ec4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80027e2:	f009 fb21 	bl	800be28 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80027e6:	f7fe fb8d 	bl	8000f04 <main>
  bx  lr    
 80027ea:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80027ec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80027f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80027f4:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 80027f8:	0800cd40 	.word	0x0800cd40
  ldr r2, =_sbss
 80027fc:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 8002800:	20000e3c 	.word	0x20000e3c

08002804 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002804:	e7fe      	b.n	8002804 <ADC_IRQHandler>
	...

08002808 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800280c:	4b0e      	ldr	r3, [pc, #56]	; (8002848 <HAL_Init+0x40>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a0d      	ldr	r2, [pc, #52]	; (8002848 <HAL_Init+0x40>)
 8002812:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002816:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002818:	4b0b      	ldr	r3, [pc, #44]	; (8002848 <HAL_Init+0x40>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a0a      	ldr	r2, [pc, #40]	; (8002848 <HAL_Init+0x40>)
 800281e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002822:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002824:	4b08      	ldr	r3, [pc, #32]	; (8002848 <HAL_Init+0x40>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a07      	ldr	r2, [pc, #28]	; (8002848 <HAL_Init+0x40>)
 800282a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800282e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002830:	2003      	movs	r0, #3
 8002832:	f000 f94f 	bl	8002ad4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002836:	2000      	movs	r0, #0
 8002838:	f000 f808 	bl	800284c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800283c:	f7ff f8b6 	bl	80019ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002840:	2300      	movs	r3, #0
}
 8002842:	4618      	mov	r0, r3
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	40023c00 	.word	0x40023c00

0800284c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b082      	sub	sp, #8
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002854:	4b12      	ldr	r3, [pc, #72]	; (80028a0 <HAL_InitTick+0x54>)
 8002856:	681a      	ldr	r2, [r3, #0]
 8002858:	4b12      	ldr	r3, [pc, #72]	; (80028a4 <HAL_InitTick+0x58>)
 800285a:	781b      	ldrb	r3, [r3, #0]
 800285c:	4619      	mov	r1, r3
 800285e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002862:	fbb3 f3f1 	udiv	r3, r3, r1
 8002866:	fbb2 f3f3 	udiv	r3, r2, r3
 800286a:	4618      	mov	r0, r3
 800286c:	f000 f967 	bl	8002b3e <HAL_SYSTICK_Config>
 8002870:	4603      	mov	r3, r0
 8002872:	2b00      	cmp	r3, #0
 8002874:	d001      	beq.n	800287a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	e00e      	b.n	8002898 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2b0f      	cmp	r3, #15
 800287e:	d80a      	bhi.n	8002896 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002880:	2200      	movs	r2, #0
 8002882:	6879      	ldr	r1, [r7, #4]
 8002884:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002888:	f000 f92f 	bl	8002aea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800288c:	4a06      	ldr	r2, [pc, #24]	; (80028a8 <HAL_InitTick+0x5c>)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002892:	2300      	movs	r3, #0
 8002894:	e000      	b.n	8002898 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
}
 8002898:	4618      	mov	r0, r3
 800289a:	3708      	adds	r7, #8
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}
 80028a0:	20000000 	.word	0x20000000
 80028a4:	20000010 	.word	0x20000010
 80028a8:	2000000c 	.word	0x2000000c

080028ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028ac:	b480      	push	{r7}
 80028ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80028b0:	4b06      	ldr	r3, [pc, #24]	; (80028cc <HAL_IncTick+0x20>)
 80028b2:	781b      	ldrb	r3, [r3, #0]
 80028b4:	461a      	mov	r2, r3
 80028b6:	4b06      	ldr	r3, [pc, #24]	; (80028d0 <HAL_IncTick+0x24>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4413      	add	r3, r2
 80028bc:	4a04      	ldr	r2, [pc, #16]	; (80028d0 <HAL_IncTick+0x24>)
 80028be:	6013      	str	r3, [r2, #0]
}
 80028c0:	bf00      	nop
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr
 80028ca:	bf00      	nop
 80028cc:	20000010 	.word	0x20000010
 80028d0:	2000074c 	.word	0x2000074c

080028d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028d4:	b480      	push	{r7}
 80028d6:	af00      	add	r7, sp, #0
  return uwTick;
 80028d8:	4b03      	ldr	r3, [pc, #12]	; (80028e8 <HAL_GetTick+0x14>)
 80028da:	681b      	ldr	r3, [r3, #0]
}
 80028dc:	4618      	mov	r0, r3
 80028de:	46bd      	mov	sp, r7
 80028e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e4:	4770      	bx	lr
 80028e6:	bf00      	nop
 80028e8:	2000074c 	.word	0x2000074c

080028ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b084      	sub	sp, #16
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80028f4:	f7ff ffee 	bl	80028d4 <HAL_GetTick>
 80028f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002904:	d005      	beq.n	8002912 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002906:	4b0a      	ldr	r3, [pc, #40]	; (8002930 <HAL_Delay+0x44>)
 8002908:	781b      	ldrb	r3, [r3, #0]
 800290a:	461a      	mov	r2, r3
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	4413      	add	r3, r2
 8002910:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002912:	bf00      	nop
 8002914:	f7ff ffde 	bl	80028d4 <HAL_GetTick>
 8002918:	4602      	mov	r2, r0
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	1ad3      	subs	r3, r2, r3
 800291e:	68fa      	ldr	r2, [r7, #12]
 8002920:	429a      	cmp	r2, r3
 8002922:	d8f7      	bhi.n	8002914 <HAL_Delay+0x28>
  {
  }
}
 8002924:	bf00      	nop
 8002926:	bf00      	nop
 8002928:	3710      	adds	r7, #16
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}
 800292e:	bf00      	nop
 8002930:	20000010 	.word	0x20000010

08002934 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002934:	b480      	push	{r7}
 8002936:	b085      	sub	sp, #20
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	f003 0307 	and.w	r3, r3, #7
 8002942:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002944:	4b0c      	ldr	r3, [pc, #48]	; (8002978 <__NVIC_SetPriorityGrouping+0x44>)
 8002946:	68db      	ldr	r3, [r3, #12]
 8002948:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800294a:	68ba      	ldr	r2, [r7, #8]
 800294c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002950:	4013      	ands	r3, r2
 8002952:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800295c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002960:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002964:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002966:	4a04      	ldr	r2, [pc, #16]	; (8002978 <__NVIC_SetPriorityGrouping+0x44>)
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	60d3      	str	r3, [r2, #12]
}
 800296c:	bf00      	nop
 800296e:	3714      	adds	r7, #20
 8002970:	46bd      	mov	sp, r7
 8002972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002976:	4770      	bx	lr
 8002978:	e000ed00 	.word	0xe000ed00

0800297c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800297c:	b480      	push	{r7}
 800297e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002980:	4b04      	ldr	r3, [pc, #16]	; (8002994 <__NVIC_GetPriorityGrouping+0x18>)
 8002982:	68db      	ldr	r3, [r3, #12]
 8002984:	0a1b      	lsrs	r3, r3, #8
 8002986:	f003 0307 	and.w	r3, r3, #7
}
 800298a:	4618      	mov	r0, r3
 800298c:	46bd      	mov	sp, r7
 800298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002992:	4770      	bx	lr
 8002994:	e000ed00 	.word	0xe000ed00

08002998 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002998:	b480      	push	{r7}
 800299a:	b083      	sub	sp, #12
 800299c:	af00      	add	r7, sp, #0
 800299e:	4603      	mov	r3, r0
 80029a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	db0b      	blt.n	80029c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029aa:	79fb      	ldrb	r3, [r7, #7]
 80029ac:	f003 021f 	and.w	r2, r3, #31
 80029b0:	4907      	ldr	r1, [pc, #28]	; (80029d0 <__NVIC_EnableIRQ+0x38>)
 80029b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029b6:	095b      	lsrs	r3, r3, #5
 80029b8:	2001      	movs	r0, #1
 80029ba:	fa00 f202 	lsl.w	r2, r0, r2
 80029be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80029c2:	bf00      	nop
 80029c4:	370c      	adds	r7, #12
 80029c6:	46bd      	mov	sp, r7
 80029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029cc:	4770      	bx	lr
 80029ce:	bf00      	nop
 80029d0:	e000e100 	.word	0xe000e100

080029d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b083      	sub	sp, #12
 80029d8:	af00      	add	r7, sp, #0
 80029da:	4603      	mov	r3, r0
 80029dc:	6039      	str	r1, [r7, #0]
 80029de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	db0a      	blt.n	80029fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	b2da      	uxtb	r2, r3
 80029ec:	490c      	ldr	r1, [pc, #48]	; (8002a20 <__NVIC_SetPriority+0x4c>)
 80029ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029f2:	0112      	lsls	r2, r2, #4
 80029f4:	b2d2      	uxtb	r2, r2
 80029f6:	440b      	add	r3, r1
 80029f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029fc:	e00a      	b.n	8002a14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	b2da      	uxtb	r2, r3
 8002a02:	4908      	ldr	r1, [pc, #32]	; (8002a24 <__NVIC_SetPriority+0x50>)
 8002a04:	79fb      	ldrb	r3, [r7, #7]
 8002a06:	f003 030f 	and.w	r3, r3, #15
 8002a0a:	3b04      	subs	r3, #4
 8002a0c:	0112      	lsls	r2, r2, #4
 8002a0e:	b2d2      	uxtb	r2, r2
 8002a10:	440b      	add	r3, r1
 8002a12:	761a      	strb	r2, [r3, #24]
}
 8002a14:	bf00      	nop
 8002a16:	370c      	adds	r7, #12
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1e:	4770      	bx	lr
 8002a20:	e000e100 	.word	0xe000e100
 8002a24:	e000ed00 	.word	0xe000ed00

08002a28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b089      	sub	sp, #36	; 0x24
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	60f8      	str	r0, [r7, #12]
 8002a30:	60b9      	str	r1, [r7, #8]
 8002a32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	f003 0307 	and.w	r3, r3, #7
 8002a3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a3c:	69fb      	ldr	r3, [r7, #28]
 8002a3e:	f1c3 0307 	rsb	r3, r3, #7
 8002a42:	2b04      	cmp	r3, #4
 8002a44:	bf28      	it	cs
 8002a46:	2304      	movcs	r3, #4
 8002a48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a4a:	69fb      	ldr	r3, [r7, #28]
 8002a4c:	3304      	adds	r3, #4
 8002a4e:	2b06      	cmp	r3, #6
 8002a50:	d902      	bls.n	8002a58 <NVIC_EncodePriority+0x30>
 8002a52:	69fb      	ldr	r3, [r7, #28]
 8002a54:	3b03      	subs	r3, #3
 8002a56:	e000      	b.n	8002a5a <NVIC_EncodePriority+0x32>
 8002a58:	2300      	movs	r3, #0
 8002a5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a5c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002a60:	69bb      	ldr	r3, [r7, #24]
 8002a62:	fa02 f303 	lsl.w	r3, r2, r3
 8002a66:	43da      	mvns	r2, r3
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	401a      	ands	r2, r3
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a70:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	fa01 f303 	lsl.w	r3, r1, r3
 8002a7a:	43d9      	mvns	r1, r3
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a80:	4313      	orrs	r3, r2
         );
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3724      	adds	r7, #36	; 0x24
 8002a86:	46bd      	mov	sp, r7
 8002a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8c:	4770      	bx	lr
	...

08002a90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b082      	sub	sp, #8
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	3b01      	subs	r3, #1
 8002a9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002aa0:	d301      	bcc.n	8002aa6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e00f      	b.n	8002ac6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002aa6:	4a0a      	ldr	r2, [pc, #40]	; (8002ad0 <SysTick_Config+0x40>)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	3b01      	subs	r3, #1
 8002aac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002aae:	210f      	movs	r1, #15
 8002ab0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002ab4:	f7ff ff8e 	bl	80029d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ab8:	4b05      	ldr	r3, [pc, #20]	; (8002ad0 <SysTick_Config+0x40>)
 8002aba:	2200      	movs	r2, #0
 8002abc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002abe:	4b04      	ldr	r3, [pc, #16]	; (8002ad0 <SysTick_Config+0x40>)
 8002ac0:	2207      	movs	r2, #7
 8002ac2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ac4:	2300      	movs	r3, #0
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3708      	adds	r7, #8
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}
 8002ace:	bf00      	nop
 8002ad0:	e000e010 	.word	0xe000e010

08002ad4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b082      	sub	sp, #8
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002adc:	6878      	ldr	r0, [r7, #4]
 8002ade:	f7ff ff29 	bl	8002934 <__NVIC_SetPriorityGrouping>
}
 8002ae2:	bf00      	nop
 8002ae4:	3708      	adds	r7, #8
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}

08002aea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002aea:	b580      	push	{r7, lr}
 8002aec:	b086      	sub	sp, #24
 8002aee:	af00      	add	r7, sp, #0
 8002af0:	4603      	mov	r3, r0
 8002af2:	60b9      	str	r1, [r7, #8]
 8002af4:	607a      	str	r2, [r7, #4]
 8002af6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002af8:	2300      	movs	r3, #0
 8002afa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002afc:	f7ff ff3e 	bl	800297c <__NVIC_GetPriorityGrouping>
 8002b00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b02:	687a      	ldr	r2, [r7, #4]
 8002b04:	68b9      	ldr	r1, [r7, #8]
 8002b06:	6978      	ldr	r0, [r7, #20]
 8002b08:	f7ff ff8e 	bl	8002a28 <NVIC_EncodePriority>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b12:	4611      	mov	r1, r2
 8002b14:	4618      	mov	r0, r3
 8002b16:	f7ff ff5d 	bl	80029d4 <__NVIC_SetPriority>
}
 8002b1a:	bf00      	nop
 8002b1c:	3718      	adds	r7, #24
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}

08002b22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b22:	b580      	push	{r7, lr}
 8002b24:	b082      	sub	sp, #8
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	4603      	mov	r3, r0
 8002b2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b30:	4618      	mov	r0, r3
 8002b32:	f7ff ff31 	bl	8002998 <__NVIC_EnableIRQ>
}
 8002b36:	bf00      	nop
 8002b38:	3708      	adds	r7, #8
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}

08002b3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b3e:	b580      	push	{r7, lr}
 8002b40:	b082      	sub	sp, #8
 8002b42:	af00      	add	r7, sp, #0
 8002b44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	f7ff ffa2 	bl	8002a90 <SysTick_Config>
 8002b4c:	4603      	mov	r3, r0
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3708      	adds	r7, #8
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}
	...

08002b58 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b086      	sub	sp, #24
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002b60:	2300      	movs	r3, #0
 8002b62:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002b64:	f7ff feb6 	bl	80028d4 <HAL_GetTick>
 8002b68:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d101      	bne.n	8002b74 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	e099      	b.n	8002ca8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2202      	movs	r2, #2
 8002b78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f022 0201 	bic.w	r2, r2, #1
 8002b92:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b94:	e00f      	b.n	8002bb6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b96:	f7ff fe9d 	bl	80028d4 <HAL_GetTick>
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	1ad3      	subs	r3, r2, r3
 8002ba0:	2b05      	cmp	r3, #5
 8002ba2:	d908      	bls.n	8002bb6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2220      	movs	r2, #32
 8002ba8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2203      	movs	r2, #3
 8002bae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002bb2:	2303      	movs	r3, #3
 8002bb4:	e078      	b.n	8002ca8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f003 0301 	and.w	r3, r3, #1
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d1e8      	bne.n	8002b96 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002bcc:	697a      	ldr	r2, [r7, #20]
 8002bce:	4b38      	ldr	r3, [pc, #224]	; (8002cb0 <HAL_DMA_Init+0x158>)
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	685a      	ldr	r2, [r3, #4]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002be2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	691b      	ldr	r3, [r3, #16]
 8002be8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	699b      	ldr	r3, [r3, #24]
 8002bf4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bfa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6a1b      	ldr	r3, [r3, #32]
 8002c00:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c02:	697a      	ldr	r2, [r7, #20]
 8002c04:	4313      	orrs	r3, r2
 8002c06:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c0c:	2b04      	cmp	r3, #4
 8002c0e:	d107      	bne.n	8002c20 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	697a      	ldr	r2, [r7, #20]
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	697a      	ldr	r2, [r7, #20]
 8002c26:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	695b      	ldr	r3, [r3, #20]
 8002c2e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	f023 0307 	bic.w	r3, r3, #7
 8002c36:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c3c:	697a      	ldr	r2, [r7, #20]
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c46:	2b04      	cmp	r3, #4
 8002c48:	d117      	bne.n	8002c7a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c4e:	697a      	ldr	r2, [r7, #20]
 8002c50:	4313      	orrs	r3, r2
 8002c52:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d00e      	beq.n	8002c7a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002c5c:	6878      	ldr	r0, [r7, #4]
 8002c5e:	f000 fb09 	bl	8003274 <DMA_CheckFifoParam>
 8002c62:	4603      	mov	r3, r0
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d008      	beq.n	8002c7a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2240      	movs	r2, #64	; 0x40
 8002c6c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2201      	movs	r2, #1
 8002c72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002c76:	2301      	movs	r3, #1
 8002c78:	e016      	b.n	8002ca8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	697a      	ldr	r2, [r7, #20]
 8002c80:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002c82:	6878      	ldr	r0, [r7, #4]
 8002c84:	f000 fac0 	bl	8003208 <DMA_CalcBaseAndBitshift>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c90:	223f      	movs	r2, #63	; 0x3f
 8002c92:	409a      	lsls	r2, r3
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002ca6:	2300      	movs	r3, #0
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	3718      	adds	r7, #24
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}
 8002cb0:	f010803f 	.word	0xf010803f

08002cb4 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b084      	sub	sp, #16
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d101      	bne.n	8002cc6 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e050      	b.n	8002d68 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	2b02      	cmp	r3, #2
 8002cd0:	d101      	bne.n	8002cd6 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8002cd2:	2302      	movs	r3, #2
 8002cd4:	e048      	b.n	8002d68 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f022 0201 	bic.w	r2, r2, #1
 8002ce4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	2200      	movs	r2, #0
 8002cec:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	2200      	movs	r2, #0
 8002d04:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	2221      	movs	r2, #33	; 0x21
 8002d14:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002d16:	6878      	ldr	r0, [r7, #4]
 8002d18:	f000 fa76 	bl	8003208 <DMA_CalcBaseAndBitshift>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2200      	movs	r2, #0
 8002d24:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2200      	movs	r2, #0
 8002d36:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2200      	movs	r2, #0
 8002d42:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d48:	223f      	movs	r2, #63	; 0x3f
 8002d4a:	409a      	lsls	r2, r3
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2200      	movs	r2, #0
 8002d54:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2200      	movs	r2, #0
 8002d62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002d66:	2300      	movs	r3, #0
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	3710      	adds	r7, #16
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}

08002d70 <HAL_DMA_Start>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b086      	sub	sp, #24
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	60f8      	str	r0, [r7, #12]
 8002d78:	60b9      	str	r1, [r7, #8]
 8002d7a:	607a      	str	r2, [r7, #4]
 8002d7c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	d101      	bne.n	8002d90 <HAL_DMA_Start+0x20>
 8002d8c:	2302      	movs	r3, #2
 8002d8e:	e026      	b.n	8002dde <HAL_DMA_Start+0x6e>
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2201      	movs	r2, #1
 8002d94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d9e:	b2db      	uxtb	r3, r3
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	d115      	bne.n	8002dd0 <HAL_DMA_Start+0x60>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	2202      	movs	r2, #2
 8002da8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	2200      	movs	r2, #0
 8002db0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	687a      	ldr	r2, [r7, #4]
 8002db6:	68b9      	ldr	r1, [r7, #8]
 8002db8:	68f8      	ldr	r0, [r7, #12]
 8002dba:	f000 f9f7 	bl	80031ac <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f042 0201 	orr.w	r2, r2, #1
 8002dcc:	601a      	str	r2, [r3, #0]
 8002dce:	e005      	b.n	8002ddc <HAL_DMA_Start+0x6c>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002dd8:	2302      	movs	r3, #2
 8002dda:	75fb      	strb	r3, [r7, #23]
  } 
  return status; 
 8002ddc:	7dfb      	ldrb	r3, [r7, #23]
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	3718      	adds	r7, #24
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}

08002de6 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002de6:	b580      	push	{r7, lr}
 8002de8:	b086      	sub	sp, #24
 8002dea:	af00      	add	r7, sp, #0
 8002dec:	60f8      	str	r0, [r7, #12]
 8002dee:	60b9      	str	r1, [r7, #8]
 8002df0:	607a      	str	r2, [r7, #4]
 8002df2:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002df4:	2300      	movs	r3, #0
 8002df6:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dfc:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002e04:	2b01      	cmp	r3, #1
 8002e06:	d101      	bne.n	8002e0c <HAL_DMA_Start_IT+0x26>
 8002e08:	2302      	movs	r3, #2
 8002e0a:	e040      	b.n	8002e8e <HAL_DMA_Start_IT+0xa8>
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	2201      	movs	r2, #1
 8002e10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e1a:	b2db      	uxtb	r3, r3
 8002e1c:	2b01      	cmp	r3, #1
 8002e1e:	d12f      	bne.n	8002e80 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	2202      	movs	r2, #2
 8002e24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	687a      	ldr	r2, [r7, #4]
 8002e32:	68b9      	ldr	r1, [r7, #8]
 8002e34:	68f8      	ldr	r0, [r7, #12]
 8002e36:	f000 f9b9 	bl	80031ac <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e3e:	223f      	movs	r2, #63	; 0x3f
 8002e40:	409a      	lsls	r2, r3
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	681a      	ldr	r2, [r3, #0]
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f042 0216 	orr.w	r2, r2, #22
 8002e54:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d007      	beq.n	8002e6e <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f042 0208 	orr.w	r2, r2, #8
 8002e6c:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	681a      	ldr	r2, [r3, #0]
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f042 0201 	orr.w	r2, r2, #1
 8002e7c:	601a      	str	r2, [r3, #0]
 8002e7e:	e005      	b.n	8002e8c <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2200      	movs	r2, #0
 8002e84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002e88:	2302      	movs	r3, #2
 8002e8a:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002e8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	3718      	adds	r7, #24
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}
	...

08002e98 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b086      	sub	sp, #24
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002ea4:	4b92      	ldr	r3, [pc, #584]	; (80030f0 <HAL_DMA_IRQHandler+0x258>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a92      	ldr	r2, [pc, #584]	; (80030f4 <HAL_DMA_IRQHandler+0x25c>)
 8002eaa:	fba2 2303 	umull	r2, r3, r2, r3
 8002eae:	0a9b      	lsrs	r3, r3, #10
 8002eb0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eb6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ec2:	2208      	movs	r2, #8
 8002ec4:	409a      	lsls	r2, r3
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	4013      	ands	r3, r2
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d01a      	beq.n	8002f04 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f003 0304 	and.w	r3, r3, #4
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d013      	beq.n	8002f04 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f022 0204 	bic.w	r2, r2, #4
 8002eea:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ef0:	2208      	movs	r2, #8
 8002ef2:	409a      	lsls	r2, r3
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002efc:	f043 0201 	orr.w	r2, r3, #1
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f08:	2201      	movs	r2, #1
 8002f0a:	409a      	lsls	r2, r3
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	4013      	ands	r3, r2
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d012      	beq.n	8002f3a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	695b      	ldr	r3, [r3, #20]
 8002f1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d00b      	beq.n	8002f3a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f26:	2201      	movs	r2, #1
 8002f28:	409a      	lsls	r2, r3
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f32:	f043 0202 	orr.w	r2, r3, #2
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f3e:	2204      	movs	r2, #4
 8002f40:	409a      	lsls	r2, r3
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	4013      	ands	r3, r2
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d012      	beq.n	8002f70 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 0302 	and.w	r3, r3, #2
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d00b      	beq.n	8002f70 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f5c:	2204      	movs	r2, #4
 8002f5e:	409a      	lsls	r2, r3
 8002f60:	693b      	ldr	r3, [r7, #16]
 8002f62:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f68:	f043 0204 	orr.w	r2, r3, #4
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f74:	2210      	movs	r2, #16
 8002f76:	409a      	lsls	r2, r3
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d043      	beq.n	8003008 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f003 0308 	and.w	r3, r3, #8
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d03c      	beq.n	8003008 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f92:	2210      	movs	r2, #16
 8002f94:	409a      	lsls	r2, r3
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d018      	beq.n	8002fda <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d108      	bne.n	8002fc8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d024      	beq.n	8003008 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc2:	6878      	ldr	r0, [r7, #4]
 8002fc4:	4798      	blx	r3
 8002fc6:	e01f      	b.n	8003008 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d01b      	beq.n	8003008 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fd4:	6878      	ldr	r0, [r7, #4]
 8002fd6:	4798      	blx	r3
 8002fd8:	e016      	b.n	8003008 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d107      	bne.n	8002ff8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f022 0208 	bic.w	r2, r2, #8
 8002ff6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d003      	beq.n	8003008 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003004:	6878      	ldr	r0, [r7, #4]
 8003006:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800300c:	2220      	movs	r2, #32
 800300e:	409a      	lsls	r2, r3
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	4013      	ands	r3, r2
 8003014:	2b00      	cmp	r3, #0
 8003016:	f000 808e 	beq.w	8003136 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f003 0310 	and.w	r3, r3, #16
 8003024:	2b00      	cmp	r3, #0
 8003026:	f000 8086 	beq.w	8003136 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800302e:	2220      	movs	r2, #32
 8003030:	409a      	lsls	r2, r3
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800303c:	b2db      	uxtb	r3, r3
 800303e:	2b05      	cmp	r3, #5
 8003040:	d136      	bne.n	80030b0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f022 0216 	bic.w	r2, r2, #22
 8003050:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	695a      	ldr	r2, [r3, #20]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003060:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003066:	2b00      	cmp	r3, #0
 8003068:	d103      	bne.n	8003072 <HAL_DMA_IRQHandler+0x1da>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800306e:	2b00      	cmp	r3, #0
 8003070:	d007      	beq.n	8003082 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	681a      	ldr	r2, [r3, #0]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f022 0208 	bic.w	r2, r2, #8
 8003080:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003086:	223f      	movs	r2, #63	; 0x3f
 8003088:	409a      	lsls	r2, r3
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2201      	movs	r2, #1
 8003092:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2200      	movs	r2, #0
 800309a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d07d      	beq.n	80031a2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	4798      	blx	r3
        }
        return;
 80030ae:	e078      	b.n	80031a2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d01c      	beq.n	80030f8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d108      	bne.n	80030de <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d030      	beq.n	8003136 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030d8:	6878      	ldr	r0, [r7, #4]
 80030da:	4798      	blx	r3
 80030dc:	e02b      	b.n	8003136 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d027      	beq.n	8003136 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	4798      	blx	r3
 80030ee:	e022      	b.n	8003136 <HAL_DMA_IRQHandler+0x29e>
 80030f0:	20000000 	.word	0x20000000
 80030f4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003102:	2b00      	cmp	r3, #0
 8003104:	d10f      	bne.n	8003126 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f022 0210 	bic.w	r2, r2, #16
 8003114:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2201      	movs	r2, #1
 800311a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2200      	movs	r2, #0
 8003122:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800312a:	2b00      	cmp	r3, #0
 800312c:	d003      	beq.n	8003136 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003132:	6878      	ldr	r0, [r7, #4]
 8003134:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800313a:	2b00      	cmp	r3, #0
 800313c:	d032      	beq.n	80031a4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003142:	f003 0301 	and.w	r3, r3, #1
 8003146:	2b00      	cmp	r3, #0
 8003148:	d022      	beq.n	8003190 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2205      	movs	r2, #5
 800314e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f022 0201 	bic.w	r2, r2, #1
 8003160:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	3301      	adds	r3, #1
 8003166:	60bb      	str	r3, [r7, #8]
 8003168:	697a      	ldr	r2, [r7, #20]
 800316a:	429a      	cmp	r2, r3
 800316c:	d307      	bcc.n	800317e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f003 0301 	and.w	r3, r3, #1
 8003178:	2b00      	cmp	r3, #0
 800317a:	d1f2      	bne.n	8003162 <HAL_DMA_IRQHandler+0x2ca>
 800317c:	e000      	b.n	8003180 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800317e:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2201      	movs	r2, #1
 8003184:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2200      	movs	r2, #0
 800318c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003194:	2b00      	cmp	r3, #0
 8003196:	d005      	beq.n	80031a4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800319c:	6878      	ldr	r0, [r7, #4]
 800319e:	4798      	blx	r3
 80031a0:	e000      	b.n	80031a4 <HAL_DMA_IRQHandler+0x30c>
        return;
 80031a2:	bf00      	nop
    }
  }
}
 80031a4:	3718      	adds	r7, #24
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}
 80031aa:	bf00      	nop

080031ac <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b085      	sub	sp, #20
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	60f8      	str	r0, [r7, #12]
 80031b4:	60b9      	str	r1, [r7, #8]
 80031b6:	607a      	str	r2, [r7, #4]
 80031b8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80031c8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	683a      	ldr	r2, [r7, #0]
 80031d0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	2b40      	cmp	r3, #64	; 0x40
 80031d8:	d108      	bne.n	80031ec <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	687a      	ldr	r2, [r7, #4]
 80031e0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	68ba      	ldr	r2, [r7, #8]
 80031e8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80031ea:	e007      	b.n	80031fc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	68ba      	ldr	r2, [r7, #8]
 80031f2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	687a      	ldr	r2, [r7, #4]
 80031fa:	60da      	str	r2, [r3, #12]
}
 80031fc:	bf00      	nop
 80031fe:	3714      	adds	r7, #20
 8003200:	46bd      	mov	sp, r7
 8003202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003206:	4770      	bx	lr

08003208 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003208:	b480      	push	{r7}
 800320a:	b085      	sub	sp, #20
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	b2db      	uxtb	r3, r3
 8003216:	3b10      	subs	r3, #16
 8003218:	4a14      	ldr	r2, [pc, #80]	; (800326c <DMA_CalcBaseAndBitshift+0x64>)
 800321a:	fba2 2303 	umull	r2, r3, r2, r3
 800321e:	091b      	lsrs	r3, r3, #4
 8003220:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003222:	4a13      	ldr	r2, [pc, #76]	; (8003270 <DMA_CalcBaseAndBitshift+0x68>)
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	4413      	add	r3, r2
 8003228:	781b      	ldrb	r3, [r3, #0]
 800322a:	461a      	mov	r2, r3
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	2b03      	cmp	r3, #3
 8003234:	d909      	bls.n	800324a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800323e:	f023 0303 	bic.w	r3, r3, #3
 8003242:	1d1a      	adds	r2, r3, #4
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	659a      	str	r2, [r3, #88]	; 0x58
 8003248:	e007      	b.n	800325a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003252:	f023 0303 	bic.w	r3, r3, #3
 8003256:	687a      	ldr	r2, [r7, #4]
 8003258:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800325e:	4618      	mov	r0, r3
 8003260:	3714      	adds	r7, #20
 8003262:	46bd      	mov	sp, r7
 8003264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003268:	4770      	bx	lr
 800326a:	bf00      	nop
 800326c:	aaaaaaab 	.word	0xaaaaaaab
 8003270:	0800cc94 	.word	0x0800cc94

08003274 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003274:	b480      	push	{r7}
 8003276:	b085      	sub	sp, #20
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800327c:	2300      	movs	r3, #0
 800327e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003284:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	699b      	ldr	r3, [r3, #24]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d11f      	bne.n	80032ce <DMA_CheckFifoParam+0x5a>
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	2b03      	cmp	r3, #3
 8003292:	d856      	bhi.n	8003342 <DMA_CheckFifoParam+0xce>
 8003294:	a201      	add	r2, pc, #4	; (adr r2, 800329c <DMA_CheckFifoParam+0x28>)
 8003296:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800329a:	bf00      	nop
 800329c:	080032ad 	.word	0x080032ad
 80032a0:	080032bf 	.word	0x080032bf
 80032a4:	080032ad 	.word	0x080032ad
 80032a8:	08003343 	.word	0x08003343
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d046      	beq.n	8003346 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80032b8:	2301      	movs	r3, #1
 80032ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032bc:	e043      	b.n	8003346 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032c2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80032c6:	d140      	bne.n	800334a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032cc:	e03d      	b.n	800334a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	699b      	ldr	r3, [r3, #24]
 80032d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032d6:	d121      	bne.n	800331c <DMA_CheckFifoParam+0xa8>
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	2b03      	cmp	r3, #3
 80032dc:	d837      	bhi.n	800334e <DMA_CheckFifoParam+0xda>
 80032de:	a201      	add	r2, pc, #4	; (adr r2, 80032e4 <DMA_CheckFifoParam+0x70>)
 80032e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032e4:	080032f5 	.word	0x080032f5
 80032e8:	080032fb 	.word	0x080032fb
 80032ec:	080032f5 	.word	0x080032f5
 80032f0:	0800330d 	.word	0x0800330d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	73fb      	strb	r3, [r7, #15]
      break;
 80032f8:	e030      	b.n	800335c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003302:	2b00      	cmp	r3, #0
 8003304:	d025      	beq.n	8003352 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800330a:	e022      	b.n	8003352 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003310:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003314:	d11f      	bne.n	8003356 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800331a:	e01c      	b.n	8003356 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	2b02      	cmp	r3, #2
 8003320:	d903      	bls.n	800332a <DMA_CheckFifoParam+0xb6>
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	2b03      	cmp	r3, #3
 8003326:	d003      	beq.n	8003330 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003328:	e018      	b.n	800335c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	73fb      	strb	r3, [r7, #15]
      break;
 800332e:	e015      	b.n	800335c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003334:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003338:	2b00      	cmp	r3, #0
 800333a:	d00e      	beq.n	800335a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	73fb      	strb	r3, [r7, #15]
      break;
 8003340:	e00b      	b.n	800335a <DMA_CheckFifoParam+0xe6>
      break;
 8003342:	bf00      	nop
 8003344:	e00a      	b.n	800335c <DMA_CheckFifoParam+0xe8>
      break;
 8003346:	bf00      	nop
 8003348:	e008      	b.n	800335c <DMA_CheckFifoParam+0xe8>
      break;
 800334a:	bf00      	nop
 800334c:	e006      	b.n	800335c <DMA_CheckFifoParam+0xe8>
      break;
 800334e:	bf00      	nop
 8003350:	e004      	b.n	800335c <DMA_CheckFifoParam+0xe8>
      break;
 8003352:	bf00      	nop
 8003354:	e002      	b.n	800335c <DMA_CheckFifoParam+0xe8>
      break;   
 8003356:	bf00      	nop
 8003358:	e000      	b.n	800335c <DMA_CheckFifoParam+0xe8>
      break;
 800335a:	bf00      	nop
    }
  } 
  
  return status; 
 800335c:	7bfb      	ldrb	r3, [r7, #15]
}
 800335e:	4618      	mov	r0, r3
 8003360:	3714      	adds	r7, #20
 8003362:	46bd      	mov	sp, r7
 8003364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003368:	4770      	bx	lr
 800336a:	bf00      	nop

0800336c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800336c:	b480      	push	{r7}
 800336e:	b089      	sub	sp, #36	; 0x24
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
 8003374:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003376:	2300      	movs	r3, #0
 8003378:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800337a:	2300      	movs	r3, #0
 800337c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800337e:	2300      	movs	r3, #0
 8003380:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003382:	2300      	movs	r3, #0
 8003384:	61fb      	str	r3, [r7, #28]
 8003386:	e16b      	b.n	8003660 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003388:	2201      	movs	r2, #1
 800338a:	69fb      	ldr	r3, [r7, #28]
 800338c:	fa02 f303 	lsl.w	r3, r2, r3
 8003390:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	697a      	ldr	r2, [r7, #20]
 8003398:	4013      	ands	r3, r2
 800339a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800339c:	693a      	ldr	r2, [r7, #16]
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	429a      	cmp	r2, r3
 80033a2:	f040 815a 	bne.w	800365a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	f003 0303 	and.w	r3, r3, #3
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	d005      	beq.n	80033be <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80033ba:	2b02      	cmp	r3, #2
 80033bc:	d130      	bne.n	8003420 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80033c4:	69fb      	ldr	r3, [r7, #28]
 80033c6:	005b      	lsls	r3, r3, #1
 80033c8:	2203      	movs	r2, #3
 80033ca:	fa02 f303 	lsl.w	r3, r2, r3
 80033ce:	43db      	mvns	r3, r3
 80033d0:	69ba      	ldr	r2, [r7, #24]
 80033d2:	4013      	ands	r3, r2
 80033d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	68da      	ldr	r2, [r3, #12]
 80033da:	69fb      	ldr	r3, [r7, #28]
 80033dc:	005b      	lsls	r3, r3, #1
 80033de:	fa02 f303 	lsl.w	r3, r2, r3
 80033e2:	69ba      	ldr	r2, [r7, #24]
 80033e4:	4313      	orrs	r3, r2
 80033e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	69ba      	ldr	r2, [r7, #24]
 80033ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80033f4:	2201      	movs	r2, #1
 80033f6:	69fb      	ldr	r3, [r7, #28]
 80033f8:	fa02 f303 	lsl.w	r3, r2, r3
 80033fc:	43db      	mvns	r3, r3
 80033fe:	69ba      	ldr	r2, [r7, #24]
 8003400:	4013      	ands	r3, r2
 8003402:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	091b      	lsrs	r3, r3, #4
 800340a:	f003 0201 	and.w	r2, r3, #1
 800340e:	69fb      	ldr	r3, [r7, #28]
 8003410:	fa02 f303 	lsl.w	r3, r2, r3
 8003414:	69ba      	ldr	r2, [r7, #24]
 8003416:	4313      	orrs	r3, r2
 8003418:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	69ba      	ldr	r2, [r7, #24]
 800341e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	f003 0303 	and.w	r3, r3, #3
 8003428:	2b03      	cmp	r3, #3
 800342a:	d017      	beq.n	800345c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	68db      	ldr	r3, [r3, #12]
 8003430:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003432:	69fb      	ldr	r3, [r7, #28]
 8003434:	005b      	lsls	r3, r3, #1
 8003436:	2203      	movs	r2, #3
 8003438:	fa02 f303 	lsl.w	r3, r2, r3
 800343c:	43db      	mvns	r3, r3
 800343e:	69ba      	ldr	r2, [r7, #24]
 8003440:	4013      	ands	r3, r2
 8003442:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	689a      	ldr	r2, [r3, #8]
 8003448:	69fb      	ldr	r3, [r7, #28]
 800344a:	005b      	lsls	r3, r3, #1
 800344c:	fa02 f303 	lsl.w	r3, r2, r3
 8003450:	69ba      	ldr	r2, [r7, #24]
 8003452:	4313      	orrs	r3, r2
 8003454:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	69ba      	ldr	r2, [r7, #24]
 800345a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	f003 0303 	and.w	r3, r3, #3
 8003464:	2b02      	cmp	r3, #2
 8003466:	d123      	bne.n	80034b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003468:	69fb      	ldr	r3, [r7, #28]
 800346a:	08da      	lsrs	r2, r3, #3
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	3208      	adds	r2, #8
 8003470:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003474:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003476:	69fb      	ldr	r3, [r7, #28]
 8003478:	f003 0307 	and.w	r3, r3, #7
 800347c:	009b      	lsls	r3, r3, #2
 800347e:	220f      	movs	r2, #15
 8003480:	fa02 f303 	lsl.w	r3, r2, r3
 8003484:	43db      	mvns	r3, r3
 8003486:	69ba      	ldr	r2, [r7, #24]
 8003488:	4013      	ands	r3, r2
 800348a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	691a      	ldr	r2, [r3, #16]
 8003490:	69fb      	ldr	r3, [r7, #28]
 8003492:	f003 0307 	and.w	r3, r3, #7
 8003496:	009b      	lsls	r3, r3, #2
 8003498:	fa02 f303 	lsl.w	r3, r2, r3
 800349c:	69ba      	ldr	r2, [r7, #24]
 800349e:	4313      	orrs	r3, r2
 80034a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80034a2:	69fb      	ldr	r3, [r7, #28]
 80034a4:	08da      	lsrs	r2, r3, #3
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	3208      	adds	r2, #8
 80034aa:	69b9      	ldr	r1, [r7, #24]
 80034ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80034b6:	69fb      	ldr	r3, [r7, #28]
 80034b8:	005b      	lsls	r3, r3, #1
 80034ba:	2203      	movs	r2, #3
 80034bc:	fa02 f303 	lsl.w	r3, r2, r3
 80034c0:	43db      	mvns	r3, r3
 80034c2:	69ba      	ldr	r2, [r7, #24]
 80034c4:	4013      	ands	r3, r2
 80034c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	f003 0203 	and.w	r2, r3, #3
 80034d0:	69fb      	ldr	r3, [r7, #28]
 80034d2:	005b      	lsls	r3, r3, #1
 80034d4:	fa02 f303 	lsl.w	r3, r2, r3
 80034d8:	69ba      	ldr	r2, [r7, #24]
 80034da:	4313      	orrs	r3, r2
 80034dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	69ba      	ldr	r2, [r7, #24]
 80034e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	f000 80b4 	beq.w	800365a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034f2:	2300      	movs	r3, #0
 80034f4:	60fb      	str	r3, [r7, #12]
 80034f6:	4b60      	ldr	r3, [pc, #384]	; (8003678 <HAL_GPIO_Init+0x30c>)
 80034f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034fa:	4a5f      	ldr	r2, [pc, #380]	; (8003678 <HAL_GPIO_Init+0x30c>)
 80034fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003500:	6453      	str	r3, [r2, #68]	; 0x44
 8003502:	4b5d      	ldr	r3, [pc, #372]	; (8003678 <HAL_GPIO_Init+0x30c>)
 8003504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003506:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800350a:	60fb      	str	r3, [r7, #12]
 800350c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800350e:	4a5b      	ldr	r2, [pc, #364]	; (800367c <HAL_GPIO_Init+0x310>)
 8003510:	69fb      	ldr	r3, [r7, #28]
 8003512:	089b      	lsrs	r3, r3, #2
 8003514:	3302      	adds	r3, #2
 8003516:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800351a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800351c:	69fb      	ldr	r3, [r7, #28]
 800351e:	f003 0303 	and.w	r3, r3, #3
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	220f      	movs	r2, #15
 8003526:	fa02 f303 	lsl.w	r3, r2, r3
 800352a:	43db      	mvns	r3, r3
 800352c:	69ba      	ldr	r2, [r7, #24]
 800352e:	4013      	ands	r3, r2
 8003530:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	4a52      	ldr	r2, [pc, #328]	; (8003680 <HAL_GPIO_Init+0x314>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d02b      	beq.n	8003592 <HAL_GPIO_Init+0x226>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	4a51      	ldr	r2, [pc, #324]	; (8003684 <HAL_GPIO_Init+0x318>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d025      	beq.n	800358e <HAL_GPIO_Init+0x222>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	4a50      	ldr	r2, [pc, #320]	; (8003688 <HAL_GPIO_Init+0x31c>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d01f      	beq.n	800358a <HAL_GPIO_Init+0x21e>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	4a4f      	ldr	r2, [pc, #316]	; (800368c <HAL_GPIO_Init+0x320>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d019      	beq.n	8003586 <HAL_GPIO_Init+0x21a>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	4a4e      	ldr	r2, [pc, #312]	; (8003690 <HAL_GPIO_Init+0x324>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d013      	beq.n	8003582 <HAL_GPIO_Init+0x216>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	4a4d      	ldr	r2, [pc, #308]	; (8003694 <HAL_GPIO_Init+0x328>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d00d      	beq.n	800357e <HAL_GPIO_Init+0x212>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	4a4c      	ldr	r2, [pc, #304]	; (8003698 <HAL_GPIO_Init+0x32c>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d007      	beq.n	800357a <HAL_GPIO_Init+0x20e>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	4a4b      	ldr	r2, [pc, #300]	; (800369c <HAL_GPIO_Init+0x330>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d101      	bne.n	8003576 <HAL_GPIO_Init+0x20a>
 8003572:	2307      	movs	r3, #7
 8003574:	e00e      	b.n	8003594 <HAL_GPIO_Init+0x228>
 8003576:	2308      	movs	r3, #8
 8003578:	e00c      	b.n	8003594 <HAL_GPIO_Init+0x228>
 800357a:	2306      	movs	r3, #6
 800357c:	e00a      	b.n	8003594 <HAL_GPIO_Init+0x228>
 800357e:	2305      	movs	r3, #5
 8003580:	e008      	b.n	8003594 <HAL_GPIO_Init+0x228>
 8003582:	2304      	movs	r3, #4
 8003584:	e006      	b.n	8003594 <HAL_GPIO_Init+0x228>
 8003586:	2303      	movs	r3, #3
 8003588:	e004      	b.n	8003594 <HAL_GPIO_Init+0x228>
 800358a:	2302      	movs	r3, #2
 800358c:	e002      	b.n	8003594 <HAL_GPIO_Init+0x228>
 800358e:	2301      	movs	r3, #1
 8003590:	e000      	b.n	8003594 <HAL_GPIO_Init+0x228>
 8003592:	2300      	movs	r3, #0
 8003594:	69fa      	ldr	r2, [r7, #28]
 8003596:	f002 0203 	and.w	r2, r2, #3
 800359a:	0092      	lsls	r2, r2, #2
 800359c:	4093      	lsls	r3, r2
 800359e:	69ba      	ldr	r2, [r7, #24]
 80035a0:	4313      	orrs	r3, r2
 80035a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80035a4:	4935      	ldr	r1, [pc, #212]	; (800367c <HAL_GPIO_Init+0x310>)
 80035a6:	69fb      	ldr	r3, [r7, #28]
 80035a8:	089b      	lsrs	r3, r3, #2
 80035aa:	3302      	adds	r3, #2
 80035ac:	69ba      	ldr	r2, [r7, #24]
 80035ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80035b2:	4b3b      	ldr	r3, [pc, #236]	; (80036a0 <HAL_GPIO_Init+0x334>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	43db      	mvns	r3, r3
 80035bc:	69ba      	ldr	r2, [r7, #24]
 80035be:	4013      	ands	r3, r2
 80035c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d003      	beq.n	80035d6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80035ce:	69ba      	ldr	r2, [r7, #24]
 80035d0:	693b      	ldr	r3, [r7, #16]
 80035d2:	4313      	orrs	r3, r2
 80035d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80035d6:	4a32      	ldr	r2, [pc, #200]	; (80036a0 <HAL_GPIO_Init+0x334>)
 80035d8:	69bb      	ldr	r3, [r7, #24]
 80035da:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80035dc:	4b30      	ldr	r3, [pc, #192]	; (80036a0 <HAL_GPIO_Init+0x334>)
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	43db      	mvns	r3, r3
 80035e6:	69ba      	ldr	r2, [r7, #24]
 80035e8:	4013      	ands	r3, r2
 80035ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d003      	beq.n	8003600 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80035f8:	69ba      	ldr	r2, [r7, #24]
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	4313      	orrs	r3, r2
 80035fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003600:	4a27      	ldr	r2, [pc, #156]	; (80036a0 <HAL_GPIO_Init+0x334>)
 8003602:	69bb      	ldr	r3, [r7, #24]
 8003604:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003606:	4b26      	ldr	r3, [pc, #152]	; (80036a0 <HAL_GPIO_Init+0x334>)
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	43db      	mvns	r3, r3
 8003610:	69ba      	ldr	r2, [r7, #24]
 8003612:	4013      	ands	r3, r2
 8003614:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800361e:	2b00      	cmp	r3, #0
 8003620:	d003      	beq.n	800362a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003622:	69ba      	ldr	r2, [r7, #24]
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	4313      	orrs	r3, r2
 8003628:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800362a:	4a1d      	ldr	r2, [pc, #116]	; (80036a0 <HAL_GPIO_Init+0x334>)
 800362c:	69bb      	ldr	r3, [r7, #24]
 800362e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003630:	4b1b      	ldr	r3, [pc, #108]	; (80036a0 <HAL_GPIO_Init+0x334>)
 8003632:	68db      	ldr	r3, [r3, #12]
 8003634:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	43db      	mvns	r3, r3
 800363a:	69ba      	ldr	r2, [r7, #24]
 800363c:	4013      	ands	r3, r2
 800363e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003648:	2b00      	cmp	r3, #0
 800364a:	d003      	beq.n	8003654 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800364c:	69ba      	ldr	r2, [r7, #24]
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	4313      	orrs	r3, r2
 8003652:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003654:	4a12      	ldr	r2, [pc, #72]	; (80036a0 <HAL_GPIO_Init+0x334>)
 8003656:	69bb      	ldr	r3, [r7, #24]
 8003658:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800365a:	69fb      	ldr	r3, [r7, #28]
 800365c:	3301      	adds	r3, #1
 800365e:	61fb      	str	r3, [r7, #28]
 8003660:	69fb      	ldr	r3, [r7, #28]
 8003662:	2b0f      	cmp	r3, #15
 8003664:	f67f ae90 	bls.w	8003388 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003668:	bf00      	nop
 800366a:	bf00      	nop
 800366c:	3724      	adds	r7, #36	; 0x24
 800366e:	46bd      	mov	sp, r7
 8003670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003674:	4770      	bx	lr
 8003676:	bf00      	nop
 8003678:	40023800 	.word	0x40023800
 800367c:	40013800 	.word	0x40013800
 8003680:	40020000 	.word	0x40020000
 8003684:	40020400 	.word	0x40020400
 8003688:	40020800 	.word	0x40020800
 800368c:	40020c00 	.word	0x40020c00
 8003690:	40021000 	.word	0x40021000
 8003694:	40021400 	.word	0x40021400
 8003698:	40021800 	.word	0x40021800
 800369c:	40021c00 	.word	0x40021c00
 80036a0:	40013c00 	.word	0x40013c00

080036a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036a4:	b480      	push	{r7}
 80036a6:	b083      	sub	sp, #12
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
 80036ac:	460b      	mov	r3, r1
 80036ae:	807b      	strh	r3, [r7, #2]
 80036b0:	4613      	mov	r3, r2
 80036b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80036b4:	787b      	ldrb	r3, [r7, #1]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d003      	beq.n	80036c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80036ba:	887a      	ldrh	r2, [r7, #2]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80036c0:	e003      	b.n	80036ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80036c2:	887b      	ldrh	r3, [r7, #2]
 80036c4:	041a      	lsls	r2, r3, #16
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	619a      	str	r2, [r3, #24]
}
 80036ca:	bf00      	nop
 80036cc:	370c      	adds	r7, #12
 80036ce:	46bd      	mov	sp, r7
 80036d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d4:	4770      	bx	lr

080036d6 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80036d6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036d8:	b08f      	sub	sp, #60	; 0x3c
 80036da:	af0a      	add	r7, sp, #40	; 0x28
 80036dc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d101      	bne.n	80036e8 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80036e4:	2301      	movs	r3, #1
 80036e6:	e054      	b.n	8003792 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80036f4:	b2db      	uxtb	r3, r3
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d106      	bne.n	8003708 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2200      	movs	r2, #0
 80036fe:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f008 f8e0 	bl	800b8c8 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2203      	movs	r2, #3
 800370c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003714:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003718:	2b00      	cmp	r3, #0
 800371a:	d102      	bne.n	8003722 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2200      	movs	r2, #0
 8003720:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4618      	mov	r0, r3
 8003728:	f005 fa36 	bl	8008b98 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	603b      	str	r3, [r7, #0]
 8003732:	687e      	ldr	r6, [r7, #4]
 8003734:	466d      	mov	r5, sp
 8003736:	f106 0410 	add.w	r4, r6, #16
 800373a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800373c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800373e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003740:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003742:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003746:	e885 0003 	stmia.w	r5, {r0, r1}
 800374a:	1d33      	adds	r3, r6, #4
 800374c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800374e:	6838      	ldr	r0, [r7, #0]
 8003750:	f005 f9b0 	bl	8008ab4 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	2101      	movs	r1, #1
 800375a:	4618      	mov	r0, r3
 800375c:	f005 fa2d 	bl	8008bba <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	603b      	str	r3, [r7, #0]
 8003766:	687e      	ldr	r6, [r7, #4]
 8003768:	466d      	mov	r5, sp
 800376a:	f106 0410 	add.w	r4, r6, #16
 800376e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003770:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003772:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003774:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003776:	e894 0003 	ldmia.w	r4, {r0, r1}
 800377a:	e885 0003 	stmia.w	r5, {r0, r1}
 800377e:	1d33      	adds	r3, r6, #4
 8003780:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003782:	6838      	ldr	r0, [r7, #0]
 8003784:	f005 fb94 	bl	8008eb0 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2201      	movs	r2, #1
 800378c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8003790:	2300      	movs	r3, #0
}
 8003792:	4618      	mov	r0, r3
 8003794:	3714      	adds	r7, #20
 8003796:	46bd      	mov	sp, r7
 8003798:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800379a <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800379a:	b590      	push	{r4, r7, lr}
 800379c:	b089      	sub	sp, #36	; 0x24
 800379e:	af04      	add	r7, sp, #16
 80037a0:	6078      	str	r0, [r7, #4]
 80037a2:	4608      	mov	r0, r1
 80037a4:	4611      	mov	r1, r2
 80037a6:	461a      	mov	r2, r3
 80037a8:	4603      	mov	r3, r0
 80037aa:	70fb      	strb	r3, [r7, #3]
 80037ac:	460b      	mov	r3, r1
 80037ae:	70bb      	strb	r3, [r7, #2]
 80037b0:	4613      	mov	r3, r2
 80037b2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80037ba:	2b01      	cmp	r3, #1
 80037bc:	d101      	bne.n	80037c2 <HAL_HCD_HC_Init+0x28>
 80037be:	2302      	movs	r3, #2
 80037c0:	e076      	b.n	80038b0 <HAL_HCD_HC_Init+0x116>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2201      	movs	r2, #1
 80037c6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80037ca:	78fb      	ldrb	r3, [r7, #3]
 80037cc:	687a      	ldr	r2, [r7, #4]
 80037ce:	212c      	movs	r1, #44	; 0x2c
 80037d0:	fb01 f303 	mul.w	r3, r1, r3
 80037d4:	4413      	add	r3, r2
 80037d6:	333d      	adds	r3, #61	; 0x3d
 80037d8:	2200      	movs	r2, #0
 80037da:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80037dc:	78fb      	ldrb	r3, [r7, #3]
 80037de:	687a      	ldr	r2, [r7, #4]
 80037e0:	212c      	movs	r1, #44	; 0x2c
 80037e2:	fb01 f303 	mul.w	r3, r1, r3
 80037e6:	4413      	add	r3, r2
 80037e8:	3338      	adds	r3, #56	; 0x38
 80037ea:	787a      	ldrb	r2, [r7, #1]
 80037ec:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80037ee:	78fb      	ldrb	r3, [r7, #3]
 80037f0:	687a      	ldr	r2, [r7, #4]
 80037f2:	212c      	movs	r1, #44	; 0x2c
 80037f4:	fb01 f303 	mul.w	r3, r1, r3
 80037f8:	4413      	add	r3, r2
 80037fa:	3340      	adds	r3, #64	; 0x40
 80037fc:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80037fe:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003800:	78fb      	ldrb	r3, [r7, #3]
 8003802:	687a      	ldr	r2, [r7, #4]
 8003804:	212c      	movs	r1, #44	; 0x2c
 8003806:	fb01 f303 	mul.w	r3, r1, r3
 800380a:	4413      	add	r3, r2
 800380c:	3339      	adds	r3, #57	; 0x39
 800380e:	78fa      	ldrb	r2, [r7, #3]
 8003810:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8003812:	78fb      	ldrb	r3, [r7, #3]
 8003814:	687a      	ldr	r2, [r7, #4]
 8003816:	212c      	movs	r1, #44	; 0x2c
 8003818:	fb01 f303 	mul.w	r3, r1, r3
 800381c:	4413      	add	r3, r2
 800381e:	333f      	adds	r3, #63	; 0x3f
 8003820:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8003824:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8003826:	78fb      	ldrb	r3, [r7, #3]
 8003828:	78ba      	ldrb	r2, [r7, #2]
 800382a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800382e:	b2d0      	uxtb	r0, r2
 8003830:	687a      	ldr	r2, [r7, #4]
 8003832:	212c      	movs	r1, #44	; 0x2c
 8003834:	fb01 f303 	mul.w	r3, r1, r3
 8003838:	4413      	add	r3, r2
 800383a:	333a      	adds	r3, #58	; 0x3a
 800383c:	4602      	mov	r2, r0
 800383e:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8003840:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003844:	2b00      	cmp	r3, #0
 8003846:	da09      	bge.n	800385c <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8003848:	78fb      	ldrb	r3, [r7, #3]
 800384a:	687a      	ldr	r2, [r7, #4]
 800384c:	212c      	movs	r1, #44	; 0x2c
 800384e:	fb01 f303 	mul.w	r3, r1, r3
 8003852:	4413      	add	r3, r2
 8003854:	333b      	adds	r3, #59	; 0x3b
 8003856:	2201      	movs	r2, #1
 8003858:	701a      	strb	r2, [r3, #0]
 800385a:	e008      	b.n	800386e <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800385c:	78fb      	ldrb	r3, [r7, #3]
 800385e:	687a      	ldr	r2, [r7, #4]
 8003860:	212c      	movs	r1, #44	; 0x2c
 8003862:	fb01 f303 	mul.w	r3, r1, r3
 8003866:	4413      	add	r3, r2
 8003868:	333b      	adds	r3, #59	; 0x3b
 800386a:	2200      	movs	r2, #0
 800386c:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800386e:	78fb      	ldrb	r3, [r7, #3]
 8003870:	687a      	ldr	r2, [r7, #4]
 8003872:	212c      	movs	r1, #44	; 0x2c
 8003874:	fb01 f303 	mul.w	r3, r1, r3
 8003878:	4413      	add	r3, r2
 800387a:	333c      	adds	r3, #60	; 0x3c
 800387c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003880:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6818      	ldr	r0, [r3, #0]
 8003886:	787c      	ldrb	r4, [r7, #1]
 8003888:	78ba      	ldrb	r2, [r7, #2]
 800388a:	78f9      	ldrb	r1, [r7, #3]
 800388c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800388e:	9302      	str	r3, [sp, #8]
 8003890:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003894:	9301      	str	r3, [sp, #4]
 8003896:	f897 3020 	ldrb.w	r3, [r7, #32]
 800389a:	9300      	str	r3, [sp, #0]
 800389c:	4623      	mov	r3, r4
 800389e:	f005 fc81 	bl	80091a4 <USB_HC_Init>
 80038a2:	4603      	mov	r3, r0
 80038a4:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2200      	movs	r2, #0
 80038aa:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80038ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	3714      	adds	r7, #20
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd90      	pop	{r4, r7, pc}

080038b8 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b084      	sub	sp, #16
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
 80038c0:	460b      	mov	r3, r1
 80038c2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80038c4:	2300      	movs	r3, #0
 80038c6:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80038ce:	2b01      	cmp	r3, #1
 80038d0:	d101      	bne.n	80038d6 <HAL_HCD_HC_Halt+0x1e>
 80038d2:	2302      	movs	r3, #2
 80038d4:	e00f      	b.n	80038f6 <HAL_HCD_HC_Halt+0x3e>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2201      	movs	r2, #1
 80038da:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	78fa      	ldrb	r2, [r7, #3]
 80038e4:	4611      	mov	r1, r2
 80038e6:	4618      	mov	r0, r3
 80038e8:	f005 febd 	bl	8009666 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2200      	movs	r2, #0
 80038f0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80038f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	3710      	adds	r7, #16
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}
	...

08003900 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b082      	sub	sp, #8
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
 8003908:	4608      	mov	r0, r1
 800390a:	4611      	mov	r1, r2
 800390c:	461a      	mov	r2, r3
 800390e:	4603      	mov	r3, r0
 8003910:	70fb      	strb	r3, [r7, #3]
 8003912:	460b      	mov	r3, r1
 8003914:	70bb      	strb	r3, [r7, #2]
 8003916:	4613      	mov	r3, r2
 8003918:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800391a:	78fb      	ldrb	r3, [r7, #3]
 800391c:	687a      	ldr	r2, [r7, #4]
 800391e:	212c      	movs	r1, #44	; 0x2c
 8003920:	fb01 f303 	mul.w	r3, r1, r3
 8003924:	4413      	add	r3, r2
 8003926:	333b      	adds	r3, #59	; 0x3b
 8003928:	78ba      	ldrb	r2, [r7, #2]
 800392a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800392c:	78fb      	ldrb	r3, [r7, #3]
 800392e:	687a      	ldr	r2, [r7, #4]
 8003930:	212c      	movs	r1, #44	; 0x2c
 8003932:	fb01 f303 	mul.w	r3, r1, r3
 8003936:	4413      	add	r3, r2
 8003938:	333f      	adds	r3, #63	; 0x3f
 800393a:	787a      	ldrb	r2, [r7, #1]
 800393c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800393e:	7c3b      	ldrb	r3, [r7, #16]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d112      	bne.n	800396a <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8003944:	78fb      	ldrb	r3, [r7, #3]
 8003946:	687a      	ldr	r2, [r7, #4]
 8003948:	212c      	movs	r1, #44	; 0x2c
 800394a:	fb01 f303 	mul.w	r3, r1, r3
 800394e:	4413      	add	r3, r2
 8003950:	3342      	adds	r3, #66	; 0x42
 8003952:	2203      	movs	r2, #3
 8003954:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8003956:	78fb      	ldrb	r3, [r7, #3]
 8003958:	687a      	ldr	r2, [r7, #4]
 800395a:	212c      	movs	r1, #44	; 0x2c
 800395c:	fb01 f303 	mul.w	r3, r1, r3
 8003960:	4413      	add	r3, r2
 8003962:	333d      	adds	r3, #61	; 0x3d
 8003964:	7f3a      	ldrb	r2, [r7, #28]
 8003966:	701a      	strb	r2, [r3, #0]
 8003968:	e008      	b.n	800397c <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800396a:	78fb      	ldrb	r3, [r7, #3]
 800396c:	687a      	ldr	r2, [r7, #4]
 800396e:	212c      	movs	r1, #44	; 0x2c
 8003970:	fb01 f303 	mul.w	r3, r1, r3
 8003974:	4413      	add	r3, r2
 8003976:	3342      	adds	r3, #66	; 0x42
 8003978:	2202      	movs	r2, #2
 800397a:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800397c:	787b      	ldrb	r3, [r7, #1]
 800397e:	2b03      	cmp	r3, #3
 8003980:	f200 80c6 	bhi.w	8003b10 <HAL_HCD_HC_SubmitRequest+0x210>
 8003984:	a201      	add	r2, pc, #4	; (adr r2, 800398c <HAL_HCD_HC_SubmitRequest+0x8c>)
 8003986:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800398a:	bf00      	nop
 800398c:	0800399d 	.word	0x0800399d
 8003990:	08003afd 	.word	0x08003afd
 8003994:	08003a01 	.word	0x08003a01
 8003998:	08003a7f 	.word	0x08003a7f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 800399c:	7c3b      	ldrb	r3, [r7, #16]
 800399e:	2b01      	cmp	r3, #1
 80039a0:	f040 80b8 	bne.w	8003b14 <HAL_HCD_HC_SubmitRequest+0x214>
 80039a4:	78bb      	ldrb	r3, [r7, #2]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	f040 80b4 	bne.w	8003b14 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80039ac:	8b3b      	ldrh	r3, [r7, #24]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d108      	bne.n	80039c4 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80039b2:	78fb      	ldrb	r3, [r7, #3]
 80039b4:	687a      	ldr	r2, [r7, #4]
 80039b6:	212c      	movs	r1, #44	; 0x2c
 80039b8:	fb01 f303 	mul.w	r3, r1, r3
 80039bc:	4413      	add	r3, r2
 80039be:	3355      	adds	r3, #85	; 0x55
 80039c0:	2201      	movs	r2, #1
 80039c2:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80039c4:	78fb      	ldrb	r3, [r7, #3]
 80039c6:	687a      	ldr	r2, [r7, #4]
 80039c8:	212c      	movs	r1, #44	; 0x2c
 80039ca:	fb01 f303 	mul.w	r3, r1, r3
 80039ce:	4413      	add	r3, r2
 80039d0:	3355      	adds	r3, #85	; 0x55
 80039d2:	781b      	ldrb	r3, [r3, #0]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d109      	bne.n	80039ec <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80039d8:	78fb      	ldrb	r3, [r7, #3]
 80039da:	687a      	ldr	r2, [r7, #4]
 80039dc:	212c      	movs	r1, #44	; 0x2c
 80039de:	fb01 f303 	mul.w	r3, r1, r3
 80039e2:	4413      	add	r3, r2
 80039e4:	3342      	adds	r3, #66	; 0x42
 80039e6:	2200      	movs	r2, #0
 80039e8:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80039ea:	e093      	b.n	8003b14 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80039ec:	78fb      	ldrb	r3, [r7, #3]
 80039ee:	687a      	ldr	r2, [r7, #4]
 80039f0:	212c      	movs	r1, #44	; 0x2c
 80039f2:	fb01 f303 	mul.w	r3, r1, r3
 80039f6:	4413      	add	r3, r2
 80039f8:	3342      	adds	r3, #66	; 0x42
 80039fa:	2202      	movs	r2, #2
 80039fc:	701a      	strb	r2, [r3, #0]
      break;
 80039fe:	e089      	b.n	8003b14 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8003a00:	78bb      	ldrb	r3, [r7, #2]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d11d      	bne.n	8003a42 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003a06:	78fb      	ldrb	r3, [r7, #3]
 8003a08:	687a      	ldr	r2, [r7, #4]
 8003a0a:	212c      	movs	r1, #44	; 0x2c
 8003a0c:	fb01 f303 	mul.w	r3, r1, r3
 8003a10:	4413      	add	r3, r2
 8003a12:	3355      	adds	r3, #85	; 0x55
 8003a14:	781b      	ldrb	r3, [r3, #0]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d109      	bne.n	8003a2e <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003a1a:	78fb      	ldrb	r3, [r7, #3]
 8003a1c:	687a      	ldr	r2, [r7, #4]
 8003a1e:	212c      	movs	r1, #44	; 0x2c
 8003a20:	fb01 f303 	mul.w	r3, r1, r3
 8003a24:	4413      	add	r3, r2
 8003a26:	3342      	adds	r3, #66	; 0x42
 8003a28:	2200      	movs	r2, #0
 8003a2a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8003a2c:	e073      	b.n	8003b16 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003a2e:	78fb      	ldrb	r3, [r7, #3]
 8003a30:	687a      	ldr	r2, [r7, #4]
 8003a32:	212c      	movs	r1, #44	; 0x2c
 8003a34:	fb01 f303 	mul.w	r3, r1, r3
 8003a38:	4413      	add	r3, r2
 8003a3a:	3342      	adds	r3, #66	; 0x42
 8003a3c:	2202      	movs	r2, #2
 8003a3e:	701a      	strb	r2, [r3, #0]
      break;
 8003a40:	e069      	b.n	8003b16 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003a42:	78fb      	ldrb	r3, [r7, #3]
 8003a44:	687a      	ldr	r2, [r7, #4]
 8003a46:	212c      	movs	r1, #44	; 0x2c
 8003a48:	fb01 f303 	mul.w	r3, r1, r3
 8003a4c:	4413      	add	r3, r2
 8003a4e:	3354      	adds	r3, #84	; 0x54
 8003a50:	781b      	ldrb	r3, [r3, #0]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d109      	bne.n	8003a6a <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003a56:	78fb      	ldrb	r3, [r7, #3]
 8003a58:	687a      	ldr	r2, [r7, #4]
 8003a5a:	212c      	movs	r1, #44	; 0x2c
 8003a5c:	fb01 f303 	mul.w	r3, r1, r3
 8003a60:	4413      	add	r3, r2
 8003a62:	3342      	adds	r3, #66	; 0x42
 8003a64:	2200      	movs	r2, #0
 8003a66:	701a      	strb	r2, [r3, #0]
      break;
 8003a68:	e055      	b.n	8003b16 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003a6a:	78fb      	ldrb	r3, [r7, #3]
 8003a6c:	687a      	ldr	r2, [r7, #4]
 8003a6e:	212c      	movs	r1, #44	; 0x2c
 8003a70:	fb01 f303 	mul.w	r3, r1, r3
 8003a74:	4413      	add	r3, r2
 8003a76:	3342      	adds	r3, #66	; 0x42
 8003a78:	2202      	movs	r2, #2
 8003a7a:	701a      	strb	r2, [r3, #0]
      break;
 8003a7c:	e04b      	b.n	8003b16 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8003a7e:	78bb      	ldrb	r3, [r7, #2]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d11d      	bne.n	8003ac0 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003a84:	78fb      	ldrb	r3, [r7, #3]
 8003a86:	687a      	ldr	r2, [r7, #4]
 8003a88:	212c      	movs	r1, #44	; 0x2c
 8003a8a:	fb01 f303 	mul.w	r3, r1, r3
 8003a8e:	4413      	add	r3, r2
 8003a90:	3355      	adds	r3, #85	; 0x55
 8003a92:	781b      	ldrb	r3, [r3, #0]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d109      	bne.n	8003aac <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003a98:	78fb      	ldrb	r3, [r7, #3]
 8003a9a:	687a      	ldr	r2, [r7, #4]
 8003a9c:	212c      	movs	r1, #44	; 0x2c
 8003a9e:	fb01 f303 	mul.w	r3, r1, r3
 8003aa2:	4413      	add	r3, r2
 8003aa4:	3342      	adds	r3, #66	; 0x42
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003aaa:	e034      	b.n	8003b16 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003aac:	78fb      	ldrb	r3, [r7, #3]
 8003aae:	687a      	ldr	r2, [r7, #4]
 8003ab0:	212c      	movs	r1, #44	; 0x2c
 8003ab2:	fb01 f303 	mul.w	r3, r1, r3
 8003ab6:	4413      	add	r3, r2
 8003ab8:	3342      	adds	r3, #66	; 0x42
 8003aba:	2202      	movs	r2, #2
 8003abc:	701a      	strb	r2, [r3, #0]
      break;
 8003abe:	e02a      	b.n	8003b16 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003ac0:	78fb      	ldrb	r3, [r7, #3]
 8003ac2:	687a      	ldr	r2, [r7, #4]
 8003ac4:	212c      	movs	r1, #44	; 0x2c
 8003ac6:	fb01 f303 	mul.w	r3, r1, r3
 8003aca:	4413      	add	r3, r2
 8003acc:	3354      	adds	r3, #84	; 0x54
 8003ace:	781b      	ldrb	r3, [r3, #0]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d109      	bne.n	8003ae8 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003ad4:	78fb      	ldrb	r3, [r7, #3]
 8003ad6:	687a      	ldr	r2, [r7, #4]
 8003ad8:	212c      	movs	r1, #44	; 0x2c
 8003ada:	fb01 f303 	mul.w	r3, r1, r3
 8003ade:	4413      	add	r3, r2
 8003ae0:	3342      	adds	r3, #66	; 0x42
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	701a      	strb	r2, [r3, #0]
      break;
 8003ae6:	e016      	b.n	8003b16 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003ae8:	78fb      	ldrb	r3, [r7, #3]
 8003aea:	687a      	ldr	r2, [r7, #4]
 8003aec:	212c      	movs	r1, #44	; 0x2c
 8003aee:	fb01 f303 	mul.w	r3, r1, r3
 8003af2:	4413      	add	r3, r2
 8003af4:	3342      	adds	r3, #66	; 0x42
 8003af6:	2202      	movs	r2, #2
 8003af8:	701a      	strb	r2, [r3, #0]
      break;
 8003afa:	e00c      	b.n	8003b16 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003afc:	78fb      	ldrb	r3, [r7, #3]
 8003afe:	687a      	ldr	r2, [r7, #4]
 8003b00:	212c      	movs	r1, #44	; 0x2c
 8003b02:	fb01 f303 	mul.w	r3, r1, r3
 8003b06:	4413      	add	r3, r2
 8003b08:	3342      	adds	r3, #66	; 0x42
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	701a      	strb	r2, [r3, #0]
      break;
 8003b0e:	e002      	b.n	8003b16 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8003b10:	bf00      	nop
 8003b12:	e000      	b.n	8003b16 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8003b14:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8003b16:	78fb      	ldrb	r3, [r7, #3]
 8003b18:	687a      	ldr	r2, [r7, #4]
 8003b1a:	212c      	movs	r1, #44	; 0x2c
 8003b1c:	fb01 f303 	mul.w	r3, r1, r3
 8003b20:	4413      	add	r3, r2
 8003b22:	3344      	adds	r3, #68	; 0x44
 8003b24:	697a      	ldr	r2, [r7, #20]
 8003b26:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8003b28:	78fb      	ldrb	r3, [r7, #3]
 8003b2a:	8b3a      	ldrh	r2, [r7, #24]
 8003b2c:	6879      	ldr	r1, [r7, #4]
 8003b2e:	202c      	movs	r0, #44	; 0x2c
 8003b30:	fb00 f303 	mul.w	r3, r0, r3
 8003b34:	440b      	add	r3, r1
 8003b36:	334c      	adds	r3, #76	; 0x4c
 8003b38:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8003b3a:	78fb      	ldrb	r3, [r7, #3]
 8003b3c:	687a      	ldr	r2, [r7, #4]
 8003b3e:	212c      	movs	r1, #44	; 0x2c
 8003b40:	fb01 f303 	mul.w	r3, r1, r3
 8003b44:	4413      	add	r3, r2
 8003b46:	3360      	adds	r3, #96	; 0x60
 8003b48:	2200      	movs	r2, #0
 8003b4a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8003b4c:	78fb      	ldrb	r3, [r7, #3]
 8003b4e:	687a      	ldr	r2, [r7, #4]
 8003b50:	212c      	movs	r1, #44	; 0x2c
 8003b52:	fb01 f303 	mul.w	r3, r1, r3
 8003b56:	4413      	add	r3, r2
 8003b58:	3350      	adds	r3, #80	; 0x50
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003b5e:	78fb      	ldrb	r3, [r7, #3]
 8003b60:	687a      	ldr	r2, [r7, #4]
 8003b62:	212c      	movs	r1, #44	; 0x2c
 8003b64:	fb01 f303 	mul.w	r3, r1, r3
 8003b68:	4413      	add	r3, r2
 8003b6a:	3339      	adds	r3, #57	; 0x39
 8003b6c:	78fa      	ldrb	r2, [r7, #3]
 8003b6e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8003b70:	78fb      	ldrb	r3, [r7, #3]
 8003b72:	687a      	ldr	r2, [r7, #4]
 8003b74:	212c      	movs	r1, #44	; 0x2c
 8003b76:	fb01 f303 	mul.w	r3, r1, r3
 8003b7a:	4413      	add	r3, r2
 8003b7c:	3361      	adds	r3, #97	; 0x61
 8003b7e:	2200      	movs	r2, #0
 8003b80:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6818      	ldr	r0, [r3, #0]
 8003b86:	78fb      	ldrb	r3, [r7, #3]
 8003b88:	222c      	movs	r2, #44	; 0x2c
 8003b8a:	fb02 f303 	mul.w	r3, r2, r3
 8003b8e:	3338      	adds	r3, #56	; 0x38
 8003b90:	687a      	ldr	r2, [r7, #4]
 8003b92:	18d1      	adds	r1, r2, r3
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	691b      	ldr	r3, [r3, #16]
 8003b98:	b2db      	uxtb	r3, r3
 8003b9a:	461a      	mov	r2, r3
 8003b9c:	f005 fc10 	bl	80093c0 <USB_HC_StartXfer>
 8003ba0:	4603      	mov	r3, r0
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	3708      	adds	r7, #8
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}
 8003baa:	bf00      	nop

08003bac <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b086      	sub	sp, #24
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	f005 f933 	bl	8008e2e <USB_GetMode>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	f040 80f6 	bne.w	8003dbc <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	f005 f917 	bl	8008e08 <USB_ReadInterrupts>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	f000 80ec 	beq.w	8003dba <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4618      	mov	r0, r3
 8003be8:	f005 f90e 	bl	8008e08 <USB_ReadInterrupts>
 8003bec:	4603      	mov	r3, r0
 8003bee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003bf2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003bf6:	d104      	bne.n	8003c02 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003c00:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4618      	mov	r0, r3
 8003c08:	f005 f8fe 	bl	8008e08 <USB_ReadInterrupts>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c16:	d104      	bne.n	8003c22 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003c20:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4618      	mov	r0, r3
 8003c28:	f005 f8ee 	bl	8008e08 <USB_ReadInterrupts>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003c32:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003c36:	d104      	bne.n	8003c42 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003c40:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4618      	mov	r0, r3
 8003c48:	f005 f8de 	bl	8008e08 <USB_ReadInterrupts>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	f003 0302 	and.w	r3, r3, #2
 8003c52:	2b02      	cmp	r3, #2
 8003c54:	d103      	bne.n	8003c5e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	2202      	movs	r2, #2
 8003c5c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4618      	mov	r0, r3
 8003c64:	f005 f8d0 	bl	8008e08 <USB_ReadInterrupts>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c6e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c72:	d11c      	bne.n	8003cae <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003c7c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f003 0301 	and.w	r3, r3, #1
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d10f      	bne.n	8003cae <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8003c8e:	2110      	movs	r1, #16
 8003c90:	6938      	ldr	r0, [r7, #16]
 8003c92:	f004 ffdf 	bl	8008c54 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8003c96:	6938      	ldr	r0, [r7, #16]
 8003c98:	f005 f800 	bl	8008c9c <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	2101      	movs	r1, #1
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f005 f9b8 	bl	8009018 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8003ca8:	6878      	ldr	r0, [r7, #4]
 8003caa:	f007 fe8b 	bl	800b9c4 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f005 f8a8 	bl	8008e08 <USB_ReadInterrupts>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003cbe:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003cc2:	d102      	bne.n	8003cca <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8003cc4:	6878      	ldr	r0, [r7, #4]
 8003cc6:	f001 fa03 	bl	80050d0 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f005 f89a 	bl	8008e08 <USB_ReadInterrupts>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	f003 0308 	and.w	r3, r3, #8
 8003cda:	2b08      	cmp	r3, #8
 8003cdc:	d106      	bne.n	8003cec <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8003cde:	6878      	ldr	r0, [r7, #4]
 8003ce0:	f007 fe54 	bl	800b98c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	2208      	movs	r2, #8
 8003cea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f005 f889 	bl	8008e08 <USB_ReadInterrupts>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	f003 0310 	and.w	r3, r3, #16
 8003cfc:	2b10      	cmp	r3, #16
 8003cfe:	d101      	bne.n	8003d04 <HAL_HCD_IRQHandler+0x158>
 8003d00:	2301      	movs	r3, #1
 8003d02:	e000      	b.n	8003d06 <HAL_HCD_IRQHandler+0x15a>
 8003d04:	2300      	movs	r3, #0
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d012      	beq.n	8003d30 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	699a      	ldr	r2, [r3, #24]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f022 0210 	bic.w	r2, r2, #16
 8003d18:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	f001 f906 	bl	8004f2c <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	699a      	ldr	r2, [r3, #24]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f042 0210 	orr.w	r2, r2, #16
 8003d2e:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4618      	mov	r0, r3
 8003d36:	f005 f867 	bl	8008e08 <USB_ReadInterrupts>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d40:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003d44:	d13a      	bne.n	8003dbc <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	f005 fc7a 	bl	8009644 <USB_HC_ReadInterrupt>
 8003d50:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003d52:	2300      	movs	r3, #0
 8003d54:	617b      	str	r3, [r7, #20]
 8003d56:	e025      	b.n	8003da4 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	f003 030f 	and.w	r3, r3, #15
 8003d5e:	68ba      	ldr	r2, [r7, #8]
 8003d60:	fa22 f303 	lsr.w	r3, r2, r3
 8003d64:	f003 0301 	and.w	r3, r3, #1
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d018      	beq.n	8003d9e <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	015a      	lsls	r2, r3, #5
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	4413      	add	r3, r2
 8003d74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d82:	d106      	bne.n	8003d92 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	b2db      	uxtb	r3, r3
 8003d88:	4619      	mov	r1, r3
 8003d8a:	6878      	ldr	r0, [r7, #4]
 8003d8c:	f000 f8ab 	bl	8003ee6 <HCD_HC_IN_IRQHandler>
 8003d90:	e005      	b.n	8003d9e <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	b2db      	uxtb	r3, r3
 8003d96:	4619      	mov	r1, r3
 8003d98:	6878      	ldr	r0, [r7, #4]
 8003d9a:	f000 fcc6 	bl	800472a <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	3301      	adds	r3, #1
 8003da2:	617b      	str	r3, [r7, #20]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	697a      	ldr	r2, [r7, #20]
 8003daa:	429a      	cmp	r2, r3
 8003dac:	d3d4      	bcc.n	8003d58 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003db6:	615a      	str	r2, [r3, #20]
 8003db8:	e000      	b.n	8003dbc <HAL_HCD_IRQHandler+0x210>
      return;
 8003dba:	bf00      	nop
    }
  }
}
 8003dbc:	3718      	adds	r7, #24
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}

08003dc2 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8003dc2:	b580      	push	{r7, lr}
 8003dc4:	b082      	sub	sp, #8
 8003dc6:	af00      	add	r7, sp, #0
 8003dc8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003dd0:	2b01      	cmp	r3, #1
 8003dd2:	d101      	bne.n	8003dd8 <HAL_HCD_Start+0x16>
 8003dd4:	2302      	movs	r3, #2
 8003dd6:	e013      	b.n	8003e00 <HAL_HCD_Start+0x3e>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2201      	movs	r2, #1
 8003ddc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	2101      	movs	r1, #1
 8003de6:	4618      	mov	r0, r3
 8003de8:	f005 f97a 	bl	80090e0 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4618      	mov	r0, r3
 8003df2:	f004 fec0 	bl	8008b76 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003dfe:	2300      	movs	r3, #0
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	3708      	adds	r7, #8
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}

08003e08 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b082      	sub	sp, #8
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003e16:	2b01      	cmp	r3, #1
 8003e18:	d101      	bne.n	8003e1e <HAL_HCD_Stop+0x16>
 8003e1a:	2302      	movs	r3, #2
 8003e1c:	e00d      	b.n	8003e3a <HAL_HCD_Stop+0x32>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2201      	movs	r2, #1
 8003e22:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f005 fd74 	bl	8009918 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2200      	movs	r2, #0
 8003e34:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003e38:	2300      	movs	r3, #0
}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	3708      	adds	r7, #8
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}

08003e42 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8003e42:	b580      	push	{r7, lr}
 8003e44:	b082      	sub	sp, #8
 8003e46:	af00      	add	r7, sp, #0
 8003e48:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f005 f91c 	bl	800908c <USB_ResetPort>
 8003e54:	4603      	mov	r3, r0
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	3708      	adds	r7, #8
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}

08003e5e <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003e5e:	b480      	push	{r7}
 8003e60:	b083      	sub	sp, #12
 8003e62:	af00      	add	r7, sp, #0
 8003e64:	6078      	str	r0, [r7, #4]
 8003e66:	460b      	mov	r3, r1
 8003e68:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003e6a:	78fb      	ldrb	r3, [r7, #3]
 8003e6c:	687a      	ldr	r2, [r7, #4]
 8003e6e:	212c      	movs	r1, #44	; 0x2c
 8003e70:	fb01 f303 	mul.w	r3, r1, r3
 8003e74:	4413      	add	r3, r2
 8003e76:	3360      	adds	r3, #96	; 0x60
 8003e78:	781b      	ldrb	r3, [r3, #0]
}
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	370c      	adds	r7, #12
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e84:	4770      	bx	lr

08003e86 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003e86:	b480      	push	{r7}
 8003e88:	b083      	sub	sp, #12
 8003e8a:	af00      	add	r7, sp, #0
 8003e8c:	6078      	str	r0, [r7, #4]
 8003e8e:	460b      	mov	r3, r1
 8003e90:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8003e92:	78fb      	ldrb	r3, [r7, #3]
 8003e94:	687a      	ldr	r2, [r7, #4]
 8003e96:	212c      	movs	r1, #44	; 0x2c
 8003e98:	fb01 f303 	mul.w	r3, r1, r3
 8003e9c:	4413      	add	r3, r2
 8003e9e:	3350      	adds	r3, #80	; 0x50
 8003ea0:	681b      	ldr	r3, [r3, #0]
}
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	370c      	adds	r7, #12
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eac:	4770      	bx	lr

08003eae <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8003eae:	b580      	push	{r7, lr}
 8003eb0:	b082      	sub	sp, #8
 8003eb2:	af00      	add	r7, sp, #0
 8003eb4:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f005 f960 	bl	8009180 <USB_GetCurrentFrame>
 8003ec0:	4603      	mov	r3, r0
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	3708      	adds	r7, #8
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}

08003eca <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8003eca:	b580      	push	{r7, lr}
 8003ecc:	b082      	sub	sp, #8
 8003ece:	af00      	add	r7, sp, #0
 8003ed0:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f005 f93b 	bl	8009152 <USB_GetHostSpeed>
 8003edc:	4603      	mov	r3, r0
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	3708      	adds	r7, #8
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}

08003ee6 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003ee6:	b580      	push	{r7, lr}
 8003ee8:	b086      	sub	sp, #24
 8003eea:	af00      	add	r7, sp, #0
 8003eec:	6078      	str	r0, [r7, #4]
 8003eee:	460b      	mov	r3, r1
 8003ef0:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ef8:	697b      	ldr	r3, [r7, #20]
 8003efa:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003efc:	78fb      	ldrb	r3, [r7, #3]
 8003efe:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	015a      	lsls	r2, r3, #5
 8003f04:	693b      	ldr	r3, [r7, #16]
 8003f06:	4413      	add	r3, r2
 8003f08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f0c:	689b      	ldr	r3, [r3, #8]
 8003f0e:	f003 0304 	and.w	r3, r3, #4
 8003f12:	2b04      	cmp	r3, #4
 8003f14:	d119      	bne.n	8003f4a <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	015a      	lsls	r2, r3, #5
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	4413      	add	r3, r2
 8003f1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f22:	461a      	mov	r2, r3
 8003f24:	2304      	movs	r3, #4
 8003f26:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	015a      	lsls	r2, r3, #5
 8003f2c:	693b      	ldr	r3, [r7, #16]
 8003f2e:	4413      	add	r3, r2
 8003f30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f34:	68db      	ldr	r3, [r3, #12]
 8003f36:	68fa      	ldr	r2, [r7, #12]
 8003f38:	0151      	lsls	r1, r2, #5
 8003f3a:	693a      	ldr	r2, [r7, #16]
 8003f3c:	440a      	add	r2, r1
 8003f3e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003f42:	f043 0302 	orr.w	r3, r3, #2
 8003f46:	60d3      	str	r3, [r2, #12]
 8003f48:	e101      	b.n	800414e <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	015a      	lsls	r2, r3, #5
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	4413      	add	r3, r2
 8003f52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f60:	d12b      	bne.n	8003fba <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	015a      	lsls	r2, r3, #5
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	4413      	add	r3, r2
 8003f6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f6e:	461a      	mov	r2, r3
 8003f70:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003f74:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8003f76:	687a      	ldr	r2, [r7, #4]
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	212c      	movs	r1, #44	; 0x2c
 8003f7c:	fb01 f303 	mul.w	r3, r1, r3
 8003f80:	4413      	add	r3, r2
 8003f82:	3361      	adds	r3, #97	; 0x61
 8003f84:	2207      	movs	r2, #7
 8003f86:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	015a      	lsls	r2, r3, #5
 8003f8c:	693b      	ldr	r3, [r7, #16]
 8003f8e:	4413      	add	r3, r2
 8003f90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f94:	68db      	ldr	r3, [r3, #12]
 8003f96:	68fa      	ldr	r2, [r7, #12]
 8003f98:	0151      	lsls	r1, r2, #5
 8003f9a:	693a      	ldr	r2, [r7, #16]
 8003f9c:	440a      	add	r2, r1
 8003f9e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003fa2:	f043 0302 	orr.w	r3, r3, #2
 8003fa6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	68fa      	ldr	r2, [r7, #12]
 8003fae:	b2d2      	uxtb	r2, r2
 8003fb0:	4611      	mov	r1, r2
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f005 fb57 	bl	8009666 <USB_HC_Halt>
 8003fb8:	e0c9      	b.n	800414e <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	015a      	lsls	r2, r3, #5
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	4413      	add	r3, r2
 8003fc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	f003 0320 	and.w	r3, r3, #32
 8003fcc:	2b20      	cmp	r3, #32
 8003fce:	d109      	bne.n	8003fe4 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	015a      	lsls	r2, r3, #5
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	4413      	add	r3, r2
 8003fd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fdc:	461a      	mov	r2, r3
 8003fde:	2320      	movs	r3, #32
 8003fe0:	6093      	str	r3, [r2, #8]
 8003fe2:	e0b4      	b.n	800414e <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	015a      	lsls	r2, r3, #5
 8003fe8:	693b      	ldr	r3, [r7, #16]
 8003fea:	4413      	add	r3, r2
 8003fec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ff0:	689b      	ldr	r3, [r3, #8]
 8003ff2:	f003 0308 	and.w	r3, r3, #8
 8003ff6:	2b08      	cmp	r3, #8
 8003ff8:	d133      	bne.n	8004062 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	015a      	lsls	r2, r3, #5
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	4413      	add	r3, r2
 8004002:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004006:	68db      	ldr	r3, [r3, #12]
 8004008:	68fa      	ldr	r2, [r7, #12]
 800400a:	0151      	lsls	r1, r2, #5
 800400c:	693a      	ldr	r2, [r7, #16]
 800400e:	440a      	add	r2, r1
 8004010:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004014:	f043 0302 	orr.w	r3, r3, #2
 8004018:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 800401a:	687a      	ldr	r2, [r7, #4]
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	212c      	movs	r1, #44	; 0x2c
 8004020:	fb01 f303 	mul.w	r3, r1, r3
 8004024:	4413      	add	r3, r2
 8004026:	3361      	adds	r3, #97	; 0x61
 8004028:	2205      	movs	r2, #5
 800402a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	015a      	lsls	r2, r3, #5
 8004030:	693b      	ldr	r3, [r7, #16]
 8004032:	4413      	add	r3, r2
 8004034:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004038:	461a      	mov	r2, r3
 800403a:	2310      	movs	r3, #16
 800403c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	015a      	lsls	r2, r3, #5
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	4413      	add	r3, r2
 8004046:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800404a:	461a      	mov	r2, r3
 800404c:	2308      	movs	r3, #8
 800404e:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	68fa      	ldr	r2, [r7, #12]
 8004056:	b2d2      	uxtb	r2, r2
 8004058:	4611      	mov	r1, r2
 800405a:	4618      	mov	r0, r3
 800405c:	f005 fb03 	bl	8009666 <USB_HC_Halt>
 8004060:	e075      	b.n	800414e <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	015a      	lsls	r2, r3, #5
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	4413      	add	r3, r2
 800406a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800406e:	689b      	ldr	r3, [r3, #8]
 8004070:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004074:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004078:	d134      	bne.n	80040e4 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	015a      	lsls	r2, r3, #5
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	4413      	add	r3, r2
 8004082:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004086:	68db      	ldr	r3, [r3, #12]
 8004088:	68fa      	ldr	r2, [r7, #12]
 800408a:	0151      	lsls	r1, r2, #5
 800408c:	693a      	ldr	r2, [r7, #16]
 800408e:	440a      	add	r2, r1
 8004090:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004094:	f043 0302 	orr.w	r3, r3, #2
 8004098:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800409a:	687a      	ldr	r2, [r7, #4]
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	212c      	movs	r1, #44	; 0x2c
 80040a0:	fb01 f303 	mul.w	r3, r1, r3
 80040a4:	4413      	add	r3, r2
 80040a6:	3361      	adds	r3, #97	; 0x61
 80040a8:	2208      	movs	r2, #8
 80040aa:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	015a      	lsls	r2, r3, #5
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	4413      	add	r3, r2
 80040b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040b8:	461a      	mov	r2, r3
 80040ba:	2310      	movs	r3, #16
 80040bc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	015a      	lsls	r2, r3, #5
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	4413      	add	r3, r2
 80040c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040ca:	461a      	mov	r2, r3
 80040cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80040d0:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	68fa      	ldr	r2, [r7, #12]
 80040d8:	b2d2      	uxtb	r2, r2
 80040da:	4611      	mov	r1, r2
 80040dc:	4618      	mov	r0, r3
 80040de:	f005 fac2 	bl	8009666 <USB_HC_Halt>
 80040e2:	e034      	b.n	800414e <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	015a      	lsls	r2, r3, #5
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	4413      	add	r3, r2
 80040ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040f6:	2b80      	cmp	r3, #128	; 0x80
 80040f8:	d129      	bne.n	800414e <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	015a      	lsls	r2, r3, #5
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	4413      	add	r3, r2
 8004102:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004106:	68db      	ldr	r3, [r3, #12]
 8004108:	68fa      	ldr	r2, [r7, #12]
 800410a:	0151      	lsls	r1, r2, #5
 800410c:	693a      	ldr	r2, [r7, #16]
 800410e:	440a      	add	r2, r1
 8004110:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004114:	f043 0302 	orr.w	r3, r3, #2
 8004118:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800411a:	687a      	ldr	r2, [r7, #4]
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	212c      	movs	r1, #44	; 0x2c
 8004120:	fb01 f303 	mul.w	r3, r1, r3
 8004124:	4413      	add	r3, r2
 8004126:	3361      	adds	r3, #97	; 0x61
 8004128:	2206      	movs	r2, #6
 800412a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	68fa      	ldr	r2, [r7, #12]
 8004132:	b2d2      	uxtb	r2, r2
 8004134:	4611      	mov	r1, r2
 8004136:	4618      	mov	r0, r3
 8004138:	f005 fa95 	bl	8009666 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	015a      	lsls	r2, r3, #5
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	4413      	add	r3, r2
 8004144:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004148:	461a      	mov	r2, r3
 800414a:	2380      	movs	r3, #128	; 0x80
 800414c:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	015a      	lsls	r2, r3, #5
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	4413      	add	r3, r2
 8004156:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800415a:	689b      	ldr	r3, [r3, #8]
 800415c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004160:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004164:	d122      	bne.n	80041ac <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	015a      	lsls	r2, r3, #5
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	4413      	add	r3, r2
 800416e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004172:	68db      	ldr	r3, [r3, #12]
 8004174:	68fa      	ldr	r2, [r7, #12]
 8004176:	0151      	lsls	r1, r2, #5
 8004178:	693a      	ldr	r2, [r7, #16]
 800417a:	440a      	add	r2, r1
 800417c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004180:	f043 0302 	orr.w	r3, r3, #2
 8004184:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	68fa      	ldr	r2, [r7, #12]
 800418c:	b2d2      	uxtb	r2, r2
 800418e:	4611      	mov	r1, r2
 8004190:	4618      	mov	r0, r3
 8004192:	f005 fa68 	bl	8009666 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	015a      	lsls	r2, r3, #5
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	4413      	add	r3, r2
 800419e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041a2:	461a      	mov	r2, r3
 80041a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80041a8:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80041aa:	e2ba      	b.n	8004722 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	015a      	lsls	r2, r3, #5
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	4413      	add	r3, r2
 80041b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	f003 0301 	and.w	r3, r3, #1
 80041be:	2b01      	cmp	r3, #1
 80041c0:	f040 811b 	bne.w	80043fa <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	691b      	ldr	r3, [r3, #16]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d019      	beq.n	8004200 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80041cc:	687a      	ldr	r2, [r7, #4]
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	212c      	movs	r1, #44	; 0x2c
 80041d2:	fb01 f303 	mul.w	r3, r1, r3
 80041d6:	4413      	add	r3, r2
 80041d8:	3348      	adds	r3, #72	; 0x48
 80041da:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	0159      	lsls	r1, r3, #5
 80041e0:	693b      	ldr	r3, [r7, #16]
 80041e2:	440b      	add	r3, r1
 80041e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041e8:	691b      	ldr	r3, [r3, #16]
 80041ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80041ee:	1ad2      	subs	r2, r2, r3
 80041f0:	6879      	ldr	r1, [r7, #4]
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	202c      	movs	r0, #44	; 0x2c
 80041f6:	fb00 f303 	mul.w	r3, r0, r3
 80041fa:	440b      	add	r3, r1
 80041fc:	3350      	adds	r3, #80	; 0x50
 80041fe:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004200:	687a      	ldr	r2, [r7, #4]
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	212c      	movs	r1, #44	; 0x2c
 8004206:	fb01 f303 	mul.w	r3, r1, r3
 800420a:	4413      	add	r3, r2
 800420c:	3361      	adds	r3, #97	; 0x61
 800420e:	2201      	movs	r2, #1
 8004210:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004212:	687a      	ldr	r2, [r7, #4]
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	212c      	movs	r1, #44	; 0x2c
 8004218:	fb01 f303 	mul.w	r3, r1, r3
 800421c:	4413      	add	r3, r2
 800421e:	335c      	adds	r3, #92	; 0x5c
 8004220:	2200      	movs	r2, #0
 8004222:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	015a      	lsls	r2, r3, #5
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	4413      	add	r3, r2
 800422c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004230:	461a      	mov	r2, r3
 8004232:	2301      	movs	r3, #1
 8004234:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004236:	687a      	ldr	r2, [r7, #4]
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	212c      	movs	r1, #44	; 0x2c
 800423c:	fb01 f303 	mul.w	r3, r1, r3
 8004240:	4413      	add	r3, r2
 8004242:	333f      	adds	r3, #63	; 0x3f
 8004244:	781b      	ldrb	r3, [r3, #0]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d009      	beq.n	800425e <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800424a:	687a      	ldr	r2, [r7, #4]
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	212c      	movs	r1, #44	; 0x2c
 8004250:	fb01 f303 	mul.w	r3, r1, r3
 8004254:	4413      	add	r3, r2
 8004256:	333f      	adds	r3, #63	; 0x3f
 8004258:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800425a:	2b02      	cmp	r3, #2
 800425c:	d121      	bne.n	80042a2 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	015a      	lsls	r2, r3, #5
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	4413      	add	r3, r2
 8004266:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800426a:	68db      	ldr	r3, [r3, #12]
 800426c:	68fa      	ldr	r2, [r7, #12]
 800426e:	0151      	lsls	r1, r2, #5
 8004270:	693a      	ldr	r2, [r7, #16]
 8004272:	440a      	add	r2, r1
 8004274:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004278:	f043 0302 	orr.w	r3, r3, #2
 800427c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	68fa      	ldr	r2, [r7, #12]
 8004284:	b2d2      	uxtb	r2, r2
 8004286:	4611      	mov	r1, r2
 8004288:	4618      	mov	r0, r3
 800428a:	f005 f9ec 	bl	8009666 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	015a      	lsls	r2, r3, #5
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	4413      	add	r3, r2
 8004296:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800429a:	461a      	mov	r2, r3
 800429c:	2310      	movs	r3, #16
 800429e:	6093      	str	r3, [r2, #8]
 80042a0:	e066      	b.n	8004370 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80042a2:	687a      	ldr	r2, [r7, #4]
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	212c      	movs	r1, #44	; 0x2c
 80042a8:	fb01 f303 	mul.w	r3, r1, r3
 80042ac:	4413      	add	r3, r2
 80042ae:	333f      	adds	r3, #63	; 0x3f
 80042b0:	781b      	ldrb	r3, [r3, #0]
 80042b2:	2b03      	cmp	r3, #3
 80042b4:	d127      	bne.n	8004306 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	015a      	lsls	r2, r3, #5
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	4413      	add	r3, r2
 80042be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	68fa      	ldr	r2, [r7, #12]
 80042c6:	0151      	lsls	r1, r2, #5
 80042c8:	693a      	ldr	r2, [r7, #16]
 80042ca:	440a      	add	r2, r1
 80042cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80042d0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80042d4:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80042d6:	687a      	ldr	r2, [r7, #4]
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	212c      	movs	r1, #44	; 0x2c
 80042dc:	fb01 f303 	mul.w	r3, r1, r3
 80042e0:	4413      	add	r3, r2
 80042e2:	3360      	adds	r3, #96	; 0x60
 80042e4:	2201      	movs	r2, #1
 80042e6:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	b2d9      	uxtb	r1, r3
 80042ec:	687a      	ldr	r2, [r7, #4]
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	202c      	movs	r0, #44	; 0x2c
 80042f2:	fb00 f303 	mul.w	r3, r0, r3
 80042f6:	4413      	add	r3, r2
 80042f8:	3360      	adds	r3, #96	; 0x60
 80042fa:	781b      	ldrb	r3, [r3, #0]
 80042fc:	461a      	mov	r2, r3
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	f007 fb6e 	bl	800b9e0 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004304:	e034      	b.n	8004370 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8004306:	687a      	ldr	r2, [r7, #4]
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	212c      	movs	r1, #44	; 0x2c
 800430c:	fb01 f303 	mul.w	r3, r1, r3
 8004310:	4413      	add	r3, r2
 8004312:	333f      	adds	r3, #63	; 0x3f
 8004314:	781b      	ldrb	r3, [r3, #0]
 8004316:	2b01      	cmp	r3, #1
 8004318:	d12a      	bne.n	8004370 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800431a:	687a      	ldr	r2, [r7, #4]
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	212c      	movs	r1, #44	; 0x2c
 8004320:	fb01 f303 	mul.w	r3, r1, r3
 8004324:	4413      	add	r3, r2
 8004326:	3360      	adds	r3, #96	; 0x60
 8004328:	2201      	movs	r2, #1
 800432a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800432c:	687a      	ldr	r2, [r7, #4]
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	212c      	movs	r1, #44	; 0x2c
 8004332:	fb01 f303 	mul.w	r3, r1, r3
 8004336:	4413      	add	r3, r2
 8004338:	3354      	adds	r3, #84	; 0x54
 800433a:	781b      	ldrb	r3, [r3, #0]
 800433c:	f083 0301 	eor.w	r3, r3, #1
 8004340:	b2d8      	uxtb	r0, r3
 8004342:	687a      	ldr	r2, [r7, #4]
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	212c      	movs	r1, #44	; 0x2c
 8004348:	fb01 f303 	mul.w	r3, r1, r3
 800434c:	4413      	add	r3, r2
 800434e:	3354      	adds	r3, #84	; 0x54
 8004350:	4602      	mov	r2, r0
 8004352:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	b2d9      	uxtb	r1, r3
 8004358:	687a      	ldr	r2, [r7, #4]
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	202c      	movs	r0, #44	; 0x2c
 800435e:	fb00 f303 	mul.w	r3, r0, r3
 8004362:	4413      	add	r3, r2
 8004364:	3360      	adds	r3, #96	; 0x60
 8004366:	781b      	ldrb	r3, [r3, #0]
 8004368:	461a      	mov	r2, r3
 800436a:	6878      	ldr	r0, [r7, #4]
 800436c:	f007 fb38 	bl	800b9e0 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	691b      	ldr	r3, [r3, #16]
 8004374:	2b01      	cmp	r3, #1
 8004376:	d12b      	bne.n	80043d0 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8004378:	687a      	ldr	r2, [r7, #4]
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	212c      	movs	r1, #44	; 0x2c
 800437e:	fb01 f303 	mul.w	r3, r1, r3
 8004382:	4413      	add	r3, r2
 8004384:	3348      	adds	r3, #72	; 0x48
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	6879      	ldr	r1, [r7, #4]
 800438a:	68fa      	ldr	r2, [r7, #12]
 800438c:	202c      	movs	r0, #44	; 0x2c
 800438e:	fb00 f202 	mul.w	r2, r0, r2
 8004392:	440a      	add	r2, r1
 8004394:	3240      	adds	r2, #64	; 0x40
 8004396:	8812      	ldrh	r2, [r2, #0]
 8004398:	fbb3 f3f2 	udiv	r3, r3, r2
 800439c:	f003 0301 	and.w	r3, r3, #1
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	f000 81be 	beq.w	8004722 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80043a6:	687a      	ldr	r2, [r7, #4]
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	212c      	movs	r1, #44	; 0x2c
 80043ac:	fb01 f303 	mul.w	r3, r1, r3
 80043b0:	4413      	add	r3, r2
 80043b2:	3354      	adds	r3, #84	; 0x54
 80043b4:	781b      	ldrb	r3, [r3, #0]
 80043b6:	f083 0301 	eor.w	r3, r3, #1
 80043ba:	b2d8      	uxtb	r0, r3
 80043bc:	687a      	ldr	r2, [r7, #4]
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	212c      	movs	r1, #44	; 0x2c
 80043c2:	fb01 f303 	mul.w	r3, r1, r3
 80043c6:	4413      	add	r3, r2
 80043c8:	3354      	adds	r3, #84	; 0x54
 80043ca:	4602      	mov	r2, r0
 80043cc:	701a      	strb	r2, [r3, #0]
}
 80043ce:	e1a8      	b.n	8004722 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80043d0:	687a      	ldr	r2, [r7, #4]
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	212c      	movs	r1, #44	; 0x2c
 80043d6:	fb01 f303 	mul.w	r3, r1, r3
 80043da:	4413      	add	r3, r2
 80043dc:	3354      	adds	r3, #84	; 0x54
 80043de:	781b      	ldrb	r3, [r3, #0]
 80043e0:	f083 0301 	eor.w	r3, r3, #1
 80043e4:	b2d8      	uxtb	r0, r3
 80043e6:	687a      	ldr	r2, [r7, #4]
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	212c      	movs	r1, #44	; 0x2c
 80043ec:	fb01 f303 	mul.w	r3, r1, r3
 80043f0:	4413      	add	r3, r2
 80043f2:	3354      	adds	r3, #84	; 0x54
 80043f4:	4602      	mov	r2, r0
 80043f6:	701a      	strb	r2, [r3, #0]
}
 80043f8:	e193      	b.n	8004722 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	015a      	lsls	r2, r3, #5
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	4413      	add	r3, r2
 8004402:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004406:	689b      	ldr	r3, [r3, #8]
 8004408:	f003 0302 	and.w	r3, r3, #2
 800440c:	2b02      	cmp	r3, #2
 800440e:	f040 8106 	bne.w	800461e <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	015a      	lsls	r2, r3, #5
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	4413      	add	r3, r2
 800441a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800441e:	68db      	ldr	r3, [r3, #12]
 8004420:	68fa      	ldr	r2, [r7, #12]
 8004422:	0151      	lsls	r1, r2, #5
 8004424:	693a      	ldr	r2, [r7, #16]
 8004426:	440a      	add	r2, r1
 8004428:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800442c:	f023 0302 	bic.w	r3, r3, #2
 8004430:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004432:	687a      	ldr	r2, [r7, #4]
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	212c      	movs	r1, #44	; 0x2c
 8004438:	fb01 f303 	mul.w	r3, r1, r3
 800443c:	4413      	add	r3, r2
 800443e:	3361      	adds	r3, #97	; 0x61
 8004440:	781b      	ldrb	r3, [r3, #0]
 8004442:	2b01      	cmp	r3, #1
 8004444:	d109      	bne.n	800445a <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004446:	687a      	ldr	r2, [r7, #4]
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	212c      	movs	r1, #44	; 0x2c
 800444c:	fb01 f303 	mul.w	r3, r1, r3
 8004450:	4413      	add	r3, r2
 8004452:	3360      	adds	r3, #96	; 0x60
 8004454:	2201      	movs	r2, #1
 8004456:	701a      	strb	r2, [r3, #0]
 8004458:	e0c9      	b.n	80045ee <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800445a:	687a      	ldr	r2, [r7, #4]
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	212c      	movs	r1, #44	; 0x2c
 8004460:	fb01 f303 	mul.w	r3, r1, r3
 8004464:	4413      	add	r3, r2
 8004466:	3361      	adds	r3, #97	; 0x61
 8004468:	781b      	ldrb	r3, [r3, #0]
 800446a:	2b05      	cmp	r3, #5
 800446c:	d109      	bne.n	8004482 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 800446e:	687a      	ldr	r2, [r7, #4]
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	212c      	movs	r1, #44	; 0x2c
 8004474:	fb01 f303 	mul.w	r3, r1, r3
 8004478:	4413      	add	r3, r2
 800447a:	3360      	adds	r3, #96	; 0x60
 800447c:	2205      	movs	r2, #5
 800447e:	701a      	strb	r2, [r3, #0]
 8004480:	e0b5      	b.n	80045ee <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004482:	687a      	ldr	r2, [r7, #4]
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	212c      	movs	r1, #44	; 0x2c
 8004488:	fb01 f303 	mul.w	r3, r1, r3
 800448c:	4413      	add	r3, r2
 800448e:	3361      	adds	r3, #97	; 0x61
 8004490:	781b      	ldrb	r3, [r3, #0]
 8004492:	2b06      	cmp	r3, #6
 8004494:	d009      	beq.n	80044aa <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004496:	687a      	ldr	r2, [r7, #4]
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	212c      	movs	r1, #44	; 0x2c
 800449c:	fb01 f303 	mul.w	r3, r1, r3
 80044a0:	4413      	add	r3, r2
 80044a2:	3361      	adds	r3, #97	; 0x61
 80044a4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80044a6:	2b08      	cmp	r3, #8
 80044a8:	d150      	bne.n	800454c <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 80044aa:	687a      	ldr	r2, [r7, #4]
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	212c      	movs	r1, #44	; 0x2c
 80044b0:	fb01 f303 	mul.w	r3, r1, r3
 80044b4:	4413      	add	r3, r2
 80044b6:	335c      	adds	r3, #92	; 0x5c
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	1c5a      	adds	r2, r3, #1
 80044bc:	6879      	ldr	r1, [r7, #4]
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	202c      	movs	r0, #44	; 0x2c
 80044c2:	fb00 f303 	mul.w	r3, r0, r3
 80044c6:	440b      	add	r3, r1
 80044c8:	335c      	adds	r3, #92	; 0x5c
 80044ca:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80044cc:	687a      	ldr	r2, [r7, #4]
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	212c      	movs	r1, #44	; 0x2c
 80044d2:	fb01 f303 	mul.w	r3, r1, r3
 80044d6:	4413      	add	r3, r2
 80044d8:	335c      	adds	r3, #92	; 0x5c
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	2b02      	cmp	r3, #2
 80044de:	d912      	bls.n	8004506 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80044e0:	687a      	ldr	r2, [r7, #4]
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	212c      	movs	r1, #44	; 0x2c
 80044e6:	fb01 f303 	mul.w	r3, r1, r3
 80044ea:	4413      	add	r3, r2
 80044ec:	335c      	adds	r3, #92	; 0x5c
 80044ee:	2200      	movs	r2, #0
 80044f0:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80044f2:	687a      	ldr	r2, [r7, #4]
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	212c      	movs	r1, #44	; 0x2c
 80044f8:	fb01 f303 	mul.w	r3, r1, r3
 80044fc:	4413      	add	r3, r2
 80044fe:	3360      	adds	r3, #96	; 0x60
 8004500:	2204      	movs	r2, #4
 8004502:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004504:	e073      	b.n	80045ee <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004506:	687a      	ldr	r2, [r7, #4]
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	212c      	movs	r1, #44	; 0x2c
 800450c:	fb01 f303 	mul.w	r3, r1, r3
 8004510:	4413      	add	r3, r2
 8004512:	3360      	adds	r3, #96	; 0x60
 8004514:	2202      	movs	r2, #2
 8004516:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	015a      	lsls	r2, r3, #5
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	4413      	add	r3, r2
 8004520:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800452e:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004536:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	015a      	lsls	r2, r3, #5
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	4413      	add	r3, r2
 8004540:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004544:	461a      	mov	r2, r3
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800454a:	e050      	b.n	80045ee <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800454c:	687a      	ldr	r2, [r7, #4]
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	212c      	movs	r1, #44	; 0x2c
 8004552:	fb01 f303 	mul.w	r3, r1, r3
 8004556:	4413      	add	r3, r2
 8004558:	3361      	adds	r3, #97	; 0x61
 800455a:	781b      	ldrb	r3, [r3, #0]
 800455c:	2b03      	cmp	r3, #3
 800455e:	d122      	bne.n	80045a6 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004560:	687a      	ldr	r2, [r7, #4]
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	212c      	movs	r1, #44	; 0x2c
 8004566:	fb01 f303 	mul.w	r3, r1, r3
 800456a:	4413      	add	r3, r2
 800456c:	3360      	adds	r3, #96	; 0x60
 800456e:	2202      	movs	r2, #2
 8004570:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	015a      	lsls	r2, r3, #5
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	4413      	add	r3, r2
 800457a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004588:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800458a:	68bb      	ldr	r3, [r7, #8]
 800458c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004590:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	015a      	lsls	r2, r3, #5
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	4413      	add	r3, r2
 800459a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800459e:	461a      	mov	r2, r3
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	6013      	str	r3, [r2, #0]
 80045a4:	e023      	b.n	80045ee <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80045a6:	687a      	ldr	r2, [r7, #4]
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	212c      	movs	r1, #44	; 0x2c
 80045ac:	fb01 f303 	mul.w	r3, r1, r3
 80045b0:	4413      	add	r3, r2
 80045b2:	3361      	adds	r3, #97	; 0x61
 80045b4:	781b      	ldrb	r3, [r3, #0]
 80045b6:	2b07      	cmp	r3, #7
 80045b8:	d119      	bne.n	80045ee <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 80045ba:	687a      	ldr	r2, [r7, #4]
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	212c      	movs	r1, #44	; 0x2c
 80045c0:	fb01 f303 	mul.w	r3, r1, r3
 80045c4:	4413      	add	r3, r2
 80045c6:	335c      	adds	r3, #92	; 0x5c
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	1c5a      	adds	r2, r3, #1
 80045cc:	6879      	ldr	r1, [r7, #4]
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	202c      	movs	r0, #44	; 0x2c
 80045d2:	fb00 f303 	mul.w	r3, r0, r3
 80045d6:	440b      	add	r3, r1
 80045d8:	335c      	adds	r3, #92	; 0x5c
 80045da:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80045dc:	687a      	ldr	r2, [r7, #4]
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	212c      	movs	r1, #44	; 0x2c
 80045e2:	fb01 f303 	mul.w	r3, r1, r3
 80045e6:	4413      	add	r3, r2
 80045e8:	3360      	adds	r3, #96	; 0x60
 80045ea:	2204      	movs	r2, #4
 80045ec:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	015a      	lsls	r2, r3, #5
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	4413      	add	r3, r2
 80045f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045fa:	461a      	mov	r2, r3
 80045fc:	2302      	movs	r3, #2
 80045fe:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	b2d9      	uxtb	r1, r3
 8004604:	687a      	ldr	r2, [r7, #4]
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	202c      	movs	r0, #44	; 0x2c
 800460a:	fb00 f303 	mul.w	r3, r0, r3
 800460e:	4413      	add	r3, r2
 8004610:	3360      	adds	r3, #96	; 0x60
 8004612:	781b      	ldrb	r3, [r3, #0]
 8004614:	461a      	mov	r2, r3
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	f007 f9e2 	bl	800b9e0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800461c:	e081      	b.n	8004722 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	015a      	lsls	r2, r3, #5
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	4413      	add	r3, r2
 8004626:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	f003 0310 	and.w	r3, r3, #16
 8004630:	2b10      	cmp	r3, #16
 8004632:	d176      	bne.n	8004722 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8004634:	687a      	ldr	r2, [r7, #4]
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	212c      	movs	r1, #44	; 0x2c
 800463a:	fb01 f303 	mul.w	r3, r1, r3
 800463e:	4413      	add	r3, r2
 8004640:	333f      	adds	r3, #63	; 0x3f
 8004642:	781b      	ldrb	r3, [r3, #0]
 8004644:	2b03      	cmp	r3, #3
 8004646:	d121      	bne.n	800468c <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004648:	687a      	ldr	r2, [r7, #4]
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	212c      	movs	r1, #44	; 0x2c
 800464e:	fb01 f303 	mul.w	r3, r1, r3
 8004652:	4413      	add	r3, r2
 8004654:	335c      	adds	r3, #92	; 0x5c
 8004656:	2200      	movs	r2, #0
 8004658:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	015a      	lsls	r2, r3, #5
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	4413      	add	r3, r2
 8004662:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004666:	68db      	ldr	r3, [r3, #12]
 8004668:	68fa      	ldr	r2, [r7, #12]
 800466a:	0151      	lsls	r1, r2, #5
 800466c:	693a      	ldr	r2, [r7, #16]
 800466e:	440a      	add	r2, r1
 8004670:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004674:	f043 0302 	orr.w	r3, r3, #2
 8004678:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	68fa      	ldr	r2, [r7, #12]
 8004680:	b2d2      	uxtb	r2, r2
 8004682:	4611      	mov	r1, r2
 8004684:	4618      	mov	r0, r3
 8004686:	f004 ffee 	bl	8009666 <USB_HC_Halt>
 800468a:	e041      	b.n	8004710 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800468c:	687a      	ldr	r2, [r7, #4]
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	212c      	movs	r1, #44	; 0x2c
 8004692:	fb01 f303 	mul.w	r3, r1, r3
 8004696:	4413      	add	r3, r2
 8004698:	333f      	adds	r3, #63	; 0x3f
 800469a:	781b      	ldrb	r3, [r3, #0]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d009      	beq.n	80046b4 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80046a0:	687a      	ldr	r2, [r7, #4]
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	212c      	movs	r1, #44	; 0x2c
 80046a6:	fb01 f303 	mul.w	r3, r1, r3
 80046aa:	4413      	add	r3, r2
 80046ac:	333f      	adds	r3, #63	; 0x3f
 80046ae:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80046b0:	2b02      	cmp	r3, #2
 80046b2:	d12d      	bne.n	8004710 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80046b4:	687a      	ldr	r2, [r7, #4]
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	212c      	movs	r1, #44	; 0x2c
 80046ba:	fb01 f303 	mul.w	r3, r1, r3
 80046be:	4413      	add	r3, r2
 80046c0:	335c      	adds	r3, #92	; 0x5c
 80046c2:	2200      	movs	r2, #0
 80046c4:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	691b      	ldr	r3, [r3, #16]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d120      	bne.n	8004710 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 80046ce:	687a      	ldr	r2, [r7, #4]
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	212c      	movs	r1, #44	; 0x2c
 80046d4:	fb01 f303 	mul.w	r3, r1, r3
 80046d8:	4413      	add	r3, r2
 80046da:	3361      	adds	r3, #97	; 0x61
 80046dc:	2203      	movs	r2, #3
 80046de:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	015a      	lsls	r2, r3, #5
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	4413      	add	r3, r2
 80046e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046ec:	68db      	ldr	r3, [r3, #12]
 80046ee:	68fa      	ldr	r2, [r7, #12]
 80046f0:	0151      	lsls	r1, r2, #5
 80046f2:	693a      	ldr	r2, [r7, #16]
 80046f4:	440a      	add	r2, r1
 80046f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80046fa:	f043 0302 	orr.w	r3, r3, #2
 80046fe:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	68fa      	ldr	r2, [r7, #12]
 8004706:	b2d2      	uxtb	r2, r2
 8004708:	4611      	mov	r1, r2
 800470a:	4618      	mov	r0, r3
 800470c:	f004 ffab 	bl	8009666 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	015a      	lsls	r2, r3, #5
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	4413      	add	r3, r2
 8004718:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800471c:	461a      	mov	r2, r3
 800471e:	2310      	movs	r3, #16
 8004720:	6093      	str	r3, [r2, #8]
}
 8004722:	bf00      	nop
 8004724:	3718      	adds	r7, #24
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}

0800472a <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800472a:	b580      	push	{r7, lr}
 800472c:	b088      	sub	sp, #32
 800472e:	af00      	add	r7, sp, #0
 8004730:	6078      	str	r0, [r7, #4]
 8004732:	460b      	mov	r3, r1
 8004734:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800473c:	69fb      	ldr	r3, [r7, #28]
 800473e:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8004740:	78fb      	ldrb	r3, [r7, #3]
 8004742:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8004744:	697b      	ldr	r3, [r7, #20]
 8004746:	015a      	lsls	r2, r3, #5
 8004748:	69bb      	ldr	r3, [r7, #24]
 800474a:	4413      	add	r3, r2
 800474c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004750:	689b      	ldr	r3, [r3, #8]
 8004752:	f003 0304 	and.w	r3, r3, #4
 8004756:	2b04      	cmp	r3, #4
 8004758:	d119      	bne.n	800478e <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	015a      	lsls	r2, r3, #5
 800475e:	69bb      	ldr	r3, [r7, #24]
 8004760:	4413      	add	r3, r2
 8004762:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004766:	461a      	mov	r2, r3
 8004768:	2304      	movs	r3, #4
 800476a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800476c:	697b      	ldr	r3, [r7, #20]
 800476e:	015a      	lsls	r2, r3, #5
 8004770:	69bb      	ldr	r3, [r7, #24]
 8004772:	4413      	add	r3, r2
 8004774:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004778:	68db      	ldr	r3, [r3, #12]
 800477a:	697a      	ldr	r2, [r7, #20]
 800477c:	0151      	lsls	r1, r2, #5
 800477e:	69ba      	ldr	r2, [r7, #24]
 8004780:	440a      	add	r2, r1
 8004782:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004786:	f043 0302 	orr.w	r3, r3, #2
 800478a:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 800478c:	e3ca      	b.n	8004f24 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	015a      	lsls	r2, r3, #5
 8004792:	69bb      	ldr	r3, [r7, #24]
 8004794:	4413      	add	r3, r2
 8004796:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800479a:	689b      	ldr	r3, [r3, #8]
 800479c:	f003 0320 	and.w	r3, r3, #32
 80047a0:	2b20      	cmp	r3, #32
 80047a2:	d13e      	bne.n	8004822 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	015a      	lsls	r2, r3, #5
 80047a8:	69bb      	ldr	r3, [r7, #24]
 80047aa:	4413      	add	r3, r2
 80047ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047b0:	461a      	mov	r2, r3
 80047b2:	2320      	movs	r3, #32
 80047b4:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80047b6:	687a      	ldr	r2, [r7, #4]
 80047b8:	697b      	ldr	r3, [r7, #20]
 80047ba:	212c      	movs	r1, #44	; 0x2c
 80047bc:	fb01 f303 	mul.w	r3, r1, r3
 80047c0:	4413      	add	r3, r2
 80047c2:	333d      	adds	r3, #61	; 0x3d
 80047c4:	781b      	ldrb	r3, [r3, #0]
 80047c6:	2b01      	cmp	r3, #1
 80047c8:	f040 83ac 	bne.w	8004f24 <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 80047cc:	687a      	ldr	r2, [r7, #4]
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	212c      	movs	r1, #44	; 0x2c
 80047d2:	fb01 f303 	mul.w	r3, r1, r3
 80047d6:	4413      	add	r3, r2
 80047d8:	333d      	adds	r3, #61	; 0x3d
 80047da:	2200      	movs	r2, #0
 80047dc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80047de:	687a      	ldr	r2, [r7, #4]
 80047e0:	697b      	ldr	r3, [r7, #20]
 80047e2:	212c      	movs	r1, #44	; 0x2c
 80047e4:	fb01 f303 	mul.w	r3, r1, r3
 80047e8:	4413      	add	r3, r2
 80047ea:	3360      	adds	r3, #96	; 0x60
 80047ec:	2202      	movs	r2, #2
 80047ee:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80047f0:	697b      	ldr	r3, [r7, #20]
 80047f2:	015a      	lsls	r2, r3, #5
 80047f4:	69bb      	ldr	r3, [r7, #24]
 80047f6:	4413      	add	r3, r2
 80047f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047fc:	68db      	ldr	r3, [r3, #12]
 80047fe:	697a      	ldr	r2, [r7, #20]
 8004800:	0151      	lsls	r1, r2, #5
 8004802:	69ba      	ldr	r2, [r7, #24]
 8004804:	440a      	add	r2, r1
 8004806:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800480a:	f043 0302 	orr.w	r3, r3, #2
 800480e:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	697a      	ldr	r2, [r7, #20]
 8004816:	b2d2      	uxtb	r2, r2
 8004818:	4611      	mov	r1, r2
 800481a:	4618      	mov	r0, r3
 800481c:	f004 ff23 	bl	8009666 <USB_HC_Halt>
}
 8004820:	e380      	b.n	8004f24 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	015a      	lsls	r2, r3, #5
 8004826:	69bb      	ldr	r3, [r7, #24]
 8004828:	4413      	add	r3, r2
 800482a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800482e:	689b      	ldr	r3, [r3, #8]
 8004830:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004834:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004838:	d122      	bne.n	8004880 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	015a      	lsls	r2, r3, #5
 800483e:	69bb      	ldr	r3, [r7, #24]
 8004840:	4413      	add	r3, r2
 8004842:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004846:	68db      	ldr	r3, [r3, #12]
 8004848:	697a      	ldr	r2, [r7, #20]
 800484a:	0151      	lsls	r1, r2, #5
 800484c:	69ba      	ldr	r2, [r7, #24]
 800484e:	440a      	add	r2, r1
 8004850:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004854:	f043 0302 	orr.w	r3, r3, #2
 8004858:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	697a      	ldr	r2, [r7, #20]
 8004860:	b2d2      	uxtb	r2, r2
 8004862:	4611      	mov	r1, r2
 8004864:	4618      	mov	r0, r3
 8004866:	f004 fefe 	bl	8009666 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	015a      	lsls	r2, r3, #5
 800486e:	69bb      	ldr	r3, [r7, #24]
 8004870:	4413      	add	r3, r2
 8004872:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004876:	461a      	mov	r2, r3
 8004878:	f44f 7300 	mov.w	r3, #512	; 0x200
 800487c:	6093      	str	r3, [r2, #8]
}
 800487e:	e351      	b.n	8004f24 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	015a      	lsls	r2, r3, #5
 8004884:	69bb      	ldr	r3, [r7, #24]
 8004886:	4413      	add	r3, r2
 8004888:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800488c:	689b      	ldr	r3, [r3, #8]
 800488e:	f003 0301 	and.w	r3, r3, #1
 8004892:	2b01      	cmp	r3, #1
 8004894:	d150      	bne.n	8004938 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004896:	687a      	ldr	r2, [r7, #4]
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	212c      	movs	r1, #44	; 0x2c
 800489c:	fb01 f303 	mul.w	r3, r1, r3
 80048a0:	4413      	add	r3, r2
 80048a2:	335c      	adds	r3, #92	; 0x5c
 80048a4:	2200      	movs	r2, #0
 80048a6:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	015a      	lsls	r2, r3, #5
 80048ac:	69bb      	ldr	r3, [r7, #24]
 80048ae:	4413      	add	r3, r2
 80048b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048b4:	689b      	ldr	r3, [r3, #8]
 80048b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048ba:	2b40      	cmp	r3, #64	; 0x40
 80048bc:	d111      	bne.n	80048e2 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 80048be:	687a      	ldr	r2, [r7, #4]
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	212c      	movs	r1, #44	; 0x2c
 80048c4:	fb01 f303 	mul.w	r3, r1, r3
 80048c8:	4413      	add	r3, r2
 80048ca:	333d      	adds	r3, #61	; 0x3d
 80048cc:	2201      	movs	r2, #1
 80048ce:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80048d0:	697b      	ldr	r3, [r7, #20]
 80048d2:	015a      	lsls	r2, r3, #5
 80048d4:	69bb      	ldr	r3, [r7, #24]
 80048d6:	4413      	add	r3, r2
 80048d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048dc:	461a      	mov	r2, r3
 80048de:	2340      	movs	r3, #64	; 0x40
 80048e0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	015a      	lsls	r2, r3, #5
 80048e6:	69bb      	ldr	r3, [r7, #24]
 80048e8:	4413      	add	r3, r2
 80048ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048ee:	68db      	ldr	r3, [r3, #12]
 80048f0:	697a      	ldr	r2, [r7, #20]
 80048f2:	0151      	lsls	r1, r2, #5
 80048f4:	69ba      	ldr	r2, [r7, #24]
 80048f6:	440a      	add	r2, r1
 80048f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80048fc:	f043 0302 	orr.w	r3, r3, #2
 8004900:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	697a      	ldr	r2, [r7, #20]
 8004908:	b2d2      	uxtb	r2, r2
 800490a:	4611      	mov	r1, r2
 800490c:	4618      	mov	r0, r3
 800490e:	f004 feaa 	bl	8009666 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	015a      	lsls	r2, r3, #5
 8004916:	69bb      	ldr	r3, [r7, #24]
 8004918:	4413      	add	r3, r2
 800491a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800491e:	461a      	mov	r2, r3
 8004920:	2301      	movs	r3, #1
 8004922:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004924:	687a      	ldr	r2, [r7, #4]
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	212c      	movs	r1, #44	; 0x2c
 800492a:	fb01 f303 	mul.w	r3, r1, r3
 800492e:	4413      	add	r3, r2
 8004930:	3361      	adds	r3, #97	; 0x61
 8004932:	2201      	movs	r2, #1
 8004934:	701a      	strb	r2, [r3, #0]
}
 8004936:	e2f5      	b.n	8004f24 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004938:	697b      	ldr	r3, [r7, #20]
 800493a:	015a      	lsls	r2, r3, #5
 800493c:	69bb      	ldr	r3, [r7, #24]
 800493e:	4413      	add	r3, r2
 8004940:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004944:	689b      	ldr	r3, [r3, #8]
 8004946:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800494a:	2b40      	cmp	r3, #64	; 0x40
 800494c:	d13c      	bne.n	80049c8 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 800494e:	687a      	ldr	r2, [r7, #4]
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	212c      	movs	r1, #44	; 0x2c
 8004954:	fb01 f303 	mul.w	r3, r1, r3
 8004958:	4413      	add	r3, r2
 800495a:	3361      	adds	r3, #97	; 0x61
 800495c:	2204      	movs	r2, #4
 800495e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8004960:	687a      	ldr	r2, [r7, #4]
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	212c      	movs	r1, #44	; 0x2c
 8004966:	fb01 f303 	mul.w	r3, r1, r3
 800496a:	4413      	add	r3, r2
 800496c:	333d      	adds	r3, #61	; 0x3d
 800496e:	2201      	movs	r2, #1
 8004970:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004972:	687a      	ldr	r2, [r7, #4]
 8004974:	697b      	ldr	r3, [r7, #20]
 8004976:	212c      	movs	r1, #44	; 0x2c
 8004978:	fb01 f303 	mul.w	r3, r1, r3
 800497c:	4413      	add	r3, r2
 800497e:	335c      	adds	r3, #92	; 0x5c
 8004980:	2200      	movs	r2, #0
 8004982:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004984:	697b      	ldr	r3, [r7, #20]
 8004986:	015a      	lsls	r2, r3, #5
 8004988:	69bb      	ldr	r3, [r7, #24]
 800498a:	4413      	add	r3, r2
 800498c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004990:	68db      	ldr	r3, [r3, #12]
 8004992:	697a      	ldr	r2, [r7, #20]
 8004994:	0151      	lsls	r1, r2, #5
 8004996:	69ba      	ldr	r2, [r7, #24]
 8004998:	440a      	add	r2, r1
 800499a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800499e:	f043 0302 	orr.w	r3, r3, #2
 80049a2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	697a      	ldr	r2, [r7, #20]
 80049aa:	b2d2      	uxtb	r2, r2
 80049ac:	4611      	mov	r1, r2
 80049ae:	4618      	mov	r0, r3
 80049b0:	f004 fe59 	bl	8009666 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80049b4:	697b      	ldr	r3, [r7, #20]
 80049b6:	015a      	lsls	r2, r3, #5
 80049b8:	69bb      	ldr	r3, [r7, #24]
 80049ba:	4413      	add	r3, r2
 80049bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049c0:	461a      	mov	r2, r3
 80049c2:	2340      	movs	r3, #64	; 0x40
 80049c4:	6093      	str	r3, [r2, #8]
}
 80049c6:	e2ad      	b.n	8004f24 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	015a      	lsls	r2, r3, #5
 80049cc:	69bb      	ldr	r3, [r7, #24]
 80049ce:	4413      	add	r3, r2
 80049d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049d4:	689b      	ldr	r3, [r3, #8]
 80049d6:	f003 0308 	and.w	r3, r3, #8
 80049da:	2b08      	cmp	r3, #8
 80049dc:	d12a      	bne.n	8004a34 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	015a      	lsls	r2, r3, #5
 80049e2:	69bb      	ldr	r3, [r7, #24]
 80049e4:	4413      	add	r3, r2
 80049e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049ea:	461a      	mov	r2, r3
 80049ec:	2308      	movs	r3, #8
 80049ee:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80049f0:	697b      	ldr	r3, [r7, #20]
 80049f2:	015a      	lsls	r2, r3, #5
 80049f4:	69bb      	ldr	r3, [r7, #24]
 80049f6:	4413      	add	r3, r2
 80049f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049fc:	68db      	ldr	r3, [r3, #12]
 80049fe:	697a      	ldr	r2, [r7, #20]
 8004a00:	0151      	lsls	r1, r2, #5
 8004a02:	69ba      	ldr	r2, [r7, #24]
 8004a04:	440a      	add	r2, r1
 8004a06:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004a0a:	f043 0302 	orr.w	r3, r3, #2
 8004a0e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	697a      	ldr	r2, [r7, #20]
 8004a16:	b2d2      	uxtb	r2, r2
 8004a18:	4611      	mov	r1, r2
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	f004 fe23 	bl	8009666 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8004a20:	687a      	ldr	r2, [r7, #4]
 8004a22:	697b      	ldr	r3, [r7, #20]
 8004a24:	212c      	movs	r1, #44	; 0x2c
 8004a26:	fb01 f303 	mul.w	r3, r1, r3
 8004a2a:	4413      	add	r3, r2
 8004a2c:	3361      	adds	r3, #97	; 0x61
 8004a2e:	2205      	movs	r2, #5
 8004a30:	701a      	strb	r2, [r3, #0]
}
 8004a32:	e277      	b.n	8004f24 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004a34:	697b      	ldr	r3, [r7, #20]
 8004a36:	015a      	lsls	r2, r3, #5
 8004a38:	69bb      	ldr	r3, [r7, #24]
 8004a3a:	4413      	add	r3, r2
 8004a3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a40:	689b      	ldr	r3, [r3, #8]
 8004a42:	f003 0310 	and.w	r3, r3, #16
 8004a46:	2b10      	cmp	r3, #16
 8004a48:	d150      	bne.n	8004aec <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004a4a:	687a      	ldr	r2, [r7, #4]
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	212c      	movs	r1, #44	; 0x2c
 8004a50:	fb01 f303 	mul.w	r3, r1, r3
 8004a54:	4413      	add	r3, r2
 8004a56:	335c      	adds	r3, #92	; 0x5c
 8004a58:	2200      	movs	r2, #0
 8004a5a:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8004a5c:	687a      	ldr	r2, [r7, #4]
 8004a5e:	697b      	ldr	r3, [r7, #20]
 8004a60:	212c      	movs	r1, #44	; 0x2c
 8004a62:	fb01 f303 	mul.w	r3, r1, r3
 8004a66:	4413      	add	r3, r2
 8004a68:	3361      	adds	r3, #97	; 0x61
 8004a6a:	2203      	movs	r2, #3
 8004a6c:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8004a6e:	687a      	ldr	r2, [r7, #4]
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	212c      	movs	r1, #44	; 0x2c
 8004a74:	fb01 f303 	mul.w	r3, r1, r3
 8004a78:	4413      	add	r3, r2
 8004a7a:	333d      	adds	r3, #61	; 0x3d
 8004a7c:	781b      	ldrb	r3, [r3, #0]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d112      	bne.n	8004aa8 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8004a82:	687a      	ldr	r2, [r7, #4]
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	212c      	movs	r1, #44	; 0x2c
 8004a88:	fb01 f303 	mul.w	r3, r1, r3
 8004a8c:	4413      	add	r3, r2
 8004a8e:	333c      	adds	r3, #60	; 0x3c
 8004a90:	781b      	ldrb	r3, [r3, #0]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d108      	bne.n	8004aa8 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8004a96:	687a      	ldr	r2, [r7, #4]
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	212c      	movs	r1, #44	; 0x2c
 8004a9c:	fb01 f303 	mul.w	r3, r1, r3
 8004aa0:	4413      	add	r3, r2
 8004aa2:	333d      	adds	r3, #61	; 0x3d
 8004aa4:	2201      	movs	r2, #1
 8004aa6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	015a      	lsls	r2, r3, #5
 8004aac:	69bb      	ldr	r3, [r7, #24]
 8004aae:	4413      	add	r3, r2
 8004ab0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ab4:	68db      	ldr	r3, [r3, #12]
 8004ab6:	697a      	ldr	r2, [r7, #20]
 8004ab8:	0151      	lsls	r1, r2, #5
 8004aba:	69ba      	ldr	r2, [r7, #24]
 8004abc:	440a      	add	r2, r1
 8004abe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004ac2:	f043 0302 	orr.w	r3, r3, #2
 8004ac6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	697a      	ldr	r2, [r7, #20]
 8004ace:	b2d2      	uxtb	r2, r2
 8004ad0:	4611      	mov	r1, r2
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	f004 fdc7 	bl	8009666 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	015a      	lsls	r2, r3, #5
 8004adc:	69bb      	ldr	r3, [r7, #24]
 8004ade:	4413      	add	r3, r2
 8004ae0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ae4:	461a      	mov	r2, r3
 8004ae6:	2310      	movs	r3, #16
 8004ae8:	6093      	str	r3, [r2, #8]
}
 8004aea:	e21b      	b.n	8004f24 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	015a      	lsls	r2, r3, #5
 8004af0:	69bb      	ldr	r3, [r7, #24]
 8004af2:	4413      	add	r3, r2
 8004af4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004af8:	689b      	ldr	r3, [r3, #8]
 8004afa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004afe:	2b80      	cmp	r3, #128	; 0x80
 8004b00:	d174      	bne.n	8004bec <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	691b      	ldr	r3, [r3, #16]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d121      	bne.n	8004b4e <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8004b0a:	687a      	ldr	r2, [r7, #4]
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	212c      	movs	r1, #44	; 0x2c
 8004b10:	fb01 f303 	mul.w	r3, r1, r3
 8004b14:	4413      	add	r3, r2
 8004b16:	3361      	adds	r3, #97	; 0x61
 8004b18:	2206      	movs	r2, #6
 8004b1a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004b1c:	697b      	ldr	r3, [r7, #20]
 8004b1e:	015a      	lsls	r2, r3, #5
 8004b20:	69bb      	ldr	r3, [r7, #24]
 8004b22:	4413      	add	r3, r2
 8004b24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b28:	68db      	ldr	r3, [r3, #12]
 8004b2a:	697a      	ldr	r2, [r7, #20]
 8004b2c:	0151      	lsls	r1, r2, #5
 8004b2e:	69ba      	ldr	r2, [r7, #24]
 8004b30:	440a      	add	r2, r1
 8004b32:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004b36:	f043 0302 	orr.w	r3, r3, #2
 8004b3a:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	697a      	ldr	r2, [r7, #20]
 8004b42:	b2d2      	uxtb	r2, r2
 8004b44:	4611      	mov	r1, r2
 8004b46:	4618      	mov	r0, r3
 8004b48:	f004 fd8d 	bl	8009666 <USB_HC_Halt>
 8004b4c:	e044      	b.n	8004bd8 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 8004b4e:	687a      	ldr	r2, [r7, #4]
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	212c      	movs	r1, #44	; 0x2c
 8004b54:	fb01 f303 	mul.w	r3, r1, r3
 8004b58:	4413      	add	r3, r2
 8004b5a:	335c      	adds	r3, #92	; 0x5c
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	1c5a      	adds	r2, r3, #1
 8004b60:	6879      	ldr	r1, [r7, #4]
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	202c      	movs	r0, #44	; 0x2c
 8004b66:	fb00 f303 	mul.w	r3, r0, r3
 8004b6a:	440b      	add	r3, r1
 8004b6c:	335c      	adds	r3, #92	; 0x5c
 8004b6e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004b70:	687a      	ldr	r2, [r7, #4]
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	212c      	movs	r1, #44	; 0x2c
 8004b76:	fb01 f303 	mul.w	r3, r1, r3
 8004b7a:	4413      	add	r3, r2
 8004b7c:	335c      	adds	r3, #92	; 0x5c
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	2b02      	cmp	r3, #2
 8004b82:	d920      	bls.n	8004bc6 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004b84:	687a      	ldr	r2, [r7, #4]
 8004b86:	697b      	ldr	r3, [r7, #20]
 8004b88:	212c      	movs	r1, #44	; 0x2c
 8004b8a:	fb01 f303 	mul.w	r3, r1, r3
 8004b8e:	4413      	add	r3, r2
 8004b90:	335c      	adds	r3, #92	; 0x5c
 8004b92:	2200      	movs	r2, #0
 8004b94:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004b96:	687a      	ldr	r2, [r7, #4]
 8004b98:	697b      	ldr	r3, [r7, #20]
 8004b9a:	212c      	movs	r1, #44	; 0x2c
 8004b9c:	fb01 f303 	mul.w	r3, r1, r3
 8004ba0:	4413      	add	r3, r2
 8004ba2:	3360      	adds	r3, #96	; 0x60
 8004ba4:	2204      	movs	r2, #4
 8004ba6:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 8004ba8:	697b      	ldr	r3, [r7, #20]
 8004baa:	b2d9      	uxtb	r1, r3
 8004bac:	687a      	ldr	r2, [r7, #4]
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	202c      	movs	r0, #44	; 0x2c
 8004bb2:	fb00 f303 	mul.w	r3, r0, r3
 8004bb6:	4413      	add	r3, r2
 8004bb8:	3360      	adds	r3, #96	; 0x60
 8004bba:	781b      	ldrb	r3, [r3, #0]
 8004bbc:	461a      	mov	r2, r3
 8004bbe:	6878      	ldr	r0, [r7, #4]
 8004bc0:	f006 ff0e 	bl	800b9e0 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004bc4:	e008      	b.n	8004bd8 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004bc6:	687a      	ldr	r2, [r7, #4]
 8004bc8:	697b      	ldr	r3, [r7, #20]
 8004bca:	212c      	movs	r1, #44	; 0x2c
 8004bcc:	fb01 f303 	mul.w	r3, r1, r3
 8004bd0:	4413      	add	r3, r2
 8004bd2:	3360      	adds	r3, #96	; 0x60
 8004bd4:	2202      	movs	r2, #2
 8004bd6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	015a      	lsls	r2, r3, #5
 8004bdc:	69bb      	ldr	r3, [r7, #24]
 8004bde:	4413      	add	r3, r2
 8004be0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004be4:	461a      	mov	r2, r3
 8004be6:	2380      	movs	r3, #128	; 0x80
 8004be8:	6093      	str	r3, [r2, #8]
}
 8004bea:	e19b      	b.n	8004f24 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	015a      	lsls	r2, r3, #5
 8004bf0:	69bb      	ldr	r3, [r7, #24]
 8004bf2:	4413      	add	r3, r2
 8004bf4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bf8:	689b      	ldr	r3, [r3, #8]
 8004bfa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bfe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c02:	d134      	bne.n	8004c6e <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	015a      	lsls	r2, r3, #5
 8004c08:	69bb      	ldr	r3, [r7, #24]
 8004c0a:	4413      	add	r3, r2
 8004c0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c10:	68db      	ldr	r3, [r3, #12]
 8004c12:	697a      	ldr	r2, [r7, #20]
 8004c14:	0151      	lsls	r1, r2, #5
 8004c16:	69ba      	ldr	r2, [r7, #24]
 8004c18:	440a      	add	r2, r1
 8004c1a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004c1e:	f043 0302 	orr.w	r3, r3, #2
 8004c22:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	697a      	ldr	r2, [r7, #20]
 8004c2a:	b2d2      	uxtb	r2, r2
 8004c2c:	4611      	mov	r1, r2
 8004c2e:	4618      	mov	r0, r3
 8004c30:	f004 fd19 	bl	8009666 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004c34:	697b      	ldr	r3, [r7, #20]
 8004c36:	015a      	lsls	r2, r3, #5
 8004c38:	69bb      	ldr	r3, [r7, #24]
 8004c3a:	4413      	add	r3, r2
 8004c3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c40:	461a      	mov	r2, r3
 8004c42:	2310      	movs	r3, #16
 8004c44:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	015a      	lsls	r2, r3, #5
 8004c4a:	69bb      	ldr	r3, [r7, #24]
 8004c4c:	4413      	add	r3, r2
 8004c4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c52:	461a      	mov	r2, r3
 8004c54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c58:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8004c5a:	687a      	ldr	r2, [r7, #4]
 8004c5c:	697b      	ldr	r3, [r7, #20]
 8004c5e:	212c      	movs	r1, #44	; 0x2c
 8004c60:	fb01 f303 	mul.w	r3, r1, r3
 8004c64:	4413      	add	r3, r2
 8004c66:	3361      	adds	r3, #97	; 0x61
 8004c68:	2208      	movs	r2, #8
 8004c6a:	701a      	strb	r2, [r3, #0]
}
 8004c6c:	e15a      	b.n	8004f24 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	015a      	lsls	r2, r3, #5
 8004c72:	69bb      	ldr	r3, [r7, #24]
 8004c74:	4413      	add	r3, r2
 8004c76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c7a:	689b      	ldr	r3, [r3, #8]
 8004c7c:	f003 0302 	and.w	r3, r3, #2
 8004c80:	2b02      	cmp	r3, #2
 8004c82:	f040 814f 	bne.w	8004f24 <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8004c86:	697b      	ldr	r3, [r7, #20]
 8004c88:	015a      	lsls	r2, r3, #5
 8004c8a:	69bb      	ldr	r3, [r7, #24]
 8004c8c:	4413      	add	r3, r2
 8004c8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c92:	68db      	ldr	r3, [r3, #12]
 8004c94:	697a      	ldr	r2, [r7, #20]
 8004c96:	0151      	lsls	r1, r2, #5
 8004c98:	69ba      	ldr	r2, [r7, #24]
 8004c9a:	440a      	add	r2, r1
 8004c9c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004ca0:	f023 0302 	bic.w	r3, r3, #2
 8004ca4:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004ca6:	687a      	ldr	r2, [r7, #4]
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	212c      	movs	r1, #44	; 0x2c
 8004cac:	fb01 f303 	mul.w	r3, r1, r3
 8004cb0:	4413      	add	r3, r2
 8004cb2:	3361      	adds	r3, #97	; 0x61
 8004cb4:	781b      	ldrb	r3, [r3, #0]
 8004cb6:	2b01      	cmp	r3, #1
 8004cb8:	d17d      	bne.n	8004db6 <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8004cba:	687a      	ldr	r2, [r7, #4]
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	212c      	movs	r1, #44	; 0x2c
 8004cc0:	fb01 f303 	mul.w	r3, r1, r3
 8004cc4:	4413      	add	r3, r2
 8004cc6:	3360      	adds	r3, #96	; 0x60
 8004cc8:	2201      	movs	r2, #1
 8004cca:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004ccc:	687a      	ldr	r2, [r7, #4]
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	212c      	movs	r1, #44	; 0x2c
 8004cd2:	fb01 f303 	mul.w	r3, r1, r3
 8004cd6:	4413      	add	r3, r2
 8004cd8:	333f      	adds	r3, #63	; 0x3f
 8004cda:	781b      	ldrb	r3, [r3, #0]
 8004cdc:	2b02      	cmp	r3, #2
 8004cde:	d00a      	beq.n	8004cf6 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8004ce0:	687a      	ldr	r2, [r7, #4]
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	212c      	movs	r1, #44	; 0x2c
 8004ce6:	fb01 f303 	mul.w	r3, r1, r3
 8004cea:	4413      	add	r3, r2
 8004cec:	333f      	adds	r3, #63	; 0x3f
 8004cee:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004cf0:	2b03      	cmp	r3, #3
 8004cf2:	f040 8100 	bne.w	8004ef6 <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	691b      	ldr	r3, [r3, #16]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d113      	bne.n	8004d26 <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8004cfe:	687a      	ldr	r2, [r7, #4]
 8004d00:	697b      	ldr	r3, [r7, #20]
 8004d02:	212c      	movs	r1, #44	; 0x2c
 8004d04:	fb01 f303 	mul.w	r3, r1, r3
 8004d08:	4413      	add	r3, r2
 8004d0a:	3355      	adds	r3, #85	; 0x55
 8004d0c:	781b      	ldrb	r3, [r3, #0]
 8004d0e:	f083 0301 	eor.w	r3, r3, #1
 8004d12:	b2d8      	uxtb	r0, r3
 8004d14:	687a      	ldr	r2, [r7, #4]
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	212c      	movs	r1, #44	; 0x2c
 8004d1a:	fb01 f303 	mul.w	r3, r1, r3
 8004d1e:	4413      	add	r3, r2
 8004d20:	3355      	adds	r3, #85	; 0x55
 8004d22:	4602      	mov	r2, r0
 8004d24:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	691b      	ldr	r3, [r3, #16]
 8004d2a:	2b01      	cmp	r3, #1
 8004d2c:	f040 80e3 	bne.w	8004ef6 <HCD_HC_OUT_IRQHandler+0x7cc>
 8004d30:	687a      	ldr	r2, [r7, #4]
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	212c      	movs	r1, #44	; 0x2c
 8004d36:	fb01 f303 	mul.w	r3, r1, r3
 8004d3a:	4413      	add	r3, r2
 8004d3c:	334c      	adds	r3, #76	; 0x4c
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	f000 80d8 	beq.w	8004ef6 <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8004d46:	687a      	ldr	r2, [r7, #4]
 8004d48:	697b      	ldr	r3, [r7, #20]
 8004d4a:	212c      	movs	r1, #44	; 0x2c
 8004d4c:	fb01 f303 	mul.w	r3, r1, r3
 8004d50:	4413      	add	r3, r2
 8004d52:	334c      	adds	r3, #76	; 0x4c
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	6879      	ldr	r1, [r7, #4]
 8004d58:	697a      	ldr	r2, [r7, #20]
 8004d5a:	202c      	movs	r0, #44	; 0x2c
 8004d5c:	fb00 f202 	mul.w	r2, r0, r2
 8004d60:	440a      	add	r2, r1
 8004d62:	3240      	adds	r2, #64	; 0x40
 8004d64:	8812      	ldrh	r2, [r2, #0]
 8004d66:	4413      	add	r3, r2
 8004d68:	3b01      	subs	r3, #1
 8004d6a:	6879      	ldr	r1, [r7, #4]
 8004d6c:	697a      	ldr	r2, [r7, #20]
 8004d6e:	202c      	movs	r0, #44	; 0x2c
 8004d70:	fb00 f202 	mul.w	r2, r0, r2
 8004d74:	440a      	add	r2, r1
 8004d76:	3240      	adds	r2, #64	; 0x40
 8004d78:	8812      	ldrh	r2, [r2, #0]
 8004d7a:	fbb3 f3f2 	udiv	r3, r3, r2
 8004d7e:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	f003 0301 	and.w	r3, r3, #1
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	f000 80b5 	beq.w	8004ef6 <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8004d8c:	687a      	ldr	r2, [r7, #4]
 8004d8e:	697b      	ldr	r3, [r7, #20]
 8004d90:	212c      	movs	r1, #44	; 0x2c
 8004d92:	fb01 f303 	mul.w	r3, r1, r3
 8004d96:	4413      	add	r3, r2
 8004d98:	3355      	adds	r3, #85	; 0x55
 8004d9a:	781b      	ldrb	r3, [r3, #0]
 8004d9c:	f083 0301 	eor.w	r3, r3, #1
 8004da0:	b2d8      	uxtb	r0, r3
 8004da2:	687a      	ldr	r2, [r7, #4]
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	212c      	movs	r1, #44	; 0x2c
 8004da8:	fb01 f303 	mul.w	r3, r1, r3
 8004dac:	4413      	add	r3, r2
 8004dae:	3355      	adds	r3, #85	; 0x55
 8004db0:	4602      	mov	r2, r0
 8004db2:	701a      	strb	r2, [r3, #0]
 8004db4:	e09f      	b.n	8004ef6 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004db6:	687a      	ldr	r2, [r7, #4]
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	212c      	movs	r1, #44	; 0x2c
 8004dbc:	fb01 f303 	mul.w	r3, r1, r3
 8004dc0:	4413      	add	r3, r2
 8004dc2:	3361      	adds	r3, #97	; 0x61
 8004dc4:	781b      	ldrb	r3, [r3, #0]
 8004dc6:	2b03      	cmp	r3, #3
 8004dc8:	d109      	bne.n	8004dde <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004dca:	687a      	ldr	r2, [r7, #4]
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	212c      	movs	r1, #44	; 0x2c
 8004dd0:	fb01 f303 	mul.w	r3, r1, r3
 8004dd4:	4413      	add	r3, r2
 8004dd6:	3360      	adds	r3, #96	; 0x60
 8004dd8:	2202      	movs	r2, #2
 8004dda:	701a      	strb	r2, [r3, #0]
 8004ddc:	e08b      	b.n	8004ef6 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8004dde:	687a      	ldr	r2, [r7, #4]
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	212c      	movs	r1, #44	; 0x2c
 8004de4:	fb01 f303 	mul.w	r3, r1, r3
 8004de8:	4413      	add	r3, r2
 8004dea:	3361      	adds	r3, #97	; 0x61
 8004dec:	781b      	ldrb	r3, [r3, #0]
 8004dee:	2b04      	cmp	r3, #4
 8004df0:	d109      	bne.n	8004e06 <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004df2:	687a      	ldr	r2, [r7, #4]
 8004df4:	697b      	ldr	r3, [r7, #20]
 8004df6:	212c      	movs	r1, #44	; 0x2c
 8004df8:	fb01 f303 	mul.w	r3, r1, r3
 8004dfc:	4413      	add	r3, r2
 8004dfe:	3360      	adds	r3, #96	; 0x60
 8004e00:	2202      	movs	r2, #2
 8004e02:	701a      	strb	r2, [r3, #0]
 8004e04:	e077      	b.n	8004ef6 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004e06:	687a      	ldr	r2, [r7, #4]
 8004e08:	697b      	ldr	r3, [r7, #20]
 8004e0a:	212c      	movs	r1, #44	; 0x2c
 8004e0c:	fb01 f303 	mul.w	r3, r1, r3
 8004e10:	4413      	add	r3, r2
 8004e12:	3361      	adds	r3, #97	; 0x61
 8004e14:	781b      	ldrb	r3, [r3, #0]
 8004e16:	2b05      	cmp	r3, #5
 8004e18:	d109      	bne.n	8004e2e <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8004e1a:	687a      	ldr	r2, [r7, #4]
 8004e1c:	697b      	ldr	r3, [r7, #20]
 8004e1e:	212c      	movs	r1, #44	; 0x2c
 8004e20:	fb01 f303 	mul.w	r3, r1, r3
 8004e24:	4413      	add	r3, r2
 8004e26:	3360      	adds	r3, #96	; 0x60
 8004e28:	2205      	movs	r2, #5
 8004e2a:	701a      	strb	r2, [r3, #0]
 8004e2c:	e063      	b.n	8004ef6 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004e2e:	687a      	ldr	r2, [r7, #4]
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	212c      	movs	r1, #44	; 0x2c
 8004e34:	fb01 f303 	mul.w	r3, r1, r3
 8004e38:	4413      	add	r3, r2
 8004e3a:	3361      	adds	r3, #97	; 0x61
 8004e3c:	781b      	ldrb	r3, [r3, #0]
 8004e3e:	2b06      	cmp	r3, #6
 8004e40:	d009      	beq.n	8004e56 <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004e42:	687a      	ldr	r2, [r7, #4]
 8004e44:	697b      	ldr	r3, [r7, #20]
 8004e46:	212c      	movs	r1, #44	; 0x2c
 8004e48:	fb01 f303 	mul.w	r3, r1, r3
 8004e4c:	4413      	add	r3, r2
 8004e4e:	3361      	adds	r3, #97	; 0x61
 8004e50:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004e52:	2b08      	cmp	r3, #8
 8004e54:	d14f      	bne.n	8004ef6 <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 8004e56:	687a      	ldr	r2, [r7, #4]
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	212c      	movs	r1, #44	; 0x2c
 8004e5c:	fb01 f303 	mul.w	r3, r1, r3
 8004e60:	4413      	add	r3, r2
 8004e62:	335c      	adds	r3, #92	; 0x5c
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	1c5a      	adds	r2, r3, #1
 8004e68:	6879      	ldr	r1, [r7, #4]
 8004e6a:	697b      	ldr	r3, [r7, #20]
 8004e6c:	202c      	movs	r0, #44	; 0x2c
 8004e6e:	fb00 f303 	mul.w	r3, r0, r3
 8004e72:	440b      	add	r3, r1
 8004e74:	335c      	adds	r3, #92	; 0x5c
 8004e76:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004e78:	687a      	ldr	r2, [r7, #4]
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	212c      	movs	r1, #44	; 0x2c
 8004e7e:	fb01 f303 	mul.w	r3, r1, r3
 8004e82:	4413      	add	r3, r2
 8004e84:	335c      	adds	r3, #92	; 0x5c
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	2b02      	cmp	r3, #2
 8004e8a:	d912      	bls.n	8004eb2 <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004e8c:	687a      	ldr	r2, [r7, #4]
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	212c      	movs	r1, #44	; 0x2c
 8004e92:	fb01 f303 	mul.w	r3, r1, r3
 8004e96:	4413      	add	r3, r2
 8004e98:	335c      	adds	r3, #92	; 0x5c
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004e9e:	687a      	ldr	r2, [r7, #4]
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	212c      	movs	r1, #44	; 0x2c
 8004ea4:	fb01 f303 	mul.w	r3, r1, r3
 8004ea8:	4413      	add	r3, r2
 8004eaa:	3360      	adds	r3, #96	; 0x60
 8004eac:	2204      	movs	r2, #4
 8004eae:	701a      	strb	r2, [r3, #0]
 8004eb0:	e021      	b.n	8004ef6 <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004eb2:	687a      	ldr	r2, [r7, #4]
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	212c      	movs	r1, #44	; 0x2c
 8004eb8:	fb01 f303 	mul.w	r3, r1, r3
 8004ebc:	4413      	add	r3, r2
 8004ebe:	3360      	adds	r3, #96	; 0x60
 8004ec0:	2202      	movs	r2, #2
 8004ec2:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	015a      	lsls	r2, r3, #5
 8004ec8:	69bb      	ldr	r3, [r7, #24]
 8004eca:	4413      	add	r3, r2
 8004ecc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004ed4:	693b      	ldr	r3, [r7, #16]
 8004ed6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004eda:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004edc:	693b      	ldr	r3, [r7, #16]
 8004ede:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004ee2:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004ee4:	697b      	ldr	r3, [r7, #20]
 8004ee6:	015a      	lsls	r2, r3, #5
 8004ee8:	69bb      	ldr	r3, [r7, #24]
 8004eea:	4413      	add	r3, r2
 8004eec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ef0:	461a      	mov	r2, r3
 8004ef2:	693b      	ldr	r3, [r7, #16]
 8004ef4:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	015a      	lsls	r2, r3, #5
 8004efa:	69bb      	ldr	r3, [r7, #24]
 8004efc:	4413      	add	r3, r2
 8004efe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f02:	461a      	mov	r2, r3
 8004f04:	2302      	movs	r3, #2
 8004f06:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004f08:	697b      	ldr	r3, [r7, #20]
 8004f0a:	b2d9      	uxtb	r1, r3
 8004f0c:	687a      	ldr	r2, [r7, #4]
 8004f0e:	697b      	ldr	r3, [r7, #20]
 8004f10:	202c      	movs	r0, #44	; 0x2c
 8004f12:	fb00 f303 	mul.w	r3, r0, r3
 8004f16:	4413      	add	r3, r2
 8004f18:	3360      	adds	r3, #96	; 0x60
 8004f1a:	781b      	ldrb	r3, [r3, #0]
 8004f1c:	461a      	mov	r2, r3
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	f006 fd5e 	bl	800b9e0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004f24:	bf00      	nop
 8004f26:	3720      	adds	r7, #32
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	bd80      	pop	{r7, pc}

08004f2c <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b08a      	sub	sp, #40	; 0x28
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f3c:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	6a1b      	ldr	r3, [r3, #32]
 8004f44:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004f46:	69fb      	ldr	r3, [r7, #28]
 8004f48:	f003 030f 	and.w	r3, r3, #15
 8004f4c:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004f4e:	69fb      	ldr	r3, [r7, #28]
 8004f50:	0c5b      	lsrs	r3, r3, #17
 8004f52:	f003 030f 	and.w	r3, r3, #15
 8004f56:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004f58:	69fb      	ldr	r3, [r7, #28]
 8004f5a:	091b      	lsrs	r3, r3, #4
 8004f5c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004f60:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004f62:	697b      	ldr	r3, [r7, #20]
 8004f64:	2b02      	cmp	r3, #2
 8004f66:	d004      	beq.n	8004f72 <HCD_RXQLVL_IRQHandler+0x46>
 8004f68:	697b      	ldr	r3, [r7, #20]
 8004f6a:	2b05      	cmp	r3, #5
 8004f6c:	f000 80a9 	beq.w	80050c2 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8004f70:	e0aa      	b.n	80050c8 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	f000 80a6 	beq.w	80050c6 <HCD_RXQLVL_IRQHandler+0x19a>
 8004f7a:	687a      	ldr	r2, [r7, #4]
 8004f7c:	69bb      	ldr	r3, [r7, #24]
 8004f7e:	212c      	movs	r1, #44	; 0x2c
 8004f80:	fb01 f303 	mul.w	r3, r1, r3
 8004f84:	4413      	add	r3, r2
 8004f86:	3344      	adds	r3, #68	; 0x44
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	f000 809b 	beq.w	80050c6 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8004f90:	687a      	ldr	r2, [r7, #4]
 8004f92:	69bb      	ldr	r3, [r7, #24]
 8004f94:	212c      	movs	r1, #44	; 0x2c
 8004f96:	fb01 f303 	mul.w	r3, r1, r3
 8004f9a:	4413      	add	r3, r2
 8004f9c:	3350      	adds	r3, #80	; 0x50
 8004f9e:	681a      	ldr	r2, [r3, #0]
 8004fa0:	693b      	ldr	r3, [r7, #16]
 8004fa2:	441a      	add	r2, r3
 8004fa4:	6879      	ldr	r1, [r7, #4]
 8004fa6:	69bb      	ldr	r3, [r7, #24]
 8004fa8:	202c      	movs	r0, #44	; 0x2c
 8004faa:	fb00 f303 	mul.w	r3, r0, r3
 8004fae:	440b      	add	r3, r1
 8004fb0:	334c      	adds	r3, #76	; 0x4c
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	429a      	cmp	r2, r3
 8004fb6:	d87a      	bhi.n	80050ae <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6818      	ldr	r0, [r3, #0]
 8004fbc:	687a      	ldr	r2, [r7, #4]
 8004fbe:	69bb      	ldr	r3, [r7, #24]
 8004fc0:	212c      	movs	r1, #44	; 0x2c
 8004fc2:	fb01 f303 	mul.w	r3, r1, r3
 8004fc6:	4413      	add	r3, r2
 8004fc8:	3344      	adds	r3, #68	; 0x44
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	693a      	ldr	r2, [r7, #16]
 8004fce:	b292      	uxth	r2, r2
 8004fd0:	4619      	mov	r1, r3
 8004fd2:	f003 fec1 	bl	8008d58 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8004fd6:	687a      	ldr	r2, [r7, #4]
 8004fd8:	69bb      	ldr	r3, [r7, #24]
 8004fda:	212c      	movs	r1, #44	; 0x2c
 8004fdc:	fb01 f303 	mul.w	r3, r1, r3
 8004fe0:	4413      	add	r3, r2
 8004fe2:	3344      	adds	r3, #68	; 0x44
 8004fe4:	681a      	ldr	r2, [r3, #0]
 8004fe6:	693b      	ldr	r3, [r7, #16]
 8004fe8:	441a      	add	r2, r3
 8004fea:	6879      	ldr	r1, [r7, #4]
 8004fec:	69bb      	ldr	r3, [r7, #24]
 8004fee:	202c      	movs	r0, #44	; 0x2c
 8004ff0:	fb00 f303 	mul.w	r3, r0, r3
 8004ff4:	440b      	add	r3, r1
 8004ff6:	3344      	adds	r3, #68	; 0x44
 8004ff8:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8004ffa:	687a      	ldr	r2, [r7, #4]
 8004ffc:	69bb      	ldr	r3, [r7, #24]
 8004ffe:	212c      	movs	r1, #44	; 0x2c
 8005000:	fb01 f303 	mul.w	r3, r1, r3
 8005004:	4413      	add	r3, r2
 8005006:	3350      	adds	r3, #80	; 0x50
 8005008:	681a      	ldr	r2, [r3, #0]
 800500a:	693b      	ldr	r3, [r7, #16]
 800500c:	441a      	add	r2, r3
 800500e:	6879      	ldr	r1, [r7, #4]
 8005010:	69bb      	ldr	r3, [r7, #24]
 8005012:	202c      	movs	r0, #44	; 0x2c
 8005014:	fb00 f303 	mul.w	r3, r0, r3
 8005018:	440b      	add	r3, r1
 800501a:	3350      	adds	r3, #80	; 0x50
 800501c:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800501e:	69bb      	ldr	r3, [r7, #24]
 8005020:	015a      	lsls	r2, r3, #5
 8005022:	6a3b      	ldr	r3, [r7, #32]
 8005024:	4413      	add	r3, r2
 8005026:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800502a:	691b      	ldr	r3, [r3, #16]
 800502c:	0cdb      	lsrs	r3, r3, #19
 800502e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005032:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8005034:	687a      	ldr	r2, [r7, #4]
 8005036:	69bb      	ldr	r3, [r7, #24]
 8005038:	212c      	movs	r1, #44	; 0x2c
 800503a:	fb01 f303 	mul.w	r3, r1, r3
 800503e:	4413      	add	r3, r2
 8005040:	3340      	adds	r3, #64	; 0x40
 8005042:	881b      	ldrh	r3, [r3, #0]
 8005044:	461a      	mov	r2, r3
 8005046:	693b      	ldr	r3, [r7, #16]
 8005048:	4293      	cmp	r3, r2
 800504a:	d13c      	bne.n	80050c6 <HCD_RXQLVL_IRQHandler+0x19a>
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d039      	beq.n	80050c6 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005052:	69bb      	ldr	r3, [r7, #24]
 8005054:	015a      	lsls	r2, r3, #5
 8005056:	6a3b      	ldr	r3, [r7, #32]
 8005058:	4413      	add	r3, r2
 800505a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005068:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800506a:	68bb      	ldr	r3, [r7, #8]
 800506c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005070:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005072:	69bb      	ldr	r3, [r7, #24]
 8005074:	015a      	lsls	r2, r3, #5
 8005076:	6a3b      	ldr	r3, [r7, #32]
 8005078:	4413      	add	r3, r2
 800507a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800507e:	461a      	mov	r2, r3
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8005084:	687a      	ldr	r2, [r7, #4]
 8005086:	69bb      	ldr	r3, [r7, #24]
 8005088:	212c      	movs	r1, #44	; 0x2c
 800508a:	fb01 f303 	mul.w	r3, r1, r3
 800508e:	4413      	add	r3, r2
 8005090:	3354      	adds	r3, #84	; 0x54
 8005092:	781b      	ldrb	r3, [r3, #0]
 8005094:	f083 0301 	eor.w	r3, r3, #1
 8005098:	b2d8      	uxtb	r0, r3
 800509a:	687a      	ldr	r2, [r7, #4]
 800509c:	69bb      	ldr	r3, [r7, #24]
 800509e:	212c      	movs	r1, #44	; 0x2c
 80050a0:	fb01 f303 	mul.w	r3, r1, r3
 80050a4:	4413      	add	r3, r2
 80050a6:	3354      	adds	r3, #84	; 0x54
 80050a8:	4602      	mov	r2, r0
 80050aa:	701a      	strb	r2, [r3, #0]
      break;
 80050ac:	e00b      	b.n	80050c6 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 80050ae:	687a      	ldr	r2, [r7, #4]
 80050b0:	69bb      	ldr	r3, [r7, #24]
 80050b2:	212c      	movs	r1, #44	; 0x2c
 80050b4:	fb01 f303 	mul.w	r3, r1, r3
 80050b8:	4413      	add	r3, r2
 80050ba:	3360      	adds	r3, #96	; 0x60
 80050bc:	2204      	movs	r2, #4
 80050be:	701a      	strb	r2, [r3, #0]
      break;
 80050c0:	e001      	b.n	80050c6 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 80050c2:	bf00      	nop
 80050c4:	e000      	b.n	80050c8 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 80050c6:	bf00      	nop
  }
}
 80050c8:	bf00      	nop
 80050ca:	3728      	adds	r7, #40	; 0x28
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bd80      	pop	{r7, pc}

080050d0 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b086      	sub	sp, #24
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050de:	697b      	ldr	r3, [r7, #20]
 80050e0:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80050e2:	693b      	ldr	r3, [r7, #16]
 80050e4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80050ec:	693b      	ldr	r3, [r7, #16]
 80050ee:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80050f6:	68bb      	ldr	r3, [r7, #8]
 80050f8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80050fc:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	f003 0302 	and.w	r3, r3, #2
 8005104:	2b02      	cmp	r3, #2
 8005106:	d10b      	bne.n	8005120 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	f003 0301 	and.w	r3, r3, #1
 800510e:	2b01      	cmp	r3, #1
 8005110:	d102      	bne.n	8005118 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8005112:	6878      	ldr	r0, [r7, #4]
 8005114:	f006 fc48 	bl	800b9a8 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	f043 0302 	orr.w	r3, r3, #2
 800511e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	f003 0308 	and.w	r3, r3, #8
 8005126:	2b08      	cmp	r3, #8
 8005128:	d132      	bne.n	8005190 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800512a:	68bb      	ldr	r3, [r7, #8]
 800512c:	f043 0308 	orr.w	r3, r3, #8
 8005130:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	f003 0304 	and.w	r3, r3, #4
 8005138:	2b04      	cmp	r3, #4
 800513a:	d126      	bne.n	800518a <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	699b      	ldr	r3, [r3, #24]
 8005140:	2b02      	cmp	r3, #2
 8005142:	d113      	bne.n	800516c <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800514a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800514e:	d106      	bne.n	800515e <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	2102      	movs	r1, #2
 8005156:	4618      	mov	r0, r3
 8005158:	f003 ff5e 	bl	8009018 <USB_InitFSLSPClkSel>
 800515c:	e011      	b.n	8005182 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	2101      	movs	r1, #1
 8005164:	4618      	mov	r0, r3
 8005166:	f003 ff57 	bl	8009018 <USB_InitFSLSPClkSel>
 800516a:	e00a      	b.n	8005182 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	68db      	ldr	r3, [r3, #12]
 8005170:	2b01      	cmp	r3, #1
 8005172:	d106      	bne.n	8005182 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8005174:	693b      	ldr	r3, [r7, #16]
 8005176:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800517a:	461a      	mov	r2, r3
 800517c:	f64e 2360 	movw	r3, #60000	; 0xea60
 8005180:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8005182:	6878      	ldr	r0, [r7, #4]
 8005184:	f006 fc3a 	bl	800b9fc <HAL_HCD_PortEnabled_Callback>
 8005188:	e002      	b.n	8005190 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	f006 fc44 	bl	800ba18 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	f003 0320 	and.w	r3, r3, #32
 8005196:	2b20      	cmp	r3, #32
 8005198:	d103      	bne.n	80051a2 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	f043 0320 	orr.w	r3, r3, #32
 80051a0:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80051a2:	693b      	ldr	r3, [r7, #16]
 80051a4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80051a8:	461a      	mov	r2, r3
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	6013      	str	r3, [r2, #0]
}
 80051ae:	bf00      	nop
 80051b0:	3718      	adds	r7, #24
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bd80      	pop	{r7, pc}
	...

080051b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b084      	sub	sp, #16
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d101      	bne.n	80051ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80051c6:	2301      	movs	r3, #1
 80051c8:	e12b      	b.n	8005422 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051d0:	b2db      	uxtb	r3, r3
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d106      	bne.n	80051e4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2200      	movs	r2, #0
 80051da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	f7fc fc0c 	bl	80019fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2224      	movs	r2, #36	; 0x24
 80051e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	681a      	ldr	r2, [r3, #0]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f022 0201 	bic.w	r2, r2, #1
 80051fa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	681a      	ldr	r2, [r3, #0]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800520a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	681a      	ldr	r2, [r3, #0]
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800521a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800521c:	f002 f878 	bl	8007310 <HAL_RCC_GetPCLK1Freq>
 8005220:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	4a81      	ldr	r2, [pc, #516]	; (800542c <HAL_I2C_Init+0x274>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d807      	bhi.n	800523c <HAL_I2C_Init+0x84>
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	4a80      	ldr	r2, [pc, #512]	; (8005430 <HAL_I2C_Init+0x278>)
 8005230:	4293      	cmp	r3, r2
 8005232:	bf94      	ite	ls
 8005234:	2301      	movls	r3, #1
 8005236:	2300      	movhi	r3, #0
 8005238:	b2db      	uxtb	r3, r3
 800523a:	e006      	b.n	800524a <HAL_I2C_Init+0x92>
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	4a7d      	ldr	r2, [pc, #500]	; (8005434 <HAL_I2C_Init+0x27c>)
 8005240:	4293      	cmp	r3, r2
 8005242:	bf94      	ite	ls
 8005244:	2301      	movls	r3, #1
 8005246:	2300      	movhi	r3, #0
 8005248:	b2db      	uxtb	r3, r3
 800524a:	2b00      	cmp	r3, #0
 800524c:	d001      	beq.n	8005252 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800524e:	2301      	movs	r3, #1
 8005250:	e0e7      	b.n	8005422 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	4a78      	ldr	r2, [pc, #480]	; (8005438 <HAL_I2C_Init+0x280>)
 8005256:	fba2 2303 	umull	r2, r3, r2, r3
 800525a:	0c9b      	lsrs	r3, r3, #18
 800525c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	68ba      	ldr	r2, [r7, #8]
 800526e:	430a      	orrs	r2, r1
 8005270:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	6a1b      	ldr	r3, [r3, #32]
 8005278:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	685b      	ldr	r3, [r3, #4]
 8005280:	4a6a      	ldr	r2, [pc, #424]	; (800542c <HAL_I2C_Init+0x274>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d802      	bhi.n	800528c <HAL_I2C_Init+0xd4>
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	3301      	adds	r3, #1
 800528a:	e009      	b.n	80052a0 <HAL_I2C_Init+0xe8>
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005292:	fb02 f303 	mul.w	r3, r2, r3
 8005296:	4a69      	ldr	r2, [pc, #420]	; (800543c <HAL_I2C_Init+0x284>)
 8005298:	fba2 2303 	umull	r2, r3, r2, r3
 800529c:	099b      	lsrs	r3, r3, #6
 800529e:	3301      	adds	r3, #1
 80052a0:	687a      	ldr	r2, [r7, #4]
 80052a2:	6812      	ldr	r2, [r2, #0]
 80052a4:	430b      	orrs	r3, r1
 80052a6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	69db      	ldr	r3, [r3, #28]
 80052ae:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80052b2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	685b      	ldr	r3, [r3, #4]
 80052ba:	495c      	ldr	r1, [pc, #368]	; (800542c <HAL_I2C_Init+0x274>)
 80052bc:	428b      	cmp	r3, r1
 80052be:	d819      	bhi.n	80052f4 <HAL_I2C_Init+0x13c>
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	1e59      	subs	r1, r3, #1
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	005b      	lsls	r3, r3, #1
 80052ca:	fbb1 f3f3 	udiv	r3, r1, r3
 80052ce:	1c59      	adds	r1, r3, #1
 80052d0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80052d4:	400b      	ands	r3, r1
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d00a      	beq.n	80052f0 <HAL_I2C_Init+0x138>
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	1e59      	subs	r1, r3, #1
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	005b      	lsls	r3, r3, #1
 80052e4:	fbb1 f3f3 	udiv	r3, r1, r3
 80052e8:	3301      	adds	r3, #1
 80052ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052ee:	e051      	b.n	8005394 <HAL_I2C_Init+0x1dc>
 80052f0:	2304      	movs	r3, #4
 80052f2:	e04f      	b.n	8005394 <HAL_I2C_Init+0x1dc>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	689b      	ldr	r3, [r3, #8]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d111      	bne.n	8005320 <HAL_I2C_Init+0x168>
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	1e58      	subs	r0, r3, #1
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6859      	ldr	r1, [r3, #4]
 8005304:	460b      	mov	r3, r1
 8005306:	005b      	lsls	r3, r3, #1
 8005308:	440b      	add	r3, r1
 800530a:	fbb0 f3f3 	udiv	r3, r0, r3
 800530e:	3301      	adds	r3, #1
 8005310:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005314:	2b00      	cmp	r3, #0
 8005316:	bf0c      	ite	eq
 8005318:	2301      	moveq	r3, #1
 800531a:	2300      	movne	r3, #0
 800531c:	b2db      	uxtb	r3, r3
 800531e:	e012      	b.n	8005346 <HAL_I2C_Init+0x18e>
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	1e58      	subs	r0, r3, #1
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6859      	ldr	r1, [r3, #4]
 8005328:	460b      	mov	r3, r1
 800532a:	009b      	lsls	r3, r3, #2
 800532c:	440b      	add	r3, r1
 800532e:	0099      	lsls	r1, r3, #2
 8005330:	440b      	add	r3, r1
 8005332:	fbb0 f3f3 	udiv	r3, r0, r3
 8005336:	3301      	adds	r3, #1
 8005338:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800533c:	2b00      	cmp	r3, #0
 800533e:	bf0c      	ite	eq
 8005340:	2301      	moveq	r3, #1
 8005342:	2300      	movne	r3, #0
 8005344:	b2db      	uxtb	r3, r3
 8005346:	2b00      	cmp	r3, #0
 8005348:	d001      	beq.n	800534e <HAL_I2C_Init+0x196>
 800534a:	2301      	movs	r3, #1
 800534c:	e022      	b.n	8005394 <HAL_I2C_Init+0x1dc>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	689b      	ldr	r3, [r3, #8]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d10e      	bne.n	8005374 <HAL_I2C_Init+0x1bc>
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	1e58      	subs	r0, r3, #1
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6859      	ldr	r1, [r3, #4]
 800535e:	460b      	mov	r3, r1
 8005360:	005b      	lsls	r3, r3, #1
 8005362:	440b      	add	r3, r1
 8005364:	fbb0 f3f3 	udiv	r3, r0, r3
 8005368:	3301      	adds	r3, #1
 800536a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800536e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005372:	e00f      	b.n	8005394 <HAL_I2C_Init+0x1dc>
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	1e58      	subs	r0, r3, #1
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6859      	ldr	r1, [r3, #4]
 800537c:	460b      	mov	r3, r1
 800537e:	009b      	lsls	r3, r3, #2
 8005380:	440b      	add	r3, r1
 8005382:	0099      	lsls	r1, r3, #2
 8005384:	440b      	add	r3, r1
 8005386:	fbb0 f3f3 	udiv	r3, r0, r3
 800538a:	3301      	adds	r3, #1
 800538c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005390:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005394:	6879      	ldr	r1, [r7, #4]
 8005396:	6809      	ldr	r1, [r1, #0]
 8005398:	4313      	orrs	r3, r2
 800539a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	69da      	ldr	r2, [r3, #28]
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6a1b      	ldr	r3, [r3, #32]
 80053ae:	431a      	orrs	r2, r3
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	430a      	orrs	r2, r1
 80053b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	689b      	ldr	r3, [r3, #8]
 80053be:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80053c2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80053c6:	687a      	ldr	r2, [r7, #4]
 80053c8:	6911      	ldr	r1, [r2, #16]
 80053ca:	687a      	ldr	r2, [r7, #4]
 80053cc:	68d2      	ldr	r2, [r2, #12]
 80053ce:	4311      	orrs	r1, r2
 80053d0:	687a      	ldr	r2, [r7, #4]
 80053d2:	6812      	ldr	r2, [r2, #0]
 80053d4:	430b      	orrs	r3, r1
 80053d6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	68db      	ldr	r3, [r3, #12]
 80053de:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	695a      	ldr	r2, [r3, #20]
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	699b      	ldr	r3, [r3, #24]
 80053ea:	431a      	orrs	r2, r3
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	430a      	orrs	r2, r1
 80053f2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	681a      	ldr	r2, [r3, #0]
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f042 0201 	orr.w	r2, r2, #1
 8005402:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2200      	movs	r2, #0
 8005408:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2220      	movs	r2, #32
 800540e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2200      	movs	r2, #0
 8005416:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2200      	movs	r2, #0
 800541c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005420:	2300      	movs	r3, #0
}
 8005422:	4618      	mov	r0, r3
 8005424:	3710      	adds	r7, #16
 8005426:	46bd      	mov	sp, r7
 8005428:	bd80      	pop	{r7, pc}
 800542a:	bf00      	nop
 800542c:	000186a0 	.word	0x000186a0
 8005430:	001e847f 	.word	0x001e847f
 8005434:	003d08ff 	.word	0x003d08ff
 8005438:	431bde83 	.word	0x431bde83
 800543c:	10624dd3 	.word	0x10624dd3

08005440 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b088      	sub	sp, #32
 8005444:	af02      	add	r7, sp, #8
 8005446:	60f8      	str	r0, [r7, #12]
 8005448:	4608      	mov	r0, r1
 800544a:	4611      	mov	r1, r2
 800544c:	461a      	mov	r2, r3
 800544e:	4603      	mov	r3, r0
 8005450:	817b      	strh	r3, [r7, #10]
 8005452:	460b      	mov	r3, r1
 8005454:	813b      	strh	r3, [r7, #8]
 8005456:	4613      	mov	r3, r2
 8005458:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800545a:	f7fd fa3b 	bl	80028d4 <HAL_GetTick>
 800545e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005466:	b2db      	uxtb	r3, r3
 8005468:	2b20      	cmp	r3, #32
 800546a:	f040 80d9 	bne.w	8005620 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	9300      	str	r3, [sp, #0]
 8005472:	2319      	movs	r3, #25
 8005474:	2201      	movs	r2, #1
 8005476:	496d      	ldr	r1, [pc, #436]	; (800562c <HAL_I2C_Mem_Write+0x1ec>)
 8005478:	68f8      	ldr	r0, [r7, #12]
 800547a:	f000 fc7f 	bl	8005d7c <I2C_WaitOnFlagUntilTimeout>
 800547e:	4603      	mov	r3, r0
 8005480:	2b00      	cmp	r3, #0
 8005482:	d001      	beq.n	8005488 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005484:	2302      	movs	r3, #2
 8005486:	e0cc      	b.n	8005622 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800548e:	2b01      	cmp	r3, #1
 8005490:	d101      	bne.n	8005496 <HAL_I2C_Mem_Write+0x56>
 8005492:	2302      	movs	r3, #2
 8005494:	e0c5      	b.n	8005622 <HAL_I2C_Mem_Write+0x1e2>
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	2201      	movs	r2, #1
 800549a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f003 0301 	and.w	r3, r3, #1
 80054a8:	2b01      	cmp	r3, #1
 80054aa:	d007      	beq.n	80054bc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	681a      	ldr	r2, [r3, #0]
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f042 0201 	orr.w	r2, r2, #1
 80054ba:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	681a      	ldr	r2, [r3, #0]
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80054ca:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	2221      	movs	r2, #33	; 0x21
 80054d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	2240      	movs	r2, #64	; 0x40
 80054d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	2200      	movs	r2, #0
 80054e0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	6a3a      	ldr	r2, [r7, #32]
 80054e6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80054ec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054f2:	b29a      	uxth	r2, r3
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	4a4d      	ldr	r2, [pc, #308]	; (8005630 <HAL_I2C_Mem_Write+0x1f0>)
 80054fc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80054fe:	88f8      	ldrh	r0, [r7, #6]
 8005500:	893a      	ldrh	r2, [r7, #8]
 8005502:	8979      	ldrh	r1, [r7, #10]
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	9301      	str	r3, [sp, #4]
 8005508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800550a:	9300      	str	r3, [sp, #0]
 800550c:	4603      	mov	r3, r0
 800550e:	68f8      	ldr	r0, [r7, #12]
 8005510:	f000 fab6 	bl	8005a80 <I2C_RequestMemoryWrite>
 8005514:	4603      	mov	r3, r0
 8005516:	2b00      	cmp	r3, #0
 8005518:	d052      	beq.n	80055c0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800551a:	2301      	movs	r3, #1
 800551c:	e081      	b.n	8005622 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800551e:	697a      	ldr	r2, [r7, #20]
 8005520:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005522:	68f8      	ldr	r0, [r7, #12]
 8005524:	f000 fd00 	bl	8005f28 <I2C_WaitOnTXEFlagUntilTimeout>
 8005528:	4603      	mov	r3, r0
 800552a:	2b00      	cmp	r3, #0
 800552c:	d00d      	beq.n	800554a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005532:	2b04      	cmp	r3, #4
 8005534:	d107      	bne.n	8005546 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	681a      	ldr	r2, [r3, #0]
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005544:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005546:	2301      	movs	r3, #1
 8005548:	e06b      	b.n	8005622 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800554e:	781a      	ldrb	r2, [r3, #0]
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800555a:	1c5a      	adds	r2, r3, #1
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005564:	3b01      	subs	r3, #1
 8005566:	b29a      	uxth	r2, r3
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005570:	b29b      	uxth	r3, r3
 8005572:	3b01      	subs	r3, #1
 8005574:	b29a      	uxth	r2, r3
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	695b      	ldr	r3, [r3, #20]
 8005580:	f003 0304 	and.w	r3, r3, #4
 8005584:	2b04      	cmp	r3, #4
 8005586:	d11b      	bne.n	80055c0 <HAL_I2C_Mem_Write+0x180>
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800558c:	2b00      	cmp	r3, #0
 800558e:	d017      	beq.n	80055c0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005594:	781a      	ldrb	r2, [r3, #0]
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055a0:	1c5a      	adds	r2, r3, #1
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055aa:	3b01      	subs	r3, #1
 80055ac:	b29a      	uxth	r2, r3
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055b6:	b29b      	uxth	r3, r3
 80055b8:	3b01      	subs	r3, #1
 80055ba:	b29a      	uxth	r2, r3
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d1aa      	bne.n	800551e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80055c8:	697a      	ldr	r2, [r7, #20]
 80055ca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80055cc:	68f8      	ldr	r0, [r7, #12]
 80055ce:	f000 fcec 	bl	8005faa <I2C_WaitOnBTFFlagUntilTimeout>
 80055d2:	4603      	mov	r3, r0
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d00d      	beq.n	80055f4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055dc:	2b04      	cmp	r3, #4
 80055de:	d107      	bne.n	80055f0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	681a      	ldr	r2, [r3, #0]
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055ee:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80055f0:	2301      	movs	r3, #1
 80055f2:	e016      	b.n	8005622 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	681a      	ldr	r2, [r3, #0]
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005602:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	2220      	movs	r2, #32
 8005608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	2200      	movs	r2, #0
 8005610:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	2200      	movs	r2, #0
 8005618:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800561c:	2300      	movs	r3, #0
 800561e:	e000      	b.n	8005622 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005620:	2302      	movs	r3, #2
  }
}
 8005622:	4618      	mov	r0, r3
 8005624:	3718      	adds	r7, #24
 8005626:	46bd      	mov	sp, r7
 8005628:	bd80      	pop	{r7, pc}
 800562a:	bf00      	nop
 800562c:	00100002 	.word	0x00100002
 8005630:	ffff0000 	.word	0xffff0000

08005634 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b08c      	sub	sp, #48	; 0x30
 8005638:	af02      	add	r7, sp, #8
 800563a:	60f8      	str	r0, [r7, #12]
 800563c:	4608      	mov	r0, r1
 800563e:	4611      	mov	r1, r2
 8005640:	461a      	mov	r2, r3
 8005642:	4603      	mov	r3, r0
 8005644:	817b      	strh	r3, [r7, #10]
 8005646:	460b      	mov	r3, r1
 8005648:	813b      	strh	r3, [r7, #8]
 800564a:	4613      	mov	r3, r2
 800564c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800564e:	f7fd f941 	bl	80028d4 <HAL_GetTick>
 8005652:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800565a:	b2db      	uxtb	r3, r3
 800565c:	2b20      	cmp	r3, #32
 800565e:	f040 8208 	bne.w	8005a72 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005664:	9300      	str	r3, [sp, #0]
 8005666:	2319      	movs	r3, #25
 8005668:	2201      	movs	r2, #1
 800566a:	497b      	ldr	r1, [pc, #492]	; (8005858 <HAL_I2C_Mem_Read+0x224>)
 800566c:	68f8      	ldr	r0, [r7, #12]
 800566e:	f000 fb85 	bl	8005d7c <I2C_WaitOnFlagUntilTimeout>
 8005672:	4603      	mov	r3, r0
 8005674:	2b00      	cmp	r3, #0
 8005676:	d001      	beq.n	800567c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005678:	2302      	movs	r3, #2
 800567a:	e1fb      	b.n	8005a74 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005682:	2b01      	cmp	r3, #1
 8005684:	d101      	bne.n	800568a <HAL_I2C_Mem_Read+0x56>
 8005686:	2302      	movs	r3, #2
 8005688:	e1f4      	b.n	8005a74 <HAL_I2C_Mem_Read+0x440>
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	2201      	movs	r2, #1
 800568e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f003 0301 	and.w	r3, r3, #1
 800569c:	2b01      	cmp	r3, #1
 800569e:	d007      	beq.n	80056b0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	681a      	ldr	r2, [r3, #0]
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f042 0201 	orr.w	r2, r2, #1
 80056ae:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	681a      	ldr	r2, [r3, #0]
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80056be:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	2222      	movs	r2, #34	; 0x22
 80056c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	2240      	movs	r2, #64	; 0x40
 80056cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	2200      	movs	r2, #0
 80056d4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056da:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80056e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056e6:	b29a      	uxth	r2, r3
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	4a5b      	ldr	r2, [pc, #364]	; (800585c <HAL_I2C_Mem_Read+0x228>)
 80056f0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80056f2:	88f8      	ldrh	r0, [r7, #6]
 80056f4:	893a      	ldrh	r2, [r7, #8]
 80056f6:	8979      	ldrh	r1, [r7, #10]
 80056f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056fa:	9301      	str	r3, [sp, #4]
 80056fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056fe:	9300      	str	r3, [sp, #0]
 8005700:	4603      	mov	r3, r0
 8005702:	68f8      	ldr	r0, [r7, #12]
 8005704:	f000 fa52 	bl	8005bac <I2C_RequestMemoryRead>
 8005708:	4603      	mov	r3, r0
 800570a:	2b00      	cmp	r3, #0
 800570c:	d001      	beq.n	8005712 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800570e:	2301      	movs	r3, #1
 8005710:	e1b0      	b.n	8005a74 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005716:	2b00      	cmp	r3, #0
 8005718:	d113      	bne.n	8005742 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800571a:	2300      	movs	r3, #0
 800571c:	623b      	str	r3, [r7, #32]
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	695b      	ldr	r3, [r3, #20]
 8005724:	623b      	str	r3, [r7, #32]
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	699b      	ldr	r3, [r3, #24]
 800572c:	623b      	str	r3, [r7, #32]
 800572e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	681a      	ldr	r2, [r3, #0]
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800573e:	601a      	str	r2, [r3, #0]
 8005740:	e184      	b.n	8005a4c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005746:	2b01      	cmp	r3, #1
 8005748:	d11b      	bne.n	8005782 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	681a      	ldr	r2, [r3, #0]
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005758:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800575a:	2300      	movs	r3, #0
 800575c:	61fb      	str	r3, [r7, #28]
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	695b      	ldr	r3, [r3, #20]
 8005764:	61fb      	str	r3, [r7, #28]
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	699b      	ldr	r3, [r3, #24]
 800576c:	61fb      	str	r3, [r7, #28]
 800576e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	681a      	ldr	r2, [r3, #0]
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800577e:	601a      	str	r2, [r3, #0]
 8005780:	e164      	b.n	8005a4c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005786:	2b02      	cmp	r3, #2
 8005788:	d11b      	bne.n	80057c2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	681a      	ldr	r2, [r3, #0]
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005798:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	681a      	ldr	r2, [r3, #0]
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80057a8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80057aa:	2300      	movs	r3, #0
 80057ac:	61bb      	str	r3, [r7, #24]
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	695b      	ldr	r3, [r3, #20]
 80057b4:	61bb      	str	r3, [r7, #24]
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	699b      	ldr	r3, [r3, #24]
 80057bc:	61bb      	str	r3, [r7, #24]
 80057be:	69bb      	ldr	r3, [r7, #24]
 80057c0:	e144      	b.n	8005a4c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80057c2:	2300      	movs	r3, #0
 80057c4:	617b      	str	r3, [r7, #20]
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	695b      	ldr	r3, [r3, #20]
 80057cc:	617b      	str	r3, [r7, #20]
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	699b      	ldr	r3, [r3, #24]
 80057d4:	617b      	str	r3, [r7, #20]
 80057d6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80057d8:	e138      	b.n	8005a4c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057de:	2b03      	cmp	r3, #3
 80057e0:	f200 80f1 	bhi.w	80059c6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057e8:	2b01      	cmp	r3, #1
 80057ea:	d123      	bne.n	8005834 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80057ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057ee:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80057f0:	68f8      	ldr	r0, [r7, #12]
 80057f2:	f000 fc1b 	bl	800602c <I2C_WaitOnRXNEFlagUntilTimeout>
 80057f6:	4603      	mov	r3, r0
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d001      	beq.n	8005800 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80057fc:	2301      	movs	r3, #1
 80057fe:	e139      	b.n	8005a74 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	691a      	ldr	r2, [r3, #16]
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800580a:	b2d2      	uxtb	r2, r2
 800580c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005812:	1c5a      	adds	r2, r3, #1
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800581c:	3b01      	subs	r3, #1
 800581e:	b29a      	uxth	r2, r3
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005828:	b29b      	uxth	r3, r3
 800582a:	3b01      	subs	r3, #1
 800582c:	b29a      	uxth	r2, r3
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005832:	e10b      	b.n	8005a4c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005838:	2b02      	cmp	r3, #2
 800583a:	d14e      	bne.n	80058da <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800583c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800583e:	9300      	str	r3, [sp, #0]
 8005840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005842:	2200      	movs	r2, #0
 8005844:	4906      	ldr	r1, [pc, #24]	; (8005860 <HAL_I2C_Mem_Read+0x22c>)
 8005846:	68f8      	ldr	r0, [r7, #12]
 8005848:	f000 fa98 	bl	8005d7c <I2C_WaitOnFlagUntilTimeout>
 800584c:	4603      	mov	r3, r0
 800584e:	2b00      	cmp	r3, #0
 8005850:	d008      	beq.n	8005864 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005852:	2301      	movs	r3, #1
 8005854:	e10e      	b.n	8005a74 <HAL_I2C_Mem_Read+0x440>
 8005856:	bf00      	nop
 8005858:	00100002 	.word	0x00100002
 800585c:	ffff0000 	.word	0xffff0000
 8005860:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	681a      	ldr	r2, [r3, #0]
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005872:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	691a      	ldr	r2, [r3, #16]
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800587e:	b2d2      	uxtb	r2, r2
 8005880:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005886:	1c5a      	adds	r2, r3, #1
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005890:	3b01      	subs	r3, #1
 8005892:	b29a      	uxth	r2, r3
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800589c:	b29b      	uxth	r3, r3
 800589e:	3b01      	subs	r3, #1
 80058a0:	b29a      	uxth	r2, r3
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	691a      	ldr	r2, [r3, #16]
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b0:	b2d2      	uxtb	r2, r2
 80058b2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b8:	1c5a      	adds	r2, r3, #1
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058c2:	3b01      	subs	r3, #1
 80058c4:	b29a      	uxth	r2, r3
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058ce:	b29b      	uxth	r3, r3
 80058d0:	3b01      	subs	r3, #1
 80058d2:	b29a      	uxth	r2, r3
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80058d8:	e0b8      	b.n	8005a4c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80058da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058dc:	9300      	str	r3, [sp, #0]
 80058de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058e0:	2200      	movs	r2, #0
 80058e2:	4966      	ldr	r1, [pc, #408]	; (8005a7c <HAL_I2C_Mem_Read+0x448>)
 80058e4:	68f8      	ldr	r0, [r7, #12]
 80058e6:	f000 fa49 	bl	8005d7c <I2C_WaitOnFlagUntilTimeout>
 80058ea:	4603      	mov	r3, r0
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d001      	beq.n	80058f4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80058f0:	2301      	movs	r3, #1
 80058f2:	e0bf      	b.n	8005a74 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	681a      	ldr	r2, [r3, #0]
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005902:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	691a      	ldr	r2, [r3, #16]
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800590e:	b2d2      	uxtb	r2, r2
 8005910:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005916:	1c5a      	adds	r2, r3, #1
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005920:	3b01      	subs	r3, #1
 8005922:	b29a      	uxth	r2, r3
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800592c:	b29b      	uxth	r3, r3
 800592e:	3b01      	subs	r3, #1
 8005930:	b29a      	uxth	r2, r3
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005938:	9300      	str	r3, [sp, #0]
 800593a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800593c:	2200      	movs	r2, #0
 800593e:	494f      	ldr	r1, [pc, #316]	; (8005a7c <HAL_I2C_Mem_Read+0x448>)
 8005940:	68f8      	ldr	r0, [r7, #12]
 8005942:	f000 fa1b 	bl	8005d7c <I2C_WaitOnFlagUntilTimeout>
 8005946:	4603      	mov	r3, r0
 8005948:	2b00      	cmp	r3, #0
 800594a:	d001      	beq.n	8005950 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800594c:	2301      	movs	r3, #1
 800594e:	e091      	b.n	8005a74 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	681a      	ldr	r2, [r3, #0]
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800595e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	691a      	ldr	r2, [r3, #16]
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800596a:	b2d2      	uxtb	r2, r2
 800596c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005972:	1c5a      	adds	r2, r3, #1
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800597c:	3b01      	subs	r3, #1
 800597e:	b29a      	uxth	r2, r3
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005988:	b29b      	uxth	r3, r3
 800598a:	3b01      	subs	r3, #1
 800598c:	b29a      	uxth	r2, r3
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	691a      	ldr	r2, [r3, #16]
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800599c:	b2d2      	uxtb	r2, r2
 800599e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a4:	1c5a      	adds	r2, r3, #1
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059ae:	3b01      	subs	r3, #1
 80059b0:	b29a      	uxth	r2, r3
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059ba:	b29b      	uxth	r3, r3
 80059bc:	3b01      	subs	r3, #1
 80059be:	b29a      	uxth	r2, r3
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80059c4:	e042      	b.n	8005a4c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80059c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059c8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80059ca:	68f8      	ldr	r0, [r7, #12]
 80059cc:	f000 fb2e 	bl	800602c <I2C_WaitOnRXNEFlagUntilTimeout>
 80059d0:	4603      	mov	r3, r0
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d001      	beq.n	80059da <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80059d6:	2301      	movs	r3, #1
 80059d8:	e04c      	b.n	8005a74 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	691a      	ldr	r2, [r3, #16]
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059e4:	b2d2      	uxtb	r2, r2
 80059e6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ec:	1c5a      	adds	r2, r3, #1
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059f6:	3b01      	subs	r3, #1
 80059f8:	b29a      	uxth	r2, r3
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a02:	b29b      	uxth	r3, r3
 8005a04:	3b01      	subs	r3, #1
 8005a06:	b29a      	uxth	r2, r3
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	695b      	ldr	r3, [r3, #20]
 8005a12:	f003 0304 	and.w	r3, r3, #4
 8005a16:	2b04      	cmp	r3, #4
 8005a18:	d118      	bne.n	8005a4c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	691a      	ldr	r2, [r3, #16]
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a24:	b2d2      	uxtb	r2, r2
 8005a26:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a2c:	1c5a      	adds	r2, r3, #1
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a36:	3b01      	subs	r3, #1
 8005a38:	b29a      	uxth	r2, r3
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a42:	b29b      	uxth	r3, r3
 8005a44:	3b01      	subs	r3, #1
 8005a46:	b29a      	uxth	r2, r3
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	f47f aec2 	bne.w	80057da <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	2220      	movs	r2, #32
 8005a5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	2200      	movs	r2, #0
 8005a62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005a6e:	2300      	movs	r3, #0
 8005a70:	e000      	b.n	8005a74 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005a72:	2302      	movs	r3, #2
  }
}
 8005a74:	4618      	mov	r0, r3
 8005a76:	3728      	adds	r7, #40	; 0x28
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	bd80      	pop	{r7, pc}
 8005a7c:	00010004 	.word	0x00010004

08005a80 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b088      	sub	sp, #32
 8005a84:	af02      	add	r7, sp, #8
 8005a86:	60f8      	str	r0, [r7, #12]
 8005a88:	4608      	mov	r0, r1
 8005a8a:	4611      	mov	r1, r2
 8005a8c:	461a      	mov	r2, r3
 8005a8e:	4603      	mov	r3, r0
 8005a90:	817b      	strh	r3, [r7, #10]
 8005a92:	460b      	mov	r3, r1
 8005a94:	813b      	strh	r3, [r7, #8]
 8005a96:	4613      	mov	r3, r2
 8005a98:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	681a      	ldr	r2, [r3, #0]
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005aa8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aac:	9300      	str	r3, [sp, #0]
 8005aae:	6a3b      	ldr	r3, [r7, #32]
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005ab6:	68f8      	ldr	r0, [r7, #12]
 8005ab8:	f000 f960 	bl	8005d7c <I2C_WaitOnFlagUntilTimeout>
 8005abc:	4603      	mov	r3, r0
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d00d      	beq.n	8005ade <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005acc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ad0:	d103      	bne.n	8005ada <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ad8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005ada:	2303      	movs	r3, #3
 8005adc:	e05f      	b.n	8005b9e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005ade:	897b      	ldrh	r3, [r7, #10]
 8005ae0:	b2db      	uxtb	r3, r3
 8005ae2:	461a      	mov	r2, r3
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005aec:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af0:	6a3a      	ldr	r2, [r7, #32]
 8005af2:	492d      	ldr	r1, [pc, #180]	; (8005ba8 <I2C_RequestMemoryWrite+0x128>)
 8005af4:	68f8      	ldr	r0, [r7, #12]
 8005af6:	f000 f998 	bl	8005e2a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005afa:	4603      	mov	r3, r0
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d001      	beq.n	8005b04 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005b00:	2301      	movs	r3, #1
 8005b02:	e04c      	b.n	8005b9e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b04:	2300      	movs	r3, #0
 8005b06:	617b      	str	r3, [r7, #20]
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	695b      	ldr	r3, [r3, #20]
 8005b0e:	617b      	str	r3, [r7, #20]
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	699b      	ldr	r3, [r3, #24]
 8005b16:	617b      	str	r3, [r7, #20]
 8005b18:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b1c:	6a39      	ldr	r1, [r7, #32]
 8005b1e:	68f8      	ldr	r0, [r7, #12]
 8005b20:	f000 fa02 	bl	8005f28 <I2C_WaitOnTXEFlagUntilTimeout>
 8005b24:	4603      	mov	r3, r0
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d00d      	beq.n	8005b46 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b2e:	2b04      	cmp	r3, #4
 8005b30:	d107      	bne.n	8005b42 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	681a      	ldr	r2, [r3, #0]
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b40:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005b42:	2301      	movs	r3, #1
 8005b44:	e02b      	b.n	8005b9e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005b46:	88fb      	ldrh	r3, [r7, #6]
 8005b48:	2b01      	cmp	r3, #1
 8005b4a:	d105      	bne.n	8005b58 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005b4c:	893b      	ldrh	r3, [r7, #8]
 8005b4e:	b2da      	uxtb	r2, r3
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	611a      	str	r2, [r3, #16]
 8005b56:	e021      	b.n	8005b9c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005b58:	893b      	ldrh	r3, [r7, #8]
 8005b5a:	0a1b      	lsrs	r3, r3, #8
 8005b5c:	b29b      	uxth	r3, r3
 8005b5e:	b2da      	uxtb	r2, r3
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b68:	6a39      	ldr	r1, [r7, #32]
 8005b6a:	68f8      	ldr	r0, [r7, #12]
 8005b6c:	f000 f9dc 	bl	8005f28 <I2C_WaitOnTXEFlagUntilTimeout>
 8005b70:	4603      	mov	r3, r0
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d00d      	beq.n	8005b92 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b7a:	2b04      	cmp	r3, #4
 8005b7c:	d107      	bne.n	8005b8e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	681a      	ldr	r2, [r3, #0]
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b8c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005b8e:	2301      	movs	r3, #1
 8005b90:	e005      	b.n	8005b9e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005b92:	893b      	ldrh	r3, [r7, #8]
 8005b94:	b2da      	uxtb	r2, r3
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005b9c:	2300      	movs	r3, #0
}
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	3718      	adds	r7, #24
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	bd80      	pop	{r7, pc}
 8005ba6:	bf00      	nop
 8005ba8:	00010002 	.word	0x00010002

08005bac <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b088      	sub	sp, #32
 8005bb0:	af02      	add	r7, sp, #8
 8005bb2:	60f8      	str	r0, [r7, #12]
 8005bb4:	4608      	mov	r0, r1
 8005bb6:	4611      	mov	r1, r2
 8005bb8:	461a      	mov	r2, r3
 8005bba:	4603      	mov	r3, r0
 8005bbc:	817b      	strh	r3, [r7, #10]
 8005bbe:	460b      	mov	r3, r1
 8005bc0:	813b      	strh	r3, [r7, #8]
 8005bc2:	4613      	mov	r3, r2
 8005bc4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	681a      	ldr	r2, [r3, #0]
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005bd4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	681a      	ldr	r2, [r3, #0]
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005be4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be8:	9300      	str	r3, [sp, #0]
 8005bea:	6a3b      	ldr	r3, [r7, #32]
 8005bec:	2200      	movs	r2, #0
 8005bee:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005bf2:	68f8      	ldr	r0, [r7, #12]
 8005bf4:	f000 f8c2 	bl	8005d7c <I2C_WaitOnFlagUntilTimeout>
 8005bf8:	4603      	mov	r3, r0
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d00d      	beq.n	8005c1a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c0c:	d103      	bne.n	8005c16 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c14:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005c16:	2303      	movs	r3, #3
 8005c18:	e0aa      	b.n	8005d70 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005c1a:	897b      	ldrh	r3, [r7, #10]
 8005c1c:	b2db      	uxtb	r3, r3
 8005c1e:	461a      	mov	r2, r3
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005c28:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c2c:	6a3a      	ldr	r2, [r7, #32]
 8005c2e:	4952      	ldr	r1, [pc, #328]	; (8005d78 <I2C_RequestMemoryRead+0x1cc>)
 8005c30:	68f8      	ldr	r0, [r7, #12]
 8005c32:	f000 f8fa 	bl	8005e2a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005c36:	4603      	mov	r3, r0
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d001      	beq.n	8005c40 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	e097      	b.n	8005d70 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c40:	2300      	movs	r3, #0
 8005c42:	617b      	str	r3, [r7, #20]
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	695b      	ldr	r3, [r3, #20]
 8005c4a:	617b      	str	r3, [r7, #20]
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	699b      	ldr	r3, [r3, #24]
 8005c52:	617b      	str	r3, [r7, #20]
 8005c54:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c58:	6a39      	ldr	r1, [r7, #32]
 8005c5a:	68f8      	ldr	r0, [r7, #12]
 8005c5c:	f000 f964 	bl	8005f28 <I2C_WaitOnTXEFlagUntilTimeout>
 8005c60:	4603      	mov	r3, r0
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d00d      	beq.n	8005c82 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c6a:	2b04      	cmp	r3, #4
 8005c6c:	d107      	bne.n	8005c7e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	681a      	ldr	r2, [r3, #0]
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c7c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005c7e:	2301      	movs	r3, #1
 8005c80:	e076      	b.n	8005d70 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005c82:	88fb      	ldrh	r3, [r7, #6]
 8005c84:	2b01      	cmp	r3, #1
 8005c86:	d105      	bne.n	8005c94 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005c88:	893b      	ldrh	r3, [r7, #8]
 8005c8a:	b2da      	uxtb	r2, r3
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	611a      	str	r2, [r3, #16]
 8005c92:	e021      	b.n	8005cd8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005c94:	893b      	ldrh	r3, [r7, #8]
 8005c96:	0a1b      	lsrs	r3, r3, #8
 8005c98:	b29b      	uxth	r3, r3
 8005c9a:	b2da      	uxtb	r2, r3
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ca2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ca4:	6a39      	ldr	r1, [r7, #32]
 8005ca6:	68f8      	ldr	r0, [r7, #12]
 8005ca8:	f000 f93e 	bl	8005f28 <I2C_WaitOnTXEFlagUntilTimeout>
 8005cac:	4603      	mov	r3, r0
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d00d      	beq.n	8005cce <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cb6:	2b04      	cmp	r3, #4
 8005cb8:	d107      	bne.n	8005cca <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	681a      	ldr	r2, [r3, #0]
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005cc8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005cca:	2301      	movs	r3, #1
 8005ccc:	e050      	b.n	8005d70 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005cce:	893b      	ldrh	r3, [r7, #8]
 8005cd0:	b2da      	uxtb	r2, r3
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005cd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cda:	6a39      	ldr	r1, [r7, #32]
 8005cdc:	68f8      	ldr	r0, [r7, #12]
 8005cde:	f000 f923 	bl	8005f28 <I2C_WaitOnTXEFlagUntilTimeout>
 8005ce2:	4603      	mov	r3, r0
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d00d      	beq.n	8005d04 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cec:	2b04      	cmp	r3, #4
 8005cee:	d107      	bne.n	8005d00 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	681a      	ldr	r2, [r3, #0]
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005cfe:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005d00:	2301      	movs	r3, #1
 8005d02:	e035      	b.n	8005d70 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	681a      	ldr	r2, [r3, #0]
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d12:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d16:	9300      	str	r3, [sp, #0]
 8005d18:	6a3b      	ldr	r3, [r7, #32]
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005d20:	68f8      	ldr	r0, [r7, #12]
 8005d22:	f000 f82b 	bl	8005d7c <I2C_WaitOnFlagUntilTimeout>
 8005d26:	4603      	mov	r3, r0
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d00d      	beq.n	8005d48 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d3a:	d103      	bne.n	8005d44 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d42:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005d44:	2303      	movs	r3, #3
 8005d46:	e013      	b.n	8005d70 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005d48:	897b      	ldrh	r3, [r7, #10]
 8005d4a:	b2db      	uxtb	r3, r3
 8005d4c:	f043 0301 	orr.w	r3, r3, #1
 8005d50:	b2da      	uxtb	r2, r3
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d5a:	6a3a      	ldr	r2, [r7, #32]
 8005d5c:	4906      	ldr	r1, [pc, #24]	; (8005d78 <I2C_RequestMemoryRead+0x1cc>)
 8005d5e:	68f8      	ldr	r0, [r7, #12]
 8005d60:	f000 f863 	bl	8005e2a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005d64:	4603      	mov	r3, r0
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d001      	beq.n	8005d6e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	e000      	b.n	8005d70 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005d6e:	2300      	movs	r3, #0
}
 8005d70:	4618      	mov	r0, r3
 8005d72:	3718      	adds	r7, #24
 8005d74:	46bd      	mov	sp, r7
 8005d76:	bd80      	pop	{r7, pc}
 8005d78:	00010002 	.word	0x00010002

08005d7c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b084      	sub	sp, #16
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	60f8      	str	r0, [r7, #12]
 8005d84:	60b9      	str	r1, [r7, #8]
 8005d86:	603b      	str	r3, [r7, #0]
 8005d88:	4613      	mov	r3, r2
 8005d8a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005d8c:	e025      	b.n	8005dda <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005d94:	d021      	beq.n	8005dda <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d96:	f7fc fd9d 	bl	80028d4 <HAL_GetTick>
 8005d9a:	4602      	mov	r2, r0
 8005d9c:	69bb      	ldr	r3, [r7, #24]
 8005d9e:	1ad3      	subs	r3, r2, r3
 8005da0:	683a      	ldr	r2, [r7, #0]
 8005da2:	429a      	cmp	r2, r3
 8005da4:	d302      	bcc.n	8005dac <I2C_WaitOnFlagUntilTimeout+0x30>
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d116      	bne.n	8005dda <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	2200      	movs	r2, #0
 8005db0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	2220      	movs	r2, #32
 8005db6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dc6:	f043 0220 	orr.w	r2, r3, #32
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	e023      	b.n	8005e22 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005dda:	68bb      	ldr	r3, [r7, #8]
 8005ddc:	0c1b      	lsrs	r3, r3, #16
 8005dde:	b2db      	uxtb	r3, r3
 8005de0:	2b01      	cmp	r3, #1
 8005de2:	d10d      	bne.n	8005e00 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	695b      	ldr	r3, [r3, #20]
 8005dea:	43da      	mvns	r2, r3
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	4013      	ands	r3, r2
 8005df0:	b29b      	uxth	r3, r3
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	bf0c      	ite	eq
 8005df6:	2301      	moveq	r3, #1
 8005df8:	2300      	movne	r3, #0
 8005dfa:	b2db      	uxtb	r3, r3
 8005dfc:	461a      	mov	r2, r3
 8005dfe:	e00c      	b.n	8005e1a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	699b      	ldr	r3, [r3, #24]
 8005e06:	43da      	mvns	r2, r3
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	4013      	ands	r3, r2
 8005e0c:	b29b      	uxth	r3, r3
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	bf0c      	ite	eq
 8005e12:	2301      	moveq	r3, #1
 8005e14:	2300      	movne	r3, #0
 8005e16:	b2db      	uxtb	r3, r3
 8005e18:	461a      	mov	r2, r3
 8005e1a:	79fb      	ldrb	r3, [r7, #7]
 8005e1c:	429a      	cmp	r2, r3
 8005e1e:	d0b6      	beq.n	8005d8e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005e20:	2300      	movs	r3, #0
}
 8005e22:	4618      	mov	r0, r3
 8005e24:	3710      	adds	r7, #16
 8005e26:	46bd      	mov	sp, r7
 8005e28:	bd80      	pop	{r7, pc}

08005e2a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005e2a:	b580      	push	{r7, lr}
 8005e2c:	b084      	sub	sp, #16
 8005e2e:	af00      	add	r7, sp, #0
 8005e30:	60f8      	str	r0, [r7, #12]
 8005e32:	60b9      	str	r1, [r7, #8]
 8005e34:	607a      	str	r2, [r7, #4]
 8005e36:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005e38:	e051      	b.n	8005ede <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	695b      	ldr	r3, [r3, #20]
 8005e40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e48:	d123      	bne.n	8005e92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	681a      	ldr	r2, [r3, #0]
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e58:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005e62:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	2200      	movs	r2, #0
 8005e68:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	2220      	movs	r2, #32
 8005e6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	2200      	movs	r2, #0
 8005e76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e7e:	f043 0204 	orr.w	r2, r3, #4
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	2200      	movs	r2, #0
 8005e8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005e8e:	2301      	movs	r3, #1
 8005e90:	e046      	b.n	8005f20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e98:	d021      	beq.n	8005ede <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e9a:	f7fc fd1b 	bl	80028d4 <HAL_GetTick>
 8005e9e:	4602      	mov	r2, r0
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	1ad3      	subs	r3, r2, r3
 8005ea4:	687a      	ldr	r2, [r7, #4]
 8005ea6:	429a      	cmp	r2, r3
 8005ea8:	d302      	bcc.n	8005eb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d116      	bne.n	8005ede <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	2220      	movs	r2, #32
 8005eba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eca:	f043 0220 	orr.w	r2, r3, #32
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005eda:	2301      	movs	r3, #1
 8005edc:	e020      	b.n	8005f20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	0c1b      	lsrs	r3, r3, #16
 8005ee2:	b2db      	uxtb	r3, r3
 8005ee4:	2b01      	cmp	r3, #1
 8005ee6:	d10c      	bne.n	8005f02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	695b      	ldr	r3, [r3, #20]
 8005eee:	43da      	mvns	r2, r3
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	4013      	ands	r3, r2
 8005ef4:	b29b      	uxth	r3, r3
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	bf14      	ite	ne
 8005efa:	2301      	movne	r3, #1
 8005efc:	2300      	moveq	r3, #0
 8005efe:	b2db      	uxtb	r3, r3
 8005f00:	e00b      	b.n	8005f1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	699b      	ldr	r3, [r3, #24]
 8005f08:	43da      	mvns	r2, r3
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	4013      	ands	r3, r2
 8005f0e:	b29b      	uxth	r3, r3
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	bf14      	ite	ne
 8005f14:	2301      	movne	r3, #1
 8005f16:	2300      	moveq	r3, #0
 8005f18:	b2db      	uxtb	r3, r3
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d18d      	bne.n	8005e3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005f1e:	2300      	movs	r3, #0
}
 8005f20:	4618      	mov	r0, r3
 8005f22:	3710      	adds	r7, #16
 8005f24:	46bd      	mov	sp, r7
 8005f26:	bd80      	pop	{r7, pc}

08005f28 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b084      	sub	sp, #16
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	60f8      	str	r0, [r7, #12]
 8005f30:	60b9      	str	r1, [r7, #8]
 8005f32:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005f34:	e02d      	b.n	8005f92 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005f36:	68f8      	ldr	r0, [r7, #12]
 8005f38:	f000 f8ce 	bl	80060d8 <I2C_IsAcknowledgeFailed>
 8005f3c:	4603      	mov	r3, r0
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d001      	beq.n	8005f46 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005f42:	2301      	movs	r3, #1
 8005f44:	e02d      	b.n	8005fa2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005f4c:	d021      	beq.n	8005f92 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f4e:	f7fc fcc1 	bl	80028d4 <HAL_GetTick>
 8005f52:	4602      	mov	r2, r0
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	1ad3      	subs	r3, r2, r3
 8005f58:	68ba      	ldr	r2, [r7, #8]
 8005f5a:	429a      	cmp	r2, r3
 8005f5c:	d302      	bcc.n	8005f64 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d116      	bne.n	8005f92 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	2200      	movs	r2, #0
 8005f68:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	2220      	movs	r2, #32
 8005f6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	2200      	movs	r2, #0
 8005f76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f7e:	f043 0220 	orr.w	r2, r3, #32
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	2200      	movs	r2, #0
 8005f8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005f8e:	2301      	movs	r3, #1
 8005f90:	e007      	b.n	8005fa2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	695b      	ldr	r3, [r3, #20]
 8005f98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f9c:	2b80      	cmp	r3, #128	; 0x80
 8005f9e:	d1ca      	bne.n	8005f36 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005fa0:	2300      	movs	r3, #0
}
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	3710      	adds	r7, #16
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	bd80      	pop	{r7, pc}

08005faa <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005faa:	b580      	push	{r7, lr}
 8005fac:	b084      	sub	sp, #16
 8005fae:	af00      	add	r7, sp, #0
 8005fb0:	60f8      	str	r0, [r7, #12]
 8005fb2:	60b9      	str	r1, [r7, #8]
 8005fb4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005fb6:	e02d      	b.n	8006014 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005fb8:	68f8      	ldr	r0, [r7, #12]
 8005fba:	f000 f88d 	bl	80060d8 <I2C_IsAcknowledgeFailed>
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d001      	beq.n	8005fc8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	e02d      	b.n	8006024 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005fce:	d021      	beq.n	8006014 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fd0:	f7fc fc80 	bl	80028d4 <HAL_GetTick>
 8005fd4:	4602      	mov	r2, r0
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	1ad3      	subs	r3, r2, r3
 8005fda:	68ba      	ldr	r2, [r7, #8]
 8005fdc:	429a      	cmp	r2, r3
 8005fde:	d302      	bcc.n	8005fe6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005fe0:	68bb      	ldr	r3, [r7, #8]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d116      	bne.n	8006014 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	2200      	movs	r2, #0
 8005fea:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	2220      	movs	r2, #32
 8005ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006000:	f043 0220 	orr.w	r2, r3, #32
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	2200      	movs	r2, #0
 800600c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006010:	2301      	movs	r3, #1
 8006012:	e007      	b.n	8006024 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	695b      	ldr	r3, [r3, #20]
 800601a:	f003 0304 	and.w	r3, r3, #4
 800601e:	2b04      	cmp	r3, #4
 8006020:	d1ca      	bne.n	8005fb8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006022:	2300      	movs	r3, #0
}
 8006024:	4618      	mov	r0, r3
 8006026:	3710      	adds	r7, #16
 8006028:	46bd      	mov	sp, r7
 800602a:	bd80      	pop	{r7, pc}

0800602c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b084      	sub	sp, #16
 8006030:	af00      	add	r7, sp, #0
 8006032:	60f8      	str	r0, [r7, #12]
 8006034:	60b9      	str	r1, [r7, #8]
 8006036:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006038:	e042      	b.n	80060c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	695b      	ldr	r3, [r3, #20]
 8006040:	f003 0310 	and.w	r3, r3, #16
 8006044:	2b10      	cmp	r3, #16
 8006046:	d119      	bne.n	800607c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f06f 0210 	mvn.w	r2, #16
 8006050:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	2200      	movs	r2, #0
 8006056:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	2220      	movs	r2, #32
 800605c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	2200      	movs	r2, #0
 8006064:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	2200      	movs	r2, #0
 8006074:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006078:	2301      	movs	r3, #1
 800607a:	e029      	b.n	80060d0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800607c:	f7fc fc2a 	bl	80028d4 <HAL_GetTick>
 8006080:	4602      	mov	r2, r0
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	1ad3      	subs	r3, r2, r3
 8006086:	68ba      	ldr	r2, [r7, #8]
 8006088:	429a      	cmp	r2, r3
 800608a:	d302      	bcc.n	8006092 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d116      	bne.n	80060c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	2200      	movs	r2, #0
 8006096:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	2220      	movs	r2, #32
 800609c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	2200      	movs	r2, #0
 80060a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ac:	f043 0220 	orr.w	r2, r3, #32
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	2200      	movs	r2, #0
 80060b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80060bc:	2301      	movs	r3, #1
 80060be:	e007      	b.n	80060d0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	695b      	ldr	r3, [r3, #20]
 80060c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060ca:	2b40      	cmp	r3, #64	; 0x40
 80060cc:	d1b5      	bne.n	800603a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80060ce:	2300      	movs	r3, #0
}
 80060d0:	4618      	mov	r0, r3
 80060d2:	3710      	adds	r7, #16
 80060d4:	46bd      	mov	sp, r7
 80060d6:	bd80      	pop	{r7, pc}

080060d8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80060d8:	b480      	push	{r7}
 80060da:	b083      	sub	sp, #12
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	695b      	ldr	r3, [r3, #20]
 80060e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060ee:	d11b      	bne.n	8006128 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80060f8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2200      	movs	r2, #0
 80060fe:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2220      	movs	r2, #32
 8006104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2200      	movs	r2, #0
 800610c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006114:	f043 0204 	orr.w	r2, r3, #4
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2200      	movs	r2, #0
 8006120:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006124:	2301      	movs	r3, #1
 8006126:	e000      	b.n	800612a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006128:	2300      	movs	r3, #0
}
 800612a:	4618      	mov	r0, r3
 800612c:	370c      	adds	r7, #12
 800612e:	46bd      	mov	sp, r7
 8006130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006134:	4770      	bx	lr
	...

08006138 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b088      	sub	sp, #32
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d101      	bne.n	800614a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8006146:	2301      	movs	r3, #1
 8006148:	e128      	b.n	800639c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006150:	b2db      	uxtb	r3, r3
 8006152:	2b00      	cmp	r3, #0
 8006154:	d109      	bne.n	800616a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2200      	movs	r2, #0
 800615a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	4a90      	ldr	r2, [pc, #576]	; (80063a4 <HAL_I2S_Init+0x26c>)
 8006162:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8006164:	6878      	ldr	r0, [r7, #4]
 8006166:	f7fb fc91 	bl	8001a8c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2202      	movs	r2, #2
 800616e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	69db      	ldr	r3, [r3, #28]
 8006178:	687a      	ldr	r2, [r7, #4]
 800617a:	6812      	ldr	r2, [r2, #0]
 800617c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8006180:	f023 030f 	bic.w	r3, r3, #15
 8006184:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	2202      	movs	r2, #2
 800618c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	695b      	ldr	r3, [r3, #20]
 8006192:	2b02      	cmp	r3, #2
 8006194:	d060      	beq.n	8006258 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	68db      	ldr	r3, [r3, #12]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d102      	bne.n	80061a4 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800619e:	2310      	movs	r3, #16
 80061a0:	617b      	str	r3, [r7, #20]
 80061a2:	e001      	b.n	80061a8 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80061a4:	2320      	movs	r3, #32
 80061a6:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	689b      	ldr	r3, [r3, #8]
 80061ac:	2b20      	cmp	r3, #32
 80061ae:	d802      	bhi.n	80061b6 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80061b0:	697b      	ldr	r3, [r7, #20]
 80061b2:	005b      	lsls	r3, r3, #1
 80061b4:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80061b6:	2001      	movs	r0, #1
 80061b8:	f001 f9b4 	bl	8007524 <HAL_RCCEx_GetPeriphCLKFreq>
 80061bc:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	691b      	ldr	r3, [r3, #16]
 80061c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80061c6:	d125      	bne.n	8006214 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	68db      	ldr	r3, [r3, #12]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d010      	beq.n	80061f2 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80061d0:	697b      	ldr	r3, [r7, #20]
 80061d2:	009b      	lsls	r3, r3, #2
 80061d4:	68fa      	ldr	r2, [r7, #12]
 80061d6:	fbb2 f2f3 	udiv	r2, r2, r3
 80061da:	4613      	mov	r3, r2
 80061dc:	009b      	lsls	r3, r3, #2
 80061de:	4413      	add	r3, r2
 80061e0:	005b      	lsls	r3, r3, #1
 80061e2:	461a      	mov	r2, r3
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	695b      	ldr	r3, [r3, #20]
 80061e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80061ec:	3305      	adds	r3, #5
 80061ee:	613b      	str	r3, [r7, #16]
 80061f0:	e01f      	b.n	8006232 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80061f2:	697b      	ldr	r3, [r7, #20]
 80061f4:	00db      	lsls	r3, r3, #3
 80061f6:	68fa      	ldr	r2, [r7, #12]
 80061f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80061fc:	4613      	mov	r3, r2
 80061fe:	009b      	lsls	r3, r3, #2
 8006200:	4413      	add	r3, r2
 8006202:	005b      	lsls	r3, r3, #1
 8006204:	461a      	mov	r2, r3
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	695b      	ldr	r3, [r3, #20]
 800620a:	fbb2 f3f3 	udiv	r3, r2, r3
 800620e:	3305      	adds	r3, #5
 8006210:	613b      	str	r3, [r7, #16]
 8006212:	e00e      	b.n	8006232 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006214:	68fa      	ldr	r2, [r7, #12]
 8006216:	697b      	ldr	r3, [r7, #20]
 8006218:	fbb2 f2f3 	udiv	r2, r2, r3
 800621c:	4613      	mov	r3, r2
 800621e:	009b      	lsls	r3, r3, #2
 8006220:	4413      	add	r3, r2
 8006222:	005b      	lsls	r3, r3, #1
 8006224:	461a      	mov	r2, r3
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	695b      	ldr	r3, [r3, #20]
 800622a:	fbb2 f3f3 	udiv	r3, r2, r3
 800622e:	3305      	adds	r3, #5
 8006230:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8006232:	693b      	ldr	r3, [r7, #16]
 8006234:	4a5c      	ldr	r2, [pc, #368]	; (80063a8 <HAL_I2S_Init+0x270>)
 8006236:	fba2 2303 	umull	r2, r3, r2, r3
 800623a:	08db      	lsrs	r3, r3, #3
 800623c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800623e:	693b      	ldr	r3, [r7, #16]
 8006240:	f003 0301 	and.w	r3, r3, #1
 8006244:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8006246:	693a      	ldr	r2, [r7, #16]
 8006248:	69bb      	ldr	r3, [r7, #24]
 800624a:	1ad3      	subs	r3, r2, r3
 800624c:	085b      	lsrs	r3, r3, #1
 800624e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8006250:	69bb      	ldr	r3, [r7, #24]
 8006252:	021b      	lsls	r3, r3, #8
 8006254:	61bb      	str	r3, [r7, #24]
 8006256:	e003      	b.n	8006260 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8006258:	2302      	movs	r3, #2
 800625a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800625c:	2300      	movs	r3, #0
 800625e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8006260:	69fb      	ldr	r3, [r7, #28]
 8006262:	2b01      	cmp	r3, #1
 8006264:	d902      	bls.n	800626c <HAL_I2S_Init+0x134>
 8006266:	69fb      	ldr	r3, [r7, #28]
 8006268:	2bff      	cmp	r3, #255	; 0xff
 800626a:	d907      	bls.n	800627c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006270:	f043 0210 	orr.w	r2, r3, #16
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8006278:	2301      	movs	r3, #1
 800627a:	e08f      	b.n	800639c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	691a      	ldr	r2, [r3, #16]
 8006280:	69bb      	ldr	r3, [r7, #24]
 8006282:	ea42 0103 	orr.w	r1, r2, r3
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	69fa      	ldr	r2, [r7, #28]
 800628c:	430a      	orrs	r2, r1
 800628e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	69db      	ldr	r3, [r3, #28]
 8006296:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800629a:	f023 030f 	bic.w	r3, r3, #15
 800629e:	687a      	ldr	r2, [r7, #4]
 80062a0:	6851      	ldr	r1, [r2, #4]
 80062a2:	687a      	ldr	r2, [r7, #4]
 80062a4:	6892      	ldr	r2, [r2, #8]
 80062a6:	4311      	orrs	r1, r2
 80062a8:	687a      	ldr	r2, [r7, #4]
 80062aa:	68d2      	ldr	r2, [r2, #12]
 80062ac:	4311      	orrs	r1, r2
 80062ae:	687a      	ldr	r2, [r7, #4]
 80062b0:	6992      	ldr	r2, [r2, #24]
 80062b2:	430a      	orrs	r2, r1
 80062b4:	431a      	orrs	r2, r3
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80062be:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6a1b      	ldr	r3, [r3, #32]
 80062c4:	2b01      	cmp	r3, #1
 80062c6:	d161      	bne.n	800638c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	4a38      	ldr	r2, [pc, #224]	; (80063ac <HAL_I2S_Init+0x274>)
 80062cc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	4a37      	ldr	r2, [pc, #220]	; (80063b0 <HAL_I2S_Init+0x278>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d101      	bne.n	80062dc <HAL_I2S_Init+0x1a4>
 80062d8:	4b36      	ldr	r3, [pc, #216]	; (80063b4 <HAL_I2S_Init+0x27c>)
 80062da:	e001      	b.n	80062e0 <HAL_I2S_Init+0x1a8>
 80062dc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80062e0:	69db      	ldr	r3, [r3, #28]
 80062e2:	687a      	ldr	r2, [r7, #4]
 80062e4:	6812      	ldr	r2, [r2, #0]
 80062e6:	4932      	ldr	r1, [pc, #200]	; (80063b0 <HAL_I2S_Init+0x278>)
 80062e8:	428a      	cmp	r2, r1
 80062ea:	d101      	bne.n	80062f0 <HAL_I2S_Init+0x1b8>
 80062ec:	4a31      	ldr	r2, [pc, #196]	; (80063b4 <HAL_I2S_Init+0x27c>)
 80062ee:	e001      	b.n	80062f4 <HAL_I2S_Init+0x1bc>
 80062f0:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80062f4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80062f8:	f023 030f 	bic.w	r3, r3, #15
 80062fc:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	4a2b      	ldr	r2, [pc, #172]	; (80063b0 <HAL_I2S_Init+0x278>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d101      	bne.n	800630c <HAL_I2S_Init+0x1d4>
 8006308:	4b2a      	ldr	r3, [pc, #168]	; (80063b4 <HAL_I2S_Init+0x27c>)
 800630a:	e001      	b.n	8006310 <HAL_I2S_Init+0x1d8>
 800630c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006310:	2202      	movs	r2, #2
 8006312:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	4a25      	ldr	r2, [pc, #148]	; (80063b0 <HAL_I2S_Init+0x278>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d101      	bne.n	8006322 <HAL_I2S_Init+0x1ea>
 800631e:	4b25      	ldr	r3, [pc, #148]	; (80063b4 <HAL_I2S_Init+0x27c>)
 8006320:	e001      	b.n	8006326 <HAL_I2S_Init+0x1ee>
 8006322:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006326:	69db      	ldr	r3, [r3, #28]
 8006328:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	685b      	ldr	r3, [r3, #4]
 800632e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006332:	d003      	beq.n	800633c <HAL_I2S_Init+0x204>
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	685b      	ldr	r3, [r3, #4]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d103      	bne.n	8006344 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 800633c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006340:	613b      	str	r3, [r7, #16]
 8006342:	e001      	b.n	8006348 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8006344:	2300      	movs	r3, #0
 8006346:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8006348:	693b      	ldr	r3, [r7, #16]
 800634a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	689b      	ldr	r3, [r3, #8]
 8006350:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8006352:	4313      	orrs	r3, r2
 8006354:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	68db      	ldr	r3, [r3, #12]
 800635a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800635c:	4313      	orrs	r3, r2
 800635e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	699b      	ldr	r3, [r3, #24]
 8006364:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8006366:	4313      	orrs	r3, r2
 8006368:	b29a      	uxth	r2, r3
 800636a:	897b      	ldrh	r3, [r7, #10]
 800636c:	4313      	orrs	r3, r2
 800636e:	b29b      	uxth	r3, r3
 8006370:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006374:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	4a0d      	ldr	r2, [pc, #52]	; (80063b0 <HAL_I2S_Init+0x278>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d101      	bne.n	8006384 <HAL_I2S_Init+0x24c>
 8006380:	4b0c      	ldr	r3, [pc, #48]	; (80063b4 <HAL_I2S_Init+0x27c>)
 8006382:	e001      	b.n	8006388 <HAL_I2S_Init+0x250>
 8006384:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006388:	897a      	ldrh	r2, [r7, #10]
 800638a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2200      	movs	r2, #0
 8006390:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2201      	movs	r2, #1
 8006396:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800639a:	2300      	movs	r3, #0
}
 800639c:	4618      	mov	r0, r3
 800639e:	3720      	adds	r7, #32
 80063a0:	46bd      	mov	sp, r7
 80063a2:	bd80      	pop	{r7, pc}
 80063a4:	080064af 	.word	0x080064af
 80063a8:	cccccccd 	.word	0xcccccccd
 80063ac:	080065c5 	.word	0x080065c5
 80063b0:	40003800 	.word	0x40003800
 80063b4:	40003400 	.word	0x40003400

080063b8 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80063b8:	b480      	push	{r7}
 80063ba:	b083      	sub	sp, #12
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80063c0:	bf00      	nop
 80063c2:	370c      	adds	r7, #12
 80063c4:	46bd      	mov	sp, r7
 80063c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ca:	4770      	bx	lr

080063cc <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80063cc:	b480      	push	{r7}
 80063ce:	b083      	sub	sp, #12
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80063d4:	bf00      	nop
 80063d6:	370c      	adds	r7, #12
 80063d8:	46bd      	mov	sp, r7
 80063da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063de:	4770      	bx	lr

080063e0 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80063e0:	b480      	push	{r7}
 80063e2:	b083      	sub	sp, #12
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80063e8:	bf00      	nop
 80063ea:	370c      	adds	r7, #12
 80063ec:	46bd      	mov	sp, r7
 80063ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f2:	4770      	bx	lr

080063f4 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b082      	sub	sp, #8
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006400:	881a      	ldrh	r2, [r3, #0]
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800640c:	1c9a      	adds	r2, r3, #2
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006416:	b29b      	uxth	r3, r3
 8006418:	3b01      	subs	r3, #1
 800641a:	b29a      	uxth	r2, r3
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006424:	b29b      	uxth	r3, r3
 8006426:	2b00      	cmp	r3, #0
 8006428:	d10e      	bne.n	8006448 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	685a      	ldr	r2, [r3, #4]
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006438:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2201      	movs	r2, #1
 800643e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8006442:	6878      	ldr	r0, [r7, #4]
 8006444:	f7ff ffb8 	bl	80063b8 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8006448:	bf00      	nop
 800644a:	3708      	adds	r7, #8
 800644c:	46bd      	mov	sp, r7
 800644e:	bd80      	pop	{r7, pc}

08006450 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b082      	sub	sp, #8
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	68da      	ldr	r2, [r3, #12]
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006462:	b292      	uxth	r2, r2
 8006464:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800646a:	1c9a      	adds	r2, r3, #2
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006474:	b29b      	uxth	r3, r3
 8006476:	3b01      	subs	r3, #1
 8006478:	b29a      	uxth	r2, r3
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006482:	b29b      	uxth	r3, r3
 8006484:	2b00      	cmp	r3, #0
 8006486:	d10e      	bne.n	80064a6 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	685a      	ldr	r2, [r3, #4]
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006496:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2201      	movs	r2, #1
 800649c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80064a0:	6878      	ldr	r0, [r7, #4]
 80064a2:	f7ff ff93 	bl	80063cc <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80064a6:	bf00      	nop
 80064a8:	3708      	adds	r7, #8
 80064aa:	46bd      	mov	sp, r7
 80064ac:	bd80      	pop	{r7, pc}

080064ae <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80064ae:	b580      	push	{r7, lr}
 80064b0:	b086      	sub	sp, #24
 80064b2:	af00      	add	r7, sp, #0
 80064b4:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	689b      	ldr	r3, [r3, #8]
 80064bc:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80064c4:	b2db      	uxtb	r3, r3
 80064c6:	2b04      	cmp	r3, #4
 80064c8:	d13a      	bne.n	8006540 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80064ca:	697b      	ldr	r3, [r7, #20]
 80064cc:	f003 0301 	and.w	r3, r3, #1
 80064d0:	2b01      	cmp	r3, #1
 80064d2:	d109      	bne.n	80064e8 <I2S_IRQHandler+0x3a>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	685b      	ldr	r3, [r3, #4]
 80064da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064de:	2b40      	cmp	r3, #64	; 0x40
 80064e0:	d102      	bne.n	80064e8 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80064e2:	6878      	ldr	r0, [r7, #4]
 80064e4:	f7ff ffb4 	bl	8006450 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80064e8:	697b      	ldr	r3, [r7, #20]
 80064ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064ee:	2b40      	cmp	r3, #64	; 0x40
 80064f0:	d126      	bne.n	8006540 <I2S_IRQHandler+0x92>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	685b      	ldr	r3, [r3, #4]
 80064f8:	f003 0320 	and.w	r3, r3, #32
 80064fc:	2b20      	cmp	r3, #32
 80064fe:	d11f      	bne.n	8006540 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	685a      	ldr	r2, [r3, #4]
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800650e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006510:	2300      	movs	r3, #0
 8006512:	613b      	str	r3, [r7, #16]
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	68db      	ldr	r3, [r3, #12]
 800651a:	613b      	str	r3, [r7, #16]
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	689b      	ldr	r3, [r3, #8]
 8006522:	613b      	str	r3, [r7, #16]
 8006524:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2201      	movs	r2, #1
 800652a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006532:	f043 0202 	orr.w	r2, r3, #2
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800653a:	6878      	ldr	r0, [r7, #4]
 800653c:	f7ff ff50 	bl	80063e0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006546:	b2db      	uxtb	r3, r3
 8006548:	2b03      	cmp	r3, #3
 800654a:	d136      	bne.n	80065ba <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800654c:	697b      	ldr	r3, [r7, #20]
 800654e:	f003 0302 	and.w	r3, r3, #2
 8006552:	2b02      	cmp	r3, #2
 8006554:	d109      	bne.n	800656a <I2S_IRQHandler+0xbc>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	685b      	ldr	r3, [r3, #4]
 800655c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006560:	2b80      	cmp	r3, #128	; 0x80
 8006562:	d102      	bne.n	800656a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8006564:	6878      	ldr	r0, [r7, #4]
 8006566:	f7ff ff45 	bl	80063f4 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800656a:	697b      	ldr	r3, [r7, #20]
 800656c:	f003 0308 	and.w	r3, r3, #8
 8006570:	2b08      	cmp	r3, #8
 8006572:	d122      	bne.n	80065ba <I2S_IRQHandler+0x10c>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	685b      	ldr	r3, [r3, #4]
 800657a:	f003 0320 	and.w	r3, r3, #32
 800657e:	2b20      	cmp	r3, #32
 8006580:	d11b      	bne.n	80065ba <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	685a      	ldr	r2, [r3, #4]
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006590:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8006592:	2300      	movs	r3, #0
 8006594:	60fb      	str	r3, [r7, #12]
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	689b      	ldr	r3, [r3, #8]
 800659c:	60fb      	str	r3, [r7, #12]
 800659e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2201      	movs	r2, #1
 80065a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065ac:	f043 0204 	orr.w	r2, r3, #4
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80065b4:	6878      	ldr	r0, [r7, #4]
 80065b6:	f7ff ff13 	bl	80063e0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80065ba:	bf00      	nop
 80065bc:	3718      	adds	r7, #24
 80065be:	46bd      	mov	sp, r7
 80065c0:	bd80      	pop	{r7, pc}
	...

080065c4 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b088      	sub	sp, #32
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	689b      	ldr	r3, [r3, #8]
 80065d2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	4aa2      	ldr	r2, [pc, #648]	; (8006864 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d101      	bne.n	80065e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80065de:	4ba2      	ldr	r3, [pc, #648]	; (8006868 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80065e0:	e001      	b.n	80065e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80065e2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80065e6:	689b      	ldr	r3, [r3, #8]
 80065e8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	685b      	ldr	r3, [r3, #4]
 80065f0:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	4a9b      	ldr	r2, [pc, #620]	; (8006864 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d101      	bne.n	8006600 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80065fc:	4b9a      	ldr	r3, [pc, #616]	; (8006868 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80065fe:	e001      	b.n	8006604 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8006600:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006604:	685b      	ldr	r3, [r3, #4]
 8006606:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	685b      	ldr	r3, [r3, #4]
 800660c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006610:	d004      	beq.n	800661c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	685b      	ldr	r3, [r3, #4]
 8006616:	2b00      	cmp	r3, #0
 8006618:	f040 8099 	bne.w	800674e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 800661c:	69fb      	ldr	r3, [r7, #28]
 800661e:	f003 0302 	and.w	r3, r3, #2
 8006622:	2b02      	cmp	r3, #2
 8006624:	d107      	bne.n	8006636 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8006626:	697b      	ldr	r3, [r7, #20]
 8006628:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800662c:	2b00      	cmp	r3, #0
 800662e:	d002      	beq.n	8006636 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8006630:	6878      	ldr	r0, [r7, #4]
 8006632:	f000 f925 	bl	8006880 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8006636:	69bb      	ldr	r3, [r7, #24]
 8006638:	f003 0301 	and.w	r3, r3, #1
 800663c:	2b01      	cmp	r3, #1
 800663e:	d107      	bne.n	8006650 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8006640:	693b      	ldr	r3, [r7, #16]
 8006642:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006646:	2b00      	cmp	r3, #0
 8006648:	d002      	beq.n	8006650 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800664a:	6878      	ldr	r0, [r7, #4]
 800664c:	f000 f9c8 	bl	80069e0 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8006650:	69bb      	ldr	r3, [r7, #24]
 8006652:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006656:	2b40      	cmp	r3, #64	; 0x40
 8006658:	d13a      	bne.n	80066d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800665a:	693b      	ldr	r3, [r7, #16]
 800665c:	f003 0320 	and.w	r3, r3, #32
 8006660:	2b00      	cmp	r3, #0
 8006662:	d035      	beq.n	80066d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	4a7e      	ldr	r2, [pc, #504]	; (8006864 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d101      	bne.n	8006672 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800666e:	4b7e      	ldr	r3, [pc, #504]	; (8006868 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006670:	e001      	b.n	8006676 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8006672:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006676:	685a      	ldr	r2, [r3, #4]
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	4979      	ldr	r1, [pc, #484]	; (8006864 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800667e:	428b      	cmp	r3, r1
 8006680:	d101      	bne.n	8006686 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8006682:	4b79      	ldr	r3, [pc, #484]	; (8006868 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006684:	e001      	b.n	800668a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8006686:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800668a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800668e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	685a      	ldr	r2, [r3, #4]
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800669e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80066a0:	2300      	movs	r3, #0
 80066a2:	60fb      	str	r3, [r7, #12]
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	68db      	ldr	r3, [r3, #12]
 80066aa:	60fb      	str	r3, [r7, #12]
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	689b      	ldr	r3, [r3, #8]
 80066b2:	60fb      	str	r3, [r7, #12]
 80066b4:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2201      	movs	r2, #1
 80066ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066c2:	f043 0202 	orr.w	r2, r3, #2
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80066ca:	6878      	ldr	r0, [r7, #4]
 80066cc:	f7ff fe88 	bl	80063e0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80066d0:	69fb      	ldr	r3, [r7, #28]
 80066d2:	f003 0308 	and.w	r3, r3, #8
 80066d6:	2b08      	cmp	r3, #8
 80066d8:	f040 80be 	bne.w	8006858 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 80066dc:	697b      	ldr	r3, [r7, #20]
 80066de:	f003 0320 	and.w	r3, r3, #32
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	f000 80b8 	beq.w	8006858 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	685a      	ldr	r2, [r3, #4]
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80066f6:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	4a59      	ldr	r2, [pc, #356]	; (8006864 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80066fe:	4293      	cmp	r3, r2
 8006700:	d101      	bne.n	8006706 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8006702:	4b59      	ldr	r3, [pc, #356]	; (8006868 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006704:	e001      	b.n	800670a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8006706:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800670a:	685a      	ldr	r2, [r3, #4]
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4954      	ldr	r1, [pc, #336]	; (8006864 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006712:	428b      	cmp	r3, r1
 8006714:	d101      	bne.n	800671a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8006716:	4b54      	ldr	r3, [pc, #336]	; (8006868 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006718:	e001      	b.n	800671e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800671a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800671e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006722:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8006724:	2300      	movs	r3, #0
 8006726:	60bb      	str	r3, [r7, #8]
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	689b      	ldr	r3, [r3, #8]
 800672e:	60bb      	str	r3, [r7, #8]
 8006730:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2201      	movs	r2, #1
 8006736:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800673e:	f043 0204 	orr.w	r2, r3, #4
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006746:	6878      	ldr	r0, [r7, #4]
 8006748:	f7ff fe4a 	bl	80063e0 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800674c:	e084      	b.n	8006858 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800674e:	69bb      	ldr	r3, [r7, #24]
 8006750:	f003 0302 	and.w	r3, r3, #2
 8006754:	2b02      	cmp	r3, #2
 8006756:	d107      	bne.n	8006768 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8006758:	693b      	ldr	r3, [r7, #16]
 800675a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800675e:	2b00      	cmp	r3, #0
 8006760:	d002      	beq.n	8006768 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8006762:	6878      	ldr	r0, [r7, #4]
 8006764:	f000 f8be 	bl	80068e4 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8006768:	69fb      	ldr	r3, [r7, #28]
 800676a:	f003 0301 	and.w	r3, r3, #1
 800676e:	2b01      	cmp	r3, #1
 8006770:	d107      	bne.n	8006782 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8006772:	697b      	ldr	r3, [r7, #20]
 8006774:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006778:	2b00      	cmp	r3, #0
 800677a:	d002      	beq.n	8006782 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 800677c:	6878      	ldr	r0, [r7, #4]
 800677e:	f000 f8fd 	bl	800697c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006782:	69fb      	ldr	r3, [r7, #28]
 8006784:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006788:	2b40      	cmp	r3, #64	; 0x40
 800678a:	d12f      	bne.n	80067ec <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 800678c:	697b      	ldr	r3, [r7, #20]
 800678e:	f003 0320 	and.w	r3, r3, #32
 8006792:	2b00      	cmp	r3, #0
 8006794:	d02a      	beq.n	80067ec <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	685a      	ldr	r2, [r3, #4]
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80067a4:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	4a2e      	ldr	r2, [pc, #184]	; (8006864 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d101      	bne.n	80067b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80067b0:	4b2d      	ldr	r3, [pc, #180]	; (8006868 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80067b2:	e001      	b.n	80067b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80067b4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80067b8:	685a      	ldr	r2, [r3, #4]
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	4929      	ldr	r1, [pc, #164]	; (8006864 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80067c0:	428b      	cmp	r3, r1
 80067c2:	d101      	bne.n	80067c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80067c4:	4b28      	ldr	r3, [pc, #160]	; (8006868 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80067c6:	e001      	b.n	80067cc <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80067c8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80067cc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80067d0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2201      	movs	r2, #1
 80067d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067de:	f043 0202 	orr.w	r2, r3, #2
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80067e6:	6878      	ldr	r0, [r7, #4]
 80067e8:	f7ff fdfa 	bl	80063e0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80067ec:	69bb      	ldr	r3, [r7, #24]
 80067ee:	f003 0308 	and.w	r3, r3, #8
 80067f2:	2b08      	cmp	r3, #8
 80067f4:	d131      	bne.n	800685a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 80067f6:	693b      	ldr	r3, [r7, #16]
 80067f8:	f003 0320 	and.w	r3, r3, #32
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d02c      	beq.n	800685a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	4a17      	ldr	r2, [pc, #92]	; (8006864 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d101      	bne.n	800680e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800680a:	4b17      	ldr	r3, [pc, #92]	; (8006868 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800680c:	e001      	b.n	8006812 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800680e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006812:	685a      	ldr	r2, [r3, #4]
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	4912      	ldr	r1, [pc, #72]	; (8006864 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800681a:	428b      	cmp	r3, r1
 800681c:	d101      	bne.n	8006822 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 800681e:	4b12      	ldr	r3, [pc, #72]	; (8006868 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006820:	e001      	b.n	8006826 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8006822:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006826:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800682a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	685a      	ldr	r2, [r3, #4]
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800683a:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2201      	movs	r2, #1
 8006840:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006848:	f043 0204 	orr.w	r2, r3, #4
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006850:	6878      	ldr	r0, [r7, #4]
 8006852:	f7ff fdc5 	bl	80063e0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006856:	e000      	b.n	800685a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006858:	bf00      	nop
}
 800685a:	bf00      	nop
 800685c:	3720      	adds	r7, #32
 800685e:	46bd      	mov	sp, r7
 8006860:	bd80      	pop	{r7, pc}
 8006862:	bf00      	nop
 8006864:	40003800 	.word	0x40003800
 8006868:	40003400 	.word	0x40003400

0800686c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800686c:	b480      	push	{r7}
 800686e:	b083      	sub	sp, #12
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8006874:	bf00      	nop
 8006876:	370c      	adds	r7, #12
 8006878:	46bd      	mov	sp, r7
 800687a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687e:	4770      	bx	lr

08006880 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b082      	sub	sp, #8
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800688c:	1c99      	adds	r1, r3, #2
 800688e:	687a      	ldr	r2, [r7, #4]
 8006890:	6251      	str	r1, [r2, #36]	; 0x24
 8006892:	881a      	ldrh	r2, [r3, #0]
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800689e:	b29b      	uxth	r3, r3
 80068a0:	3b01      	subs	r3, #1
 80068a2:	b29a      	uxth	r2, r3
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068ac:	b29b      	uxth	r3, r3
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d113      	bne.n	80068da <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	685a      	ldr	r2, [r3, #4]
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80068c0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80068c6:	b29b      	uxth	r3, r3
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d106      	bne.n	80068da <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2201      	movs	r2, #1
 80068d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80068d4:	6878      	ldr	r0, [r7, #4]
 80068d6:	f7ff ffc9 	bl	800686c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80068da:	bf00      	nop
 80068dc:	3708      	adds	r7, #8
 80068de:	46bd      	mov	sp, r7
 80068e0:	bd80      	pop	{r7, pc}
	...

080068e4 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b082      	sub	sp, #8
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068f0:	1c99      	adds	r1, r3, #2
 80068f2:	687a      	ldr	r2, [r7, #4]
 80068f4:	6251      	str	r1, [r2, #36]	; 0x24
 80068f6:	8819      	ldrh	r1, [r3, #0]
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	4a1d      	ldr	r2, [pc, #116]	; (8006974 <I2SEx_TxISR_I2SExt+0x90>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d101      	bne.n	8006906 <I2SEx_TxISR_I2SExt+0x22>
 8006902:	4b1d      	ldr	r3, [pc, #116]	; (8006978 <I2SEx_TxISR_I2SExt+0x94>)
 8006904:	e001      	b.n	800690a <I2SEx_TxISR_I2SExt+0x26>
 8006906:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800690a:	460a      	mov	r2, r1
 800690c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006912:	b29b      	uxth	r3, r3
 8006914:	3b01      	subs	r3, #1
 8006916:	b29a      	uxth	r2, r3
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006920:	b29b      	uxth	r3, r3
 8006922:	2b00      	cmp	r3, #0
 8006924:	d121      	bne.n	800696a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	4a12      	ldr	r2, [pc, #72]	; (8006974 <I2SEx_TxISR_I2SExt+0x90>)
 800692c:	4293      	cmp	r3, r2
 800692e:	d101      	bne.n	8006934 <I2SEx_TxISR_I2SExt+0x50>
 8006930:	4b11      	ldr	r3, [pc, #68]	; (8006978 <I2SEx_TxISR_I2SExt+0x94>)
 8006932:	e001      	b.n	8006938 <I2SEx_TxISR_I2SExt+0x54>
 8006934:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006938:	685a      	ldr	r2, [r3, #4]
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	490d      	ldr	r1, [pc, #52]	; (8006974 <I2SEx_TxISR_I2SExt+0x90>)
 8006940:	428b      	cmp	r3, r1
 8006942:	d101      	bne.n	8006948 <I2SEx_TxISR_I2SExt+0x64>
 8006944:	4b0c      	ldr	r3, [pc, #48]	; (8006978 <I2SEx_TxISR_I2SExt+0x94>)
 8006946:	e001      	b.n	800694c <I2SEx_TxISR_I2SExt+0x68>
 8006948:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800694c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006950:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006956:	b29b      	uxth	r3, r3
 8006958:	2b00      	cmp	r3, #0
 800695a:	d106      	bne.n	800696a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2201      	movs	r2, #1
 8006960:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006964:	6878      	ldr	r0, [r7, #4]
 8006966:	f7ff ff81 	bl	800686c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800696a:	bf00      	nop
 800696c:	3708      	adds	r7, #8
 800696e:	46bd      	mov	sp, r7
 8006970:	bd80      	pop	{r7, pc}
 8006972:	bf00      	nop
 8006974:	40003800 	.word	0x40003800
 8006978:	40003400 	.word	0x40003400

0800697c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b082      	sub	sp, #8
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	68d8      	ldr	r0, [r3, #12]
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800698e:	1c99      	adds	r1, r3, #2
 8006990:	687a      	ldr	r2, [r7, #4]
 8006992:	62d1      	str	r1, [r2, #44]	; 0x2c
 8006994:	b282      	uxth	r2, r0
 8006996:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800699c:	b29b      	uxth	r3, r3
 800699e:	3b01      	subs	r3, #1
 80069a0:	b29a      	uxth	r2, r3
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80069aa:	b29b      	uxth	r3, r3
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d113      	bne.n	80069d8 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	685a      	ldr	r2, [r3, #4]
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80069be:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069c4:	b29b      	uxth	r3, r3
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d106      	bne.n	80069d8 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2201      	movs	r2, #1
 80069ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80069d2:	6878      	ldr	r0, [r7, #4]
 80069d4:	f7ff ff4a 	bl	800686c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80069d8:	bf00      	nop
 80069da:	3708      	adds	r7, #8
 80069dc:	46bd      	mov	sp, r7
 80069de:	bd80      	pop	{r7, pc}

080069e0 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b082      	sub	sp, #8
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	4a20      	ldr	r2, [pc, #128]	; (8006a70 <I2SEx_RxISR_I2SExt+0x90>)
 80069ee:	4293      	cmp	r3, r2
 80069f0:	d101      	bne.n	80069f6 <I2SEx_RxISR_I2SExt+0x16>
 80069f2:	4b20      	ldr	r3, [pc, #128]	; (8006a74 <I2SEx_RxISR_I2SExt+0x94>)
 80069f4:	e001      	b.n	80069fa <I2SEx_RxISR_I2SExt+0x1a>
 80069f6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80069fa:	68d8      	ldr	r0, [r3, #12]
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a00:	1c99      	adds	r1, r3, #2
 8006a02:	687a      	ldr	r2, [r7, #4]
 8006a04:	62d1      	str	r1, [r2, #44]	; 0x2c
 8006a06:	b282      	uxth	r2, r0
 8006a08:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006a0e:	b29b      	uxth	r3, r3
 8006a10:	3b01      	subs	r3, #1
 8006a12:	b29a      	uxth	r2, r3
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006a1c:	b29b      	uxth	r3, r3
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d121      	bne.n	8006a66 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	4a12      	ldr	r2, [pc, #72]	; (8006a70 <I2SEx_RxISR_I2SExt+0x90>)
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d101      	bne.n	8006a30 <I2SEx_RxISR_I2SExt+0x50>
 8006a2c:	4b11      	ldr	r3, [pc, #68]	; (8006a74 <I2SEx_RxISR_I2SExt+0x94>)
 8006a2e:	e001      	b.n	8006a34 <I2SEx_RxISR_I2SExt+0x54>
 8006a30:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006a34:	685a      	ldr	r2, [r3, #4]
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	490d      	ldr	r1, [pc, #52]	; (8006a70 <I2SEx_RxISR_I2SExt+0x90>)
 8006a3c:	428b      	cmp	r3, r1
 8006a3e:	d101      	bne.n	8006a44 <I2SEx_RxISR_I2SExt+0x64>
 8006a40:	4b0c      	ldr	r3, [pc, #48]	; (8006a74 <I2SEx_RxISR_I2SExt+0x94>)
 8006a42:	e001      	b.n	8006a48 <I2SEx_RxISR_I2SExt+0x68>
 8006a44:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006a48:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006a4c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a52:	b29b      	uxth	r3, r3
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d106      	bne.n	8006a66 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2201      	movs	r2, #1
 8006a5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006a60:	6878      	ldr	r0, [r7, #4]
 8006a62:	f7ff ff03 	bl	800686c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006a66:	bf00      	nop
 8006a68:	3708      	adds	r7, #8
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	bd80      	pop	{r7, pc}
 8006a6e:	bf00      	nop
 8006a70:	40003800 	.word	0x40003800
 8006a74:	40003400 	.word	0x40003400

08006a78 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b086      	sub	sp, #24
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d101      	bne.n	8006a8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006a86:	2301      	movs	r3, #1
 8006a88:	e264      	b.n	8006f54 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f003 0301 	and.w	r3, r3, #1
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d075      	beq.n	8006b82 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006a96:	4ba3      	ldr	r3, [pc, #652]	; (8006d24 <HAL_RCC_OscConfig+0x2ac>)
 8006a98:	689b      	ldr	r3, [r3, #8]
 8006a9a:	f003 030c 	and.w	r3, r3, #12
 8006a9e:	2b04      	cmp	r3, #4
 8006aa0:	d00c      	beq.n	8006abc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006aa2:	4ba0      	ldr	r3, [pc, #640]	; (8006d24 <HAL_RCC_OscConfig+0x2ac>)
 8006aa4:	689b      	ldr	r3, [r3, #8]
 8006aa6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006aaa:	2b08      	cmp	r3, #8
 8006aac:	d112      	bne.n	8006ad4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006aae:	4b9d      	ldr	r3, [pc, #628]	; (8006d24 <HAL_RCC_OscConfig+0x2ac>)
 8006ab0:	685b      	ldr	r3, [r3, #4]
 8006ab2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ab6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006aba:	d10b      	bne.n	8006ad4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006abc:	4b99      	ldr	r3, [pc, #612]	; (8006d24 <HAL_RCC_OscConfig+0x2ac>)
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d05b      	beq.n	8006b80 <HAL_RCC_OscConfig+0x108>
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	685b      	ldr	r3, [r3, #4]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d157      	bne.n	8006b80 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006ad0:	2301      	movs	r3, #1
 8006ad2:	e23f      	b.n	8006f54 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	685b      	ldr	r3, [r3, #4]
 8006ad8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006adc:	d106      	bne.n	8006aec <HAL_RCC_OscConfig+0x74>
 8006ade:	4b91      	ldr	r3, [pc, #580]	; (8006d24 <HAL_RCC_OscConfig+0x2ac>)
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	4a90      	ldr	r2, [pc, #576]	; (8006d24 <HAL_RCC_OscConfig+0x2ac>)
 8006ae4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ae8:	6013      	str	r3, [r2, #0]
 8006aea:	e01d      	b.n	8006b28 <HAL_RCC_OscConfig+0xb0>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	685b      	ldr	r3, [r3, #4]
 8006af0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006af4:	d10c      	bne.n	8006b10 <HAL_RCC_OscConfig+0x98>
 8006af6:	4b8b      	ldr	r3, [pc, #556]	; (8006d24 <HAL_RCC_OscConfig+0x2ac>)
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	4a8a      	ldr	r2, [pc, #552]	; (8006d24 <HAL_RCC_OscConfig+0x2ac>)
 8006afc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006b00:	6013      	str	r3, [r2, #0]
 8006b02:	4b88      	ldr	r3, [pc, #544]	; (8006d24 <HAL_RCC_OscConfig+0x2ac>)
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	4a87      	ldr	r2, [pc, #540]	; (8006d24 <HAL_RCC_OscConfig+0x2ac>)
 8006b08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b0c:	6013      	str	r3, [r2, #0]
 8006b0e:	e00b      	b.n	8006b28 <HAL_RCC_OscConfig+0xb0>
 8006b10:	4b84      	ldr	r3, [pc, #528]	; (8006d24 <HAL_RCC_OscConfig+0x2ac>)
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	4a83      	ldr	r2, [pc, #524]	; (8006d24 <HAL_RCC_OscConfig+0x2ac>)
 8006b16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b1a:	6013      	str	r3, [r2, #0]
 8006b1c:	4b81      	ldr	r3, [pc, #516]	; (8006d24 <HAL_RCC_OscConfig+0x2ac>)
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	4a80      	ldr	r2, [pc, #512]	; (8006d24 <HAL_RCC_OscConfig+0x2ac>)
 8006b22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006b26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	685b      	ldr	r3, [r3, #4]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d013      	beq.n	8006b58 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b30:	f7fb fed0 	bl	80028d4 <HAL_GetTick>
 8006b34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b36:	e008      	b.n	8006b4a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006b38:	f7fb fecc 	bl	80028d4 <HAL_GetTick>
 8006b3c:	4602      	mov	r2, r0
 8006b3e:	693b      	ldr	r3, [r7, #16]
 8006b40:	1ad3      	subs	r3, r2, r3
 8006b42:	2b64      	cmp	r3, #100	; 0x64
 8006b44:	d901      	bls.n	8006b4a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006b46:	2303      	movs	r3, #3
 8006b48:	e204      	b.n	8006f54 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b4a:	4b76      	ldr	r3, [pc, #472]	; (8006d24 <HAL_RCC_OscConfig+0x2ac>)
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d0f0      	beq.n	8006b38 <HAL_RCC_OscConfig+0xc0>
 8006b56:	e014      	b.n	8006b82 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b58:	f7fb febc 	bl	80028d4 <HAL_GetTick>
 8006b5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006b5e:	e008      	b.n	8006b72 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006b60:	f7fb feb8 	bl	80028d4 <HAL_GetTick>
 8006b64:	4602      	mov	r2, r0
 8006b66:	693b      	ldr	r3, [r7, #16]
 8006b68:	1ad3      	subs	r3, r2, r3
 8006b6a:	2b64      	cmp	r3, #100	; 0x64
 8006b6c:	d901      	bls.n	8006b72 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006b6e:	2303      	movs	r3, #3
 8006b70:	e1f0      	b.n	8006f54 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006b72:	4b6c      	ldr	r3, [pc, #432]	; (8006d24 <HAL_RCC_OscConfig+0x2ac>)
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d1f0      	bne.n	8006b60 <HAL_RCC_OscConfig+0xe8>
 8006b7e:	e000      	b.n	8006b82 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f003 0302 	and.w	r3, r3, #2
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d063      	beq.n	8006c56 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006b8e:	4b65      	ldr	r3, [pc, #404]	; (8006d24 <HAL_RCC_OscConfig+0x2ac>)
 8006b90:	689b      	ldr	r3, [r3, #8]
 8006b92:	f003 030c 	and.w	r3, r3, #12
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d00b      	beq.n	8006bb2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006b9a:	4b62      	ldr	r3, [pc, #392]	; (8006d24 <HAL_RCC_OscConfig+0x2ac>)
 8006b9c:	689b      	ldr	r3, [r3, #8]
 8006b9e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006ba2:	2b08      	cmp	r3, #8
 8006ba4:	d11c      	bne.n	8006be0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006ba6:	4b5f      	ldr	r3, [pc, #380]	; (8006d24 <HAL_RCC_OscConfig+0x2ac>)
 8006ba8:	685b      	ldr	r3, [r3, #4]
 8006baa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d116      	bne.n	8006be0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006bb2:	4b5c      	ldr	r3, [pc, #368]	; (8006d24 <HAL_RCC_OscConfig+0x2ac>)
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f003 0302 	and.w	r3, r3, #2
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d005      	beq.n	8006bca <HAL_RCC_OscConfig+0x152>
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	68db      	ldr	r3, [r3, #12]
 8006bc2:	2b01      	cmp	r3, #1
 8006bc4:	d001      	beq.n	8006bca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006bc6:	2301      	movs	r3, #1
 8006bc8:	e1c4      	b.n	8006f54 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006bca:	4b56      	ldr	r3, [pc, #344]	; (8006d24 <HAL_RCC_OscConfig+0x2ac>)
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	691b      	ldr	r3, [r3, #16]
 8006bd6:	00db      	lsls	r3, r3, #3
 8006bd8:	4952      	ldr	r1, [pc, #328]	; (8006d24 <HAL_RCC_OscConfig+0x2ac>)
 8006bda:	4313      	orrs	r3, r2
 8006bdc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006bde:	e03a      	b.n	8006c56 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	68db      	ldr	r3, [r3, #12]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d020      	beq.n	8006c2a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006be8:	4b4f      	ldr	r3, [pc, #316]	; (8006d28 <HAL_RCC_OscConfig+0x2b0>)
 8006bea:	2201      	movs	r2, #1
 8006bec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bee:	f7fb fe71 	bl	80028d4 <HAL_GetTick>
 8006bf2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006bf4:	e008      	b.n	8006c08 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006bf6:	f7fb fe6d 	bl	80028d4 <HAL_GetTick>
 8006bfa:	4602      	mov	r2, r0
 8006bfc:	693b      	ldr	r3, [r7, #16]
 8006bfe:	1ad3      	subs	r3, r2, r3
 8006c00:	2b02      	cmp	r3, #2
 8006c02:	d901      	bls.n	8006c08 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006c04:	2303      	movs	r3, #3
 8006c06:	e1a5      	b.n	8006f54 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c08:	4b46      	ldr	r3, [pc, #280]	; (8006d24 <HAL_RCC_OscConfig+0x2ac>)
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f003 0302 	and.w	r3, r3, #2
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d0f0      	beq.n	8006bf6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c14:	4b43      	ldr	r3, [pc, #268]	; (8006d24 <HAL_RCC_OscConfig+0x2ac>)
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	691b      	ldr	r3, [r3, #16]
 8006c20:	00db      	lsls	r3, r3, #3
 8006c22:	4940      	ldr	r1, [pc, #256]	; (8006d24 <HAL_RCC_OscConfig+0x2ac>)
 8006c24:	4313      	orrs	r3, r2
 8006c26:	600b      	str	r3, [r1, #0]
 8006c28:	e015      	b.n	8006c56 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006c2a:	4b3f      	ldr	r3, [pc, #252]	; (8006d28 <HAL_RCC_OscConfig+0x2b0>)
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c30:	f7fb fe50 	bl	80028d4 <HAL_GetTick>
 8006c34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006c36:	e008      	b.n	8006c4a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006c38:	f7fb fe4c 	bl	80028d4 <HAL_GetTick>
 8006c3c:	4602      	mov	r2, r0
 8006c3e:	693b      	ldr	r3, [r7, #16]
 8006c40:	1ad3      	subs	r3, r2, r3
 8006c42:	2b02      	cmp	r3, #2
 8006c44:	d901      	bls.n	8006c4a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006c46:	2303      	movs	r3, #3
 8006c48:	e184      	b.n	8006f54 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006c4a:	4b36      	ldr	r3, [pc, #216]	; (8006d24 <HAL_RCC_OscConfig+0x2ac>)
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f003 0302 	and.w	r3, r3, #2
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d1f0      	bne.n	8006c38 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f003 0308 	and.w	r3, r3, #8
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d030      	beq.n	8006cc4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	695b      	ldr	r3, [r3, #20]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d016      	beq.n	8006c98 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006c6a:	4b30      	ldr	r3, [pc, #192]	; (8006d2c <HAL_RCC_OscConfig+0x2b4>)
 8006c6c:	2201      	movs	r2, #1
 8006c6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c70:	f7fb fe30 	bl	80028d4 <HAL_GetTick>
 8006c74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006c76:	e008      	b.n	8006c8a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006c78:	f7fb fe2c 	bl	80028d4 <HAL_GetTick>
 8006c7c:	4602      	mov	r2, r0
 8006c7e:	693b      	ldr	r3, [r7, #16]
 8006c80:	1ad3      	subs	r3, r2, r3
 8006c82:	2b02      	cmp	r3, #2
 8006c84:	d901      	bls.n	8006c8a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006c86:	2303      	movs	r3, #3
 8006c88:	e164      	b.n	8006f54 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006c8a:	4b26      	ldr	r3, [pc, #152]	; (8006d24 <HAL_RCC_OscConfig+0x2ac>)
 8006c8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c8e:	f003 0302 	and.w	r3, r3, #2
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d0f0      	beq.n	8006c78 <HAL_RCC_OscConfig+0x200>
 8006c96:	e015      	b.n	8006cc4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006c98:	4b24      	ldr	r3, [pc, #144]	; (8006d2c <HAL_RCC_OscConfig+0x2b4>)
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006c9e:	f7fb fe19 	bl	80028d4 <HAL_GetTick>
 8006ca2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006ca4:	e008      	b.n	8006cb8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006ca6:	f7fb fe15 	bl	80028d4 <HAL_GetTick>
 8006caa:	4602      	mov	r2, r0
 8006cac:	693b      	ldr	r3, [r7, #16]
 8006cae:	1ad3      	subs	r3, r2, r3
 8006cb0:	2b02      	cmp	r3, #2
 8006cb2:	d901      	bls.n	8006cb8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006cb4:	2303      	movs	r3, #3
 8006cb6:	e14d      	b.n	8006f54 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006cb8:	4b1a      	ldr	r3, [pc, #104]	; (8006d24 <HAL_RCC_OscConfig+0x2ac>)
 8006cba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006cbc:	f003 0302 	and.w	r3, r3, #2
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d1f0      	bne.n	8006ca6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f003 0304 	and.w	r3, r3, #4
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	f000 80a0 	beq.w	8006e12 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006cd6:	4b13      	ldr	r3, [pc, #76]	; (8006d24 <HAL_RCC_OscConfig+0x2ac>)
 8006cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d10f      	bne.n	8006d02 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	60bb      	str	r3, [r7, #8]
 8006ce6:	4b0f      	ldr	r3, [pc, #60]	; (8006d24 <HAL_RCC_OscConfig+0x2ac>)
 8006ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cea:	4a0e      	ldr	r2, [pc, #56]	; (8006d24 <HAL_RCC_OscConfig+0x2ac>)
 8006cec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006cf0:	6413      	str	r3, [r2, #64]	; 0x40
 8006cf2:	4b0c      	ldr	r3, [pc, #48]	; (8006d24 <HAL_RCC_OscConfig+0x2ac>)
 8006cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006cfa:	60bb      	str	r3, [r7, #8]
 8006cfc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006cfe:	2301      	movs	r3, #1
 8006d00:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d02:	4b0b      	ldr	r3, [pc, #44]	; (8006d30 <HAL_RCC_OscConfig+0x2b8>)
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d121      	bne.n	8006d52 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006d0e:	4b08      	ldr	r3, [pc, #32]	; (8006d30 <HAL_RCC_OscConfig+0x2b8>)
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	4a07      	ldr	r2, [pc, #28]	; (8006d30 <HAL_RCC_OscConfig+0x2b8>)
 8006d14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006d1a:	f7fb fddb 	bl	80028d4 <HAL_GetTick>
 8006d1e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d20:	e011      	b.n	8006d46 <HAL_RCC_OscConfig+0x2ce>
 8006d22:	bf00      	nop
 8006d24:	40023800 	.word	0x40023800
 8006d28:	42470000 	.word	0x42470000
 8006d2c:	42470e80 	.word	0x42470e80
 8006d30:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d34:	f7fb fdce 	bl	80028d4 <HAL_GetTick>
 8006d38:	4602      	mov	r2, r0
 8006d3a:	693b      	ldr	r3, [r7, #16]
 8006d3c:	1ad3      	subs	r3, r2, r3
 8006d3e:	2b02      	cmp	r3, #2
 8006d40:	d901      	bls.n	8006d46 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8006d42:	2303      	movs	r3, #3
 8006d44:	e106      	b.n	8006f54 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d46:	4b85      	ldr	r3, [pc, #532]	; (8006f5c <HAL_RCC_OscConfig+0x4e4>)
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d0f0      	beq.n	8006d34 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	689b      	ldr	r3, [r3, #8]
 8006d56:	2b01      	cmp	r3, #1
 8006d58:	d106      	bne.n	8006d68 <HAL_RCC_OscConfig+0x2f0>
 8006d5a:	4b81      	ldr	r3, [pc, #516]	; (8006f60 <HAL_RCC_OscConfig+0x4e8>)
 8006d5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d5e:	4a80      	ldr	r2, [pc, #512]	; (8006f60 <HAL_RCC_OscConfig+0x4e8>)
 8006d60:	f043 0301 	orr.w	r3, r3, #1
 8006d64:	6713      	str	r3, [r2, #112]	; 0x70
 8006d66:	e01c      	b.n	8006da2 <HAL_RCC_OscConfig+0x32a>
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	689b      	ldr	r3, [r3, #8]
 8006d6c:	2b05      	cmp	r3, #5
 8006d6e:	d10c      	bne.n	8006d8a <HAL_RCC_OscConfig+0x312>
 8006d70:	4b7b      	ldr	r3, [pc, #492]	; (8006f60 <HAL_RCC_OscConfig+0x4e8>)
 8006d72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d74:	4a7a      	ldr	r2, [pc, #488]	; (8006f60 <HAL_RCC_OscConfig+0x4e8>)
 8006d76:	f043 0304 	orr.w	r3, r3, #4
 8006d7a:	6713      	str	r3, [r2, #112]	; 0x70
 8006d7c:	4b78      	ldr	r3, [pc, #480]	; (8006f60 <HAL_RCC_OscConfig+0x4e8>)
 8006d7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d80:	4a77      	ldr	r2, [pc, #476]	; (8006f60 <HAL_RCC_OscConfig+0x4e8>)
 8006d82:	f043 0301 	orr.w	r3, r3, #1
 8006d86:	6713      	str	r3, [r2, #112]	; 0x70
 8006d88:	e00b      	b.n	8006da2 <HAL_RCC_OscConfig+0x32a>
 8006d8a:	4b75      	ldr	r3, [pc, #468]	; (8006f60 <HAL_RCC_OscConfig+0x4e8>)
 8006d8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d8e:	4a74      	ldr	r2, [pc, #464]	; (8006f60 <HAL_RCC_OscConfig+0x4e8>)
 8006d90:	f023 0301 	bic.w	r3, r3, #1
 8006d94:	6713      	str	r3, [r2, #112]	; 0x70
 8006d96:	4b72      	ldr	r3, [pc, #456]	; (8006f60 <HAL_RCC_OscConfig+0x4e8>)
 8006d98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d9a:	4a71      	ldr	r2, [pc, #452]	; (8006f60 <HAL_RCC_OscConfig+0x4e8>)
 8006d9c:	f023 0304 	bic.w	r3, r3, #4
 8006da0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	689b      	ldr	r3, [r3, #8]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d015      	beq.n	8006dd6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006daa:	f7fb fd93 	bl	80028d4 <HAL_GetTick>
 8006dae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006db0:	e00a      	b.n	8006dc8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006db2:	f7fb fd8f 	bl	80028d4 <HAL_GetTick>
 8006db6:	4602      	mov	r2, r0
 8006db8:	693b      	ldr	r3, [r7, #16]
 8006dba:	1ad3      	subs	r3, r2, r3
 8006dbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8006dc0:	4293      	cmp	r3, r2
 8006dc2:	d901      	bls.n	8006dc8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006dc4:	2303      	movs	r3, #3
 8006dc6:	e0c5      	b.n	8006f54 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006dc8:	4b65      	ldr	r3, [pc, #404]	; (8006f60 <HAL_RCC_OscConfig+0x4e8>)
 8006dca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dcc:	f003 0302 	and.w	r3, r3, #2
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d0ee      	beq.n	8006db2 <HAL_RCC_OscConfig+0x33a>
 8006dd4:	e014      	b.n	8006e00 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006dd6:	f7fb fd7d 	bl	80028d4 <HAL_GetTick>
 8006dda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006ddc:	e00a      	b.n	8006df4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006dde:	f7fb fd79 	bl	80028d4 <HAL_GetTick>
 8006de2:	4602      	mov	r2, r0
 8006de4:	693b      	ldr	r3, [r7, #16]
 8006de6:	1ad3      	subs	r3, r2, r3
 8006de8:	f241 3288 	movw	r2, #5000	; 0x1388
 8006dec:	4293      	cmp	r3, r2
 8006dee:	d901      	bls.n	8006df4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006df0:	2303      	movs	r3, #3
 8006df2:	e0af      	b.n	8006f54 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006df4:	4b5a      	ldr	r3, [pc, #360]	; (8006f60 <HAL_RCC_OscConfig+0x4e8>)
 8006df6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006df8:	f003 0302 	and.w	r3, r3, #2
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d1ee      	bne.n	8006dde <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006e00:	7dfb      	ldrb	r3, [r7, #23]
 8006e02:	2b01      	cmp	r3, #1
 8006e04:	d105      	bne.n	8006e12 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006e06:	4b56      	ldr	r3, [pc, #344]	; (8006f60 <HAL_RCC_OscConfig+0x4e8>)
 8006e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e0a:	4a55      	ldr	r2, [pc, #340]	; (8006f60 <HAL_RCC_OscConfig+0x4e8>)
 8006e0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006e10:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	699b      	ldr	r3, [r3, #24]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	f000 809b 	beq.w	8006f52 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006e1c:	4b50      	ldr	r3, [pc, #320]	; (8006f60 <HAL_RCC_OscConfig+0x4e8>)
 8006e1e:	689b      	ldr	r3, [r3, #8]
 8006e20:	f003 030c 	and.w	r3, r3, #12
 8006e24:	2b08      	cmp	r3, #8
 8006e26:	d05c      	beq.n	8006ee2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	699b      	ldr	r3, [r3, #24]
 8006e2c:	2b02      	cmp	r3, #2
 8006e2e:	d141      	bne.n	8006eb4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e30:	4b4c      	ldr	r3, [pc, #304]	; (8006f64 <HAL_RCC_OscConfig+0x4ec>)
 8006e32:	2200      	movs	r2, #0
 8006e34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e36:	f7fb fd4d 	bl	80028d4 <HAL_GetTick>
 8006e3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e3c:	e008      	b.n	8006e50 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006e3e:	f7fb fd49 	bl	80028d4 <HAL_GetTick>
 8006e42:	4602      	mov	r2, r0
 8006e44:	693b      	ldr	r3, [r7, #16]
 8006e46:	1ad3      	subs	r3, r2, r3
 8006e48:	2b02      	cmp	r3, #2
 8006e4a:	d901      	bls.n	8006e50 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8006e4c:	2303      	movs	r3, #3
 8006e4e:	e081      	b.n	8006f54 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e50:	4b43      	ldr	r3, [pc, #268]	; (8006f60 <HAL_RCC_OscConfig+0x4e8>)
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d1f0      	bne.n	8006e3e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	69da      	ldr	r2, [r3, #28]
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	6a1b      	ldr	r3, [r3, #32]
 8006e64:	431a      	orrs	r2, r3
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e6a:	019b      	lsls	r3, r3, #6
 8006e6c:	431a      	orrs	r2, r3
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e72:	085b      	lsrs	r3, r3, #1
 8006e74:	3b01      	subs	r3, #1
 8006e76:	041b      	lsls	r3, r3, #16
 8006e78:	431a      	orrs	r2, r3
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e7e:	061b      	lsls	r3, r3, #24
 8006e80:	4937      	ldr	r1, [pc, #220]	; (8006f60 <HAL_RCC_OscConfig+0x4e8>)
 8006e82:	4313      	orrs	r3, r2
 8006e84:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006e86:	4b37      	ldr	r3, [pc, #220]	; (8006f64 <HAL_RCC_OscConfig+0x4ec>)
 8006e88:	2201      	movs	r2, #1
 8006e8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e8c:	f7fb fd22 	bl	80028d4 <HAL_GetTick>
 8006e90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e92:	e008      	b.n	8006ea6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006e94:	f7fb fd1e 	bl	80028d4 <HAL_GetTick>
 8006e98:	4602      	mov	r2, r0
 8006e9a:	693b      	ldr	r3, [r7, #16]
 8006e9c:	1ad3      	subs	r3, r2, r3
 8006e9e:	2b02      	cmp	r3, #2
 8006ea0:	d901      	bls.n	8006ea6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8006ea2:	2303      	movs	r3, #3
 8006ea4:	e056      	b.n	8006f54 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006ea6:	4b2e      	ldr	r3, [pc, #184]	; (8006f60 <HAL_RCC_OscConfig+0x4e8>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d0f0      	beq.n	8006e94 <HAL_RCC_OscConfig+0x41c>
 8006eb2:	e04e      	b.n	8006f52 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006eb4:	4b2b      	ldr	r3, [pc, #172]	; (8006f64 <HAL_RCC_OscConfig+0x4ec>)
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006eba:	f7fb fd0b 	bl	80028d4 <HAL_GetTick>
 8006ebe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ec0:	e008      	b.n	8006ed4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006ec2:	f7fb fd07 	bl	80028d4 <HAL_GetTick>
 8006ec6:	4602      	mov	r2, r0
 8006ec8:	693b      	ldr	r3, [r7, #16]
 8006eca:	1ad3      	subs	r3, r2, r3
 8006ecc:	2b02      	cmp	r3, #2
 8006ece:	d901      	bls.n	8006ed4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006ed0:	2303      	movs	r3, #3
 8006ed2:	e03f      	b.n	8006f54 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ed4:	4b22      	ldr	r3, [pc, #136]	; (8006f60 <HAL_RCC_OscConfig+0x4e8>)
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d1f0      	bne.n	8006ec2 <HAL_RCC_OscConfig+0x44a>
 8006ee0:	e037      	b.n	8006f52 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	699b      	ldr	r3, [r3, #24]
 8006ee6:	2b01      	cmp	r3, #1
 8006ee8:	d101      	bne.n	8006eee <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8006eea:	2301      	movs	r3, #1
 8006eec:	e032      	b.n	8006f54 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006eee:	4b1c      	ldr	r3, [pc, #112]	; (8006f60 <HAL_RCC_OscConfig+0x4e8>)
 8006ef0:	685b      	ldr	r3, [r3, #4]
 8006ef2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	699b      	ldr	r3, [r3, #24]
 8006ef8:	2b01      	cmp	r3, #1
 8006efa:	d028      	beq.n	8006f4e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006f06:	429a      	cmp	r2, r3
 8006f08:	d121      	bne.n	8006f4e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f14:	429a      	cmp	r2, r3
 8006f16:	d11a      	bne.n	8006f4e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006f18:	68fa      	ldr	r2, [r7, #12]
 8006f1a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006f1e:	4013      	ands	r3, r2
 8006f20:	687a      	ldr	r2, [r7, #4]
 8006f22:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006f24:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006f26:	4293      	cmp	r3, r2
 8006f28:	d111      	bne.n	8006f4e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f34:	085b      	lsrs	r3, r3, #1
 8006f36:	3b01      	subs	r3, #1
 8006f38:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006f3a:	429a      	cmp	r2, r3
 8006f3c:	d107      	bne.n	8006f4e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f48:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006f4a:	429a      	cmp	r2, r3
 8006f4c:	d001      	beq.n	8006f52 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8006f4e:	2301      	movs	r3, #1
 8006f50:	e000      	b.n	8006f54 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8006f52:	2300      	movs	r3, #0
}
 8006f54:	4618      	mov	r0, r3
 8006f56:	3718      	adds	r7, #24
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	bd80      	pop	{r7, pc}
 8006f5c:	40007000 	.word	0x40007000
 8006f60:	40023800 	.word	0x40023800
 8006f64:	42470060 	.word	0x42470060

08006f68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b084      	sub	sp, #16
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
 8006f70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d101      	bne.n	8006f7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006f78:	2301      	movs	r3, #1
 8006f7a:	e0cc      	b.n	8007116 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006f7c:	4b68      	ldr	r3, [pc, #416]	; (8007120 <HAL_RCC_ClockConfig+0x1b8>)
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f003 0307 	and.w	r3, r3, #7
 8006f84:	683a      	ldr	r2, [r7, #0]
 8006f86:	429a      	cmp	r2, r3
 8006f88:	d90c      	bls.n	8006fa4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f8a:	4b65      	ldr	r3, [pc, #404]	; (8007120 <HAL_RCC_ClockConfig+0x1b8>)
 8006f8c:	683a      	ldr	r2, [r7, #0]
 8006f8e:	b2d2      	uxtb	r2, r2
 8006f90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f92:	4b63      	ldr	r3, [pc, #396]	; (8007120 <HAL_RCC_ClockConfig+0x1b8>)
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f003 0307 	and.w	r3, r3, #7
 8006f9a:	683a      	ldr	r2, [r7, #0]
 8006f9c:	429a      	cmp	r2, r3
 8006f9e:	d001      	beq.n	8006fa4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006fa0:	2301      	movs	r3, #1
 8006fa2:	e0b8      	b.n	8007116 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f003 0302 	and.w	r3, r3, #2
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d020      	beq.n	8006ff2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f003 0304 	and.w	r3, r3, #4
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d005      	beq.n	8006fc8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006fbc:	4b59      	ldr	r3, [pc, #356]	; (8007124 <HAL_RCC_ClockConfig+0x1bc>)
 8006fbe:	689b      	ldr	r3, [r3, #8]
 8006fc0:	4a58      	ldr	r2, [pc, #352]	; (8007124 <HAL_RCC_ClockConfig+0x1bc>)
 8006fc2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006fc6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f003 0308 	and.w	r3, r3, #8
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d005      	beq.n	8006fe0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006fd4:	4b53      	ldr	r3, [pc, #332]	; (8007124 <HAL_RCC_ClockConfig+0x1bc>)
 8006fd6:	689b      	ldr	r3, [r3, #8]
 8006fd8:	4a52      	ldr	r2, [pc, #328]	; (8007124 <HAL_RCC_ClockConfig+0x1bc>)
 8006fda:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006fde:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006fe0:	4b50      	ldr	r3, [pc, #320]	; (8007124 <HAL_RCC_ClockConfig+0x1bc>)
 8006fe2:	689b      	ldr	r3, [r3, #8]
 8006fe4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	689b      	ldr	r3, [r3, #8]
 8006fec:	494d      	ldr	r1, [pc, #308]	; (8007124 <HAL_RCC_ClockConfig+0x1bc>)
 8006fee:	4313      	orrs	r3, r2
 8006ff0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f003 0301 	and.w	r3, r3, #1
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d044      	beq.n	8007088 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	685b      	ldr	r3, [r3, #4]
 8007002:	2b01      	cmp	r3, #1
 8007004:	d107      	bne.n	8007016 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007006:	4b47      	ldr	r3, [pc, #284]	; (8007124 <HAL_RCC_ClockConfig+0x1bc>)
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800700e:	2b00      	cmp	r3, #0
 8007010:	d119      	bne.n	8007046 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007012:	2301      	movs	r3, #1
 8007014:	e07f      	b.n	8007116 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	685b      	ldr	r3, [r3, #4]
 800701a:	2b02      	cmp	r3, #2
 800701c:	d003      	beq.n	8007026 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007022:	2b03      	cmp	r3, #3
 8007024:	d107      	bne.n	8007036 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007026:	4b3f      	ldr	r3, [pc, #252]	; (8007124 <HAL_RCC_ClockConfig+0x1bc>)
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800702e:	2b00      	cmp	r3, #0
 8007030:	d109      	bne.n	8007046 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007032:	2301      	movs	r3, #1
 8007034:	e06f      	b.n	8007116 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007036:	4b3b      	ldr	r3, [pc, #236]	; (8007124 <HAL_RCC_ClockConfig+0x1bc>)
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f003 0302 	and.w	r3, r3, #2
 800703e:	2b00      	cmp	r3, #0
 8007040:	d101      	bne.n	8007046 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007042:	2301      	movs	r3, #1
 8007044:	e067      	b.n	8007116 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007046:	4b37      	ldr	r3, [pc, #220]	; (8007124 <HAL_RCC_ClockConfig+0x1bc>)
 8007048:	689b      	ldr	r3, [r3, #8]
 800704a:	f023 0203 	bic.w	r2, r3, #3
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	685b      	ldr	r3, [r3, #4]
 8007052:	4934      	ldr	r1, [pc, #208]	; (8007124 <HAL_RCC_ClockConfig+0x1bc>)
 8007054:	4313      	orrs	r3, r2
 8007056:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007058:	f7fb fc3c 	bl	80028d4 <HAL_GetTick>
 800705c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800705e:	e00a      	b.n	8007076 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007060:	f7fb fc38 	bl	80028d4 <HAL_GetTick>
 8007064:	4602      	mov	r2, r0
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	1ad3      	subs	r3, r2, r3
 800706a:	f241 3288 	movw	r2, #5000	; 0x1388
 800706e:	4293      	cmp	r3, r2
 8007070:	d901      	bls.n	8007076 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007072:	2303      	movs	r3, #3
 8007074:	e04f      	b.n	8007116 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007076:	4b2b      	ldr	r3, [pc, #172]	; (8007124 <HAL_RCC_ClockConfig+0x1bc>)
 8007078:	689b      	ldr	r3, [r3, #8]
 800707a:	f003 020c 	and.w	r2, r3, #12
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	685b      	ldr	r3, [r3, #4]
 8007082:	009b      	lsls	r3, r3, #2
 8007084:	429a      	cmp	r2, r3
 8007086:	d1eb      	bne.n	8007060 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007088:	4b25      	ldr	r3, [pc, #148]	; (8007120 <HAL_RCC_ClockConfig+0x1b8>)
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f003 0307 	and.w	r3, r3, #7
 8007090:	683a      	ldr	r2, [r7, #0]
 8007092:	429a      	cmp	r2, r3
 8007094:	d20c      	bcs.n	80070b0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007096:	4b22      	ldr	r3, [pc, #136]	; (8007120 <HAL_RCC_ClockConfig+0x1b8>)
 8007098:	683a      	ldr	r2, [r7, #0]
 800709a:	b2d2      	uxtb	r2, r2
 800709c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800709e:	4b20      	ldr	r3, [pc, #128]	; (8007120 <HAL_RCC_ClockConfig+0x1b8>)
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f003 0307 	and.w	r3, r3, #7
 80070a6:	683a      	ldr	r2, [r7, #0]
 80070a8:	429a      	cmp	r2, r3
 80070aa:	d001      	beq.n	80070b0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80070ac:	2301      	movs	r3, #1
 80070ae:	e032      	b.n	8007116 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f003 0304 	and.w	r3, r3, #4
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d008      	beq.n	80070ce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80070bc:	4b19      	ldr	r3, [pc, #100]	; (8007124 <HAL_RCC_ClockConfig+0x1bc>)
 80070be:	689b      	ldr	r3, [r3, #8]
 80070c0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	68db      	ldr	r3, [r3, #12]
 80070c8:	4916      	ldr	r1, [pc, #88]	; (8007124 <HAL_RCC_ClockConfig+0x1bc>)
 80070ca:	4313      	orrs	r3, r2
 80070cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f003 0308 	and.w	r3, r3, #8
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d009      	beq.n	80070ee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80070da:	4b12      	ldr	r3, [pc, #72]	; (8007124 <HAL_RCC_ClockConfig+0x1bc>)
 80070dc:	689b      	ldr	r3, [r3, #8]
 80070de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	691b      	ldr	r3, [r3, #16]
 80070e6:	00db      	lsls	r3, r3, #3
 80070e8:	490e      	ldr	r1, [pc, #56]	; (8007124 <HAL_RCC_ClockConfig+0x1bc>)
 80070ea:	4313      	orrs	r3, r2
 80070ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80070ee:	f000 f821 	bl	8007134 <HAL_RCC_GetSysClockFreq>
 80070f2:	4602      	mov	r2, r0
 80070f4:	4b0b      	ldr	r3, [pc, #44]	; (8007124 <HAL_RCC_ClockConfig+0x1bc>)
 80070f6:	689b      	ldr	r3, [r3, #8]
 80070f8:	091b      	lsrs	r3, r3, #4
 80070fa:	f003 030f 	and.w	r3, r3, #15
 80070fe:	490a      	ldr	r1, [pc, #40]	; (8007128 <HAL_RCC_ClockConfig+0x1c0>)
 8007100:	5ccb      	ldrb	r3, [r1, r3]
 8007102:	fa22 f303 	lsr.w	r3, r2, r3
 8007106:	4a09      	ldr	r2, [pc, #36]	; (800712c <HAL_RCC_ClockConfig+0x1c4>)
 8007108:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800710a:	4b09      	ldr	r3, [pc, #36]	; (8007130 <HAL_RCC_ClockConfig+0x1c8>)
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	4618      	mov	r0, r3
 8007110:	f7fb fb9c 	bl	800284c <HAL_InitTick>

  return HAL_OK;
 8007114:	2300      	movs	r3, #0
}
 8007116:	4618      	mov	r0, r3
 8007118:	3710      	adds	r7, #16
 800711a:	46bd      	mov	sp, r7
 800711c:	bd80      	pop	{r7, pc}
 800711e:	bf00      	nop
 8007120:	40023c00 	.word	0x40023c00
 8007124:	40023800 	.word	0x40023800
 8007128:	0800cb7c 	.word	0x0800cb7c
 800712c:	20000000 	.word	0x20000000
 8007130:	2000000c 	.word	0x2000000c

08007134 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007134:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8007138:	b084      	sub	sp, #16
 800713a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800713c:	2300      	movs	r3, #0
 800713e:	607b      	str	r3, [r7, #4]
 8007140:	2300      	movs	r3, #0
 8007142:	60fb      	str	r3, [r7, #12]
 8007144:	2300      	movs	r3, #0
 8007146:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8007148:	2300      	movs	r3, #0
 800714a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800714c:	4b67      	ldr	r3, [pc, #412]	; (80072ec <HAL_RCC_GetSysClockFreq+0x1b8>)
 800714e:	689b      	ldr	r3, [r3, #8]
 8007150:	f003 030c 	and.w	r3, r3, #12
 8007154:	2b08      	cmp	r3, #8
 8007156:	d00d      	beq.n	8007174 <HAL_RCC_GetSysClockFreq+0x40>
 8007158:	2b08      	cmp	r3, #8
 800715a:	f200 80bd 	bhi.w	80072d8 <HAL_RCC_GetSysClockFreq+0x1a4>
 800715e:	2b00      	cmp	r3, #0
 8007160:	d002      	beq.n	8007168 <HAL_RCC_GetSysClockFreq+0x34>
 8007162:	2b04      	cmp	r3, #4
 8007164:	d003      	beq.n	800716e <HAL_RCC_GetSysClockFreq+0x3a>
 8007166:	e0b7      	b.n	80072d8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007168:	4b61      	ldr	r3, [pc, #388]	; (80072f0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800716a:	60bb      	str	r3, [r7, #8]
       break;
 800716c:	e0b7      	b.n	80072de <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800716e:	4b61      	ldr	r3, [pc, #388]	; (80072f4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8007170:	60bb      	str	r3, [r7, #8]
      break;
 8007172:	e0b4      	b.n	80072de <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007174:	4b5d      	ldr	r3, [pc, #372]	; (80072ec <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007176:	685b      	ldr	r3, [r3, #4]
 8007178:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800717c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800717e:	4b5b      	ldr	r3, [pc, #364]	; (80072ec <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007180:	685b      	ldr	r3, [r3, #4]
 8007182:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007186:	2b00      	cmp	r3, #0
 8007188:	d04d      	beq.n	8007226 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800718a:	4b58      	ldr	r3, [pc, #352]	; (80072ec <HAL_RCC_GetSysClockFreq+0x1b8>)
 800718c:	685b      	ldr	r3, [r3, #4]
 800718e:	099b      	lsrs	r3, r3, #6
 8007190:	461a      	mov	r2, r3
 8007192:	f04f 0300 	mov.w	r3, #0
 8007196:	f240 10ff 	movw	r0, #511	; 0x1ff
 800719a:	f04f 0100 	mov.w	r1, #0
 800719e:	ea02 0800 	and.w	r8, r2, r0
 80071a2:	ea03 0901 	and.w	r9, r3, r1
 80071a6:	4640      	mov	r0, r8
 80071a8:	4649      	mov	r1, r9
 80071aa:	f04f 0200 	mov.w	r2, #0
 80071ae:	f04f 0300 	mov.w	r3, #0
 80071b2:	014b      	lsls	r3, r1, #5
 80071b4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80071b8:	0142      	lsls	r2, r0, #5
 80071ba:	4610      	mov	r0, r2
 80071bc:	4619      	mov	r1, r3
 80071be:	ebb0 0008 	subs.w	r0, r0, r8
 80071c2:	eb61 0109 	sbc.w	r1, r1, r9
 80071c6:	f04f 0200 	mov.w	r2, #0
 80071ca:	f04f 0300 	mov.w	r3, #0
 80071ce:	018b      	lsls	r3, r1, #6
 80071d0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80071d4:	0182      	lsls	r2, r0, #6
 80071d6:	1a12      	subs	r2, r2, r0
 80071d8:	eb63 0301 	sbc.w	r3, r3, r1
 80071dc:	f04f 0000 	mov.w	r0, #0
 80071e0:	f04f 0100 	mov.w	r1, #0
 80071e4:	00d9      	lsls	r1, r3, #3
 80071e6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80071ea:	00d0      	lsls	r0, r2, #3
 80071ec:	4602      	mov	r2, r0
 80071ee:	460b      	mov	r3, r1
 80071f0:	eb12 0208 	adds.w	r2, r2, r8
 80071f4:	eb43 0309 	adc.w	r3, r3, r9
 80071f8:	f04f 0000 	mov.w	r0, #0
 80071fc:	f04f 0100 	mov.w	r1, #0
 8007200:	0259      	lsls	r1, r3, #9
 8007202:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8007206:	0250      	lsls	r0, r2, #9
 8007208:	4602      	mov	r2, r0
 800720a:	460b      	mov	r3, r1
 800720c:	4610      	mov	r0, r2
 800720e:	4619      	mov	r1, r3
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	461a      	mov	r2, r3
 8007214:	f04f 0300 	mov.w	r3, #0
 8007218:	f7f9 fcb6 	bl	8000b88 <__aeabi_uldivmod>
 800721c:	4602      	mov	r2, r0
 800721e:	460b      	mov	r3, r1
 8007220:	4613      	mov	r3, r2
 8007222:	60fb      	str	r3, [r7, #12]
 8007224:	e04a      	b.n	80072bc <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007226:	4b31      	ldr	r3, [pc, #196]	; (80072ec <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007228:	685b      	ldr	r3, [r3, #4]
 800722a:	099b      	lsrs	r3, r3, #6
 800722c:	461a      	mov	r2, r3
 800722e:	f04f 0300 	mov.w	r3, #0
 8007232:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007236:	f04f 0100 	mov.w	r1, #0
 800723a:	ea02 0400 	and.w	r4, r2, r0
 800723e:	ea03 0501 	and.w	r5, r3, r1
 8007242:	4620      	mov	r0, r4
 8007244:	4629      	mov	r1, r5
 8007246:	f04f 0200 	mov.w	r2, #0
 800724a:	f04f 0300 	mov.w	r3, #0
 800724e:	014b      	lsls	r3, r1, #5
 8007250:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007254:	0142      	lsls	r2, r0, #5
 8007256:	4610      	mov	r0, r2
 8007258:	4619      	mov	r1, r3
 800725a:	1b00      	subs	r0, r0, r4
 800725c:	eb61 0105 	sbc.w	r1, r1, r5
 8007260:	f04f 0200 	mov.w	r2, #0
 8007264:	f04f 0300 	mov.w	r3, #0
 8007268:	018b      	lsls	r3, r1, #6
 800726a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800726e:	0182      	lsls	r2, r0, #6
 8007270:	1a12      	subs	r2, r2, r0
 8007272:	eb63 0301 	sbc.w	r3, r3, r1
 8007276:	f04f 0000 	mov.w	r0, #0
 800727a:	f04f 0100 	mov.w	r1, #0
 800727e:	00d9      	lsls	r1, r3, #3
 8007280:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007284:	00d0      	lsls	r0, r2, #3
 8007286:	4602      	mov	r2, r0
 8007288:	460b      	mov	r3, r1
 800728a:	1912      	adds	r2, r2, r4
 800728c:	eb45 0303 	adc.w	r3, r5, r3
 8007290:	f04f 0000 	mov.w	r0, #0
 8007294:	f04f 0100 	mov.w	r1, #0
 8007298:	0299      	lsls	r1, r3, #10
 800729a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800729e:	0290      	lsls	r0, r2, #10
 80072a0:	4602      	mov	r2, r0
 80072a2:	460b      	mov	r3, r1
 80072a4:	4610      	mov	r0, r2
 80072a6:	4619      	mov	r1, r3
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	461a      	mov	r2, r3
 80072ac:	f04f 0300 	mov.w	r3, #0
 80072b0:	f7f9 fc6a 	bl	8000b88 <__aeabi_uldivmod>
 80072b4:	4602      	mov	r2, r0
 80072b6:	460b      	mov	r3, r1
 80072b8:	4613      	mov	r3, r2
 80072ba:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80072bc:	4b0b      	ldr	r3, [pc, #44]	; (80072ec <HAL_RCC_GetSysClockFreq+0x1b8>)
 80072be:	685b      	ldr	r3, [r3, #4]
 80072c0:	0c1b      	lsrs	r3, r3, #16
 80072c2:	f003 0303 	and.w	r3, r3, #3
 80072c6:	3301      	adds	r3, #1
 80072c8:	005b      	lsls	r3, r3, #1
 80072ca:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80072cc:	68fa      	ldr	r2, [r7, #12]
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80072d4:	60bb      	str	r3, [r7, #8]
      break;
 80072d6:	e002      	b.n	80072de <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80072d8:	4b05      	ldr	r3, [pc, #20]	; (80072f0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80072da:	60bb      	str	r3, [r7, #8]
      break;
 80072dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80072de:	68bb      	ldr	r3, [r7, #8]
}
 80072e0:	4618      	mov	r0, r3
 80072e2:	3710      	adds	r7, #16
 80072e4:	46bd      	mov	sp, r7
 80072e6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80072ea:	bf00      	nop
 80072ec:	40023800 	.word	0x40023800
 80072f0:	00f42400 	.word	0x00f42400
 80072f4:	007a1200 	.word	0x007a1200

080072f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80072f8:	b480      	push	{r7}
 80072fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80072fc:	4b03      	ldr	r3, [pc, #12]	; (800730c <HAL_RCC_GetHCLKFreq+0x14>)
 80072fe:	681b      	ldr	r3, [r3, #0]
}
 8007300:	4618      	mov	r0, r3
 8007302:	46bd      	mov	sp, r7
 8007304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007308:	4770      	bx	lr
 800730a:	bf00      	nop
 800730c:	20000000 	.word	0x20000000

08007310 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007310:	b580      	push	{r7, lr}
 8007312:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007314:	f7ff fff0 	bl	80072f8 <HAL_RCC_GetHCLKFreq>
 8007318:	4602      	mov	r2, r0
 800731a:	4b05      	ldr	r3, [pc, #20]	; (8007330 <HAL_RCC_GetPCLK1Freq+0x20>)
 800731c:	689b      	ldr	r3, [r3, #8]
 800731e:	0a9b      	lsrs	r3, r3, #10
 8007320:	f003 0307 	and.w	r3, r3, #7
 8007324:	4903      	ldr	r1, [pc, #12]	; (8007334 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007326:	5ccb      	ldrb	r3, [r1, r3]
 8007328:	fa22 f303 	lsr.w	r3, r2, r3
}
 800732c:	4618      	mov	r0, r3
 800732e:	bd80      	pop	{r7, pc}
 8007330:	40023800 	.word	0x40023800
 8007334:	0800cb8c 	.word	0x0800cb8c

08007338 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007338:	b580      	push	{r7, lr}
 800733a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800733c:	f7ff ffdc 	bl	80072f8 <HAL_RCC_GetHCLKFreq>
 8007340:	4602      	mov	r2, r0
 8007342:	4b05      	ldr	r3, [pc, #20]	; (8007358 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007344:	689b      	ldr	r3, [r3, #8]
 8007346:	0b5b      	lsrs	r3, r3, #13
 8007348:	f003 0307 	and.w	r3, r3, #7
 800734c:	4903      	ldr	r1, [pc, #12]	; (800735c <HAL_RCC_GetPCLK2Freq+0x24>)
 800734e:	5ccb      	ldrb	r3, [r1, r3]
 8007350:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007354:	4618      	mov	r0, r3
 8007356:	bd80      	pop	{r7, pc}
 8007358:	40023800 	.word	0x40023800
 800735c:	0800cb8c 	.word	0x0800cb8c

08007360 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b086      	sub	sp, #24
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007368:	2300      	movs	r3, #0
 800736a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800736c:	2300      	movs	r3, #0
 800736e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f003 0301 	and.w	r3, r3, #1
 8007378:	2b00      	cmp	r3, #0
 800737a:	d105      	bne.n	8007388 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007384:	2b00      	cmp	r3, #0
 8007386:	d035      	beq.n	80073f4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007388:	4b62      	ldr	r3, [pc, #392]	; (8007514 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800738a:	2200      	movs	r2, #0
 800738c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800738e:	f7fb faa1 	bl	80028d4 <HAL_GetTick>
 8007392:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007394:	e008      	b.n	80073a8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007396:	f7fb fa9d 	bl	80028d4 <HAL_GetTick>
 800739a:	4602      	mov	r2, r0
 800739c:	697b      	ldr	r3, [r7, #20]
 800739e:	1ad3      	subs	r3, r2, r3
 80073a0:	2b02      	cmp	r3, #2
 80073a2:	d901      	bls.n	80073a8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80073a4:	2303      	movs	r3, #3
 80073a6:	e0b0      	b.n	800750a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80073a8:	4b5b      	ldr	r3, [pc, #364]	; (8007518 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d1f0      	bne.n	8007396 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	685b      	ldr	r3, [r3, #4]
 80073b8:	019a      	lsls	r2, r3, #6
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	689b      	ldr	r3, [r3, #8]
 80073be:	071b      	lsls	r3, r3, #28
 80073c0:	4955      	ldr	r1, [pc, #340]	; (8007518 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80073c2:	4313      	orrs	r3, r2
 80073c4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80073c8:	4b52      	ldr	r3, [pc, #328]	; (8007514 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80073ca:	2201      	movs	r2, #1
 80073cc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80073ce:	f7fb fa81 	bl	80028d4 <HAL_GetTick>
 80073d2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80073d4:	e008      	b.n	80073e8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80073d6:	f7fb fa7d 	bl	80028d4 <HAL_GetTick>
 80073da:	4602      	mov	r2, r0
 80073dc:	697b      	ldr	r3, [r7, #20]
 80073de:	1ad3      	subs	r3, r2, r3
 80073e0:	2b02      	cmp	r3, #2
 80073e2:	d901      	bls.n	80073e8 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80073e4:	2303      	movs	r3, #3
 80073e6:	e090      	b.n	800750a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80073e8:	4b4b      	ldr	r3, [pc, #300]	; (8007518 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d0f0      	beq.n	80073d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f003 0302 	and.w	r3, r3, #2
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	f000 8083 	beq.w	8007508 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007402:	2300      	movs	r3, #0
 8007404:	60fb      	str	r3, [r7, #12]
 8007406:	4b44      	ldr	r3, [pc, #272]	; (8007518 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800740a:	4a43      	ldr	r2, [pc, #268]	; (8007518 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800740c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007410:	6413      	str	r3, [r2, #64]	; 0x40
 8007412:	4b41      	ldr	r3, [pc, #260]	; (8007518 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007416:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800741a:	60fb      	str	r3, [r7, #12]
 800741c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800741e:	4b3f      	ldr	r3, [pc, #252]	; (800751c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	4a3e      	ldr	r2, [pc, #248]	; (800751c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007424:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007428:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800742a:	f7fb fa53 	bl	80028d4 <HAL_GetTick>
 800742e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007430:	e008      	b.n	8007444 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007432:	f7fb fa4f 	bl	80028d4 <HAL_GetTick>
 8007436:	4602      	mov	r2, r0
 8007438:	697b      	ldr	r3, [r7, #20]
 800743a:	1ad3      	subs	r3, r2, r3
 800743c:	2b02      	cmp	r3, #2
 800743e:	d901      	bls.n	8007444 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8007440:	2303      	movs	r3, #3
 8007442:	e062      	b.n	800750a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007444:	4b35      	ldr	r3, [pc, #212]	; (800751c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800744c:	2b00      	cmp	r3, #0
 800744e:	d0f0      	beq.n	8007432 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007450:	4b31      	ldr	r3, [pc, #196]	; (8007518 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007452:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007454:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007458:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800745a:	693b      	ldr	r3, [r7, #16]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d02f      	beq.n	80074c0 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	68db      	ldr	r3, [r3, #12]
 8007464:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007468:	693a      	ldr	r2, [r7, #16]
 800746a:	429a      	cmp	r2, r3
 800746c:	d028      	beq.n	80074c0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800746e:	4b2a      	ldr	r3, [pc, #168]	; (8007518 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007470:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007472:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007476:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007478:	4b29      	ldr	r3, [pc, #164]	; (8007520 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800747a:	2201      	movs	r2, #1
 800747c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800747e:	4b28      	ldr	r3, [pc, #160]	; (8007520 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007480:	2200      	movs	r2, #0
 8007482:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007484:	4a24      	ldr	r2, [pc, #144]	; (8007518 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007486:	693b      	ldr	r3, [r7, #16]
 8007488:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800748a:	4b23      	ldr	r3, [pc, #140]	; (8007518 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800748c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800748e:	f003 0301 	and.w	r3, r3, #1
 8007492:	2b01      	cmp	r3, #1
 8007494:	d114      	bne.n	80074c0 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8007496:	f7fb fa1d 	bl	80028d4 <HAL_GetTick>
 800749a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800749c:	e00a      	b.n	80074b4 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800749e:	f7fb fa19 	bl	80028d4 <HAL_GetTick>
 80074a2:	4602      	mov	r2, r0
 80074a4:	697b      	ldr	r3, [r7, #20]
 80074a6:	1ad3      	subs	r3, r2, r3
 80074a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80074ac:	4293      	cmp	r3, r2
 80074ae:	d901      	bls.n	80074b4 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80074b0:	2303      	movs	r3, #3
 80074b2:	e02a      	b.n	800750a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80074b4:	4b18      	ldr	r3, [pc, #96]	; (8007518 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80074b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074b8:	f003 0302 	and.w	r3, r3, #2
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d0ee      	beq.n	800749e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	68db      	ldr	r3, [r3, #12]
 80074c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80074c8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80074cc:	d10d      	bne.n	80074ea <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80074ce:	4b12      	ldr	r3, [pc, #72]	; (8007518 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80074d0:	689b      	ldr	r3, [r3, #8]
 80074d2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	68db      	ldr	r3, [r3, #12]
 80074da:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80074de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80074e2:	490d      	ldr	r1, [pc, #52]	; (8007518 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80074e4:	4313      	orrs	r3, r2
 80074e6:	608b      	str	r3, [r1, #8]
 80074e8:	e005      	b.n	80074f6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80074ea:	4b0b      	ldr	r3, [pc, #44]	; (8007518 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80074ec:	689b      	ldr	r3, [r3, #8]
 80074ee:	4a0a      	ldr	r2, [pc, #40]	; (8007518 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80074f0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80074f4:	6093      	str	r3, [r2, #8]
 80074f6:	4b08      	ldr	r3, [pc, #32]	; (8007518 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80074f8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	68db      	ldr	r3, [r3, #12]
 80074fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007502:	4905      	ldr	r1, [pc, #20]	; (8007518 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007504:	4313      	orrs	r3, r2
 8007506:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8007508:	2300      	movs	r3, #0
}
 800750a:	4618      	mov	r0, r3
 800750c:	3718      	adds	r7, #24
 800750e:	46bd      	mov	sp, r7
 8007510:	bd80      	pop	{r7, pc}
 8007512:	bf00      	nop
 8007514:	42470068 	.word	0x42470068
 8007518:	40023800 	.word	0x40023800
 800751c:	40007000 	.word	0x40007000
 8007520:	42470e40 	.word	0x42470e40

08007524 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007524:	b480      	push	{r7}
 8007526:	b087      	sub	sp, #28
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 800752c:	2300      	movs	r3, #0
 800752e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8007530:	2300      	movs	r3, #0
 8007532:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8007534:	2300      	movs	r3, #0
 8007536:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8007538:	2300      	movs	r3, #0
 800753a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2b01      	cmp	r3, #1
 8007540:	d13e      	bne.n	80075c0 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8007542:	4b23      	ldr	r3, [pc, #140]	; (80075d0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007544:	689b      	ldr	r3, [r3, #8]
 8007546:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800754a:	60fb      	str	r3, [r7, #12]
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d005      	beq.n	800755e <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	2b01      	cmp	r3, #1
 8007556:	d12f      	bne.n	80075b8 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8007558:	4b1e      	ldr	r3, [pc, #120]	; (80075d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800755a:	617b      	str	r3, [r7, #20]
          break;
 800755c:	e02f      	b.n	80075be <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800755e:	4b1c      	ldr	r3, [pc, #112]	; (80075d0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007560:	685b      	ldr	r3, [r3, #4]
 8007562:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007566:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800756a:	d108      	bne.n	800757e <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800756c:	4b18      	ldr	r3, [pc, #96]	; (80075d0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800756e:	685b      	ldr	r3, [r3, #4]
 8007570:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007574:	4a18      	ldr	r2, [pc, #96]	; (80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8007576:	fbb2 f3f3 	udiv	r3, r2, r3
 800757a:	613b      	str	r3, [r7, #16]
 800757c:	e007      	b.n	800758e <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800757e:	4b14      	ldr	r3, [pc, #80]	; (80075d0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007580:	685b      	ldr	r3, [r3, #4]
 8007582:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007586:	4a15      	ldr	r2, [pc, #84]	; (80075dc <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8007588:	fbb2 f3f3 	udiv	r3, r2, r3
 800758c:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800758e:	4b10      	ldr	r3, [pc, #64]	; (80075d0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007590:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007594:	099b      	lsrs	r3, r3, #6
 8007596:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800759a:	693b      	ldr	r3, [r7, #16]
 800759c:	fb02 f303 	mul.w	r3, r2, r3
 80075a0:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80075a2:	4b0b      	ldr	r3, [pc, #44]	; (80075d0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80075a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80075a8:	0f1b      	lsrs	r3, r3, #28
 80075aa:	f003 0307 	and.w	r3, r3, #7
 80075ae:	68ba      	ldr	r2, [r7, #8]
 80075b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80075b4:	617b      	str	r3, [r7, #20]
          break;
 80075b6:	e002      	b.n	80075be <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80075b8:	2300      	movs	r3, #0
 80075ba:	617b      	str	r3, [r7, #20]
          break;
 80075bc:	bf00      	nop
        }
      }
      break;
 80075be:	bf00      	nop
    }
  }
  return frequency;
 80075c0:	697b      	ldr	r3, [r7, #20]
}
 80075c2:	4618      	mov	r0, r3
 80075c4:	371c      	adds	r7, #28
 80075c6:	46bd      	mov	sp, r7
 80075c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075cc:	4770      	bx	lr
 80075ce:	bf00      	nop
 80075d0:	40023800 	.word	0x40023800
 80075d4:	00bb8000 	.word	0x00bb8000
 80075d8:	007a1200 	.word	0x007a1200
 80075dc:	00f42400 	.word	0x00f42400

080075e0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b082      	sub	sp, #8
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d101      	bne.n	80075f2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80075ee:	2301      	movs	r3, #1
 80075f0:	e07b      	b.n	80076ea <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d108      	bne.n	800760c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	685b      	ldr	r3, [r3, #4]
 80075fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007602:	d009      	beq.n	8007618 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2200      	movs	r2, #0
 8007608:	61da      	str	r2, [r3, #28]
 800760a:	e005      	b.n	8007618 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2200      	movs	r2, #0
 8007610:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2200      	movs	r2, #0
 8007616:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2200      	movs	r2, #0
 800761c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007624:	b2db      	uxtb	r3, r3
 8007626:	2b00      	cmp	r3, #0
 8007628:	d106      	bne.n	8007638 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	2200      	movs	r2, #0
 800762e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007632:	6878      	ldr	r0, [r7, #4]
 8007634:	f7fa faaa 	bl	8001b8c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2202      	movs	r2, #2
 800763c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	681a      	ldr	r2, [r3, #0]
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800764e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	685b      	ldr	r3, [r3, #4]
 8007654:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	689b      	ldr	r3, [r3, #8]
 800765c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007660:	431a      	orrs	r2, r3
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	68db      	ldr	r3, [r3, #12]
 8007666:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800766a:	431a      	orrs	r2, r3
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	691b      	ldr	r3, [r3, #16]
 8007670:	f003 0302 	and.w	r3, r3, #2
 8007674:	431a      	orrs	r2, r3
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	695b      	ldr	r3, [r3, #20]
 800767a:	f003 0301 	and.w	r3, r3, #1
 800767e:	431a      	orrs	r2, r3
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	699b      	ldr	r3, [r3, #24]
 8007684:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007688:	431a      	orrs	r2, r3
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	69db      	ldr	r3, [r3, #28]
 800768e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007692:	431a      	orrs	r2, r3
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	6a1b      	ldr	r3, [r3, #32]
 8007698:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800769c:	ea42 0103 	orr.w	r1, r2, r3
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076a4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	430a      	orrs	r2, r1
 80076ae:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	699b      	ldr	r3, [r3, #24]
 80076b4:	0c1b      	lsrs	r3, r3, #16
 80076b6:	f003 0104 	and.w	r1, r3, #4
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076be:	f003 0210 	and.w	r2, r3, #16
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	430a      	orrs	r2, r1
 80076c8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	69da      	ldr	r2, [r3, #28]
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80076d8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	2200      	movs	r2, #0
 80076de:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2201      	movs	r2, #1
 80076e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80076e8:	2300      	movs	r3, #0
}
 80076ea:	4618      	mov	r0, r3
 80076ec:	3708      	adds	r7, #8
 80076ee:	46bd      	mov	sp, r7
 80076f0:	bd80      	pop	{r7, pc}
	...

080076f4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80076f4:	b480      	push	{r7}
 80076f6:	b085      	sub	sp, #20
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007702:	b2db      	uxtb	r3, r3
 8007704:	2b01      	cmp	r3, #1
 8007706:	d001      	beq.n	800770c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007708:	2301      	movs	r3, #1
 800770a:	e046      	b.n	800779a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2202      	movs	r2, #2
 8007710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	4a23      	ldr	r2, [pc, #140]	; (80077a8 <HAL_TIM_Base_Start+0xb4>)
 800771a:	4293      	cmp	r3, r2
 800771c:	d022      	beq.n	8007764 <HAL_TIM_Base_Start+0x70>
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007726:	d01d      	beq.n	8007764 <HAL_TIM_Base_Start+0x70>
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	4a1f      	ldr	r2, [pc, #124]	; (80077ac <HAL_TIM_Base_Start+0xb8>)
 800772e:	4293      	cmp	r3, r2
 8007730:	d018      	beq.n	8007764 <HAL_TIM_Base_Start+0x70>
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	4a1e      	ldr	r2, [pc, #120]	; (80077b0 <HAL_TIM_Base_Start+0xbc>)
 8007738:	4293      	cmp	r3, r2
 800773a:	d013      	beq.n	8007764 <HAL_TIM_Base_Start+0x70>
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	4a1c      	ldr	r2, [pc, #112]	; (80077b4 <HAL_TIM_Base_Start+0xc0>)
 8007742:	4293      	cmp	r3, r2
 8007744:	d00e      	beq.n	8007764 <HAL_TIM_Base_Start+0x70>
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	4a1b      	ldr	r2, [pc, #108]	; (80077b8 <HAL_TIM_Base_Start+0xc4>)
 800774c:	4293      	cmp	r3, r2
 800774e:	d009      	beq.n	8007764 <HAL_TIM_Base_Start+0x70>
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	4a19      	ldr	r2, [pc, #100]	; (80077bc <HAL_TIM_Base_Start+0xc8>)
 8007756:	4293      	cmp	r3, r2
 8007758:	d004      	beq.n	8007764 <HAL_TIM_Base_Start+0x70>
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	4a18      	ldr	r2, [pc, #96]	; (80077c0 <HAL_TIM_Base_Start+0xcc>)
 8007760:	4293      	cmp	r3, r2
 8007762:	d111      	bne.n	8007788 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	689b      	ldr	r3, [r3, #8]
 800776a:	f003 0307 	and.w	r3, r3, #7
 800776e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	2b06      	cmp	r3, #6
 8007774:	d010      	beq.n	8007798 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	681a      	ldr	r2, [r3, #0]
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	f042 0201 	orr.w	r2, r2, #1
 8007784:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007786:	e007      	b.n	8007798 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	681a      	ldr	r2, [r3, #0]
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f042 0201 	orr.w	r2, r2, #1
 8007796:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007798:	2300      	movs	r3, #0
}
 800779a:	4618      	mov	r0, r3
 800779c:	3714      	adds	r7, #20
 800779e:	46bd      	mov	sp, r7
 80077a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a4:	4770      	bx	lr
 80077a6:	bf00      	nop
 80077a8:	40010000 	.word	0x40010000
 80077ac:	40000400 	.word	0x40000400
 80077b0:	40000800 	.word	0x40000800
 80077b4:	40000c00 	.word	0x40000c00
 80077b8:	40010400 	.word	0x40010400
 80077bc:	40014000 	.word	0x40014000
 80077c0:	40001800 	.word	0x40001800

080077c4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b082      	sub	sp, #8
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d101      	bne.n	80077d6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80077d2:	2301      	movs	r3, #1
 80077d4:	e041      	b.n	800785a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077dc:	b2db      	uxtb	r3, r3
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d106      	bne.n	80077f0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	2200      	movs	r2, #0
 80077e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80077ea:	6878      	ldr	r0, [r7, #4]
 80077ec:	f7fa fa16 	bl	8001c1c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2202      	movs	r2, #2
 80077f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681a      	ldr	r2, [r3, #0]
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	3304      	adds	r3, #4
 8007800:	4619      	mov	r1, r3
 8007802:	4610      	mov	r0, r2
 8007804:	f000 fae8 	bl	8007dd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2201      	movs	r2, #1
 800780c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2201      	movs	r2, #1
 8007814:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2201      	movs	r2, #1
 800781c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2201      	movs	r2, #1
 8007824:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2201      	movs	r2, #1
 800782c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2201      	movs	r2, #1
 8007834:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2201      	movs	r2, #1
 800783c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2201      	movs	r2, #1
 8007844:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2201      	movs	r2, #1
 800784c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2201      	movs	r2, #1
 8007854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007858:	2300      	movs	r3, #0
}
 800785a:	4618      	mov	r0, r3
 800785c:	3708      	adds	r7, #8
 800785e:	46bd      	mov	sp, r7
 8007860:	bd80      	pop	{r7, pc}
	...

08007864 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007864:	b580      	push	{r7, lr}
 8007866:	b084      	sub	sp, #16
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
 800786c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d109      	bne.n	8007888 <HAL_TIM_PWM_Start+0x24>
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800787a:	b2db      	uxtb	r3, r3
 800787c:	2b01      	cmp	r3, #1
 800787e:	bf14      	ite	ne
 8007880:	2301      	movne	r3, #1
 8007882:	2300      	moveq	r3, #0
 8007884:	b2db      	uxtb	r3, r3
 8007886:	e022      	b.n	80078ce <HAL_TIM_PWM_Start+0x6a>
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	2b04      	cmp	r3, #4
 800788c:	d109      	bne.n	80078a2 <HAL_TIM_PWM_Start+0x3e>
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007894:	b2db      	uxtb	r3, r3
 8007896:	2b01      	cmp	r3, #1
 8007898:	bf14      	ite	ne
 800789a:	2301      	movne	r3, #1
 800789c:	2300      	moveq	r3, #0
 800789e:	b2db      	uxtb	r3, r3
 80078a0:	e015      	b.n	80078ce <HAL_TIM_PWM_Start+0x6a>
 80078a2:	683b      	ldr	r3, [r7, #0]
 80078a4:	2b08      	cmp	r3, #8
 80078a6:	d109      	bne.n	80078bc <HAL_TIM_PWM_Start+0x58>
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80078ae:	b2db      	uxtb	r3, r3
 80078b0:	2b01      	cmp	r3, #1
 80078b2:	bf14      	ite	ne
 80078b4:	2301      	movne	r3, #1
 80078b6:	2300      	moveq	r3, #0
 80078b8:	b2db      	uxtb	r3, r3
 80078ba:	e008      	b.n	80078ce <HAL_TIM_PWM_Start+0x6a>
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80078c2:	b2db      	uxtb	r3, r3
 80078c4:	2b01      	cmp	r3, #1
 80078c6:	bf14      	ite	ne
 80078c8:	2301      	movne	r3, #1
 80078ca:	2300      	moveq	r3, #0
 80078cc:	b2db      	uxtb	r3, r3
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d001      	beq.n	80078d6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80078d2:	2301      	movs	r3, #1
 80078d4:	e07c      	b.n	80079d0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80078d6:	683b      	ldr	r3, [r7, #0]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d104      	bne.n	80078e6 <HAL_TIM_PWM_Start+0x82>
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2202      	movs	r2, #2
 80078e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80078e4:	e013      	b.n	800790e <HAL_TIM_PWM_Start+0xaa>
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	2b04      	cmp	r3, #4
 80078ea:	d104      	bne.n	80078f6 <HAL_TIM_PWM_Start+0x92>
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2202      	movs	r2, #2
 80078f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80078f4:	e00b      	b.n	800790e <HAL_TIM_PWM_Start+0xaa>
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	2b08      	cmp	r3, #8
 80078fa:	d104      	bne.n	8007906 <HAL_TIM_PWM_Start+0xa2>
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2202      	movs	r2, #2
 8007900:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007904:	e003      	b.n	800790e <HAL_TIM_PWM_Start+0xaa>
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	2202      	movs	r2, #2
 800790a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	2201      	movs	r2, #1
 8007914:	6839      	ldr	r1, [r7, #0]
 8007916:	4618      	mov	r0, r3
 8007918:	f000 fcae 	bl	8008278 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	4a2d      	ldr	r2, [pc, #180]	; (80079d8 <HAL_TIM_PWM_Start+0x174>)
 8007922:	4293      	cmp	r3, r2
 8007924:	d004      	beq.n	8007930 <HAL_TIM_PWM_Start+0xcc>
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	4a2c      	ldr	r2, [pc, #176]	; (80079dc <HAL_TIM_PWM_Start+0x178>)
 800792c:	4293      	cmp	r3, r2
 800792e:	d101      	bne.n	8007934 <HAL_TIM_PWM_Start+0xd0>
 8007930:	2301      	movs	r3, #1
 8007932:	e000      	b.n	8007936 <HAL_TIM_PWM_Start+0xd2>
 8007934:	2300      	movs	r3, #0
 8007936:	2b00      	cmp	r3, #0
 8007938:	d007      	beq.n	800794a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007948:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	4a22      	ldr	r2, [pc, #136]	; (80079d8 <HAL_TIM_PWM_Start+0x174>)
 8007950:	4293      	cmp	r3, r2
 8007952:	d022      	beq.n	800799a <HAL_TIM_PWM_Start+0x136>
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800795c:	d01d      	beq.n	800799a <HAL_TIM_PWM_Start+0x136>
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	4a1f      	ldr	r2, [pc, #124]	; (80079e0 <HAL_TIM_PWM_Start+0x17c>)
 8007964:	4293      	cmp	r3, r2
 8007966:	d018      	beq.n	800799a <HAL_TIM_PWM_Start+0x136>
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	4a1d      	ldr	r2, [pc, #116]	; (80079e4 <HAL_TIM_PWM_Start+0x180>)
 800796e:	4293      	cmp	r3, r2
 8007970:	d013      	beq.n	800799a <HAL_TIM_PWM_Start+0x136>
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	4a1c      	ldr	r2, [pc, #112]	; (80079e8 <HAL_TIM_PWM_Start+0x184>)
 8007978:	4293      	cmp	r3, r2
 800797a:	d00e      	beq.n	800799a <HAL_TIM_PWM_Start+0x136>
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	4a16      	ldr	r2, [pc, #88]	; (80079dc <HAL_TIM_PWM_Start+0x178>)
 8007982:	4293      	cmp	r3, r2
 8007984:	d009      	beq.n	800799a <HAL_TIM_PWM_Start+0x136>
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	4a18      	ldr	r2, [pc, #96]	; (80079ec <HAL_TIM_PWM_Start+0x188>)
 800798c:	4293      	cmp	r3, r2
 800798e:	d004      	beq.n	800799a <HAL_TIM_PWM_Start+0x136>
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	4a16      	ldr	r2, [pc, #88]	; (80079f0 <HAL_TIM_PWM_Start+0x18c>)
 8007996:	4293      	cmp	r3, r2
 8007998:	d111      	bne.n	80079be <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	689b      	ldr	r3, [r3, #8]
 80079a0:	f003 0307 	and.w	r3, r3, #7
 80079a4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	2b06      	cmp	r3, #6
 80079aa:	d010      	beq.n	80079ce <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	681a      	ldr	r2, [r3, #0]
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	f042 0201 	orr.w	r2, r2, #1
 80079ba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079bc:	e007      	b.n	80079ce <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	681a      	ldr	r2, [r3, #0]
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	f042 0201 	orr.w	r2, r2, #1
 80079cc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80079ce:	2300      	movs	r3, #0
}
 80079d0:	4618      	mov	r0, r3
 80079d2:	3710      	adds	r7, #16
 80079d4:	46bd      	mov	sp, r7
 80079d6:	bd80      	pop	{r7, pc}
 80079d8:	40010000 	.word	0x40010000
 80079dc:	40010400 	.word	0x40010400
 80079e0:	40000400 	.word	0x40000400
 80079e4:	40000800 	.word	0x40000800
 80079e8:	40000c00 	.word	0x40000c00
 80079ec:	40014000 	.word	0x40014000
 80079f0:	40001800 	.word	0x40001800

080079f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b082      	sub	sp, #8
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	691b      	ldr	r3, [r3, #16]
 8007a02:	f003 0302 	and.w	r3, r3, #2
 8007a06:	2b02      	cmp	r3, #2
 8007a08:	d122      	bne.n	8007a50 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	68db      	ldr	r3, [r3, #12]
 8007a10:	f003 0302 	and.w	r3, r3, #2
 8007a14:	2b02      	cmp	r3, #2
 8007a16:	d11b      	bne.n	8007a50 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	f06f 0202 	mvn.w	r2, #2
 8007a20:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	2201      	movs	r2, #1
 8007a26:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	699b      	ldr	r3, [r3, #24]
 8007a2e:	f003 0303 	and.w	r3, r3, #3
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d003      	beq.n	8007a3e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007a36:	6878      	ldr	r0, [r7, #4]
 8007a38:	f000 f9b0 	bl	8007d9c <HAL_TIM_IC_CaptureCallback>
 8007a3c:	e005      	b.n	8007a4a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a3e:	6878      	ldr	r0, [r7, #4]
 8007a40:	f000 f9a2 	bl	8007d88 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a44:	6878      	ldr	r0, [r7, #4]
 8007a46:	f000 f9b3 	bl	8007db0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	691b      	ldr	r3, [r3, #16]
 8007a56:	f003 0304 	and.w	r3, r3, #4
 8007a5a:	2b04      	cmp	r3, #4
 8007a5c:	d122      	bne.n	8007aa4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	68db      	ldr	r3, [r3, #12]
 8007a64:	f003 0304 	and.w	r3, r3, #4
 8007a68:	2b04      	cmp	r3, #4
 8007a6a:	d11b      	bne.n	8007aa4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	f06f 0204 	mvn.w	r2, #4
 8007a74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2202      	movs	r2, #2
 8007a7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	699b      	ldr	r3, [r3, #24]
 8007a82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d003      	beq.n	8007a92 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a8a:	6878      	ldr	r0, [r7, #4]
 8007a8c:	f000 f986 	bl	8007d9c <HAL_TIM_IC_CaptureCallback>
 8007a90:	e005      	b.n	8007a9e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a92:	6878      	ldr	r0, [r7, #4]
 8007a94:	f000 f978 	bl	8007d88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a98:	6878      	ldr	r0, [r7, #4]
 8007a9a:	f000 f989 	bl	8007db0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	691b      	ldr	r3, [r3, #16]
 8007aaa:	f003 0308 	and.w	r3, r3, #8
 8007aae:	2b08      	cmp	r3, #8
 8007ab0:	d122      	bne.n	8007af8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	68db      	ldr	r3, [r3, #12]
 8007ab8:	f003 0308 	and.w	r3, r3, #8
 8007abc:	2b08      	cmp	r3, #8
 8007abe:	d11b      	bne.n	8007af8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	f06f 0208 	mvn.w	r2, #8
 8007ac8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	2204      	movs	r2, #4
 8007ace:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	69db      	ldr	r3, [r3, #28]
 8007ad6:	f003 0303 	and.w	r3, r3, #3
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d003      	beq.n	8007ae6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007ade:	6878      	ldr	r0, [r7, #4]
 8007ae0:	f000 f95c 	bl	8007d9c <HAL_TIM_IC_CaptureCallback>
 8007ae4:	e005      	b.n	8007af2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ae6:	6878      	ldr	r0, [r7, #4]
 8007ae8:	f000 f94e 	bl	8007d88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007aec:	6878      	ldr	r0, [r7, #4]
 8007aee:	f000 f95f 	bl	8007db0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	2200      	movs	r2, #0
 8007af6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	691b      	ldr	r3, [r3, #16]
 8007afe:	f003 0310 	and.w	r3, r3, #16
 8007b02:	2b10      	cmp	r3, #16
 8007b04:	d122      	bne.n	8007b4c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	68db      	ldr	r3, [r3, #12]
 8007b0c:	f003 0310 	and.w	r3, r3, #16
 8007b10:	2b10      	cmp	r3, #16
 8007b12:	d11b      	bne.n	8007b4c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	f06f 0210 	mvn.w	r2, #16
 8007b1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	2208      	movs	r2, #8
 8007b22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	69db      	ldr	r3, [r3, #28]
 8007b2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d003      	beq.n	8007b3a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b32:	6878      	ldr	r0, [r7, #4]
 8007b34:	f000 f932 	bl	8007d9c <HAL_TIM_IC_CaptureCallback>
 8007b38:	e005      	b.n	8007b46 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b3a:	6878      	ldr	r0, [r7, #4]
 8007b3c:	f000 f924 	bl	8007d88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b40:	6878      	ldr	r0, [r7, #4]
 8007b42:	f000 f935 	bl	8007db0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	2200      	movs	r2, #0
 8007b4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	691b      	ldr	r3, [r3, #16]
 8007b52:	f003 0301 	and.w	r3, r3, #1
 8007b56:	2b01      	cmp	r3, #1
 8007b58:	d10e      	bne.n	8007b78 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	68db      	ldr	r3, [r3, #12]
 8007b60:	f003 0301 	and.w	r3, r3, #1
 8007b64:	2b01      	cmp	r3, #1
 8007b66:	d107      	bne.n	8007b78 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	f06f 0201 	mvn.w	r2, #1
 8007b70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007b72:	6878      	ldr	r0, [r7, #4]
 8007b74:	f7fa fcf6 	bl	8002564 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	691b      	ldr	r3, [r3, #16]
 8007b7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b82:	2b80      	cmp	r3, #128	; 0x80
 8007b84:	d10e      	bne.n	8007ba4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	68db      	ldr	r3, [r3, #12]
 8007b8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b90:	2b80      	cmp	r3, #128	; 0x80
 8007b92:	d107      	bne.n	8007ba4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007b9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007b9e:	6878      	ldr	r0, [r7, #4]
 8007ba0:	f000 fc68 	bl	8008474 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	691b      	ldr	r3, [r3, #16]
 8007baa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bae:	2b40      	cmp	r3, #64	; 0x40
 8007bb0:	d10e      	bne.n	8007bd0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	68db      	ldr	r3, [r3, #12]
 8007bb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bbc:	2b40      	cmp	r3, #64	; 0x40
 8007bbe:	d107      	bne.n	8007bd0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007bc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007bca:	6878      	ldr	r0, [r7, #4]
 8007bcc:	f000 f8fa 	bl	8007dc4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	691b      	ldr	r3, [r3, #16]
 8007bd6:	f003 0320 	and.w	r3, r3, #32
 8007bda:	2b20      	cmp	r3, #32
 8007bdc:	d10e      	bne.n	8007bfc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	68db      	ldr	r3, [r3, #12]
 8007be4:	f003 0320 	and.w	r3, r3, #32
 8007be8:	2b20      	cmp	r3, #32
 8007bea:	d107      	bne.n	8007bfc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	f06f 0220 	mvn.w	r2, #32
 8007bf4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007bf6:	6878      	ldr	r0, [r7, #4]
 8007bf8:	f000 fc32 	bl	8008460 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007bfc:	bf00      	nop
 8007bfe:	3708      	adds	r7, #8
 8007c00:	46bd      	mov	sp, r7
 8007c02:	bd80      	pop	{r7, pc}

08007c04 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b086      	sub	sp, #24
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	60f8      	str	r0, [r7, #12]
 8007c0c:	60b9      	str	r1, [r7, #8]
 8007c0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007c10:	2300      	movs	r3, #0
 8007c12:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c1a:	2b01      	cmp	r3, #1
 8007c1c:	d101      	bne.n	8007c22 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007c1e:	2302      	movs	r3, #2
 8007c20:	e0ae      	b.n	8007d80 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	2201      	movs	r2, #1
 8007c26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	2b0c      	cmp	r3, #12
 8007c2e:	f200 809f 	bhi.w	8007d70 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007c32:	a201      	add	r2, pc, #4	; (adr r2, 8007c38 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007c34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c38:	08007c6d 	.word	0x08007c6d
 8007c3c:	08007d71 	.word	0x08007d71
 8007c40:	08007d71 	.word	0x08007d71
 8007c44:	08007d71 	.word	0x08007d71
 8007c48:	08007cad 	.word	0x08007cad
 8007c4c:	08007d71 	.word	0x08007d71
 8007c50:	08007d71 	.word	0x08007d71
 8007c54:	08007d71 	.word	0x08007d71
 8007c58:	08007cef 	.word	0x08007cef
 8007c5c:	08007d71 	.word	0x08007d71
 8007c60:	08007d71 	.word	0x08007d71
 8007c64:	08007d71 	.word	0x08007d71
 8007c68:	08007d2f 	.word	0x08007d2f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	68b9      	ldr	r1, [r7, #8]
 8007c72:	4618      	mov	r0, r3
 8007c74:	f000 f950 	bl	8007f18 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	699a      	ldr	r2, [r3, #24]
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	f042 0208 	orr.w	r2, r2, #8
 8007c86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	699a      	ldr	r2, [r3, #24]
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	f022 0204 	bic.w	r2, r2, #4
 8007c96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	6999      	ldr	r1, [r3, #24]
 8007c9e:	68bb      	ldr	r3, [r7, #8]
 8007ca0:	691a      	ldr	r2, [r3, #16]
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	430a      	orrs	r2, r1
 8007ca8:	619a      	str	r2, [r3, #24]
      break;
 8007caa:	e064      	b.n	8007d76 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	68b9      	ldr	r1, [r7, #8]
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	f000 f9a0 	bl	8007ff8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	699a      	ldr	r2, [r3, #24]
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007cc6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	699a      	ldr	r2, [r3, #24]
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007cd6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	6999      	ldr	r1, [r3, #24]
 8007cde:	68bb      	ldr	r3, [r7, #8]
 8007ce0:	691b      	ldr	r3, [r3, #16]
 8007ce2:	021a      	lsls	r2, r3, #8
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	430a      	orrs	r2, r1
 8007cea:	619a      	str	r2, [r3, #24]
      break;
 8007cec:	e043      	b.n	8007d76 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	68b9      	ldr	r1, [r7, #8]
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	f000 f9f5 	bl	80080e4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	69da      	ldr	r2, [r3, #28]
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	f042 0208 	orr.w	r2, r2, #8
 8007d08:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	69da      	ldr	r2, [r3, #28]
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	f022 0204 	bic.w	r2, r2, #4
 8007d18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	69d9      	ldr	r1, [r3, #28]
 8007d20:	68bb      	ldr	r3, [r7, #8]
 8007d22:	691a      	ldr	r2, [r3, #16]
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	430a      	orrs	r2, r1
 8007d2a:	61da      	str	r2, [r3, #28]
      break;
 8007d2c:	e023      	b.n	8007d76 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	68b9      	ldr	r1, [r7, #8]
 8007d34:	4618      	mov	r0, r3
 8007d36:	f000 fa49 	bl	80081cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	69da      	ldr	r2, [r3, #28]
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007d48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	69da      	ldr	r2, [r3, #28]
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007d58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	69d9      	ldr	r1, [r3, #28]
 8007d60:	68bb      	ldr	r3, [r7, #8]
 8007d62:	691b      	ldr	r3, [r3, #16]
 8007d64:	021a      	lsls	r2, r3, #8
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	430a      	orrs	r2, r1
 8007d6c:	61da      	str	r2, [r3, #28]
      break;
 8007d6e:	e002      	b.n	8007d76 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007d70:	2301      	movs	r3, #1
 8007d72:	75fb      	strb	r3, [r7, #23]
      break;
 8007d74:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	2200      	movs	r2, #0
 8007d7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007d7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d80:	4618      	mov	r0, r3
 8007d82:	3718      	adds	r7, #24
 8007d84:	46bd      	mov	sp, r7
 8007d86:	bd80      	pop	{r7, pc}

08007d88 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007d88:	b480      	push	{r7}
 8007d8a:	b083      	sub	sp, #12
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007d90:	bf00      	nop
 8007d92:	370c      	adds	r7, #12
 8007d94:	46bd      	mov	sp, r7
 8007d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9a:	4770      	bx	lr

08007d9c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007d9c:	b480      	push	{r7}
 8007d9e:	b083      	sub	sp, #12
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007da4:	bf00      	nop
 8007da6:	370c      	adds	r7, #12
 8007da8:	46bd      	mov	sp, r7
 8007daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dae:	4770      	bx	lr

08007db0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007db0:	b480      	push	{r7}
 8007db2:	b083      	sub	sp, #12
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007db8:	bf00      	nop
 8007dba:	370c      	adds	r7, #12
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc2:	4770      	bx	lr

08007dc4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007dc4:	b480      	push	{r7}
 8007dc6:	b083      	sub	sp, #12
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007dcc:	bf00      	nop
 8007dce:	370c      	adds	r7, #12
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd6:	4770      	bx	lr

08007dd8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007dd8:	b480      	push	{r7}
 8007dda:	b085      	sub	sp, #20
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]
 8007de0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	4a40      	ldr	r2, [pc, #256]	; (8007eec <TIM_Base_SetConfig+0x114>)
 8007dec:	4293      	cmp	r3, r2
 8007dee:	d013      	beq.n	8007e18 <TIM_Base_SetConfig+0x40>
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007df6:	d00f      	beq.n	8007e18 <TIM_Base_SetConfig+0x40>
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	4a3d      	ldr	r2, [pc, #244]	; (8007ef0 <TIM_Base_SetConfig+0x118>)
 8007dfc:	4293      	cmp	r3, r2
 8007dfe:	d00b      	beq.n	8007e18 <TIM_Base_SetConfig+0x40>
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	4a3c      	ldr	r2, [pc, #240]	; (8007ef4 <TIM_Base_SetConfig+0x11c>)
 8007e04:	4293      	cmp	r3, r2
 8007e06:	d007      	beq.n	8007e18 <TIM_Base_SetConfig+0x40>
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	4a3b      	ldr	r2, [pc, #236]	; (8007ef8 <TIM_Base_SetConfig+0x120>)
 8007e0c:	4293      	cmp	r3, r2
 8007e0e:	d003      	beq.n	8007e18 <TIM_Base_SetConfig+0x40>
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	4a3a      	ldr	r2, [pc, #232]	; (8007efc <TIM_Base_SetConfig+0x124>)
 8007e14:	4293      	cmp	r3, r2
 8007e16:	d108      	bne.n	8007e2a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007e20:	683b      	ldr	r3, [r7, #0]
 8007e22:	685b      	ldr	r3, [r3, #4]
 8007e24:	68fa      	ldr	r2, [r7, #12]
 8007e26:	4313      	orrs	r3, r2
 8007e28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	4a2f      	ldr	r2, [pc, #188]	; (8007eec <TIM_Base_SetConfig+0x114>)
 8007e2e:	4293      	cmp	r3, r2
 8007e30:	d02b      	beq.n	8007e8a <TIM_Base_SetConfig+0xb2>
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e38:	d027      	beq.n	8007e8a <TIM_Base_SetConfig+0xb2>
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	4a2c      	ldr	r2, [pc, #176]	; (8007ef0 <TIM_Base_SetConfig+0x118>)
 8007e3e:	4293      	cmp	r3, r2
 8007e40:	d023      	beq.n	8007e8a <TIM_Base_SetConfig+0xb2>
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	4a2b      	ldr	r2, [pc, #172]	; (8007ef4 <TIM_Base_SetConfig+0x11c>)
 8007e46:	4293      	cmp	r3, r2
 8007e48:	d01f      	beq.n	8007e8a <TIM_Base_SetConfig+0xb2>
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	4a2a      	ldr	r2, [pc, #168]	; (8007ef8 <TIM_Base_SetConfig+0x120>)
 8007e4e:	4293      	cmp	r3, r2
 8007e50:	d01b      	beq.n	8007e8a <TIM_Base_SetConfig+0xb2>
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	4a29      	ldr	r2, [pc, #164]	; (8007efc <TIM_Base_SetConfig+0x124>)
 8007e56:	4293      	cmp	r3, r2
 8007e58:	d017      	beq.n	8007e8a <TIM_Base_SetConfig+0xb2>
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	4a28      	ldr	r2, [pc, #160]	; (8007f00 <TIM_Base_SetConfig+0x128>)
 8007e5e:	4293      	cmp	r3, r2
 8007e60:	d013      	beq.n	8007e8a <TIM_Base_SetConfig+0xb2>
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	4a27      	ldr	r2, [pc, #156]	; (8007f04 <TIM_Base_SetConfig+0x12c>)
 8007e66:	4293      	cmp	r3, r2
 8007e68:	d00f      	beq.n	8007e8a <TIM_Base_SetConfig+0xb2>
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	4a26      	ldr	r2, [pc, #152]	; (8007f08 <TIM_Base_SetConfig+0x130>)
 8007e6e:	4293      	cmp	r3, r2
 8007e70:	d00b      	beq.n	8007e8a <TIM_Base_SetConfig+0xb2>
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	4a25      	ldr	r2, [pc, #148]	; (8007f0c <TIM_Base_SetConfig+0x134>)
 8007e76:	4293      	cmp	r3, r2
 8007e78:	d007      	beq.n	8007e8a <TIM_Base_SetConfig+0xb2>
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	4a24      	ldr	r2, [pc, #144]	; (8007f10 <TIM_Base_SetConfig+0x138>)
 8007e7e:	4293      	cmp	r3, r2
 8007e80:	d003      	beq.n	8007e8a <TIM_Base_SetConfig+0xb2>
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	4a23      	ldr	r2, [pc, #140]	; (8007f14 <TIM_Base_SetConfig+0x13c>)
 8007e86:	4293      	cmp	r3, r2
 8007e88:	d108      	bne.n	8007e9c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	68db      	ldr	r3, [r3, #12]
 8007e96:	68fa      	ldr	r2, [r7, #12]
 8007e98:	4313      	orrs	r3, r2
 8007e9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007ea2:	683b      	ldr	r3, [r7, #0]
 8007ea4:	695b      	ldr	r3, [r3, #20]
 8007ea6:	4313      	orrs	r3, r2
 8007ea8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	68fa      	ldr	r2, [r7, #12]
 8007eae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007eb0:	683b      	ldr	r3, [r7, #0]
 8007eb2:	689a      	ldr	r2, [r3, #8]
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	681a      	ldr	r2, [r3, #0]
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	4a0a      	ldr	r2, [pc, #40]	; (8007eec <TIM_Base_SetConfig+0x114>)
 8007ec4:	4293      	cmp	r3, r2
 8007ec6:	d003      	beq.n	8007ed0 <TIM_Base_SetConfig+0xf8>
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	4a0c      	ldr	r2, [pc, #48]	; (8007efc <TIM_Base_SetConfig+0x124>)
 8007ecc:	4293      	cmp	r3, r2
 8007ece:	d103      	bne.n	8007ed8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	691a      	ldr	r2, [r3, #16]
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	2201      	movs	r2, #1
 8007edc:	615a      	str	r2, [r3, #20]
}
 8007ede:	bf00      	nop
 8007ee0:	3714      	adds	r7, #20
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee8:	4770      	bx	lr
 8007eea:	bf00      	nop
 8007eec:	40010000 	.word	0x40010000
 8007ef0:	40000400 	.word	0x40000400
 8007ef4:	40000800 	.word	0x40000800
 8007ef8:	40000c00 	.word	0x40000c00
 8007efc:	40010400 	.word	0x40010400
 8007f00:	40014000 	.word	0x40014000
 8007f04:	40014400 	.word	0x40014400
 8007f08:	40014800 	.word	0x40014800
 8007f0c:	40001800 	.word	0x40001800
 8007f10:	40001c00 	.word	0x40001c00
 8007f14:	40002000 	.word	0x40002000

08007f18 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007f18:	b480      	push	{r7}
 8007f1a:	b087      	sub	sp, #28
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
 8007f20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	6a1b      	ldr	r3, [r3, #32]
 8007f26:	f023 0201 	bic.w	r2, r3, #1
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	6a1b      	ldr	r3, [r3, #32]
 8007f32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	685b      	ldr	r3, [r3, #4]
 8007f38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	699b      	ldr	r3, [r3, #24]
 8007f3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	f023 0303 	bic.w	r3, r3, #3
 8007f4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	68fa      	ldr	r2, [r7, #12]
 8007f56:	4313      	orrs	r3, r2
 8007f58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007f5a:	697b      	ldr	r3, [r7, #20]
 8007f5c:	f023 0302 	bic.w	r3, r3, #2
 8007f60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007f62:	683b      	ldr	r3, [r7, #0]
 8007f64:	689b      	ldr	r3, [r3, #8]
 8007f66:	697a      	ldr	r2, [r7, #20]
 8007f68:	4313      	orrs	r3, r2
 8007f6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	4a20      	ldr	r2, [pc, #128]	; (8007ff0 <TIM_OC1_SetConfig+0xd8>)
 8007f70:	4293      	cmp	r3, r2
 8007f72:	d003      	beq.n	8007f7c <TIM_OC1_SetConfig+0x64>
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	4a1f      	ldr	r2, [pc, #124]	; (8007ff4 <TIM_OC1_SetConfig+0xdc>)
 8007f78:	4293      	cmp	r3, r2
 8007f7a:	d10c      	bne.n	8007f96 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007f7c:	697b      	ldr	r3, [r7, #20]
 8007f7e:	f023 0308 	bic.w	r3, r3, #8
 8007f82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007f84:	683b      	ldr	r3, [r7, #0]
 8007f86:	68db      	ldr	r3, [r3, #12]
 8007f88:	697a      	ldr	r2, [r7, #20]
 8007f8a:	4313      	orrs	r3, r2
 8007f8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007f8e:	697b      	ldr	r3, [r7, #20]
 8007f90:	f023 0304 	bic.w	r3, r3, #4
 8007f94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	4a15      	ldr	r2, [pc, #84]	; (8007ff0 <TIM_OC1_SetConfig+0xd8>)
 8007f9a:	4293      	cmp	r3, r2
 8007f9c:	d003      	beq.n	8007fa6 <TIM_OC1_SetConfig+0x8e>
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	4a14      	ldr	r2, [pc, #80]	; (8007ff4 <TIM_OC1_SetConfig+0xdc>)
 8007fa2:	4293      	cmp	r3, r2
 8007fa4:	d111      	bne.n	8007fca <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007fa6:	693b      	ldr	r3, [r7, #16]
 8007fa8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007fac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007fae:	693b      	ldr	r3, [r7, #16]
 8007fb0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007fb4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	695b      	ldr	r3, [r3, #20]
 8007fba:	693a      	ldr	r2, [r7, #16]
 8007fbc:	4313      	orrs	r3, r2
 8007fbe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007fc0:	683b      	ldr	r3, [r7, #0]
 8007fc2:	699b      	ldr	r3, [r3, #24]
 8007fc4:	693a      	ldr	r2, [r7, #16]
 8007fc6:	4313      	orrs	r3, r2
 8007fc8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	693a      	ldr	r2, [r7, #16]
 8007fce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	68fa      	ldr	r2, [r7, #12]
 8007fd4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	685a      	ldr	r2, [r3, #4]
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	697a      	ldr	r2, [r7, #20]
 8007fe2:	621a      	str	r2, [r3, #32]
}
 8007fe4:	bf00      	nop
 8007fe6:	371c      	adds	r7, #28
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fee:	4770      	bx	lr
 8007ff0:	40010000 	.word	0x40010000
 8007ff4:	40010400 	.word	0x40010400

08007ff8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007ff8:	b480      	push	{r7}
 8007ffa:	b087      	sub	sp, #28
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
 8008000:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	6a1b      	ldr	r3, [r3, #32]
 8008006:	f023 0210 	bic.w	r2, r3, #16
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	6a1b      	ldr	r3, [r3, #32]
 8008012:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	685b      	ldr	r3, [r3, #4]
 8008018:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	699b      	ldr	r3, [r3, #24]
 800801e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008026:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800802e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	021b      	lsls	r3, r3, #8
 8008036:	68fa      	ldr	r2, [r7, #12]
 8008038:	4313      	orrs	r3, r2
 800803a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800803c:	697b      	ldr	r3, [r7, #20]
 800803e:	f023 0320 	bic.w	r3, r3, #32
 8008042:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008044:	683b      	ldr	r3, [r7, #0]
 8008046:	689b      	ldr	r3, [r3, #8]
 8008048:	011b      	lsls	r3, r3, #4
 800804a:	697a      	ldr	r2, [r7, #20]
 800804c:	4313      	orrs	r3, r2
 800804e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	4a22      	ldr	r2, [pc, #136]	; (80080dc <TIM_OC2_SetConfig+0xe4>)
 8008054:	4293      	cmp	r3, r2
 8008056:	d003      	beq.n	8008060 <TIM_OC2_SetConfig+0x68>
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	4a21      	ldr	r2, [pc, #132]	; (80080e0 <TIM_OC2_SetConfig+0xe8>)
 800805c:	4293      	cmp	r3, r2
 800805e:	d10d      	bne.n	800807c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008060:	697b      	ldr	r3, [r7, #20]
 8008062:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008066:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	68db      	ldr	r3, [r3, #12]
 800806c:	011b      	lsls	r3, r3, #4
 800806e:	697a      	ldr	r2, [r7, #20]
 8008070:	4313      	orrs	r3, r2
 8008072:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008074:	697b      	ldr	r3, [r7, #20]
 8008076:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800807a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	4a17      	ldr	r2, [pc, #92]	; (80080dc <TIM_OC2_SetConfig+0xe4>)
 8008080:	4293      	cmp	r3, r2
 8008082:	d003      	beq.n	800808c <TIM_OC2_SetConfig+0x94>
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	4a16      	ldr	r2, [pc, #88]	; (80080e0 <TIM_OC2_SetConfig+0xe8>)
 8008088:	4293      	cmp	r3, r2
 800808a:	d113      	bne.n	80080b4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800808c:	693b      	ldr	r3, [r7, #16]
 800808e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008092:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008094:	693b      	ldr	r3, [r7, #16]
 8008096:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800809a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800809c:	683b      	ldr	r3, [r7, #0]
 800809e:	695b      	ldr	r3, [r3, #20]
 80080a0:	009b      	lsls	r3, r3, #2
 80080a2:	693a      	ldr	r2, [r7, #16]
 80080a4:	4313      	orrs	r3, r2
 80080a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	699b      	ldr	r3, [r3, #24]
 80080ac:	009b      	lsls	r3, r3, #2
 80080ae:	693a      	ldr	r2, [r7, #16]
 80080b0:	4313      	orrs	r3, r2
 80080b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	693a      	ldr	r2, [r7, #16]
 80080b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	68fa      	ldr	r2, [r7, #12]
 80080be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80080c0:	683b      	ldr	r3, [r7, #0]
 80080c2:	685a      	ldr	r2, [r3, #4]
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	697a      	ldr	r2, [r7, #20]
 80080cc:	621a      	str	r2, [r3, #32]
}
 80080ce:	bf00      	nop
 80080d0:	371c      	adds	r7, #28
 80080d2:	46bd      	mov	sp, r7
 80080d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d8:	4770      	bx	lr
 80080da:	bf00      	nop
 80080dc:	40010000 	.word	0x40010000
 80080e0:	40010400 	.word	0x40010400

080080e4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80080e4:	b480      	push	{r7}
 80080e6:	b087      	sub	sp, #28
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]
 80080ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	6a1b      	ldr	r3, [r3, #32]
 80080f2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	6a1b      	ldr	r3, [r3, #32]
 80080fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	685b      	ldr	r3, [r3, #4]
 8008104:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	69db      	ldr	r3, [r3, #28]
 800810a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008112:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	f023 0303 	bic.w	r3, r3, #3
 800811a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800811c:	683b      	ldr	r3, [r7, #0]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	68fa      	ldr	r2, [r7, #12]
 8008122:	4313      	orrs	r3, r2
 8008124:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008126:	697b      	ldr	r3, [r7, #20]
 8008128:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800812c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	689b      	ldr	r3, [r3, #8]
 8008132:	021b      	lsls	r3, r3, #8
 8008134:	697a      	ldr	r2, [r7, #20]
 8008136:	4313      	orrs	r3, r2
 8008138:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	4a21      	ldr	r2, [pc, #132]	; (80081c4 <TIM_OC3_SetConfig+0xe0>)
 800813e:	4293      	cmp	r3, r2
 8008140:	d003      	beq.n	800814a <TIM_OC3_SetConfig+0x66>
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	4a20      	ldr	r2, [pc, #128]	; (80081c8 <TIM_OC3_SetConfig+0xe4>)
 8008146:	4293      	cmp	r3, r2
 8008148:	d10d      	bne.n	8008166 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800814a:	697b      	ldr	r3, [r7, #20]
 800814c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008150:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008152:	683b      	ldr	r3, [r7, #0]
 8008154:	68db      	ldr	r3, [r3, #12]
 8008156:	021b      	lsls	r3, r3, #8
 8008158:	697a      	ldr	r2, [r7, #20]
 800815a:	4313      	orrs	r3, r2
 800815c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800815e:	697b      	ldr	r3, [r7, #20]
 8008160:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008164:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	4a16      	ldr	r2, [pc, #88]	; (80081c4 <TIM_OC3_SetConfig+0xe0>)
 800816a:	4293      	cmp	r3, r2
 800816c:	d003      	beq.n	8008176 <TIM_OC3_SetConfig+0x92>
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	4a15      	ldr	r2, [pc, #84]	; (80081c8 <TIM_OC3_SetConfig+0xe4>)
 8008172:	4293      	cmp	r3, r2
 8008174:	d113      	bne.n	800819e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008176:	693b      	ldr	r3, [r7, #16]
 8008178:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800817c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800817e:	693b      	ldr	r3, [r7, #16]
 8008180:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008184:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008186:	683b      	ldr	r3, [r7, #0]
 8008188:	695b      	ldr	r3, [r3, #20]
 800818a:	011b      	lsls	r3, r3, #4
 800818c:	693a      	ldr	r2, [r7, #16]
 800818e:	4313      	orrs	r3, r2
 8008190:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008192:	683b      	ldr	r3, [r7, #0]
 8008194:	699b      	ldr	r3, [r3, #24]
 8008196:	011b      	lsls	r3, r3, #4
 8008198:	693a      	ldr	r2, [r7, #16]
 800819a:	4313      	orrs	r3, r2
 800819c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	693a      	ldr	r2, [r7, #16]
 80081a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	68fa      	ldr	r2, [r7, #12]
 80081a8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80081aa:	683b      	ldr	r3, [r7, #0]
 80081ac:	685a      	ldr	r2, [r3, #4]
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	697a      	ldr	r2, [r7, #20]
 80081b6:	621a      	str	r2, [r3, #32]
}
 80081b8:	bf00      	nop
 80081ba:	371c      	adds	r7, #28
 80081bc:	46bd      	mov	sp, r7
 80081be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c2:	4770      	bx	lr
 80081c4:	40010000 	.word	0x40010000
 80081c8:	40010400 	.word	0x40010400

080081cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80081cc:	b480      	push	{r7}
 80081ce:	b087      	sub	sp, #28
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
 80081d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	6a1b      	ldr	r3, [r3, #32]
 80081da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	6a1b      	ldr	r3, [r3, #32]
 80081e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	685b      	ldr	r3, [r3, #4]
 80081ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	69db      	ldr	r3, [r3, #28]
 80081f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80081fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008202:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008204:	683b      	ldr	r3, [r7, #0]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	021b      	lsls	r3, r3, #8
 800820a:	68fa      	ldr	r2, [r7, #12]
 800820c:	4313      	orrs	r3, r2
 800820e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008210:	693b      	ldr	r3, [r7, #16]
 8008212:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008216:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	689b      	ldr	r3, [r3, #8]
 800821c:	031b      	lsls	r3, r3, #12
 800821e:	693a      	ldr	r2, [r7, #16]
 8008220:	4313      	orrs	r3, r2
 8008222:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	4a12      	ldr	r2, [pc, #72]	; (8008270 <TIM_OC4_SetConfig+0xa4>)
 8008228:	4293      	cmp	r3, r2
 800822a:	d003      	beq.n	8008234 <TIM_OC4_SetConfig+0x68>
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	4a11      	ldr	r2, [pc, #68]	; (8008274 <TIM_OC4_SetConfig+0xa8>)
 8008230:	4293      	cmp	r3, r2
 8008232:	d109      	bne.n	8008248 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008234:	697b      	ldr	r3, [r7, #20]
 8008236:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800823a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800823c:	683b      	ldr	r3, [r7, #0]
 800823e:	695b      	ldr	r3, [r3, #20]
 8008240:	019b      	lsls	r3, r3, #6
 8008242:	697a      	ldr	r2, [r7, #20]
 8008244:	4313      	orrs	r3, r2
 8008246:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	697a      	ldr	r2, [r7, #20]
 800824c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	68fa      	ldr	r2, [r7, #12]
 8008252:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008254:	683b      	ldr	r3, [r7, #0]
 8008256:	685a      	ldr	r2, [r3, #4]
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	693a      	ldr	r2, [r7, #16]
 8008260:	621a      	str	r2, [r3, #32]
}
 8008262:	bf00      	nop
 8008264:	371c      	adds	r7, #28
 8008266:	46bd      	mov	sp, r7
 8008268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826c:	4770      	bx	lr
 800826e:	bf00      	nop
 8008270:	40010000 	.word	0x40010000
 8008274:	40010400 	.word	0x40010400

08008278 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008278:	b480      	push	{r7}
 800827a:	b087      	sub	sp, #28
 800827c:	af00      	add	r7, sp, #0
 800827e:	60f8      	str	r0, [r7, #12]
 8008280:	60b9      	str	r1, [r7, #8]
 8008282:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008284:	68bb      	ldr	r3, [r7, #8]
 8008286:	f003 031f 	and.w	r3, r3, #31
 800828a:	2201      	movs	r2, #1
 800828c:	fa02 f303 	lsl.w	r3, r2, r3
 8008290:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	6a1a      	ldr	r2, [r3, #32]
 8008296:	697b      	ldr	r3, [r7, #20]
 8008298:	43db      	mvns	r3, r3
 800829a:	401a      	ands	r2, r3
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	6a1a      	ldr	r2, [r3, #32]
 80082a4:	68bb      	ldr	r3, [r7, #8]
 80082a6:	f003 031f 	and.w	r3, r3, #31
 80082aa:	6879      	ldr	r1, [r7, #4]
 80082ac:	fa01 f303 	lsl.w	r3, r1, r3
 80082b0:	431a      	orrs	r2, r3
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	621a      	str	r2, [r3, #32]
}
 80082b6:	bf00      	nop
 80082b8:	371c      	adds	r7, #28
 80082ba:	46bd      	mov	sp, r7
 80082bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c0:	4770      	bx	lr
	...

080082c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80082c4:	b480      	push	{r7}
 80082c6:	b085      	sub	sp, #20
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
 80082cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80082d4:	2b01      	cmp	r3, #1
 80082d6:	d101      	bne.n	80082dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80082d8:	2302      	movs	r3, #2
 80082da:	e05a      	b.n	8008392 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2201      	movs	r2, #1
 80082e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	2202      	movs	r2, #2
 80082e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	685b      	ldr	r3, [r3, #4]
 80082f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	689b      	ldr	r3, [r3, #8]
 80082fa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008302:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008304:	683b      	ldr	r3, [r7, #0]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	68fa      	ldr	r2, [r7, #12]
 800830a:	4313      	orrs	r3, r2
 800830c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	68fa      	ldr	r2, [r7, #12]
 8008314:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	4a21      	ldr	r2, [pc, #132]	; (80083a0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800831c:	4293      	cmp	r3, r2
 800831e:	d022      	beq.n	8008366 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008328:	d01d      	beq.n	8008366 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	4a1d      	ldr	r2, [pc, #116]	; (80083a4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008330:	4293      	cmp	r3, r2
 8008332:	d018      	beq.n	8008366 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	4a1b      	ldr	r2, [pc, #108]	; (80083a8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800833a:	4293      	cmp	r3, r2
 800833c:	d013      	beq.n	8008366 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	4a1a      	ldr	r2, [pc, #104]	; (80083ac <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008344:	4293      	cmp	r3, r2
 8008346:	d00e      	beq.n	8008366 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	4a18      	ldr	r2, [pc, #96]	; (80083b0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800834e:	4293      	cmp	r3, r2
 8008350:	d009      	beq.n	8008366 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	4a17      	ldr	r2, [pc, #92]	; (80083b4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008358:	4293      	cmp	r3, r2
 800835a:	d004      	beq.n	8008366 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	4a15      	ldr	r2, [pc, #84]	; (80083b8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008362:	4293      	cmp	r3, r2
 8008364:	d10c      	bne.n	8008380 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008366:	68bb      	ldr	r3, [r7, #8]
 8008368:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800836c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800836e:	683b      	ldr	r3, [r7, #0]
 8008370:	685b      	ldr	r3, [r3, #4]
 8008372:	68ba      	ldr	r2, [r7, #8]
 8008374:	4313      	orrs	r3, r2
 8008376:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	68ba      	ldr	r2, [r7, #8]
 800837e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2201      	movs	r2, #1
 8008384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	2200      	movs	r2, #0
 800838c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008390:	2300      	movs	r3, #0
}
 8008392:	4618      	mov	r0, r3
 8008394:	3714      	adds	r7, #20
 8008396:	46bd      	mov	sp, r7
 8008398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839c:	4770      	bx	lr
 800839e:	bf00      	nop
 80083a0:	40010000 	.word	0x40010000
 80083a4:	40000400 	.word	0x40000400
 80083a8:	40000800 	.word	0x40000800
 80083ac:	40000c00 	.word	0x40000c00
 80083b0:	40010400 	.word	0x40010400
 80083b4:	40014000 	.word	0x40014000
 80083b8:	40001800 	.word	0x40001800

080083bc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80083bc:	b480      	push	{r7}
 80083be:	b085      	sub	sp, #20
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]
 80083c4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80083c6:	2300      	movs	r3, #0
 80083c8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80083d0:	2b01      	cmp	r3, #1
 80083d2:	d101      	bne.n	80083d8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80083d4:	2302      	movs	r3, #2
 80083d6:	e03d      	b.n	8008454 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	2201      	movs	r2, #1
 80083dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80083e6:	683b      	ldr	r3, [r7, #0]
 80083e8:	68db      	ldr	r3, [r3, #12]
 80083ea:	4313      	orrs	r3, r2
 80083ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80083f4:	683b      	ldr	r3, [r7, #0]
 80083f6:	689b      	ldr	r3, [r3, #8]
 80083f8:	4313      	orrs	r3, r2
 80083fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008402:	683b      	ldr	r3, [r7, #0]
 8008404:	685b      	ldr	r3, [r3, #4]
 8008406:	4313      	orrs	r3, r2
 8008408:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008410:	683b      	ldr	r3, [r7, #0]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	4313      	orrs	r3, r2
 8008416:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800841e:	683b      	ldr	r3, [r7, #0]
 8008420:	691b      	ldr	r3, [r3, #16]
 8008422:	4313      	orrs	r3, r2
 8008424:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800842c:	683b      	ldr	r3, [r7, #0]
 800842e:	695b      	ldr	r3, [r3, #20]
 8008430:	4313      	orrs	r3, r2
 8008432:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800843a:	683b      	ldr	r3, [r7, #0]
 800843c:	69db      	ldr	r3, [r3, #28]
 800843e:	4313      	orrs	r3, r2
 8008440:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	68fa      	ldr	r2, [r7, #12]
 8008448:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	2200      	movs	r2, #0
 800844e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008452:	2300      	movs	r3, #0
}
 8008454:	4618      	mov	r0, r3
 8008456:	3714      	adds	r7, #20
 8008458:	46bd      	mov	sp, r7
 800845a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845e:	4770      	bx	lr

08008460 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008460:	b480      	push	{r7}
 8008462:	b083      	sub	sp, #12
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008468:	bf00      	nop
 800846a:	370c      	adds	r7, #12
 800846c:	46bd      	mov	sp, r7
 800846e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008472:	4770      	bx	lr

08008474 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008474:	b480      	push	{r7}
 8008476:	b083      	sub	sp, #12
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800847c:	bf00      	nop
 800847e:	370c      	adds	r7, #12
 8008480:	46bd      	mov	sp, r7
 8008482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008486:	4770      	bx	lr

08008488 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008488:	b580      	push	{r7, lr}
 800848a:	b082      	sub	sp, #8
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	2b00      	cmp	r3, #0
 8008494:	d101      	bne.n	800849a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008496:	2301      	movs	r3, #1
 8008498:	e03f      	b.n	800851a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80084a0:	b2db      	uxtb	r3, r3
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d106      	bne.n	80084b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	2200      	movs	r2, #0
 80084aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80084ae:	6878      	ldr	r0, [r7, #4]
 80084b0:	f7f9 fc4c 	bl	8001d4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	2224      	movs	r2, #36	; 0x24
 80084b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	68da      	ldr	r2, [r3, #12]
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80084ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80084cc:	6878      	ldr	r0, [r7, #4]
 80084ce:	f000 f929 	bl	8008724 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	691a      	ldr	r2, [r3, #16]
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80084e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	695a      	ldr	r2, [r3, #20]
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80084f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	68da      	ldr	r2, [r3, #12]
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008500:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	2200      	movs	r2, #0
 8008506:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	2220      	movs	r2, #32
 800850c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	2220      	movs	r2, #32
 8008514:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008518:	2300      	movs	r3, #0
}
 800851a:	4618      	mov	r0, r3
 800851c:	3708      	adds	r7, #8
 800851e:	46bd      	mov	sp, r7
 8008520:	bd80      	pop	{r7, pc}

08008522 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008522:	b580      	push	{r7, lr}
 8008524:	b08a      	sub	sp, #40	; 0x28
 8008526:	af02      	add	r7, sp, #8
 8008528:	60f8      	str	r0, [r7, #12]
 800852a:	60b9      	str	r1, [r7, #8]
 800852c:	603b      	str	r3, [r7, #0]
 800852e:	4613      	mov	r3, r2
 8008530:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008532:	2300      	movs	r3, #0
 8008534:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800853c:	b2db      	uxtb	r3, r3
 800853e:	2b20      	cmp	r3, #32
 8008540:	d17c      	bne.n	800863c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008542:	68bb      	ldr	r3, [r7, #8]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d002      	beq.n	800854e <HAL_UART_Transmit+0x2c>
 8008548:	88fb      	ldrh	r3, [r7, #6]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d101      	bne.n	8008552 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800854e:	2301      	movs	r3, #1
 8008550:	e075      	b.n	800863e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008558:	2b01      	cmp	r3, #1
 800855a:	d101      	bne.n	8008560 <HAL_UART_Transmit+0x3e>
 800855c:	2302      	movs	r3, #2
 800855e:	e06e      	b.n	800863e <HAL_UART_Transmit+0x11c>
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	2201      	movs	r2, #1
 8008564:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	2200      	movs	r2, #0
 800856c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	2221      	movs	r2, #33	; 0x21
 8008572:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008576:	f7fa f9ad 	bl	80028d4 <HAL_GetTick>
 800857a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	88fa      	ldrh	r2, [r7, #6]
 8008580:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	88fa      	ldrh	r2, [r7, #6]
 8008586:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	689b      	ldr	r3, [r3, #8]
 800858c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008590:	d108      	bne.n	80085a4 <HAL_UART_Transmit+0x82>
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	691b      	ldr	r3, [r3, #16]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d104      	bne.n	80085a4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800859a:	2300      	movs	r3, #0
 800859c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800859e:	68bb      	ldr	r3, [r7, #8]
 80085a0:	61bb      	str	r3, [r7, #24]
 80085a2:	e003      	b.n	80085ac <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80085a4:	68bb      	ldr	r3, [r7, #8]
 80085a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80085a8:	2300      	movs	r3, #0
 80085aa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	2200      	movs	r2, #0
 80085b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80085b4:	e02a      	b.n	800860c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80085b6:	683b      	ldr	r3, [r7, #0]
 80085b8:	9300      	str	r3, [sp, #0]
 80085ba:	697b      	ldr	r3, [r7, #20]
 80085bc:	2200      	movs	r2, #0
 80085be:	2180      	movs	r1, #128	; 0x80
 80085c0:	68f8      	ldr	r0, [r7, #12]
 80085c2:	f000 f840 	bl	8008646 <UART_WaitOnFlagUntilTimeout>
 80085c6:	4603      	mov	r3, r0
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d001      	beq.n	80085d0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80085cc:	2303      	movs	r3, #3
 80085ce:	e036      	b.n	800863e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80085d0:	69fb      	ldr	r3, [r7, #28]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d10b      	bne.n	80085ee <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80085d6:	69bb      	ldr	r3, [r7, #24]
 80085d8:	881b      	ldrh	r3, [r3, #0]
 80085da:	461a      	mov	r2, r3
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80085e4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80085e6:	69bb      	ldr	r3, [r7, #24]
 80085e8:	3302      	adds	r3, #2
 80085ea:	61bb      	str	r3, [r7, #24]
 80085ec:	e007      	b.n	80085fe <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80085ee:	69fb      	ldr	r3, [r7, #28]
 80085f0:	781a      	ldrb	r2, [r3, #0]
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80085f8:	69fb      	ldr	r3, [r7, #28]
 80085fa:	3301      	adds	r3, #1
 80085fc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008602:	b29b      	uxth	r3, r3
 8008604:	3b01      	subs	r3, #1
 8008606:	b29a      	uxth	r2, r3
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008610:	b29b      	uxth	r3, r3
 8008612:	2b00      	cmp	r3, #0
 8008614:	d1cf      	bne.n	80085b6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008616:	683b      	ldr	r3, [r7, #0]
 8008618:	9300      	str	r3, [sp, #0]
 800861a:	697b      	ldr	r3, [r7, #20]
 800861c:	2200      	movs	r2, #0
 800861e:	2140      	movs	r1, #64	; 0x40
 8008620:	68f8      	ldr	r0, [r7, #12]
 8008622:	f000 f810 	bl	8008646 <UART_WaitOnFlagUntilTimeout>
 8008626:	4603      	mov	r3, r0
 8008628:	2b00      	cmp	r3, #0
 800862a:	d001      	beq.n	8008630 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800862c:	2303      	movs	r3, #3
 800862e:	e006      	b.n	800863e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	2220      	movs	r2, #32
 8008634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8008638:	2300      	movs	r3, #0
 800863a:	e000      	b.n	800863e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800863c:	2302      	movs	r3, #2
  }
}
 800863e:	4618      	mov	r0, r3
 8008640:	3720      	adds	r7, #32
 8008642:	46bd      	mov	sp, r7
 8008644:	bd80      	pop	{r7, pc}

08008646 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008646:	b580      	push	{r7, lr}
 8008648:	b090      	sub	sp, #64	; 0x40
 800864a:	af00      	add	r7, sp, #0
 800864c:	60f8      	str	r0, [r7, #12]
 800864e:	60b9      	str	r1, [r7, #8]
 8008650:	603b      	str	r3, [r7, #0]
 8008652:	4613      	mov	r3, r2
 8008654:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008656:	e050      	b.n	80086fa <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008658:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800865a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800865e:	d04c      	beq.n	80086fa <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008660:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008662:	2b00      	cmp	r3, #0
 8008664:	d007      	beq.n	8008676 <UART_WaitOnFlagUntilTimeout+0x30>
 8008666:	f7fa f935 	bl	80028d4 <HAL_GetTick>
 800866a:	4602      	mov	r2, r0
 800866c:	683b      	ldr	r3, [r7, #0]
 800866e:	1ad3      	subs	r3, r2, r3
 8008670:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008672:	429a      	cmp	r2, r3
 8008674:	d241      	bcs.n	80086fa <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	330c      	adds	r3, #12
 800867c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800867e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008680:	e853 3f00 	ldrex	r3, [r3]
 8008684:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008688:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800868c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	330c      	adds	r3, #12
 8008694:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008696:	637a      	str	r2, [r7, #52]	; 0x34
 8008698:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800869a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800869c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800869e:	e841 2300 	strex	r3, r2, [r1]
 80086a2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80086a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d1e5      	bne.n	8008676 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	3314      	adds	r3, #20
 80086b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086b2:	697b      	ldr	r3, [r7, #20]
 80086b4:	e853 3f00 	ldrex	r3, [r3]
 80086b8:	613b      	str	r3, [r7, #16]
   return(result);
 80086ba:	693b      	ldr	r3, [r7, #16]
 80086bc:	f023 0301 	bic.w	r3, r3, #1
 80086c0:	63bb      	str	r3, [r7, #56]	; 0x38
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	3314      	adds	r3, #20
 80086c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80086ca:	623a      	str	r2, [r7, #32]
 80086cc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086ce:	69f9      	ldr	r1, [r7, #28]
 80086d0:	6a3a      	ldr	r2, [r7, #32]
 80086d2:	e841 2300 	strex	r3, r2, [r1]
 80086d6:	61bb      	str	r3, [r7, #24]
   return(result);
 80086d8:	69bb      	ldr	r3, [r7, #24]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d1e5      	bne.n	80086aa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	2220      	movs	r2, #32
 80086e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	2220      	movs	r2, #32
 80086ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	2200      	movs	r2, #0
 80086f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80086f6:	2303      	movs	r3, #3
 80086f8:	e00f      	b.n	800871a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	681a      	ldr	r2, [r3, #0]
 8008700:	68bb      	ldr	r3, [r7, #8]
 8008702:	4013      	ands	r3, r2
 8008704:	68ba      	ldr	r2, [r7, #8]
 8008706:	429a      	cmp	r2, r3
 8008708:	bf0c      	ite	eq
 800870a:	2301      	moveq	r3, #1
 800870c:	2300      	movne	r3, #0
 800870e:	b2db      	uxtb	r3, r3
 8008710:	461a      	mov	r2, r3
 8008712:	79fb      	ldrb	r3, [r7, #7]
 8008714:	429a      	cmp	r2, r3
 8008716:	d09f      	beq.n	8008658 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008718:	2300      	movs	r3, #0
}
 800871a:	4618      	mov	r0, r3
 800871c:	3740      	adds	r7, #64	; 0x40
 800871e:	46bd      	mov	sp, r7
 8008720:	bd80      	pop	{r7, pc}
	...

08008724 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008724:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008728:	b09f      	sub	sp, #124	; 0x7c
 800872a:	af00      	add	r7, sp, #0
 800872c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800872e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	691b      	ldr	r3, [r3, #16]
 8008734:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008738:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800873a:	68d9      	ldr	r1, [r3, #12]
 800873c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800873e:	681a      	ldr	r2, [r3, #0]
 8008740:	ea40 0301 	orr.w	r3, r0, r1
 8008744:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008746:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008748:	689a      	ldr	r2, [r3, #8]
 800874a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800874c:	691b      	ldr	r3, [r3, #16]
 800874e:	431a      	orrs	r2, r3
 8008750:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008752:	695b      	ldr	r3, [r3, #20]
 8008754:	431a      	orrs	r2, r3
 8008756:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008758:	69db      	ldr	r3, [r3, #28]
 800875a:	4313      	orrs	r3, r2
 800875c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800875e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	68db      	ldr	r3, [r3, #12]
 8008764:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008768:	f021 010c 	bic.w	r1, r1, #12
 800876c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800876e:	681a      	ldr	r2, [r3, #0]
 8008770:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008772:	430b      	orrs	r3, r1
 8008774:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008776:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	695b      	ldr	r3, [r3, #20]
 800877c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008780:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008782:	6999      	ldr	r1, [r3, #24]
 8008784:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008786:	681a      	ldr	r2, [r3, #0]
 8008788:	ea40 0301 	orr.w	r3, r0, r1
 800878c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800878e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008790:	681a      	ldr	r2, [r3, #0]
 8008792:	4bc5      	ldr	r3, [pc, #788]	; (8008aa8 <UART_SetConfig+0x384>)
 8008794:	429a      	cmp	r2, r3
 8008796:	d004      	beq.n	80087a2 <UART_SetConfig+0x7e>
 8008798:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800879a:	681a      	ldr	r2, [r3, #0]
 800879c:	4bc3      	ldr	r3, [pc, #780]	; (8008aac <UART_SetConfig+0x388>)
 800879e:	429a      	cmp	r2, r3
 80087a0:	d103      	bne.n	80087aa <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80087a2:	f7fe fdc9 	bl	8007338 <HAL_RCC_GetPCLK2Freq>
 80087a6:	6778      	str	r0, [r7, #116]	; 0x74
 80087a8:	e002      	b.n	80087b0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80087aa:	f7fe fdb1 	bl	8007310 <HAL_RCC_GetPCLK1Freq>
 80087ae:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80087b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087b2:	69db      	ldr	r3, [r3, #28]
 80087b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80087b8:	f040 80b6 	bne.w	8008928 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80087bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80087be:	461c      	mov	r4, r3
 80087c0:	f04f 0500 	mov.w	r5, #0
 80087c4:	4622      	mov	r2, r4
 80087c6:	462b      	mov	r3, r5
 80087c8:	1891      	adds	r1, r2, r2
 80087ca:	6439      	str	r1, [r7, #64]	; 0x40
 80087cc:	415b      	adcs	r3, r3
 80087ce:	647b      	str	r3, [r7, #68]	; 0x44
 80087d0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80087d4:	1912      	adds	r2, r2, r4
 80087d6:	eb45 0303 	adc.w	r3, r5, r3
 80087da:	f04f 0000 	mov.w	r0, #0
 80087de:	f04f 0100 	mov.w	r1, #0
 80087e2:	00d9      	lsls	r1, r3, #3
 80087e4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80087e8:	00d0      	lsls	r0, r2, #3
 80087ea:	4602      	mov	r2, r0
 80087ec:	460b      	mov	r3, r1
 80087ee:	1911      	adds	r1, r2, r4
 80087f0:	6639      	str	r1, [r7, #96]	; 0x60
 80087f2:	416b      	adcs	r3, r5
 80087f4:	667b      	str	r3, [r7, #100]	; 0x64
 80087f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087f8:	685b      	ldr	r3, [r3, #4]
 80087fa:	461a      	mov	r2, r3
 80087fc:	f04f 0300 	mov.w	r3, #0
 8008800:	1891      	adds	r1, r2, r2
 8008802:	63b9      	str	r1, [r7, #56]	; 0x38
 8008804:	415b      	adcs	r3, r3
 8008806:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008808:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800880c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8008810:	f7f8 f9ba 	bl	8000b88 <__aeabi_uldivmod>
 8008814:	4602      	mov	r2, r0
 8008816:	460b      	mov	r3, r1
 8008818:	4ba5      	ldr	r3, [pc, #660]	; (8008ab0 <UART_SetConfig+0x38c>)
 800881a:	fba3 2302 	umull	r2, r3, r3, r2
 800881e:	095b      	lsrs	r3, r3, #5
 8008820:	011e      	lsls	r6, r3, #4
 8008822:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008824:	461c      	mov	r4, r3
 8008826:	f04f 0500 	mov.w	r5, #0
 800882a:	4622      	mov	r2, r4
 800882c:	462b      	mov	r3, r5
 800882e:	1891      	adds	r1, r2, r2
 8008830:	6339      	str	r1, [r7, #48]	; 0x30
 8008832:	415b      	adcs	r3, r3
 8008834:	637b      	str	r3, [r7, #52]	; 0x34
 8008836:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800883a:	1912      	adds	r2, r2, r4
 800883c:	eb45 0303 	adc.w	r3, r5, r3
 8008840:	f04f 0000 	mov.w	r0, #0
 8008844:	f04f 0100 	mov.w	r1, #0
 8008848:	00d9      	lsls	r1, r3, #3
 800884a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800884e:	00d0      	lsls	r0, r2, #3
 8008850:	4602      	mov	r2, r0
 8008852:	460b      	mov	r3, r1
 8008854:	1911      	adds	r1, r2, r4
 8008856:	65b9      	str	r1, [r7, #88]	; 0x58
 8008858:	416b      	adcs	r3, r5
 800885a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800885c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800885e:	685b      	ldr	r3, [r3, #4]
 8008860:	461a      	mov	r2, r3
 8008862:	f04f 0300 	mov.w	r3, #0
 8008866:	1891      	adds	r1, r2, r2
 8008868:	62b9      	str	r1, [r7, #40]	; 0x28
 800886a:	415b      	adcs	r3, r3
 800886c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800886e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008872:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8008876:	f7f8 f987 	bl	8000b88 <__aeabi_uldivmod>
 800887a:	4602      	mov	r2, r0
 800887c:	460b      	mov	r3, r1
 800887e:	4b8c      	ldr	r3, [pc, #560]	; (8008ab0 <UART_SetConfig+0x38c>)
 8008880:	fba3 1302 	umull	r1, r3, r3, r2
 8008884:	095b      	lsrs	r3, r3, #5
 8008886:	2164      	movs	r1, #100	; 0x64
 8008888:	fb01 f303 	mul.w	r3, r1, r3
 800888c:	1ad3      	subs	r3, r2, r3
 800888e:	00db      	lsls	r3, r3, #3
 8008890:	3332      	adds	r3, #50	; 0x32
 8008892:	4a87      	ldr	r2, [pc, #540]	; (8008ab0 <UART_SetConfig+0x38c>)
 8008894:	fba2 2303 	umull	r2, r3, r2, r3
 8008898:	095b      	lsrs	r3, r3, #5
 800889a:	005b      	lsls	r3, r3, #1
 800889c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80088a0:	441e      	add	r6, r3
 80088a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80088a4:	4618      	mov	r0, r3
 80088a6:	f04f 0100 	mov.w	r1, #0
 80088aa:	4602      	mov	r2, r0
 80088ac:	460b      	mov	r3, r1
 80088ae:	1894      	adds	r4, r2, r2
 80088b0:	623c      	str	r4, [r7, #32]
 80088b2:	415b      	adcs	r3, r3
 80088b4:	627b      	str	r3, [r7, #36]	; 0x24
 80088b6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80088ba:	1812      	adds	r2, r2, r0
 80088bc:	eb41 0303 	adc.w	r3, r1, r3
 80088c0:	f04f 0400 	mov.w	r4, #0
 80088c4:	f04f 0500 	mov.w	r5, #0
 80088c8:	00dd      	lsls	r5, r3, #3
 80088ca:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80088ce:	00d4      	lsls	r4, r2, #3
 80088d0:	4622      	mov	r2, r4
 80088d2:	462b      	mov	r3, r5
 80088d4:	1814      	adds	r4, r2, r0
 80088d6:	653c      	str	r4, [r7, #80]	; 0x50
 80088d8:	414b      	adcs	r3, r1
 80088da:	657b      	str	r3, [r7, #84]	; 0x54
 80088dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80088de:	685b      	ldr	r3, [r3, #4]
 80088e0:	461a      	mov	r2, r3
 80088e2:	f04f 0300 	mov.w	r3, #0
 80088e6:	1891      	adds	r1, r2, r2
 80088e8:	61b9      	str	r1, [r7, #24]
 80088ea:	415b      	adcs	r3, r3
 80088ec:	61fb      	str	r3, [r7, #28]
 80088ee:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80088f2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80088f6:	f7f8 f947 	bl	8000b88 <__aeabi_uldivmod>
 80088fa:	4602      	mov	r2, r0
 80088fc:	460b      	mov	r3, r1
 80088fe:	4b6c      	ldr	r3, [pc, #432]	; (8008ab0 <UART_SetConfig+0x38c>)
 8008900:	fba3 1302 	umull	r1, r3, r3, r2
 8008904:	095b      	lsrs	r3, r3, #5
 8008906:	2164      	movs	r1, #100	; 0x64
 8008908:	fb01 f303 	mul.w	r3, r1, r3
 800890c:	1ad3      	subs	r3, r2, r3
 800890e:	00db      	lsls	r3, r3, #3
 8008910:	3332      	adds	r3, #50	; 0x32
 8008912:	4a67      	ldr	r2, [pc, #412]	; (8008ab0 <UART_SetConfig+0x38c>)
 8008914:	fba2 2303 	umull	r2, r3, r2, r3
 8008918:	095b      	lsrs	r3, r3, #5
 800891a:	f003 0207 	and.w	r2, r3, #7
 800891e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	4432      	add	r2, r6
 8008924:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008926:	e0b9      	b.n	8008a9c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008928:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800892a:	461c      	mov	r4, r3
 800892c:	f04f 0500 	mov.w	r5, #0
 8008930:	4622      	mov	r2, r4
 8008932:	462b      	mov	r3, r5
 8008934:	1891      	adds	r1, r2, r2
 8008936:	6139      	str	r1, [r7, #16]
 8008938:	415b      	adcs	r3, r3
 800893a:	617b      	str	r3, [r7, #20]
 800893c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008940:	1912      	adds	r2, r2, r4
 8008942:	eb45 0303 	adc.w	r3, r5, r3
 8008946:	f04f 0000 	mov.w	r0, #0
 800894a:	f04f 0100 	mov.w	r1, #0
 800894e:	00d9      	lsls	r1, r3, #3
 8008950:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008954:	00d0      	lsls	r0, r2, #3
 8008956:	4602      	mov	r2, r0
 8008958:	460b      	mov	r3, r1
 800895a:	eb12 0804 	adds.w	r8, r2, r4
 800895e:	eb43 0905 	adc.w	r9, r3, r5
 8008962:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008964:	685b      	ldr	r3, [r3, #4]
 8008966:	4618      	mov	r0, r3
 8008968:	f04f 0100 	mov.w	r1, #0
 800896c:	f04f 0200 	mov.w	r2, #0
 8008970:	f04f 0300 	mov.w	r3, #0
 8008974:	008b      	lsls	r3, r1, #2
 8008976:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800897a:	0082      	lsls	r2, r0, #2
 800897c:	4640      	mov	r0, r8
 800897e:	4649      	mov	r1, r9
 8008980:	f7f8 f902 	bl	8000b88 <__aeabi_uldivmod>
 8008984:	4602      	mov	r2, r0
 8008986:	460b      	mov	r3, r1
 8008988:	4b49      	ldr	r3, [pc, #292]	; (8008ab0 <UART_SetConfig+0x38c>)
 800898a:	fba3 2302 	umull	r2, r3, r3, r2
 800898e:	095b      	lsrs	r3, r3, #5
 8008990:	011e      	lsls	r6, r3, #4
 8008992:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008994:	4618      	mov	r0, r3
 8008996:	f04f 0100 	mov.w	r1, #0
 800899a:	4602      	mov	r2, r0
 800899c:	460b      	mov	r3, r1
 800899e:	1894      	adds	r4, r2, r2
 80089a0:	60bc      	str	r4, [r7, #8]
 80089a2:	415b      	adcs	r3, r3
 80089a4:	60fb      	str	r3, [r7, #12]
 80089a6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80089aa:	1812      	adds	r2, r2, r0
 80089ac:	eb41 0303 	adc.w	r3, r1, r3
 80089b0:	f04f 0400 	mov.w	r4, #0
 80089b4:	f04f 0500 	mov.w	r5, #0
 80089b8:	00dd      	lsls	r5, r3, #3
 80089ba:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80089be:	00d4      	lsls	r4, r2, #3
 80089c0:	4622      	mov	r2, r4
 80089c2:	462b      	mov	r3, r5
 80089c4:	1814      	adds	r4, r2, r0
 80089c6:	64bc      	str	r4, [r7, #72]	; 0x48
 80089c8:	414b      	adcs	r3, r1
 80089ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80089cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80089ce:	685b      	ldr	r3, [r3, #4]
 80089d0:	4618      	mov	r0, r3
 80089d2:	f04f 0100 	mov.w	r1, #0
 80089d6:	f04f 0200 	mov.w	r2, #0
 80089da:	f04f 0300 	mov.w	r3, #0
 80089de:	008b      	lsls	r3, r1, #2
 80089e0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80089e4:	0082      	lsls	r2, r0, #2
 80089e6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80089ea:	f7f8 f8cd 	bl	8000b88 <__aeabi_uldivmod>
 80089ee:	4602      	mov	r2, r0
 80089f0:	460b      	mov	r3, r1
 80089f2:	4b2f      	ldr	r3, [pc, #188]	; (8008ab0 <UART_SetConfig+0x38c>)
 80089f4:	fba3 1302 	umull	r1, r3, r3, r2
 80089f8:	095b      	lsrs	r3, r3, #5
 80089fa:	2164      	movs	r1, #100	; 0x64
 80089fc:	fb01 f303 	mul.w	r3, r1, r3
 8008a00:	1ad3      	subs	r3, r2, r3
 8008a02:	011b      	lsls	r3, r3, #4
 8008a04:	3332      	adds	r3, #50	; 0x32
 8008a06:	4a2a      	ldr	r2, [pc, #168]	; (8008ab0 <UART_SetConfig+0x38c>)
 8008a08:	fba2 2303 	umull	r2, r3, r2, r3
 8008a0c:	095b      	lsrs	r3, r3, #5
 8008a0e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008a12:	441e      	add	r6, r3
 8008a14:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008a16:	4618      	mov	r0, r3
 8008a18:	f04f 0100 	mov.w	r1, #0
 8008a1c:	4602      	mov	r2, r0
 8008a1e:	460b      	mov	r3, r1
 8008a20:	1894      	adds	r4, r2, r2
 8008a22:	603c      	str	r4, [r7, #0]
 8008a24:	415b      	adcs	r3, r3
 8008a26:	607b      	str	r3, [r7, #4]
 8008a28:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a2c:	1812      	adds	r2, r2, r0
 8008a2e:	eb41 0303 	adc.w	r3, r1, r3
 8008a32:	f04f 0400 	mov.w	r4, #0
 8008a36:	f04f 0500 	mov.w	r5, #0
 8008a3a:	00dd      	lsls	r5, r3, #3
 8008a3c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008a40:	00d4      	lsls	r4, r2, #3
 8008a42:	4622      	mov	r2, r4
 8008a44:	462b      	mov	r3, r5
 8008a46:	eb12 0a00 	adds.w	sl, r2, r0
 8008a4a:	eb43 0b01 	adc.w	fp, r3, r1
 8008a4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a50:	685b      	ldr	r3, [r3, #4]
 8008a52:	4618      	mov	r0, r3
 8008a54:	f04f 0100 	mov.w	r1, #0
 8008a58:	f04f 0200 	mov.w	r2, #0
 8008a5c:	f04f 0300 	mov.w	r3, #0
 8008a60:	008b      	lsls	r3, r1, #2
 8008a62:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008a66:	0082      	lsls	r2, r0, #2
 8008a68:	4650      	mov	r0, sl
 8008a6a:	4659      	mov	r1, fp
 8008a6c:	f7f8 f88c 	bl	8000b88 <__aeabi_uldivmod>
 8008a70:	4602      	mov	r2, r0
 8008a72:	460b      	mov	r3, r1
 8008a74:	4b0e      	ldr	r3, [pc, #56]	; (8008ab0 <UART_SetConfig+0x38c>)
 8008a76:	fba3 1302 	umull	r1, r3, r3, r2
 8008a7a:	095b      	lsrs	r3, r3, #5
 8008a7c:	2164      	movs	r1, #100	; 0x64
 8008a7e:	fb01 f303 	mul.w	r3, r1, r3
 8008a82:	1ad3      	subs	r3, r2, r3
 8008a84:	011b      	lsls	r3, r3, #4
 8008a86:	3332      	adds	r3, #50	; 0x32
 8008a88:	4a09      	ldr	r2, [pc, #36]	; (8008ab0 <UART_SetConfig+0x38c>)
 8008a8a:	fba2 2303 	umull	r2, r3, r2, r3
 8008a8e:	095b      	lsrs	r3, r3, #5
 8008a90:	f003 020f 	and.w	r2, r3, #15
 8008a94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	4432      	add	r2, r6
 8008a9a:	609a      	str	r2, [r3, #8]
}
 8008a9c:	bf00      	nop
 8008a9e:	377c      	adds	r7, #124	; 0x7c
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008aa6:	bf00      	nop
 8008aa8:	40011000 	.word	0x40011000
 8008aac:	40011400 	.word	0x40011400
 8008ab0:	51eb851f 	.word	0x51eb851f

08008ab4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008ab4:	b084      	sub	sp, #16
 8008ab6:	b580      	push	{r7, lr}
 8008ab8:	b084      	sub	sp, #16
 8008aba:	af00      	add	r7, sp, #0
 8008abc:	6078      	str	r0, [r7, #4]
 8008abe:	f107 001c 	add.w	r0, r7, #28
 8008ac2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ac8:	2b01      	cmp	r3, #1
 8008aca:	d122      	bne.n	8008b12 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ad0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	68db      	ldr	r3, [r3, #12]
 8008adc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8008ae0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008ae4:	687a      	ldr	r2, [r7, #4]
 8008ae6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	68db      	ldr	r3, [r3, #12]
 8008aec:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008af4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008af6:	2b01      	cmp	r3, #1
 8008af8:	d105      	bne.n	8008b06 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	68db      	ldr	r3, [r3, #12]
 8008afe:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008b06:	6878      	ldr	r0, [r7, #4]
 8008b08:	f000 f9a0 	bl	8008e4c <USB_CoreReset>
 8008b0c:	4603      	mov	r3, r0
 8008b0e:	73fb      	strb	r3, [r7, #15]
 8008b10:	e01a      	b.n	8008b48 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	68db      	ldr	r3, [r3, #12]
 8008b16:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008b1e:	6878      	ldr	r0, [r7, #4]
 8008b20:	f000 f994 	bl	8008e4c <USB_CoreReset>
 8008b24:	4603      	mov	r3, r0
 8008b26:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008b28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d106      	bne.n	8008b3c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b32:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	639a      	str	r2, [r3, #56]	; 0x38
 8008b3a:	e005      	b.n	8008b48 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b40:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008b48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b4a:	2b01      	cmp	r3, #1
 8008b4c:	d10b      	bne.n	8008b66 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	689b      	ldr	r3, [r3, #8]
 8008b52:	f043 0206 	orr.w	r2, r3, #6
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	689b      	ldr	r3, [r3, #8]
 8008b5e:	f043 0220 	orr.w	r2, r3, #32
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008b66:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b68:	4618      	mov	r0, r3
 8008b6a:	3710      	adds	r7, #16
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008b72:	b004      	add	sp, #16
 8008b74:	4770      	bx	lr

08008b76 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008b76:	b480      	push	{r7}
 8008b78:	b083      	sub	sp, #12
 8008b7a:	af00      	add	r7, sp, #0
 8008b7c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	689b      	ldr	r3, [r3, #8]
 8008b82:	f043 0201 	orr.w	r2, r3, #1
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008b8a:	2300      	movs	r3, #0
}
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	370c      	adds	r7, #12
 8008b90:	46bd      	mov	sp, r7
 8008b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b96:	4770      	bx	lr

08008b98 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008b98:	b480      	push	{r7}
 8008b9a:	b083      	sub	sp, #12
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	689b      	ldr	r3, [r3, #8]
 8008ba4:	f023 0201 	bic.w	r2, r3, #1
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008bac:	2300      	movs	r3, #0
}
 8008bae:	4618      	mov	r0, r3
 8008bb0:	370c      	adds	r7, #12
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb8:	4770      	bx	lr

08008bba <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008bba:	b580      	push	{r7, lr}
 8008bbc:	b084      	sub	sp, #16
 8008bbe:	af00      	add	r7, sp, #0
 8008bc0:	6078      	str	r0, [r7, #4]
 8008bc2:	460b      	mov	r3, r1
 8008bc4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	68db      	ldr	r3, [r3, #12]
 8008bce:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008bd6:	78fb      	ldrb	r3, [r7, #3]
 8008bd8:	2b01      	cmp	r3, #1
 8008bda:	d115      	bne.n	8008c08 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	68db      	ldr	r3, [r3, #12]
 8008be0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008be8:	2001      	movs	r0, #1
 8008bea:	f7f9 fe7f 	bl	80028ec <HAL_Delay>
      ms++;
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	3301      	adds	r3, #1
 8008bf2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008bf4:	6878      	ldr	r0, [r7, #4]
 8008bf6:	f000 f91a 	bl	8008e2e <USB_GetMode>
 8008bfa:	4603      	mov	r3, r0
 8008bfc:	2b01      	cmp	r3, #1
 8008bfe:	d01e      	beq.n	8008c3e <USB_SetCurrentMode+0x84>
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	2b31      	cmp	r3, #49	; 0x31
 8008c04:	d9f0      	bls.n	8008be8 <USB_SetCurrentMode+0x2e>
 8008c06:	e01a      	b.n	8008c3e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008c08:	78fb      	ldrb	r3, [r7, #3]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d115      	bne.n	8008c3a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	68db      	ldr	r3, [r3, #12]
 8008c12:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008c1a:	2001      	movs	r0, #1
 8008c1c:	f7f9 fe66 	bl	80028ec <HAL_Delay>
      ms++;
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	3301      	adds	r3, #1
 8008c24:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008c26:	6878      	ldr	r0, [r7, #4]
 8008c28:	f000 f901 	bl	8008e2e <USB_GetMode>
 8008c2c:	4603      	mov	r3, r0
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d005      	beq.n	8008c3e <USB_SetCurrentMode+0x84>
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	2b31      	cmp	r3, #49	; 0x31
 8008c36:	d9f0      	bls.n	8008c1a <USB_SetCurrentMode+0x60>
 8008c38:	e001      	b.n	8008c3e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008c3a:	2301      	movs	r3, #1
 8008c3c:	e005      	b.n	8008c4a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	2b32      	cmp	r3, #50	; 0x32
 8008c42:	d101      	bne.n	8008c48 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008c44:	2301      	movs	r3, #1
 8008c46:	e000      	b.n	8008c4a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008c48:	2300      	movs	r3, #0
}
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	3710      	adds	r7, #16
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	bd80      	pop	{r7, pc}
	...

08008c54 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008c54:	b480      	push	{r7}
 8008c56:	b085      	sub	sp, #20
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]
 8008c5c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008c5e:	2300      	movs	r3, #0
 8008c60:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008c62:	683b      	ldr	r3, [r7, #0]
 8008c64:	019b      	lsls	r3, r3, #6
 8008c66:	f043 0220 	orr.w	r2, r3, #32
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	3301      	adds	r3, #1
 8008c72:	60fb      	str	r3, [r7, #12]
 8008c74:	4a08      	ldr	r2, [pc, #32]	; (8008c98 <USB_FlushTxFifo+0x44>)
 8008c76:	4293      	cmp	r3, r2
 8008c78:	d901      	bls.n	8008c7e <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8008c7a:	2303      	movs	r3, #3
 8008c7c:	e006      	b.n	8008c8c <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	691b      	ldr	r3, [r3, #16]
 8008c82:	f003 0320 	and.w	r3, r3, #32
 8008c86:	2b20      	cmp	r3, #32
 8008c88:	d0f1      	beq.n	8008c6e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8008c8a:	2300      	movs	r3, #0
}
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	3714      	adds	r7, #20
 8008c90:	46bd      	mov	sp, r7
 8008c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c96:	4770      	bx	lr
 8008c98:	00030d40 	.word	0x00030d40

08008c9c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008c9c:	b480      	push	{r7}
 8008c9e:	b085      	sub	sp, #20
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008ca4:	2300      	movs	r3, #0
 8008ca6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	2210      	movs	r2, #16
 8008cac:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	3301      	adds	r3, #1
 8008cb2:	60fb      	str	r3, [r7, #12]
 8008cb4:	4a08      	ldr	r2, [pc, #32]	; (8008cd8 <USB_FlushRxFifo+0x3c>)
 8008cb6:	4293      	cmp	r3, r2
 8008cb8:	d901      	bls.n	8008cbe <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8008cba:	2303      	movs	r3, #3
 8008cbc:	e006      	b.n	8008ccc <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	691b      	ldr	r3, [r3, #16]
 8008cc2:	f003 0310 	and.w	r3, r3, #16
 8008cc6:	2b10      	cmp	r3, #16
 8008cc8:	d0f1      	beq.n	8008cae <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8008cca:	2300      	movs	r3, #0
}
 8008ccc:	4618      	mov	r0, r3
 8008cce:	3714      	adds	r7, #20
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd6:	4770      	bx	lr
 8008cd8:	00030d40 	.word	0x00030d40

08008cdc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008cdc:	b480      	push	{r7}
 8008cde:	b089      	sub	sp, #36	; 0x24
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	60f8      	str	r0, [r7, #12]
 8008ce4:	60b9      	str	r1, [r7, #8]
 8008ce6:	4611      	mov	r1, r2
 8008ce8:	461a      	mov	r2, r3
 8008cea:	460b      	mov	r3, r1
 8008cec:	71fb      	strb	r3, [r7, #7]
 8008cee:	4613      	mov	r3, r2
 8008cf0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008cf6:	68bb      	ldr	r3, [r7, #8]
 8008cf8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008cfa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d123      	bne.n	8008d4a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008d02:	88bb      	ldrh	r3, [r7, #4]
 8008d04:	3303      	adds	r3, #3
 8008d06:	089b      	lsrs	r3, r3, #2
 8008d08:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	61bb      	str	r3, [r7, #24]
 8008d0e:	e018      	b.n	8008d42 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008d10:	79fb      	ldrb	r3, [r7, #7]
 8008d12:	031a      	lsls	r2, r3, #12
 8008d14:	697b      	ldr	r3, [r7, #20]
 8008d16:	4413      	add	r3, r2
 8008d18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d1c:	461a      	mov	r2, r3
 8008d1e:	69fb      	ldr	r3, [r7, #28]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008d24:	69fb      	ldr	r3, [r7, #28]
 8008d26:	3301      	adds	r3, #1
 8008d28:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008d2a:	69fb      	ldr	r3, [r7, #28]
 8008d2c:	3301      	adds	r3, #1
 8008d2e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008d30:	69fb      	ldr	r3, [r7, #28]
 8008d32:	3301      	adds	r3, #1
 8008d34:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008d36:	69fb      	ldr	r3, [r7, #28]
 8008d38:	3301      	adds	r3, #1
 8008d3a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008d3c:	69bb      	ldr	r3, [r7, #24]
 8008d3e:	3301      	adds	r3, #1
 8008d40:	61bb      	str	r3, [r7, #24]
 8008d42:	69ba      	ldr	r2, [r7, #24]
 8008d44:	693b      	ldr	r3, [r7, #16]
 8008d46:	429a      	cmp	r2, r3
 8008d48:	d3e2      	bcc.n	8008d10 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008d4a:	2300      	movs	r3, #0
}
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	3724      	adds	r7, #36	; 0x24
 8008d50:	46bd      	mov	sp, r7
 8008d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d56:	4770      	bx	lr

08008d58 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008d58:	b480      	push	{r7}
 8008d5a:	b08b      	sub	sp, #44	; 0x2c
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	60f8      	str	r0, [r7, #12]
 8008d60:	60b9      	str	r1, [r7, #8]
 8008d62:	4613      	mov	r3, r2
 8008d64:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008d6a:	68bb      	ldr	r3, [r7, #8]
 8008d6c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008d6e:	88fb      	ldrh	r3, [r7, #6]
 8008d70:	089b      	lsrs	r3, r3, #2
 8008d72:	b29b      	uxth	r3, r3
 8008d74:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008d76:	88fb      	ldrh	r3, [r7, #6]
 8008d78:	f003 0303 	and.w	r3, r3, #3
 8008d7c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008d7e:	2300      	movs	r3, #0
 8008d80:	623b      	str	r3, [r7, #32]
 8008d82:	e014      	b.n	8008dae <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008d84:	69bb      	ldr	r3, [r7, #24]
 8008d86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d8a:	681a      	ldr	r2, [r3, #0]
 8008d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d8e:	601a      	str	r2, [r3, #0]
    pDest++;
 8008d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d92:	3301      	adds	r3, #1
 8008d94:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d98:	3301      	adds	r3, #1
 8008d9a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d9e:	3301      	adds	r3, #1
 8008da0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008da4:	3301      	adds	r3, #1
 8008da6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8008da8:	6a3b      	ldr	r3, [r7, #32]
 8008daa:	3301      	adds	r3, #1
 8008dac:	623b      	str	r3, [r7, #32]
 8008dae:	6a3a      	ldr	r2, [r7, #32]
 8008db0:	697b      	ldr	r3, [r7, #20]
 8008db2:	429a      	cmp	r2, r3
 8008db4:	d3e6      	bcc.n	8008d84 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008db6:	8bfb      	ldrh	r3, [r7, #30]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d01e      	beq.n	8008dfa <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008dc0:	69bb      	ldr	r3, [r7, #24]
 8008dc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008dc6:	461a      	mov	r2, r3
 8008dc8:	f107 0310 	add.w	r3, r7, #16
 8008dcc:	6812      	ldr	r2, [r2, #0]
 8008dce:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008dd0:	693a      	ldr	r2, [r7, #16]
 8008dd2:	6a3b      	ldr	r3, [r7, #32]
 8008dd4:	b2db      	uxtb	r3, r3
 8008dd6:	00db      	lsls	r3, r3, #3
 8008dd8:	fa22 f303 	lsr.w	r3, r2, r3
 8008ddc:	b2da      	uxtb	r2, r3
 8008dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008de0:	701a      	strb	r2, [r3, #0]
      i++;
 8008de2:	6a3b      	ldr	r3, [r7, #32]
 8008de4:	3301      	adds	r3, #1
 8008de6:	623b      	str	r3, [r7, #32]
      pDest++;
 8008de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dea:	3301      	adds	r3, #1
 8008dec:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8008dee:	8bfb      	ldrh	r3, [r7, #30]
 8008df0:	3b01      	subs	r3, #1
 8008df2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008df4:	8bfb      	ldrh	r3, [r7, #30]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d1ea      	bne.n	8008dd0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	372c      	adds	r7, #44	; 0x2c
 8008e00:	46bd      	mov	sp, r7
 8008e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e06:	4770      	bx	lr

08008e08 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008e08:	b480      	push	{r7}
 8008e0a:	b085      	sub	sp, #20
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	695b      	ldr	r3, [r3, #20]
 8008e14:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	699b      	ldr	r3, [r3, #24]
 8008e1a:	68fa      	ldr	r2, [r7, #12]
 8008e1c:	4013      	ands	r3, r2
 8008e1e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008e20:	68fb      	ldr	r3, [r7, #12]
}
 8008e22:	4618      	mov	r0, r3
 8008e24:	3714      	adds	r7, #20
 8008e26:	46bd      	mov	sp, r7
 8008e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2c:	4770      	bx	lr

08008e2e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008e2e:	b480      	push	{r7}
 8008e30:	b083      	sub	sp, #12
 8008e32:	af00      	add	r7, sp, #0
 8008e34:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	695b      	ldr	r3, [r3, #20]
 8008e3a:	f003 0301 	and.w	r3, r3, #1
}
 8008e3e:	4618      	mov	r0, r3
 8008e40:	370c      	adds	r7, #12
 8008e42:	46bd      	mov	sp, r7
 8008e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e48:	4770      	bx	lr
	...

08008e4c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008e4c:	b480      	push	{r7}
 8008e4e:	b085      	sub	sp, #20
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008e54:	2300      	movs	r3, #0
 8008e56:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	3301      	adds	r3, #1
 8008e5c:	60fb      	str	r3, [r7, #12]
 8008e5e:	4a13      	ldr	r2, [pc, #76]	; (8008eac <USB_CoreReset+0x60>)
 8008e60:	4293      	cmp	r3, r2
 8008e62:	d901      	bls.n	8008e68 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8008e64:	2303      	movs	r3, #3
 8008e66:	e01a      	b.n	8008e9e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	691b      	ldr	r3, [r3, #16]
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	daf3      	bge.n	8008e58 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008e70:	2300      	movs	r3, #0
 8008e72:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	691b      	ldr	r3, [r3, #16]
 8008e78:	f043 0201 	orr.w	r2, r3, #1
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	3301      	adds	r3, #1
 8008e84:	60fb      	str	r3, [r7, #12]
 8008e86:	4a09      	ldr	r2, [pc, #36]	; (8008eac <USB_CoreReset+0x60>)
 8008e88:	4293      	cmp	r3, r2
 8008e8a:	d901      	bls.n	8008e90 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8008e8c:	2303      	movs	r3, #3
 8008e8e:	e006      	b.n	8008e9e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	691b      	ldr	r3, [r3, #16]
 8008e94:	f003 0301 	and.w	r3, r3, #1
 8008e98:	2b01      	cmp	r3, #1
 8008e9a:	d0f1      	beq.n	8008e80 <USB_CoreReset+0x34>

  return HAL_OK;
 8008e9c:	2300      	movs	r3, #0
}
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	3714      	adds	r7, #20
 8008ea2:	46bd      	mov	sp, r7
 8008ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea8:	4770      	bx	lr
 8008eaa:	bf00      	nop
 8008eac:	00030d40 	.word	0x00030d40

08008eb0 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008eb0:	b084      	sub	sp, #16
 8008eb2:	b580      	push	{r7, lr}
 8008eb4:	b084      	sub	sp, #16
 8008eb6:	af00      	add	r7, sp, #0
 8008eb8:	6078      	str	r0, [r7, #4]
 8008eba:	f107 001c 	add.w	r0, r7, #28
 8008ebe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008ec6:	68bb      	ldr	r3, [r7, #8]
 8008ec8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008ecc:	461a      	mov	r2, r3
 8008ece:	2300      	movs	r3, #0
 8008ed0:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ed6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ee2:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008eee:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008efa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d018      	beq.n	8008f34 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8008f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f04:	2b01      	cmp	r3, #1
 8008f06:	d10a      	bne.n	8008f1e <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8008f08:	68bb      	ldr	r3, [r7, #8]
 8008f0a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	68ba      	ldr	r2, [r7, #8]
 8008f12:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008f16:	f043 0304 	orr.w	r3, r3, #4
 8008f1a:	6013      	str	r3, [r2, #0]
 8008f1c:	e014      	b.n	8008f48 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008f1e:	68bb      	ldr	r3, [r7, #8]
 8008f20:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	68ba      	ldr	r2, [r7, #8]
 8008f28:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008f2c:	f023 0304 	bic.w	r3, r3, #4
 8008f30:	6013      	str	r3, [r2, #0]
 8008f32:	e009      	b.n	8008f48 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008f34:	68bb      	ldr	r3, [r7, #8]
 8008f36:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	68ba      	ldr	r2, [r7, #8]
 8008f3e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008f42:	f023 0304 	bic.w	r3, r3, #4
 8008f46:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8008f48:	2110      	movs	r1, #16
 8008f4a:	6878      	ldr	r0, [r7, #4]
 8008f4c:	f7ff fe82 	bl	8008c54 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8008f50:	6878      	ldr	r0, [r7, #4]
 8008f52:	f7ff fea3 	bl	8008c9c <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8008f56:	2300      	movs	r3, #0
 8008f58:	60fb      	str	r3, [r7, #12]
 8008f5a:	e015      	b.n	8008f88 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	015a      	lsls	r2, r3, #5
 8008f60:	68bb      	ldr	r3, [r7, #8]
 8008f62:	4413      	add	r3, r2
 8008f64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f68:	461a      	mov	r2, r3
 8008f6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008f6e:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	015a      	lsls	r2, r3, #5
 8008f74:	68bb      	ldr	r3, [r7, #8]
 8008f76:	4413      	add	r3, r2
 8008f78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f7c:	461a      	mov	r2, r3
 8008f7e:	2300      	movs	r3, #0
 8008f80:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	3301      	adds	r3, #1
 8008f86:	60fb      	str	r3, [r7, #12]
 8008f88:	6a3b      	ldr	r3, [r7, #32]
 8008f8a:	68fa      	ldr	r2, [r7, #12]
 8008f8c:	429a      	cmp	r2, r3
 8008f8e:	d3e5      	bcc.n	8008f5c <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	2200      	movs	r2, #0
 8008f94:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008f9c:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d00b      	beq.n	8008fc2 <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008fb0:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	4a13      	ldr	r2, [pc, #76]	; (8009004 <USB_HostInit+0x154>)
 8008fb6:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	4a13      	ldr	r2, [pc, #76]	; (8009008 <USB_HostInit+0x158>)
 8008fbc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8008fc0:	e009      	b.n	8008fd6 <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	2280      	movs	r2, #128	; 0x80
 8008fc6:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	4a10      	ldr	r2, [pc, #64]	; (800900c <USB_HostInit+0x15c>)
 8008fcc:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	4a0f      	ldr	r2, [pc, #60]	; (8009010 <USB_HostInit+0x160>)
 8008fd2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008fd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d105      	bne.n	8008fe8 <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	699b      	ldr	r3, [r3, #24]
 8008fe0:	f043 0210 	orr.w	r2, r3, #16
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	699a      	ldr	r2, [r3, #24]
 8008fec:	4b09      	ldr	r3, [pc, #36]	; (8009014 <USB_HostInit+0x164>)
 8008fee:	4313      	orrs	r3, r2
 8008ff0:	687a      	ldr	r2, [r7, #4]
 8008ff2:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8008ff4:	2300      	movs	r3, #0
}
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	3710      	adds	r7, #16
 8008ffa:	46bd      	mov	sp, r7
 8008ffc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009000:	b004      	add	sp, #16
 8009002:	4770      	bx	lr
 8009004:	01000200 	.word	0x01000200
 8009008:	00e00300 	.word	0x00e00300
 800900c:	00600080 	.word	0x00600080
 8009010:	004000e0 	.word	0x004000e0
 8009014:	a3200008 	.word	0xa3200008

08009018 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8009018:	b480      	push	{r7}
 800901a:	b085      	sub	sp, #20
 800901c:	af00      	add	r7, sp, #0
 800901e:	6078      	str	r0, [r7, #4]
 8009020:	460b      	mov	r3, r1
 8009022:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	68fa      	ldr	r2, [r7, #12]
 8009032:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009036:	f023 0303 	bic.w	r3, r3, #3
 800903a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009042:	681a      	ldr	r2, [r3, #0]
 8009044:	78fb      	ldrb	r3, [r7, #3]
 8009046:	f003 0303 	and.w	r3, r3, #3
 800904a:	68f9      	ldr	r1, [r7, #12]
 800904c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8009050:	4313      	orrs	r3, r2
 8009052:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8009054:	78fb      	ldrb	r3, [r7, #3]
 8009056:	2b01      	cmp	r3, #1
 8009058:	d107      	bne.n	800906a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009060:	461a      	mov	r2, r3
 8009062:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8009066:	6053      	str	r3, [r2, #4]
 8009068:	e009      	b.n	800907e <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800906a:	78fb      	ldrb	r3, [r7, #3]
 800906c:	2b02      	cmp	r3, #2
 800906e:	d106      	bne.n	800907e <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009076:	461a      	mov	r2, r3
 8009078:	f241 7370 	movw	r3, #6000	; 0x1770
 800907c:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800907e:	2300      	movs	r3, #0
}
 8009080:	4618      	mov	r0, r3
 8009082:	3714      	adds	r7, #20
 8009084:	46bd      	mov	sp, r7
 8009086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800908a:	4770      	bx	lr

0800908c <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800908c:	b580      	push	{r7, lr}
 800908e:	b084      	sub	sp, #16
 8009090:	af00      	add	r7, sp, #0
 8009092:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8009098:	2300      	movs	r3, #0
 800909a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80090a6:	68bb      	ldr	r3, [r7, #8]
 80090a8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80090ac:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80090ae:	68bb      	ldr	r3, [r7, #8]
 80090b0:	68fa      	ldr	r2, [r7, #12]
 80090b2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80090b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80090ba:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80090bc:	2064      	movs	r0, #100	; 0x64
 80090be:	f7f9 fc15 	bl	80028ec <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80090c2:	68bb      	ldr	r3, [r7, #8]
 80090c4:	68fa      	ldr	r2, [r7, #12]
 80090c6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80090ca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80090ce:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80090d0:	200a      	movs	r0, #10
 80090d2:	f7f9 fc0b 	bl	80028ec <HAL_Delay>

  return HAL_OK;
 80090d6:	2300      	movs	r3, #0
}
 80090d8:	4618      	mov	r0, r3
 80090da:	3710      	adds	r7, #16
 80090dc:	46bd      	mov	sp, r7
 80090de:	bd80      	pop	{r7, pc}

080090e0 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80090e0:	b480      	push	{r7}
 80090e2:	b085      	sub	sp, #20
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	6078      	str	r0, [r7, #4]
 80090e8:	460b      	mov	r3, r1
 80090ea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80090f0:	2300      	movs	r3, #0
 80090f2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80090fe:	68bb      	ldr	r3, [r7, #8]
 8009100:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8009104:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8009106:	68bb      	ldr	r3, [r7, #8]
 8009108:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800910c:	2b00      	cmp	r3, #0
 800910e:	d109      	bne.n	8009124 <USB_DriveVbus+0x44>
 8009110:	78fb      	ldrb	r3, [r7, #3]
 8009112:	2b01      	cmp	r3, #1
 8009114:	d106      	bne.n	8009124 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8009116:	68bb      	ldr	r3, [r7, #8]
 8009118:	68fa      	ldr	r2, [r7, #12]
 800911a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800911e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009122:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8009124:	68bb      	ldr	r3, [r7, #8]
 8009126:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800912a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800912e:	d109      	bne.n	8009144 <USB_DriveVbus+0x64>
 8009130:	78fb      	ldrb	r3, [r7, #3]
 8009132:	2b00      	cmp	r3, #0
 8009134:	d106      	bne.n	8009144 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8009136:	68bb      	ldr	r3, [r7, #8]
 8009138:	68fa      	ldr	r2, [r7, #12]
 800913a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800913e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009142:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8009144:	2300      	movs	r3, #0
}
 8009146:	4618      	mov	r0, r3
 8009148:	3714      	adds	r7, #20
 800914a:	46bd      	mov	sp, r7
 800914c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009150:	4770      	bx	lr

08009152 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8009152:	b480      	push	{r7}
 8009154:	b085      	sub	sp, #20
 8009156:	af00      	add	r7, sp, #0
 8009158:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800915e:	2300      	movs	r3, #0
 8009160:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800916c:	68bb      	ldr	r3, [r7, #8]
 800916e:	0c5b      	lsrs	r3, r3, #17
 8009170:	f003 0303 	and.w	r3, r3, #3
}
 8009174:	4618      	mov	r0, r3
 8009176:	3714      	adds	r7, #20
 8009178:	46bd      	mov	sp, r7
 800917a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917e:	4770      	bx	lr

08009180 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8009180:	b480      	push	{r7}
 8009182:	b085      	sub	sp, #20
 8009184:	af00      	add	r7, sp, #0
 8009186:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009192:	689b      	ldr	r3, [r3, #8]
 8009194:	b29b      	uxth	r3, r3
}
 8009196:	4618      	mov	r0, r3
 8009198:	3714      	adds	r7, #20
 800919a:	46bd      	mov	sp, r7
 800919c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a0:	4770      	bx	lr
	...

080091a4 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80091a4:	b580      	push	{r7, lr}
 80091a6:	b088      	sub	sp, #32
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	6078      	str	r0, [r7, #4]
 80091ac:	4608      	mov	r0, r1
 80091ae:	4611      	mov	r1, r2
 80091b0:	461a      	mov	r2, r3
 80091b2:	4603      	mov	r3, r0
 80091b4:	70fb      	strb	r3, [r7, #3]
 80091b6:	460b      	mov	r3, r1
 80091b8:	70bb      	strb	r3, [r7, #2]
 80091ba:	4613      	mov	r3, r2
 80091bc:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80091be:	2300      	movs	r3, #0
 80091c0:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80091c6:	78fb      	ldrb	r3, [r7, #3]
 80091c8:	015a      	lsls	r2, r3, #5
 80091ca:	693b      	ldr	r3, [r7, #16]
 80091cc:	4413      	add	r3, r2
 80091ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80091d2:	461a      	mov	r2, r3
 80091d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80091d8:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80091da:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80091de:	2b03      	cmp	r3, #3
 80091e0:	d87e      	bhi.n	80092e0 <USB_HC_Init+0x13c>
 80091e2:	a201      	add	r2, pc, #4	; (adr r2, 80091e8 <USB_HC_Init+0x44>)
 80091e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091e8:	080091f9 	.word	0x080091f9
 80091ec:	080092a3 	.word	0x080092a3
 80091f0:	080091f9 	.word	0x080091f9
 80091f4:	08009265 	.word	0x08009265
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80091f8:	78fb      	ldrb	r3, [r7, #3]
 80091fa:	015a      	lsls	r2, r3, #5
 80091fc:	693b      	ldr	r3, [r7, #16]
 80091fe:	4413      	add	r3, r2
 8009200:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009204:	461a      	mov	r2, r3
 8009206:	f240 439d 	movw	r3, #1181	; 0x49d
 800920a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800920c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009210:	2b00      	cmp	r3, #0
 8009212:	da10      	bge.n	8009236 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8009214:	78fb      	ldrb	r3, [r7, #3]
 8009216:	015a      	lsls	r2, r3, #5
 8009218:	693b      	ldr	r3, [r7, #16]
 800921a:	4413      	add	r3, r2
 800921c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009220:	68db      	ldr	r3, [r3, #12]
 8009222:	78fa      	ldrb	r2, [r7, #3]
 8009224:	0151      	lsls	r1, r2, #5
 8009226:	693a      	ldr	r2, [r7, #16]
 8009228:	440a      	add	r2, r1
 800922a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800922e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009232:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8009234:	e057      	b.n	80092e6 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800923a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800923e:	2b00      	cmp	r3, #0
 8009240:	d051      	beq.n	80092e6 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8009242:	78fb      	ldrb	r3, [r7, #3]
 8009244:	015a      	lsls	r2, r3, #5
 8009246:	693b      	ldr	r3, [r7, #16]
 8009248:	4413      	add	r3, r2
 800924a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800924e:	68db      	ldr	r3, [r3, #12]
 8009250:	78fa      	ldrb	r2, [r7, #3]
 8009252:	0151      	lsls	r1, r2, #5
 8009254:	693a      	ldr	r2, [r7, #16]
 8009256:	440a      	add	r2, r1
 8009258:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800925c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8009260:	60d3      	str	r3, [r2, #12]
      break;
 8009262:	e040      	b.n	80092e6 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009264:	78fb      	ldrb	r3, [r7, #3]
 8009266:	015a      	lsls	r2, r3, #5
 8009268:	693b      	ldr	r3, [r7, #16]
 800926a:	4413      	add	r3, r2
 800926c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009270:	461a      	mov	r2, r3
 8009272:	f240 639d 	movw	r3, #1693	; 0x69d
 8009276:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8009278:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800927c:	2b00      	cmp	r3, #0
 800927e:	da34      	bge.n	80092ea <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8009280:	78fb      	ldrb	r3, [r7, #3]
 8009282:	015a      	lsls	r2, r3, #5
 8009284:	693b      	ldr	r3, [r7, #16]
 8009286:	4413      	add	r3, r2
 8009288:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800928c:	68db      	ldr	r3, [r3, #12]
 800928e:	78fa      	ldrb	r2, [r7, #3]
 8009290:	0151      	lsls	r1, r2, #5
 8009292:	693a      	ldr	r2, [r7, #16]
 8009294:	440a      	add	r2, r1
 8009296:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800929a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800929e:	60d3      	str	r3, [r2, #12]
      }

      break;
 80092a0:	e023      	b.n	80092ea <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80092a2:	78fb      	ldrb	r3, [r7, #3]
 80092a4:	015a      	lsls	r2, r3, #5
 80092a6:	693b      	ldr	r3, [r7, #16]
 80092a8:	4413      	add	r3, r2
 80092aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80092ae:	461a      	mov	r2, r3
 80092b0:	f240 2325 	movw	r3, #549	; 0x225
 80092b4:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80092b6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	da17      	bge.n	80092ee <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80092be:	78fb      	ldrb	r3, [r7, #3]
 80092c0:	015a      	lsls	r2, r3, #5
 80092c2:	693b      	ldr	r3, [r7, #16]
 80092c4:	4413      	add	r3, r2
 80092c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80092ca:	68db      	ldr	r3, [r3, #12]
 80092cc:	78fa      	ldrb	r2, [r7, #3]
 80092ce:	0151      	lsls	r1, r2, #5
 80092d0:	693a      	ldr	r2, [r7, #16]
 80092d2:	440a      	add	r2, r1
 80092d4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80092d8:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80092dc:	60d3      	str	r3, [r2, #12]
      }
      break;
 80092de:	e006      	b.n	80092ee <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80092e0:	2301      	movs	r3, #1
 80092e2:	77fb      	strb	r3, [r7, #31]
      break;
 80092e4:	e004      	b.n	80092f0 <USB_HC_Init+0x14c>
      break;
 80092e6:	bf00      	nop
 80092e8:	e002      	b.n	80092f0 <USB_HC_Init+0x14c>
      break;
 80092ea:	bf00      	nop
 80092ec:	e000      	b.n	80092f0 <USB_HC_Init+0x14c>
      break;
 80092ee:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80092f0:	693b      	ldr	r3, [r7, #16]
 80092f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80092f6:	699a      	ldr	r2, [r3, #24]
 80092f8:	78fb      	ldrb	r3, [r7, #3]
 80092fa:	f003 030f 	and.w	r3, r3, #15
 80092fe:	2101      	movs	r1, #1
 8009300:	fa01 f303 	lsl.w	r3, r1, r3
 8009304:	6939      	ldr	r1, [r7, #16]
 8009306:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800930a:	4313      	orrs	r3, r2
 800930c:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	699b      	ldr	r3, [r3, #24]
 8009312:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800931a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800931e:	2b00      	cmp	r3, #0
 8009320:	da03      	bge.n	800932a <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8009322:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009326:	61bb      	str	r3, [r7, #24]
 8009328:	e001      	b.n	800932e <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800932a:	2300      	movs	r3, #0
 800932c:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800932e:	6878      	ldr	r0, [r7, #4]
 8009330:	f7ff ff0f 	bl	8009152 <USB_GetHostSpeed>
 8009334:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8009336:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800933a:	2b02      	cmp	r3, #2
 800933c:	d106      	bne.n	800934c <USB_HC_Init+0x1a8>
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	2b02      	cmp	r3, #2
 8009342:	d003      	beq.n	800934c <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8009344:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009348:	617b      	str	r3, [r7, #20]
 800934a:	e001      	b.n	8009350 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800934c:	2300      	movs	r3, #0
 800934e:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009350:	787b      	ldrb	r3, [r7, #1]
 8009352:	059b      	lsls	r3, r3, #22
 8009354:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8009358:	78bb      	ldrb	r3, [r7, #2]
 800935a:	02db      	lsls	r3, r3, #11
 800935c:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009360:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8009362:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009366:	049b      	lsls	r3, r3, #18
 8009368:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800936c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800936e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8009370:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8009374:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8009376:	69bb      	ldr	r3, [r7, #24]
 8009378:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800937a:	78fb      	ldrb	r3, [r7, #3]
 800937c:	0159      	lsls	r1, r3, #5
 800937e:	693b      	ldr	r3, [r7, #16]
 8009380:	440b      	add	r3, r1
 8009382:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009386:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8009388:	697b      	ldr	r3, [r7, #20]
 800938a:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800938c:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800938e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009392:	2b03      	cmp	r3, #3
 8009394:	d10f      	bne.n	80093b6 <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8009396:	78fb      	ldrb	r3, [r7, #3]
 8009398:	015a      	lsls	r2, r3, #5
 800939a:	693b      	ldr	r3, [r7, #16]
 800939c:	4413      	add	r3, r2
 800939e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	78fa      	ldrb	r2, [r7, #3]
 80093a6:	0151      	lsls	r1, r2, #5
 80093a8:	693a      	ldr	r2, [r7, #16]
 80093aa:	440a      	add	r2, r1
 80093ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80093b0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80093b4:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80093b6:	7ffb      	ldrb	r3, [r7, #31]
}
 80093b8:	4618      	mov	r0, r3
 80093ba:	3720      	adds	r7, #32
 80093bc:	46bd      	mov	sp, r7
 80093be:	bd80      	pop	{r7, pc}

080093c0 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80093c0:	b580      	push	{r7, lr}
 80093c2:	b08c      	sub	sp, #48	; 0x30
 80093c4:	af02      	add	r7, sp, #8
 80093c6:	60f8      	str	r0, [r7, #12]
 80093c8:	60b9      	str	r1, [r7, #8]
 80093ca:	4613      	mov	r3, r2
 80093cc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80093d2:	68bb      	ldr	r3, [r7, #8]
 80093d4:	785b      	ldrb	r3, [r3, #1]
 80093d6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80093d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80093dc:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d02d      	beq.n	8009446 <USB_HC_StartXfer+0x86>
 80093ea:	68bb      	ldr	r3, [r7, #8]
 80093ec:	791b      	ldrb	r3, [r3, #4]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d129      	bne.n	8009446 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 80093f2:	79fb      	ldrb	r3, [r7, #7]
 80093f4:	2b01      	cmp	r3, #1
 80093f6:	d117      	bne.n	8009428 <USB_HC_StartXfer+0x68>
 80093f8:	68bb      	ldr	r3, [r7, #8]
 80093fa:	79db      	ldrb	r3, [r3, #7]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d003      	beq.n	8009408 <USB_HC_StartXfer+0x48>
 8009400:	68bb      	ldr	r3, [r7, #8]
 8009402:	79db      	ldrb	r3, [r3, #7]
 8009404:	2b02      	cmp	r3, #2
 8009406:	d10f      	bne.n	8009428 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8009408:	69fb      	ldr	r3, [r7, #28]
 800940a:	015a      	lsls	r2, r3, #5
 800940c:	6a3b      	ldr	r3, [r7, #32]
 800940e:	4413      	add	r3, r2
 8009410:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009414:	68db      	ldr	r3, [r3, #12]
 8009416:	69fa      	ldr	r2, [r7, #28]
 8009418:	0151      	lsls	r1, r2, #5
 800941a:	6a3a      	ldr	r2, [r7, #32]
 800941c:	440a      	add	r2, r1
 800941e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009422:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009426:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8009428:	79fb      	ldrb	r3, [r7, #7]
 800942a:	2b00      	cmp	r3, #0
 800942c:	d10b      	bne.n	8009446 <USB_HC_StartXfer+0x86>
 800942e:	68bb      	ldr	r3, [r7, #8]
 8009430:	795b      	ldrb	r3, [r3, #5]
 8009432:	2b01      	cmp	r3, #1
 8009434:	d107      	bne.n	8009446 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8009436:	68bb      	ldr	r3, [r7, #8]
 8009438:	785b      	ldrb	r3, [r3, #1]
 800943a:	4619      	mov	r1, r3
 800943c:	68f8      	ldr	r0, [r7, #12]
 800943e:	f000 fa2f 	bl	80098a0 <USB_DoPing>
      return HAL_OK;
 8009442:	2300      	movs	r3, #0
 8009444:	e0f8      	b.n	8009638 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8009446:	68bb      	ldr	r3, [r7, #8]
 8009448:	695b      	ldr	r3, [r3, #20]
 800944a:	2b00      	cmp	r3, #0
 800944c:	d018      	beq.n	8009480 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800944e:	68bb      	ldr	r3, [r7, #8]
 8009450:	695b      	ldr	r3, [r3, #20]
 8009452:	68ba      	ldr	r2, [r7, #8]
 8009454:	8912      	ldrh	r2, [r2, #8]
 8009456:	4413      	add	r3, r2
 8009458:	3b01      	subs	r3, #1
 800945a:	68ba      	ldr	r2, [r7, #8]
 800945c:	8912      	ldrh	r2, [r2, #8]
 800945e:	fbb3 f3f2 	udiv	r3, r3, r2
 8009462:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8009464:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8009466:	8b7b      	ldrh	r3, [r7, #26]
 8009468:	429a      	cmp	r2, r3
 800946a:	d90b      	bls.n	8009484 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 800946c:	8b7b      	ldrh	r3, [r7, #26]
 800946e:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8009470:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009472:	68ba      	ldr	r2, [r7, #8]
 8009474:	8912      	ldrh	r2, [r2, #8]
 8009476:	fb02 f203 	mul.w	r2, r2, r3
 800947a:	68bb      	ldr	r3, [r7, #8]
 800947c:	611a      	str	r2, [r3, #16]
 800947e:	e001      	b.n	8009484 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8009480:	2301      	movs	r3, #1
 8009482:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8009484:	68bb      	ldr	r3, [r7, #8]
 8009486:	78db      	ldrb	r3, [r3, #3]
 8009488:	2b00      	cmp	r3, #0
 800948a:	d007      	beq.n	800949c <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800948c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800948e:	68ba      	ldr	r2, [r7, #8]
 8009490:	8912      	ldrh	r2, [r2, #8]
 8009492:	fb02 f203 	mul.w	r2, r2, r3
 8009496:	68bb      	ldr	r3, [r7, #8]
 8009498:	611a      	str	r2, [r3, #16]
 800949a:	e003      	b.n	80094a4 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 800949c:	68bb      	ldr	r3, [r7, #8]
 800949e:	695a      	ldr	r2, [r3, #20]
 80094a0:	68bb      	ldr	r3, [r7, #8]
 80094a2:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80094a4:	68bb      	ldr	r3, [r7, #8]
 80094a6:	691b      	ldr	r3, [r3, #16]
 80094a8:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80094ac:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80094ae:	04d9      	lsls	r1, r3, #19
 80094b0:	4b63      	ldr	r3, [pc, #396]	; (8009640 <USB_HC_StartXfer+0x280>)
 80094b2:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80094b4:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80094b6:	68bb      	ldr	r3, [r7, #8]
 80094b8:	7a9b      	ldrb	r3, [r3, #10]
 80094ba:	075b      	lsls	r3, r3, #29
 80094bc:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80094c0:	69f9      	ldr	r1, [r7, #28]
 80094c2:	0148      	lsls	r0, r1, #5
 80094c4:	6a39      	ldr	r1, [r7, #32]
 80094c6:	4401      	add	r1, r0
 80094c8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80094cc:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80094ce:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80094d0:	79fb      	ldrb	r3, [r7, #7]
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d009      	beq.n	80094ea <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80094d6:	68bb      	ldr	r3, [r7, #8]
 80094d8:	68d9      	ldr	r1, [r3, #12]
 80094da:	69fb      	ldr	r3, [r7, #28]
 80094dc:	015a      	lsls	r2, r3, #5
 80094de:	6a3b      	ldr	r3, [r7, #32]
 80094e0:	4413      	add	r3, r2
 80094e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80094e6:	460a      	mov	r2, r1
 80094e8:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80094ea:	6a3b      	ldr	r3, [r7, #32]
 80094ec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80094f0:	689b      	ldr	r3, [r3, #8]
 80094f2:	f003 0301 	and.w	r3, r3, #1
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	bf0c      	ite	eq
 80094fa:	2301      	moveq	r3, #1
 80094fc:	2300      	movne	r3, #0
 80094fe:	b2db      	uxtb	r3, r3
 8009500:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8009502:	69fb      	ldr	r3, [r7, #28]
 8009504:	015a      	lsls	r2, r3, #5
 8009506:	6a3b      	ldr	r3, [r7, #32]
 8009508:	4413      	add	r3, r2
 800950a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	69fa      	ldr	r2, [r7, #28]
 8009512:	0151      	lsls	r1, r2, #5
 8009514:	6a3a      	ldr	r2, [r7, #32]
 8009516:	440a      	add	r2, r1
 8009518:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800951c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009520:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8009522:	69fb      	ldr	r3, [r7, #28]
 8009524:	015a      	lsls	r2, r3, #5
 8009526:	6a3b      	ldr	r3, [r7, #32]
 8009528:	4413      	add	r3, r2
 800952a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800952e:	681a      	ldr	r2, [r3, #0]
 8009530:	7e7b      	ldrb	r3, [r7, #25]
 8009532:	075b      	lsls	r3, r3, #29
 8009534:	69f9      	ldr	r1, [r7, #28]
 8009536:	0148      	lsls	r0, r1, #5
 8009538:	6a39      	ldr	r1, [r7, #32]
 800953a:	4401      	add	r1, r0
 800953c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8009540:	4313      	orrs	r3, r2
 8009542:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8009544:	69fb      	ldr	r3, [r7, #28]
 8009546:	015a      	lsls	r2, r3, #5
 8009548:	6a3b      	ldr	r3, [r7, #32]
 800954a:	4413      	add	r3, r2
 800954c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009554:	693b      	ldr	r3, [r7, #16]
 8009556:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800955a:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800955c:	68bb      	ldr	r3, [r7, #8]
 800955e:	78db      	ldrb	r3, [r3, #3]
 8009560:	2b00      	cmp	r3, #0
 8009562:	d004      	beq.n	800956e <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8009564:	693b      	ldr	r3, [r7, #16]
 8009566:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800956a:	613b      	str	r3, [r7, #16]
 800956c:	e003      	b.n	8009576 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800956e:	693b      	ldr	r3, [r7, #16]
 8009570:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009574:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009576:	693b      	ldr	r3, [r7, #16]
 8009578:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800957c:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800957e:	69fb      	ldr	r3, [r7, #28]
 8009580:	015a      	lsls	r2, r3, #5
 8009582:	6a3b      	ldr	r3, [r7, #32]
 8009584:	4413      	add	r3, r2
 8009586:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800958a:	461a      	mov	r2, r3
 800958c:	693b      	ldr	r3, [r7, #16]
 800958e:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8009590:	79fb      	ldrb	r3, [r7, #7]
 8009592:	2b00      	cmp	r3, #0
 8009594:	d001      	beq.n	800959a <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8009596:	2300      	movs	r3, #0
 8009598:	e04e      	b.n	8009638 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800959a:	68bb      	ldr	r3, [r7, #8]
 800959c:	78db      	ldrb	r3, [r3, #3]
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d149      	bne.n	8009636 <USB_HC_StartXfer+0x276>
 80095a2:	68bb      	ldr	r3, [r7, #8]
 80095a4:	695b      	ldr	r3, [r3, #20]
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d045      	beq.n	8009636 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 80095aa:	68bb      	ldr	r3, [r7, #8]
 80095ac:	79db      	ldrb	r3, [r3, #7]
 80095ae:	2b03      	cmp	r3, #3
 80095b0:	d830      	bhi.n	8009614 <USB_HC_StartXfer+0x254>
 80095b2:	a201      	add	r2, pc, #4	; (adr r2, 80095b8 <USB_HC_StartXfer+0x1f8>)
 80095b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095b8:	080095c9 	.word	0x080095c9
 80095bc:	080095ed 	.word	0x080095ed
 80095c0:	080095c9 	.word	0x080095c9
 80095c4:	080095ed 	.word	0x080095ed
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80095c8:	68bb      	ldr	r3, [r7, #8]
 80095ca:	695b      	ldr	r3, [r3, #20]
 80095cc:	3303      	adds	r3, #3
 80095ce:	089b      	lsrs	r3, r3, #2
 80095d0:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80095d2:	8afa      	ldrh	r2, [r7, #22]
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095d8:	b29b      	uxth	r3, r3
 80095da:	429a      	cmp	r2, r3
 80095dc:	d91c      	bls.n	8009618 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	699b      	ldr	r3, [r3, #24]
 80095e2:	f043 0220 	orr.w	r2, r3, #32
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	619a      	str	r2, [r3, #24]
        }
        break;
 80095ea:	e015      	b.n	8009618 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80095ec:	68bb      	ldr	r3, [r7, #8]
 80095ee:	695b      	ldr	r3, [r3, #20]
 80095f0:	3303      	adds	r3, #3
 80095f2:	089b      	lsrs	r3, r3, #2
 80095f4:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80095f6:	8afa      	ldrh	r2, [r7, #22]
 80095f8:	6a3b      	ldr	r3, [r7, #32]
 80095fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80095fe:	691b      	ldr	r3, [r3, #16]
 8009600:	b29b      	uxth	r3, r3
 8009602:	429a      	cmp	r2, r3
 8009604:	d90a      	bls.n	800961c <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	699b      	ldr	r3, [r3, #24]
 800960a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	619a      	str	r2, [r3, #24]
        }
        break;
 8009612:	e003      	b.n	800961c <USB_HC_StartXfer+0x25c>

      default:
        break;
 8009614:	bf00      	nop
 8009616:	e002      	b.n	800961e <USB_HC_StartXfer+0x25e>
        break;
 8009618:	bf00      	nop
 800961a:	e000      	b.n	800961e <USB_HC_StartXfer+0x25e>
        break;
 800961c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800961e:	68bb      	ldr	r3, [r7, #8]
 8009620:	68d9      	ldr	r1, [r3, #12]
 8009622:	68bb      	ldr	r3, [r7, #8]
 8009624:	785a      	ldrb	r2, [r3, #1]
 8009626:	68bb      	ldr	r3, [r7, #8]
 8009628:	695b      	ldr	r3, [r3, #20]
 800962a:	b29b      	uxth	r3, r3
 800962c:	2000      	movs	r0, #0
 800962e:	9000      	str	r0, [sp, #0]
 8009630:	68f8      	ldr	r0, [r7, #12]
 8009632:	f7ff fb53 	bl	8008cdc <USB_WritePacket>
  }

  return HAL_OK;
 8009636:	2300      	movs	r3, #0
}
 8009638:	4618      	mov	r0, r3
 800963a:	3728      	adds	r7, #40	; 0x28
 800963c:	46bd      	mov	sp, r7
 800963e:	bd80      	pop	{r7, pc}
 8009640:	1ff80000 	.word	0x1ff80000

08009644 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009644:	b480      	push	{r7}
 8009646:	b085      	sub	sp, #20
 8009648:	af00      	add	r7, sp, #0
 800964a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009656:	695b      	ldr	r3, [r3, #20]
 8009658:	b29b      	uxth	r3, r3
}
 800965a:	4618      	mov	r0, r3
 800965c:	3714      	adds	r7, #20
 800965e:	46bd      	mov	sp, r7
 8009660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009664:	4770      	bx	lr

08009666 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8009666:	b480      	push	{r7}
 8009668:	b089      	sub	sp, #36	; 0x24
 800966a:	af00      	add	r7, sp, #0
 800966c:	6078      	str	r0, [r7, #4]
 800966e:	460b      	mov	r3, r1
 8009670:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 8009676:	78fb      	ldrb	r3, [r7, #3]
 8009678:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 800967a:	2300      	movs	r3, #0
 800967c:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800967e:	697b      	ldr	r3, [r7, #20]
 8009680:	015a      	lsls	r2, r3, #5
 8009682:	69bb      	ldr	r3, [r7, #24]
 8009684:	4413      	add	r3, r2
 8009686:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	0c9b      	lsrs	r3, r3, #18
 800968e:	f003 0303 	and.w	r3, r3, #3
 8009692:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8009694:	697b      	ldr	r3, [r7, #20]
 8009696:	015a      	lsls	r2, r3, #5
 8009698:	69bb      	ldr	r3, [r7, #24]
 800969a:	4413      	add	r3, r2
 800969c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	0fdb      	lsrs	r3, r3, #31
 80096a4:	f003 0301 	and.w	r3, r3, #1
 80096a8:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	689b      	ldr	r3, [r3, #8]
 80096ae:	f003 0320 	and.w	r3, r3, #32
 80096b2:	2b20      	cmp	r3, #32
 80096b4:	d104      	bne.n	80096c0 <USB_HC_Halt+0x5a>
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d101      	bne.n	80096c0 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 80096bc:	2300      	movs	r3, #0
 80096be:	e0e8      	b.n	8009892 <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80096c0:	693b      	ldr	r3, [r7, #16]
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d002      	beq.n	80096cc <USB_HC_Halt+0x66>
 80096c6:	693b      	ldr	r3, [r7, #16]
 80096c8:	2b02      	cmp	r3, #2
 80096ca:	d173      	bne.n	80097b4 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80096cc:	697b      	ldr	r3, [r7, #20]
 80096ce:	015a      	lsls	r2, r3, #5
 80096d0:	69bb      	ldr	r3, [r7, #24]
 80096d2:	4413      	add	r3, r2
 80096d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	697a      	ldr	r2, [r7, #20]
 80096dc:	0151      	lsls	r1, r2, #5
 80096de:	69ba      	ldr	r2, [r7, #24]
 80096e0:	440a      	add	r2, r1
 80096e2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80096e6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80096ea:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	689b      	ldr	r3, [r3, #8]
 80096f0:	f003 0320 	and.w	r3, r3, #32
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	f040 80cb 	bne.w	8009890 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096fe:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009702:	2b00      	cmp	r3, #0
 8009704:	d143      	bne.n	800978e <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8009706:	697b      	ldr	r3, [r7, #20]
 8009708:	015a      	lsls	r2, r3, #5
 800970a:	69bb      	ldr	r3, [r7, #24]
 800970c:	4413      	add	r3, r2
 800970e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	697a      	ldr	r2, [r7, #20]
 8009716:	0151      	lsls	r1, r2, #5
 8009718:	69ba      	ldr	r2, [r7, #24]
 800971a:	440a      	add	r2, r1
 800971c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009720:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009724:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009726:	697b      	ldr	r3, [r7, #20]
 8009728:	015a      	lsls	r2, r3, #5
 800972a:	69bb      	ldr	r3, [r7, #24]
 800972c:	4413      	add	r3, r2
 800972e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	697a      	ldr	r2, [r7, #20]
 8009736:	0151      	lsls	r1, r2, #5
 8009738:	69ba      	ldr	r2, [r7, #24]
 800973a:	440a      	add	r2, r1
 800973c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009740:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009744:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8009746:	697b      	ldr	r3, [r7, #20]
 8009748:	015a      	lsls	r2, r3, #5
 800974a:	69bb      	ldr	r3, [r7, #24]
 800974c:	4413      	add	r3, r2
 800974e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	697a      	ldr	r2, [r7, #20]
 8009756:	0151      	lsls	r1, r2, #5
 8009758:	69ba      	ldr	r2, [r7, #24]
 800975a:	440a      	add	r2, r1
 800975c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009760:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009764:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 8009766:	69fb      	ldr	r3, [r7, #28]
 8009768:	3301      	adds	r3, #1
 800976a:	61fb      	str	r3, [r7, #28]
 800976c:	69fb      	ldr	r3, [r7, #28]
 800976e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009772:	d81d      	bhi.n	80097b0 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009774:	697b      	ldr	r3, [r7, #20]
 8009776:	015a      	lsls	r2, r3, #5
 8009778:	69bb      	ldr	r3, [r7, #24]
 800977a:	4413      	add	r3, r2
 800977c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009786:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800978a:	d0ec      	beq.n	8009766 <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800978c:	e080      	b.n	8009890 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800978e:	697b      	ldr	r3, [r7, #20]
 8009790:	015a      	lsls	r2, r3, #5
 8009792:	69bb      	ldr	r3, [r7, #24]
 8009794:	4413      	add	r3, r2
 8009796:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	697a      	ldr	r2, [r7, #20]
 800979e:	0151      	lsls	r1, r2, #5
 80097a0:	69ba      	ldr	r2, [r7, #24]
 80097a2:	440a      	add	r2, r1
 80097a4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80097a8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80097ac:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80097ae:	e06f      	b.n	8009890 <USB_HC_Halt+0x22a>
            break;
 80097b0:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80097b2:	e06d      	b.n	8009890 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80097b4:	697b      	ldr	r3, [r7, #20]
 80097b6:	015a      	lsls	r2, r3, #5
 80097b8:	69bb      	ldr	r3, [r7, #24]
 80097ba:	4413      	add	r3, r2
 80097bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	697a      	ldr	r2, [r7, #20]
 80097c4:	0151      	lsls	r1, r2, #5
 80097c6:	69ba      	ldr	r2, [r7, #24]
 80097c8:	440a      	add	r2, r1
 80097ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80097ce:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80097d2:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80097d4:	69bb      	ldr	r3, [r7, #24]
 80097d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80097da:	691b      	ldr	r3, [r3, #16]
 80097dc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d143      	bne.n	800986c <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80097e4:	697b      	ldr	r3, [r7, #20]
 80097e6:	015a      	lsls	r2, r3, #5
 80097e8:	69bb      	ldr	r3, [r7, #24]
 80097ea:	4413      	add	r3, r2
 80097ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	697a      	ldr	r2, [r7, #20]
 80097f4:	0151      	lsls	r1, r2, #5
 80097f6:	69ba      	ldr	r2, [r7, #24]
 80097f8:	440a      	add	r2, r1
 80097fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80097fe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009802:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009804:	697b      	ldr	r3, [r7, #20]
 8009806:	015a      	lsls	r2, r3, #5
 8009808:	69bb      	ldr	r3, [r7, #24]
 800980a:	4413      	add	r3, r2
 800980c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	697a      	ldr	r2, [r7, #20]
 8009814:	0151      	lsls	r1, r2, #5
 8009816:	69ba      	ldr	r2, [r7, #24]
 8009818:	440a      	add	r2, r1
 800981a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800981e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009822:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8009824:	697b      	ldr	r3, [r7, #20]
 8009826:	015a      	lsls	r2, r3, #5
 8009828:	69bb      	ldr	r3, [r7, #24]
 800982a:	4413      	add	r3, r2
 800982c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	697a      	ldr	r2, [r7, #20]
 8009834:	0151      	lsls	r1, r2, #5
 8009836:	69ba      	ldr	r2, [r7, #24]
 8009838:	440a      	add	r2, r1
 800983a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800983e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009842:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8009844:	69fb      	ldr	r3, [r7, #28]
 8009846:	3301      	adds	r3, #1
 8009848:	61fb      	str	r3, [r7, #28]
 800984a:	69fb      	ldr	r3, [r7, #28]
 800984c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009850:	d81d      	bhi.n	800988e <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009852:	697b      	ldr	r3, [r7, #20]
 8009854:	015a      	lsls	r2, r3, #5
 8009856:	69bb      	ldr	r3, [r7, #24]
 8009858:	4413      	add	r3, r2
 800985a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009864:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009868:	d0ec      	beq.n	8009844 <USB_HC_Halt+0x1de>
 800986a:	e011      	b.n	8009890 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800986c:	697b      	ldr	r3, [r7, #20]
 800986e:	015a      	lsls	r2, r3, #5
 8009870:	69bb      	ldr	r3, [r7, #24]
 8009872:	4413      	add	r3, r2
 8009874:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	697a      	ldr	r2, [r7, #20]
 800987c:	0151      	lsls	r1, r2, #5
 800987e:	69ba      	ldr	r2, [r7, #24]
 8009880:	440a      	add	r2, r1
 8009882:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009886:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800988a:	6013      	str	r3, [r2, #0]
 800988c:	e000      	b.n	8009890 <USB_HC_Halt+0x22a>
          break;
 800988e:	bf00      	nop
    }
  }

  return HAL_OK;
 8009890:	2300      	movs	r3, #0
}
 8009892:	4618      	mov	r0, r3
 8009894:	3724      	adds	r7, #36	; 0x24
 8009896:	46bd      	mov	sp, r7
 8009898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800989c:	4770      	bx	lr
	...

080098a0 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80098a0:	b480      	push	{r7}
 80098a2:	b087      	sub	sp, #28
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	6078      	str	r0, [r7, #4]
 80098a8:	460b      	mov	r3, r1
 80098aa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80098b0:	78fb      	ldrb	r3, [r7, #3]
 80098b2:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80098b4:	2301      	movs	r3, #1
 80098b6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	04da      	lsls	r2, r3, #19
 80098bc:	4b15      	ldr	r3, [pc, #84]	; (8009914 <USB_DoPing+0x74>)
 80098be:	4013      	ands	r3, r2
 80098c0:	693a      	ldr	r2, [r7, #16]
 80098c2:	0151      	lsls	r1, r2, #5
 80098c4:	697a      	ldr	r2, [r7, #20]
 80098c6:	440a      	add	r2, r1
 80098c8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80098cc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80098d0:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80098d2:	693b      	ldr	r3, [r7, #16]
 80098d4:	015a      	lsls	r2, r3, #5
 80098d6:	697b      	ldr	r3, [r7, #20]
 80098d8:	4413      	add	r3, r2
 80098da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80098e2:	68bb      	ldr	r3, [r7, #8]
 80098e4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80098e8:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80098ea:	68bb      	ldr	r3, [r7, #8]
 80098ec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80098f0:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80098f2:	693b      	ldr	r3, [r7, #16]
 80098f4:	015a      	lsls	r2, r3, #5
 80098f6:	697b      	ldr	r3, [r7, #20]
 80098f8:	4413      	add	r3, r2
 80098fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80098fe:	461a      	mov	r2, r3
 8009900:	68bb      	ldr	r3, [r7, #8]
 8009902:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8009904:	2300      	movs	r3, #0
}
 8009906:	4618      	mov	r0, r3
 8009908:	371c      	adds	r7, #28
 800990a:	46bd      	mov	sp, r7
 800990c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009910:	4770      	bx	lr
 8009912:	bf00      	nop
 8009914:	1ff80000 	.word	0x1ff80000

08009918 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8009918:	b580      	push	{r7, lr}
 800991a:	b086      	sub	sp, #24
 800991c:	af00      	add	r7, sp, #0
 800991e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8009924:	2300      	movs	r3, #0
 8009926:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8009928:	6878      	ldr	r0, [r7, #4]
 800992a:	f7ff f935 	bl	8008b98 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800992e:	2110      	movs	r1, #16
 8009930:	6878      	ldr	r0, [r7, #4]
 8009932:	f7ff f98f 	bl	8008c54 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8009936:	6878      	ldr	r0, [r7, #4]
 8009938:	f7ff f9b0 	bl	8008c9c <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800993c:	2300      	movs	r3, #0
 800993e:	613b      	str	r3, [r7, #16]
 8009940:	e01f      	b.n	8009982 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8009942:	693b      	ldr	r3, [r7, #16]
 8009944:	015a      	lsls	r2, r3, #5
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	4413      	add	r3, r2
 800994a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8009952:	68bb      	ldr	r3, [r7, #8]
 8009954:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009958:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800995a:	68bb      	ldr	r3, [r7, #8]
 800995c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009960:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8009962:	68bb      	ldr	r3, [r7, #8]
 8009964:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009968:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800996a:	693b      	ldr	r3, [r7, #16]
 800996c:	015a      	lsls	r2, r3, #5
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	4413      	add	r3, r2
 8009972:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009976:	461a      	mov	r2, r3
 8009978:	68bb      	ldr	r3, [r7, #8]
 800997a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800997c:	693b      	ldr	r3, [r7, #16]
 800997e:	3301      	adds	r3, #1
 8009980:	613b      	str	r3, [r7, #16]
 8009982:	693b      	ldr	r3, [r7, #16]
 8009984:	2b0f      	cmp	r3, #15
 8009986:	d9dc      	bls.n	8009942 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8009988:	2300      	movs	r3, #0
 800998a:	613b      	str	r3, [r7, #16]
 800998c:	e034      	b.n	80099f8 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800998e:	693b      	ldr	r3, [r7, #16]
 8009990:	015a      	lsls	r2, r3, #5
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	4413      	add	r3, r2
 8009996:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800999e:	68bb      	ldr	r3, [r7, #8]
 80099a0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80099a4:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 80099a6:	68bb      	ldr	r3, [r7, #8]
 80099a8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80099ac:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80099ae:	68bb      	ldr	r3, [r7, #8]
 80099b0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80099b4:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80099b6:	693b      	ldr	r3, [r7, #16]
 80099b8:	015a      	lsls	r2, r3, #5
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	4413      	add	r3, r2
 80099be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80099c2:	461a      	mov	r2, r3
 80099c4:	68bb      	ldr	r3, [r7, #8]
 80099c6:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 80099c8:	697b      	ldr	r3, [r7, #20]
 80099ca:	3301      	adds	r3, #1
 80099cc:	617b      	str	r3, [r7, #20]
 80099ce:	697b      	ldr	r3, [r7, #20]
 80099d0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80099d4:	d80c      	bhi.n	80099f0 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80099d6:	693b      	ldr	r3, [r7, #16]
 80099d8:	015a      	lsls	r2, r3, #5
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	4413      	add	r3, r2
 80099de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80099e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80099ec:	d0ec      	beq.n	80099c8 <USB_StopHost+0xb0>
 80099ee:	e000      	b.n	80099f2 <USB_StopHost+0xda>
        break;
 80099f0:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80099f2:	693b      	ldr	r3, [r7, #16]
 80099f4:	3301      	adds	r3, #1
 80099f6:	613b      	str	r3, [r7, #16]
 80099f8:	693b      	ldr	r3, [r7, #16]
 80099fa:	2b0f      	cmp	r3, #15
 80099fc:	d9c7      	bls.n	800998e <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009a04:	461a      	mov	r2, r3
 8009a06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009a0a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009a12:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8009a14:	6878      	ldr	r0, [r7, #4]
 8009a16:	f7ff f8ae 	bl	8008b76 <USB_EnableGlobalInt>

  return HAL_OK;
 8009a1a:	2300      	movs	r3, #0
}
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	3718      	adds	r7, #24
 8009a20:	46bd      	mov	sp, r7
 8009a22:	bd80      	pop	{r7, pc}

08009a24 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8009a24:	b590      	push	{r4, r7, lr}
 8009a26:	b089      	sub	sp, #36	; 0x24
 8009a28:	af04      	add	r7, sp, #16
 8009a2a:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8009a2c:	2301      	movs	r3, #1
 8009a2e:	2202      	movs	r2, #2
 8009a30:	2102      	movs	r1, #2
 8009a32:	6878      	ldr	r0, [r7, #4]
 8009a34:	f000 fc66 	bl	800a304 <USBH_FindInterface>
 8009a38:	4603      	mov	r3, r0
 8009a3a:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8009a3c:	7bfb      	ldrb	r3, [r7, #15]
 8009a3e:	2bff      	cmp	r3, #255	; 0xff
 8009a40:	d002      	beq.n	8009a48 <USBH_CDC_InterfaceInit+0x24>
 8009a42:	7bfb      	ldrb	r3, [r7, #15]
 8009a44:	2b01      	cmp	r3, #1
 8009a46:	d901      	bls.n	8009a4c <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8009a48:	2302      	movs	r3, #2
 8009a4a:	e13d      	b.n	8009cc8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8009a4c:	7bfb      	ldrb	r3, [r7, #15]
 8009a4e:	4619      	mov	r1, r3
 8009a50:	6878      	ldr	r0, [r7, #4]
 8009a52:	f000 fc3b 	bl	800a2cc <USBH_SelectInterface>
 8009a56:	4603      	mov	r3, r0
 8009a58:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8009a5a:	7bbb      	ldrb	r3, [r7, #14]
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d001      	beq.n	8009a64 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8009a60:	2302      	movs	r3, #2
 8009a62:	e131      	b.n	8009cc8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8009a6a:	2050      	movs	r0, #80	; 0x50
 8009a6c:	f002 fa00 	bl	800be70 <malloc>
 8009a70:	4603      	mov	r3, r0
 8009a72:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009a7a:	69db      	ldr	r3, [r3, #28]
 8009a7c:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8009a7e:	68bb      	ldr	r3, [r7, #8]
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d101      	bne.n	8009a88 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8009a84:	2302      	movs	r3, #2
 8009a86:	e11f      	b.n	8009cc8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8009a88:	2250      	movs	r2, #80	; 0x50
 8009a8a:	2100      	movs	r1, #0
 8009a8c:	68b8      	ldr	r0, [r7, #8]
 8009a8e:	f002 f9ff 	bl	800be90 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8009a92:	7bfb      	ldrb	r3, [r7, #15]
 8009a94:	687a      	ldr	r2, [r7, #4]
 8009a96:	211a      	movs	r1, #26
 8009a98:	fb01 f303 	mul.w	r3, r1, r3
 8009a9c:	4413      	add	r3, r2
 8009a9e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009aa2:	781b      	ldrb	r3, [r3, #0]
 8009aa4:	b25b      	sxtb	r3, r3
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	da15      	bge.n	8009ad6 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009aaa:	7bfb      	ldrb	r3, [r7, #15]
 8009aac:	687a      	ldr	r2, [r7, #4]
 8009aae:	211a      	movs	r1, #26
 8009ab0:	fb01 f303 	mul.w	r3, r1, r3
 8009ab4:	4413      	add	r3, r2
 8009ab6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009aba:	781a      	ldrb	r2, [r3, #0]
 8009abc:	68bb      	ldr	r3, [r7, #8]
 8009abe:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009ac0:	7bfb      	ldrb	r3, [r7, #15]
 8009ac2:	687a      	ldr	r2, [r7, #4]
 8009ac4:	211a      	movs	r1, #26
 8009ac6:	fb01 f303 	mul.w	r3, r1, r3
 8009aca:	4413      	add	r3, r2
 8009acc:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8009ad0:	881a      	ldrh	r2, [r3, #0]
 8009ad2:	68bb      	ldr	r3, [r7, #8]
 8009ad4:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8009ad6:	68bb      	ldr	r3, [r7, #8]
 8009ad8:	785b      	ldrb	r3, [r3, #1]
 8009ada:	4619      	mov	r1, r3
 8009adc:	6878      	ldr	r0, [r7, #4]
 8009ade:	f001 fe32 	bl	800b746 <USBH_AllocPipe>
 8009ae2:	4603      	mov	r3, r0
 8009ae4:	461a      	mov	r2, r3
 8009ae6:	68bb      	ldr	r3, [r7, #8]
 8009ae8:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8009aea:	68bb      	ldr	r3, [r7, #8]
 8009aec:	7819      	ldrb	r1, [r3, #0]
 8009aee:	68bb      	ldr	r3, [r7, #8]
 8009af0:	7858      	ldrb	r0, [r3, #1]
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009afe:	68ba      	ldr	r2, [r7, #8]
 8009b00:	8952      	ldrh	r2, [r2, #10]
 8009b02:	9202      	str	r2, [sp, #8]
 8009b04:	2203      	movs	r2, #3
 8009b06:	9201      	str	r2, [sp, #4]
 8009b08:	9300      	str	r3, [sp, #0]
 8009b0a:	4623      	mov	r3, r4
 8009b0c:	4602      	mov	r2, r0
 8009b0e:	6878      	ldr	r0, [r7, #4]
 8009b10:	f001 fdea 	bl	800b6e8 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8009b14:	68bb      	ldr	r3, [r7, #8]
 8009b16:	781b      	ldrb	r3, [r3, #0]
 8009b18:	2200      	movs	r2, #0
 8009b1a:	4619      	mov	r1, r3
 8009b1c:	6878      	ldr	r0, [r7, #4]
 8009b1e:	f002 f8f9 	bl	800bd14 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8009b22:	2300      	movs	r3, #0
 8009b24:	2200      	movs	r2, #0
 8009b26:	210a      	movs	r1, #10
 8009b28:	6878      	ldr	r0, [r7, #4]
 8009b2a:	f000 fbeb 	bl	800a304 <USBH_FindInterface>
 8009b2e:	4603      	mov	r3, r0
 8009b30:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8009b32:	7bfb      	ldrb	r3, [r7, #15]
 8009b34:	2bff      	cmp	r3, #255	; 0xff
 8009b36:	d002      	beq.n	8009b3e <USBH_CDC_InterfaceInit+0x11a>
 8009b38:	7bfb      	ldrb	r3, [r7, #15]
 8009b3a:	2b01      	cmp	r3, #1
 8009b3c:	d901      	bls.n	8009b42 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8009b3e:	2302      	movs	r3, #2
 8009b40:	e0c2      	b.n	8009cc8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8009b42:	7bfb      	ldrb	r3, [r7, #15]
 8009b44:	687a      	ldr	r2, [r7, #4]
 8009b46:	211a      	movs	r1, #26
 8009b48:	fb01 f303 	mul.w	r3, r1, r3
 8009b4c:	4413      	add	r3, r2
 8009b4e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009b52:	781b      	ldrb	r3, [r3, #0]
 8009b54:	b25b      	sxtb	r3, r3
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	da16      	bge.n	8009b88 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009b5a:	7bfb      	ldrb	r3, [r7, #15]
 8009b5c:	687a      	ldr	r2, [r7, #4]
 8009b5e:	211a      	movs	r1, #26
 8009b60:	fb01 f303 	mul.w	r3, r1, r3
 8009b64:	4413      	add	r3, r2
 8009b66:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009b6a:	781a      	ldrb	r2, [r3, #0]
 8009b6c:	68bb      	ldr	r3, [r7, #8]
 8009b6e:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009b70:	7bfb      	ldrb	r3, [r7, #15]
 8009b72:	687a      	ldr	r2, [r7, #4]
 8009b74:	211a      	movs	r1, #26
 8009b76:	fb01 f303 	mul.w	r3, r1, r3
 8009b7a:	4413      	add	r3, r2
 8009b7c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8009b80:	881a      	ldrh	r2, [r3, #0]
 8009b82:	68bb      	ldr	r3, [r7, #8]
 8009b84:	835a      	strh	r2, [r3, #26]
 8009b86:	e015      	b.n	8009bb4 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009b88:	7bfb      	ldrb	r3, [r7, #15]
 8009b8a:	687a      	ldr	r2, [r7, #4]
 8009b8c:	211a      	movs	r1, #26
 8009b8e:	fb01 f303 	mul.w	r3, r1, r3
 8009b92:	4413      	add	r3, r2
 8009b94:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009b98:	781a      	ldrb	r2, [r3, #0]
 8009b9a:	68bb      	ldr	r3, [r7, #8]
 8009b9c:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009b9e:	7bfb      	ldrb	r3, [r7, #15]
 8009ba0:	687a      	ldr	r2, [r7, #4]
 8009ba2:	211a      	movs	r1, #26
 8009ba4:	fb01 f303 	mul.w	r3, r1, r3
 8009ba8:	4413      	add	r3, r2
 8009baa:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8009bae:	881a      	ldrh	r2, [r3, #0]
 8009bb0:	68bb      	ldr	r3, [r7, #8]
 8009bb2:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8009bb4:	7bfb      	ldrb	r3, [r7, #15]
 8009bb6:	687a      	ldr	r2, [r7, #4]
 8009bb8:	211a      	movs	r1, #26
 8009bba:	fb01 f303 	mul.w	r3, r1, r3
 8009bbe:	4413      	add	r3, r2
 8009bc0:	f203 3356 	addw	r3, r3, #854	; 0x356
 8009bc4:	781b      	ldrb	r3, [r3, #0]
 8009bc6:	b25b      	sxtb	r3, r3
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	da16      	bge.n	8009bfa <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8009bcc:	7bfb      	ldrb	r3, [r7, #15]
 8009bce:	687a      	ldr	r2, [r7, #4]
 8009bd0:	211a      	movs	r1, #26
 8009bd2:	fb01 f303 	mul.w	r3, r1, r3
 8009bd6:	4413      	add	r3, r2
 8009bd8:	f203 3356 	addw	r3, r3, #854	; 0x356
 8009bdc:	781a      	ldrb	r2, [r3, #0]
 8009bde:	68bb      	ldr	r3, [r7, #8]
 8009be0:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8009be2:	7bfb      	ldrb	r3, [r7, #15]
 8009be4:	687a      	ldr	r2, [r7, #4]
 8009be6:	211a      	movs	r1, #26
 8009be8:	fb01 f303 	mul.w	r3, r1, r3
 8009bec:	4413      	add	r3, r2
 8009bee:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8009bf2:	881a      	ldrh	r2, [r3, #0]
 8009bf4:	68bb      	ldr	r3, [r7, #8]
 8009bf6:	835a      	strh	r2, [r3, #26]
 8009bf8:	e015      	b.n	8009c26 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8009bfa:	7bfb      	ldrb	r3, [r7, #15]
 8009bfc:	687a      	ldr	r2, [r7, #4]
 8009bfe:	211a      	movs	r1, #26
 8009c00:	fb01 f303 	mul.w	r3, r1, r3
 8009c04:	4413      	add	r3, r2
 8009c06:	f203 3356 	addw	r3, r3, #854	; 0x356
 8009c0a:	781a      	ldrb	r2, [r3, #0]
 8009c0c:	68bb      	ldr	r3, [r7, #8]
 8009c0e:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8009c10:	7bfb      	ldrb	r3, [r7, #15]
 8009c12:	687a      	ldr	r2, [r7, #4]
 8009c14:	211a      	movs	r1, #26
 8009c16:	fb01 f303 	mul.w	r3, r1, r3
 8009c1a:	4413      	add	r3, r2
 8009c1c:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8009c20:	881a      	ldrh	r2, [r3, #0]
 8009c22:	68bb      	ldr	r3, [r7, #8]
 8009c24:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8009c26:	68bb      	ldr	r3, [r7, #8]
 8009c28:	7b9b      	ldrb	r3, [r3, #14]
 8009c2a:	4619      	mov	r1, r3
 8009c2c:	6878      	ldr	r0, [r7, #4]
 8009c2e:	f001 fd8a 	bl	800b746 <USBH_AllocPipe>
 8009c32:	4603      	mov	r3, r0
 8009c34:	461a      	mov	r2, r3
 8009c36:	68bb      	ldr	r3, [r7, #8]
 8009c38:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8009c3a:	68bb      	ldr	r3, [r7, #8]
 8009c3c:	7bdb      	ldrb	r3, [r3, #15]
 8009c3e:	4619      	mov	r1, r3
 8009c40:	6878      	ldr	r0, [r7, #4]
 8009c42:	f001 fd80 	bl	800b746 <USBH_AllocPipe>
 8009c46:	4603      	mov	r3, r0
 8009c48:	461a      	mov	r2, r3
 8009c4a:	68bb      	ldr	r3, [r7, #8]
 8009c4c:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8009c4e:	68bb      	ldr	r3, [r7, #8]
 8009c50:	7b59      	ldrb	r1, [r3, #13]
 8009c52:	68bb      	ldr	r3, [r7, #8]
 8009c54:	7b98      	ldrb	r0, [r3, #14]
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009c62:	68ba      	ldr	r2, [r7, #8]
 8009c64:	8b12      	ldrh	r2, [r2, #24]
 8009c66:	9202      	str	r2, [sp, #8]
 8009c68:	2202      	movs	r2, #2
 8009c6a:	9201      	str	r2, [sp, #4]
 8009c6c:	9300      	str	r3, [sp, #0]
 8009c6e:	4623      	mov	r3, r4
 8009c70:	4602      	mov	r2, r0
 8009c72:	6878      	ldr	r0, [r7, #4]
 8009c74:	f001 fd38 	bl	800b6e8 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8009c78:	68bb      	ldr	r3, [r7, #8]
 8009c7a:	7b19      	ldrb	r1, [r3, #12]
 8009c7c:	68bb      	ldr	r3, [r7, #8]
 8009c7e:	7bd8      	ldrb	r0, [r3, #15]
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009c8c:	68ba      	ldr	r2, [r7, #8]
 8009c8e:	8b52      	ldrh	r2, [r2, #26]
 8009c90:	9202      	str	r2, [sp, #8]
 8009c92:	2202      	movs	r2, #2
 8009c94:	9201      	str	r2, [sp, #4]
 8009c96:	9300      	str	r3, [sp, #0]
 8009c98:	4623      	mov	r3, r4
 8009c9a:	4602      	mov	r2, r0
 8009c9c:	6878      	ldr	r0, [r7, #4]
 8009c9e:	f001 fd23 	bl	800b6e8 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8009ca2:	68bb      	ldr	r3, [r7, #8]
 8009ca4:	2200      	movs	r2, #0
 8009ca6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8009caa:	68bb      	ldr	r3, [r7, #8]
 8009cac:	7b5b      	ldrb	r3, [r3, #13]
 8009cae:	2200      	movs	r2, #0
 8009cb0:	4619      	mov	r1, r3
 8009cb2:	6878      	ldr	r0, [r7, #4]
 8009cb4:	f002 f82e 	bl	800bd14 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8009cb8:	68bb      	ldr	r3, [r7, #8]
 8009cba:	7b1b      	ldrb	r3, [r3, #12]
 8009cbc:	2200      	movs	r2, #0
 8009cbe:	4619      	mov	r1, r3
 8009cc0:	6878      	ldr	r0, [r7, #4]
 8009cc2:	f002 f827 	bl	800bd14 <USBH_LL_SetToggle>

  return USBH_OK;
 8009cc6:	2300      	movs	r3, #0
}
 8009cc8:	4618      	mov	r0, r3
 8009cca:	3714      	adds	r7, #20
 8009ccc:	46bd      	mov	sp, r7
 8009cce:	bd90      	pop	{r4, r7, pc}

08009cd0 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8009cd0:	b580      	push	{r7, lr}
 8009cd2:	b084      	sub	sp, #16
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009cde:	69db      	ldr	r3, [r3, #28]
 8009ce0:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	781b      	ldrb	r3, [r3, #0]
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d00e      	beq.n	8009d08 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	781b      	ldrb	r3, [r3, #0]
 8009cee:	4619      	mov	r1, r3
 8009cf0:	6878      	ldr	r0, [r7, #4]
 8009cf2:	f001 fd18 	bl	800b726 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	781b      	ldrb	r3, [r3, #0]
 8009cfa:	4619      	mov	r1, r3
 8009cfc:	6878      	ldr	r0, [r7, #4]
 8009cfe:	f001 fd43 	bl	800b788 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	2200      	movs	r2, #0
 8009d06:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	7b1b      	ldrb	r3, [r3, #12]
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d00e      	beq.n	8009d2e <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	7b1b      	ldrb	r3, [r3, #12]
 8009d14:	4619      	mov	r1, r3
 8009d16:	6878      	ldr	r0, [r7, #4]
 8009d18:	f001 fd05 	bl	800b726 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	7b1b      	ldrb	r3, [r3, #12]
 8009d20:	4619      	mov	r1, r3
 8009d22:	6878      	ldr	r0, [r7, #4]
 8009d24:	f001 fd30 	bl	800b788 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	2200      	movs	r2, #0
 8009d2c:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	7b5b      	ldrb	r3, [r3, #13]
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d00e      	beq.n	8009d54 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	7b5b      	ldrb	r3, [r3, #13]
 8009d3a:	4619      	mov	r1, r3
 8009d3c:	6878      	ldr	r0, [r7, #4]
 8009d3e:	f001 fcf2 	bl	800b726 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	7b5b      	ldrb	r3, [r3, #13]
 8009d46:	4619      	mov	r1, r3
 8009d48:	6878      	ldr	r0, [r7, #4]
 8009d4a:	f001 fd1d 	bl	800b788 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	2200      	movs	r2, #0
 8009d52:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009d5a:	69db      	ldr	r3, [r3, #28]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d00b      	beq.n	8009d78 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009d66:	69db      	ldr	r3, [r3, #28]
 8009d68:	4618      	mov	r0, r3
 8009d6a:	f002 f889 	bl	800be80 <free>
    phost->pActiveClass->pData = 0U;
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009d74:	2200      	movs	r2, #0
 8009d76:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8009d78:	2300      	movs	r3, #0
}
 8009d7a:	4618      	mov	r0, r3
 8009d7c:	3710      	adds	r7, #16
 8009d7e:	46bd      	mov	sp, r7
 8009d80:	bd80      	pop	{r7, pc}

08009d82 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8009d82:	b580      	push	{r7, lr}
 8009d84:	b084      	sub	sp, #16
 8009d86:	af00      	add	r7, sp, #0
 8009d88:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009d90:	69db      	ldr	r3, [r3, #28]
 8009d92:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	3340      	adds	r3, #64	; 0x40
 8009d98:	4619      	mov	r1, r3
 8009d9a:	6878      	ldr	r0, [r7, #4]
 8009d9c:	f000 f8b1 	bl	8009f02 <GetLineCoding>
 8009da0:	4603      	mov	r3, r0
 8009da2:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8009da4:	7afb      	ldrb	r3, [r7, #11]
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d105      	bne.n	8009db6 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009db0:	2102      	movs	r1, #2
 8009db2:	6878      	ldr	r0, [r7, #4]
 8009db4:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8009db6:	7afb      	ldrb	r3, [r7, #11]
}
 8009db8:	4618      	mov	r0, r3
 8009dba:	3710      	adds	r7, #16
 8009dbc:	46bd      	mov	sp, r7
 8009dbe:	bd80      	pop	{r7, pc}

08009dc0 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8009dc0:	b580      	push	{r7, lr}
 8009dc2:	b084      	sub	sp, #16
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8009dc8:	2301      	movs	r3, #1
 8009dca:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8009dcc:	2300      	movs	r3, #0
 8009dce:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009dd6:	69db      	ldr	r3, [r3, #28]
 8009dd8:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8009dda:	68bb      	ldr	r3, [r7, #8]
 8009ddc:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8009de0:	2b04      	cmp	r3, #4
 8009de2:	d877      	bhi.n	8009ed4 <USBH_CDC_Process+0x114>
 8009de4:	a201      	add	r2, pc, #4	; (adr r2, 8009dec <USBH_CDC_Process+0x2c>)
 8009de6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dea:	bf00      	nop
 8009dec:	08009e01 	.word	0x08009e01
 8009df0:	08009e07 	.word	0x08009e07
 8009df4:	08009e37 	.word	0x08009e37
 8009df8:	08009eab 	.word	0x08009eab
 8009dfc:	08009eb9 	.word	0x08009eb9
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8009e00:	2300      	movs	r3, #0
 8009e02:	73fb      	strb	r3, [r7, #15]
      break;
 8009e04:	e06d      	b.n	8009ee2 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8009e06:	68bb      	ldr	r3, [r7, #8]
 8009e08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009e0a:	4619      	mov	r1, r3
 8009e0c:	6878      	ldr	r0, [r7, #4]
 8009e0e:	f000 f897 	bl	8009f40 <SetLineCoding>
 8009e12:	4603      	mov	r3, r0
 8009e14:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009e16:	7bbb      	ldrb	r3, [r7, #14]
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d104      	bne.n	8009e26 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8009e1c:	68bb      	ldr	r3, [r7, #8]
 8009e1e:	2202      	movs	r2, #2
 8009e20:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8009e24:	e058      	b.n	8009ed8 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8009e26:	7bbb      	ldrb	r3, [r7, #14]
 8009e28:	2b01      	cmp	r3, #1
 8009e2a:	d055      	beq.n	8009ed8 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8009e2c:	68bb      	ldr	r3, [r7, #8]
 8009e2e:	2204      	movs	r2, #4
 8009e30:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8009e34:	e050      	b.n	8009ed8 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8009e36:	68bb      	ldr	r3, [r7, #8]
 8009e38:	3340      	adds	r3, #64	; 0x40
 8009e3a:	4619      	mov	r1, r3
 8009e3c:	6878      	ldr	r0, [r7, #4]
 8009e3e:	f000 f860 	bl	8009f02 <GetLineCoding>
 8009e42:	4603      	mov	r3, r0
 8009e44:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009e46:	7bbb      	ldrb	r3, [r7, #14]
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d126      	bne.n	8009e9a <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8009e4c:	68bb      	ldr	r3, [r7, #8]
 8009e4e:	2200      	movs	r2, #0
 8009e50:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8009e54:	68bb      	ldr	r3, [r7, #8]
 8009e56:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8009e5a:	68bb      	ldr	r3, [r7, #8]
 8009e5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009e5e:	791b      	ldrb	r3, [r3, #4]
 8009e60:	429a      	cmp	r2, r3
 8009e62:	d13b      	bne.n	8009edc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8009e64:	68bb      	ldr	r3, [r7, #8]
 8009e66:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8009e6a:	68bb      	ldr	r3, [r7, #8]
 8009e6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009e6e:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8009e70:	429a      	cmp	r2, r3
 8009e72:	d133      	bne.n	8009edc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8009e74:	68bb      	ldr	r3, [r7, #8]
 8009e76:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8009e7a:	68bb      	ldr	r3, [r7, #8]
 8009e7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009e7e:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8009e80:	429a      	cmp	r2, r3
 8009e82:	d12b      	bne.n	8009edc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8009e84:	68bb      	ldr	r3, [r7, #8]
 8009e86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009e88:	68bb      	ldr	r3, [r7, #8]
 8009e8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009e8c:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8009e8e:	429a      	cmp	r2, r3
 8009e90:	d124      	bne.n	8009edc <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8009e92:	6878      	ldr	r0, [r7, #4]
 8009e94:	f000 f958 	bl	800a148 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8009e98:	e020      	b.n	8009edc <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8009e9a:	7bbb      	ldrb	r3, [r7, #14]
 8009e9c:	2b01      	cmp	r3, #1
 8009e9e:	d01d      	beq.n	8009edc <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8009ea0:	68bb      	ldr	r3, [r7, #8]
 8009ea2:	2204      	movs	r2, #4
 8009ea4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8009ea8:	e018      	b.n	8009edc <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8009eaa:	6878      	ldr	r0, [r7, #4]
 8009eac:	f000 f867 	bl	8009f7e <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8009eb0:	6878      	ldr	r0, [r7, #4]
 8009eb2:	f000 f8da 	bl	800a06a <CDC_ProcessReception>
      break;
 8009eb6:	e014      	b.n	8009ee2 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8009eb8:	2100      	movs	r1, #0
 8009eba:	6878      	ldr	r0, [r7, #4]
 8009ebc:	f000 ffe3 	bl	800ae86 <USBH_ClrFeature>
 8009ec0:	4603      	mov	r3, r0
 8009ec2:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009ec4:	7bbb      	ldrb	r3, [r7, #14]
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d10a      	bne.n	8009ee0 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8009eca:	68bb      	ldr	r3, [r7, #8]
 8009ecc:	2200      	movs	r2, #0
 8009ece:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8009ed2:	e005      	b.n	8009ee0 <USBH_CDC_Process+0x120>

    default:
      break;
 8009ed4:	bf00      	nop
 8009ed6:	e004      	b.n	8009ee2 <USBH_CDC_Process+0x122>
      break;
 8009ed8:	bf00      	nop
 8009eda:	e002      	b.n	8009ee2 <USBH_CDC_Process+0x122>
      break;
 8009edc:	bf00      	nop
 8009ede:	e000      	b.n	8009ee2 <USBH_CDC_Process+0x122>
      break;
 8009ee0:	bf00      	nop

  }

  return status;
 8009ee2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ee4:	4618      	mov	r0, r3
 8009ee6:	3710      	adds	r7, #16
 8009ee8:	46bd      	mov	sp, r7
 8009eea:	bd80      	pop	{r7, pc}

08009eec <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8009eec:	b480      	push	{r7}
 8009eee:	b083      	sub	sp, #12
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8009ef4:	2300      	movs	r3, #0
}
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	370c      	adds	r7, #12
 8009efa:	46bd      	mov	sp, r7
 8009efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f00:	4770      	bx	lr

08009f02 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8009f02:	b580      	push	{r7, lr}
 8009f04:	b082      	sub	sp, #8
 8009f06:	af00      	add	r7, sp, #0
 8009f08:	6078      	str	r0, [r7, #4]
 8009f0a:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	22a1      	movs	r2, #161	; 0xa1
 8009f10:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	2221      	movs	r2, #33	; 0x21
 8009f16:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	2200      	movs	r2, #0
 8009f1c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	2200      	movs	r2, #0
 8009f22:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	2207      	movs	r2, #7
 8009f28:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8009f2a:	683b      	ldr	r3, [r7, #0]
 8009f2c:	2207      	movs	r2, #7
 8009f2e:	4619      	mov	r1, r3
 8009f30:	6878      	ldr	r0, [r7, #4]
 8009f32:	f001 f988 	bl	800b246 <USBH_CtlReq>
 8009f36:	4603      	mov	r3, r0
}
 8009f38:	4618      	mov	r0, r3
 8009f3a:	3708      	adds	r7, #8
 8009f3c:	46bd      	mov	sp, r7
 8009f3e:	bd80      	pop	{r7, pc}

08009f40 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8009f40:	b580      	push	{r7, lr}
 8009f42:	b082      	sub	sp, #8
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	6078      	str	r0, [r7, #4]
 8009f48:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	2221      	movs	r2, #33	; 0x21
 8009f4e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	2220      	movs	r2, #32
 8009f54:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	2200      	movs	r2, #0
 8009f5a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	2200      	movs	r2, #0
 8009f60:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	2207      	movs	r2, #7
 8009f66:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8009f68:	683b      	ldr	r3, [r7, #0]
 8009f6a:	2207      	movs	r2, #7
 8009f6c:	4619      	mov	r1, r3
 8009f6e:	6878      	ldr	r0, [r7, #4]
 8009f70:	f001 f969 	bl	800b246 <USBH_CtlReq>
 8009f74:	4603      	mov	r3, r0
}
 8009f76:	4618      	mov	r0, r3
 8009f78:	3708      	adds	r7, #8
 8009f7a:	46bd      	mov	sp, r7
 8009f7c:	bd80      	pop	{r7, pc}

08009f7e <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8009f7e:	b580      	push	{r7, lr}
 8009f80:	b086      	sub	sp, #24
 8009f82:	af02      	add	r7, sp, #8
 8009f84:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009f8c:	69db      	ldr	r3, [r3, #28]
 8009f8e:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009f90:	2300      	movs	r3, #0
 8009f92:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8009f9a:	2b01      	cmp	r3, #1
 8009f9c:	d002      	beq.n	8009fa4 <CDC_ProcessTransmission+0x26>
 8009f9e:	2b02      	cmp	r3, #2
 8009fa0:	d023      	beq.n	8009fea <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8009fa2:	e05e      	b.n	800a062 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fa8:	68fa      	ldr	r2, [r7, #12]
 8009faa:	8b12      	ldrh	r2, [r2, #24]
 8009fac:	4293      	cmp	r3, r2
 8009fae:	d90b      	bls.n	8009fc8 <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	69d9      	ldr	r1, [r3, #28]
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	8b1a      	ldrh	r2, [r3, #24]
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	7b5b      	ldrb	r3, [r3, #13]
 8009fbc:	2001      	movs	r0, #1
 8009fbe:	9000      	str	r0, [sp, #0]
 8009fc0:	6878      	ldr	r0, [r7, #4]
 8009fc2:	f001 fb4e 	bl	800b662 <USBH_BulkSendData>
 8009fc6:	e00b      	b.n	8009fe0 <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 8009fd0:	b29a      	uxth	r2, r3
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	7b5b      	ldrb	r3, [r3, #13]
 8009fd6:	2001      	movs	r0, #1
 8009fd8:	9000      	str	r0, [sp, #0]
 8009fda:	6878      	ldr	r0, [r7, #4]
 8009fdc:	f001 fb41 	bl	800b662 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	2202      	movs	r2, #2
 8009fe4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8009fe8:	e03b      	b.n	800a062 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	7b5b      	ldrb	r3, [r3, #13]
 8009fee:	4619      	mov	r1, r3
 8009ff0:	6878      	ldr	r0, [r7, #4]
 8009ff2:	f001 fe65 	bl	800bcc0 <USBH_LL_GetURBState>
 8009ff6:	4603      	mov	r3, r0
 8009ff8:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8009ffa:	7afb      	ldrb	r3, [r7, #11]
 8009ffc:	2b01      	cmp	r3, #1
 8009ffe:	d128      	bne.n	800a052 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a004:	68fa      	ldr	r2, [r7, #12]
 800a006:	8b12      	ldrh	r2, [r2, #24]
 800a008:	4293      	cmp	r3, r2
 800a00a:	d90e      	bls.n	800a02a <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a010:	68fa      	ldr	r2, [r7, #12]
 800a012:	8b12      	ldrh	r2, [r2, #24]
 800a014:	1a9a      	subs	r2, r3, r2
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	69db      	ldr	r3, [r3, #28]
 800a01e:	68fa      	ldr	r2, [r7, #12]
 800a020:	8b12      	ldrh	r2, [r2, #24]
 800a022:	441a      	add	r2, r3
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	61da      	str	r2, [r3, #28]
 800a028:	e002      	b.n	800a030 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	2200      	movs	r2, #0
 800a02e:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a034:	2b00      	cmp	r3, #0
 800a036:	d004      	beq.n	800a042 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	2201      	movs	r2, #1
 800a03c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800a040:	e00e      	b.n	800a060 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	2200      	movs	r2, #0
 800a046:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800a04a:	6878      	ldr	r0, [r7, #4]
 800a04c:	f000 f868 	bl	800a120 <USBH_CDC_TransmitCallback>
      break;
 800a050:	e006      	b.n	800a060 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800a052:	7afb      	ldrb	r3, [r7, #11]
 800a054:	2b02      	cmp	r3, #2
 800a056:	d103      	bne.n	800a060 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	2201      	movs	r2, #1
 800a05c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800a060:	bf00      	nop
  }
}
 800a062:	bf00      	nop
 800a064:	3710      	adds	r7, #16
 800a066:	46bd      	mov	sp, r7
 800a068:	bd80      	pop	{r7, pc}

0800a06a <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800a06a:	b580      	push	{r7, lr}
 800a06c:	b086      	sub	sp, #24
 800a06e:	af00      	add	r7, sp, #0
 800a070:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a078:	69db      	ldr	r3, [r3, #28]
 800a07a:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a07c:	2300      	movs	r3, #0
 800a07e:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800a080:	697b      	ldr	r3, [r7, #20]
 800a082:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800a086:	2b03      	cmp	r3, #3
 800a088:	d002      	beq.n	800a090 <CDC_ProcessReception+0x26>
 800a08a:	2b04      	cmp	r3, #4
 800a08c:	d00e      	beq.n	800a0ac <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800a08e:	e043      	b.n	800a118 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 800a090:	697b      	ldr	r3, [r7, #20]
 800a092:	6a19      	ldr	r1, [r3, #32]
 800a094:	697b      	ldr	r3, [r7, #20]
 800a096:	8b5a      	ldrh	r2, [r3, #26]
 800a098:	697b      	ldr	r3, [r7, #20]
 800a09a:	7b1b      	ldrb	r3, [r3, #12]
 800a09c:	6878      	ldr	r0, [r7, #4]
 800a09e:	f001 fb05 	bl	800b6ac <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800a0a2:	697b      	ldr	r3, [r7, #20]
 800a0a4:	2204      	movs	r2, #4
 800a0a6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800a0aa:	e035      	b.n	800a118 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800a0ac:	697b      	ldr	r3, [r7, #20]
 800a0ae:	7b1b      	ldrb	r3, [r3, #12]
 800a0b0:	4619      	mov	r1, r3
 800a0b2:	6878      	ldr	r0, [r7, #4]
 800a0b4:	f001 fe04 	bl	800bcc0 <USBH_LL_GetURBState>
 800a0b8:	4603      	mov	r3, r0
 800a0ba:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800a0bc:	7cfb      	ldrb	r3, [r7, #19]
 800a0be:	2b01      	cmp	r3, #1
 800a0c0:	d129      	bne.n	800a116 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800a0c2:	697b      	ldr	r3, [r7, #20]
 800a0c4:	7b1b      	ldrb	r3, [r3, #12]
 800a0c6:	4619      	mov	r1, r3
 800a0c8:	6878      	ldr	r0, [r7, #4]
 800a0ca:	f001 fd67 	bl	800bb9c <USBH_LL_GetLastXferSize>
 800a0ce:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800a0d0:	697b      	ldr	r3, [r7, #20]
 800a0d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0d4:	68fa      	ldr	r2, [r7, #12]
 800a0d6:	429a      	cmp	r2, r3
 800a0d8:	d016      	beq.n	800a108 <CDC_ProcessReception+0x9e>
 800a0da:	697b      	ldr	r3, [r7, #20]
 800a0dc:	8b5b      	ldrh	r3, [r3, #26]
 800a0de:	461a      	mov	r2, r3
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	4293      	cmp	r3, r2
 800a0e4:	d910      	bls.n	800a108 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800a0e6:	697b      	ldr	r3, [r7, #20]
 800a0e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	1ad2      	subs	r2, r2, r3
 800a0ee:	697b      	ldr	r3, [r7, #20]
 800a0f0:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800a0f2:	697b      	ldr	r3, [r7, #20]
 800a0f4:	6a1a      	ldr	r2, [r3, #32]
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	441a      	add	r2, r3
 800a0fa:	697b      	ldr	r3, [r7, #20]
 800a0fc:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800a0fe:	697b      	ldr	r3, [r7, #20]
 800a100:	2203      	movs	r2, #3
 800a102:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800a106:	e006      	b.n	800a116 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800a108:	697b      	ldr	r3, [r7, #20]
 800a10a:	2200      	movs	r2, #0
 800a10c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800a110:	6878      	ldr	r0, [r7, #4]
 800a112:	f000 f80f 	bl	800a134 <USBH_CDC_ReceiveCallback>
      break;
 800a116:	bf00      	nop
  }
}
 800a118:	bf00      	nop
 800a11a:	3718      	adds	r7, #24
 800a11c:	46bd      	mov	sp, r7
 800a11e:	bd80      	pop	{r7, pc}

0800a120 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800a120:	b480      	push	{r7}
 800a122:	b083      	sub	sp, #12
 800a124:	af00      	add	r7, sp, #0
 800a126:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800a128:	bf00      	nop
 800a12a:	370c      	adds	r7, #12
 800a12c:	46bd      	mov	sp, r7
 800a12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a132:	4770      	bx	lr

0800a134 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800a134:	b480      	push	{r7}
 800a136:	b083      	sub	sp, #12
 800a138:	af00      	add	r7, sp, #0
 800a13a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800a13c:	bf00      	nop
 800a13e:	370c      	adds	r7, #12
 800a140:	46bd      	mov	sp, r7
 800a142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a146:	4770      	bx	lr

0800a148 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800a148:	b480      	push	{r7}
 800a14a:	b083      	sub	sp, #12
 800a14c:	af00      	add	r7, sp, #0
 800a14e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800a150:	bf00      	nop
 800a152:	370c      	adds	r7, #12
 800a154:	46bd      	mov	sp, r7
 800a156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a15a:	4770      	bx	lr

0800a15c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800a15c:	b580      	push	{r7, lr}
 800a15e:	b084      	sub	sp, #16
 800a160:	af00      	add	r7, sp, #0
 800a162:	60f8      	str	r0, [r7, #12]
 800a164:	60b9      	str	r1, [r7, #8]
 800a166:	4613      	mov	r3, r2
 800a168:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d101      	bne.n	800a174 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800a170:	2302      	movs	r3, #2
 800a172:	e029      	b.n	800a1c8 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	79fa      	ldrb	r2, [r7, #7]
 800a178:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	2200      	movs	r2, #0
 800a180:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	2200      	movs	r2, #0
 800a188:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800a18c:	68f8      	ldr	r0, [r7, #12]
 800a18e:	f000 f81f 	bl	800a1d0 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	2200      	movs	r2, #0
 800a196:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	2200      	movs	r2, #0
 800a19e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	2200      	movs	r2, #0
 800a1a6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	2200      	movs	r2, #0
 800a1ae:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800a1b2:	68bb      	ldr	r3, [r7, #8]
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d003      	beq.n	800a1c0 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	68ba      	ldr	r2, [r7, #8]
 800a1bc:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800a1c0:	68f8      	ldr	r0, [r7, #12]
 800a1c2:	f001 fc37 	bl	800ba34 <USBH_LL_Init>

  return USBH_OK;
 800a1c6:	2300      	movs	r3, #0
}
 800a1c8:	4618      	mov	r0, r3
 800a1ca:	3710      	adds	r7, #16
 800a1cc:	46bd      	mov	sp, r7
 800a1ce:	bd80      	pop	{r7, pc}

0800a1d0 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800a1d0:	b480      	push	{r7}
 800a1d2:	b085      	sub	sp, #20
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800a1d8:	2300      	movs	r3, #0
 800a1da:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800a1dc:	2300      	movs	r3, #0
 800a1de:	60fb      	str	r3, [r7, #12]
 800a1e0:	e009      	b.n	800a1f6 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800a1e2:	687a      	ldr	r2, [r7, #4]
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	33e0      	adds	r3, #224	; 0xe0
 800a1e8:	009b      	lsls	r3, r3, #2
 800a1ea:	4413      	add	r3, r2
 800a1ec:	2200      	movs	r2, #0
 800a1ee:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	3301      	adds	r3, #1
 800a1f4:	60fb      	str	r3, [r7, #12]
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	2b0e      	cmp	r3, #14
 800a1fa:	d9f2      	bls.n	800a1e2 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800a1fc:	2300      	movs	r3, #0
 800a1fe:	60fb      	str	r3, [r7, #12]
 800a200:	e009      	b.n	800a216 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800a202:	687a      	ldr	r2, [r7, #4]
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	4413      	add	r3, r2
 800a208:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a20c:	2200      	movs	r2, #0
 800a20e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	3301      	adds	r3, #1
 800a214:	60fb      	str	r3, [r7, #12]
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a21c:	d3f1      	bcc.n	800a202 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	2200      	movs	r2, #0
 800a222:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	2200      	movs	r2, #0
 800a228:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	2201      	movs	r2, #1
 800a22e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	2200      	movs	r2, #0
 800a234:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	2201      	movs	r2, #1
 800a23c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	2240      	movs	r2, #64	; 0x40
 800a242:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	2200      	movs	r2, #0
 800a248:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	2200      	movs	r2, #0
 800a24e:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	2201      	movs	r2, #1
 800a256:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	2200      	movs	r2, #0
 800a25e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	2200      	movs	r2, #0
 800a266:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800a26a:	2300      	movs	r3, #0
}
 800a26c:	4618      	mov	r0, r3
 800a26e:	3714      	adds	r7, #20
 800a270:	46bd      	mov	sp, r7
 800a272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a276:	4770      	bx	lr

0800a278 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800a278:	b480      	push	{r7}
 800a27a:	b085      	sub	sp, #20
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	6078      	str	r0, [r7, #4]
 800a280:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800a282:	2300      	movs	r3, #0
 800a284:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800a286:	683b      	ldr	r3, [r7, #0]
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d016      	beq.n	800a2ba <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a292:	2b00      	cmp	r3, #0
 800a294:	d10e      	bne.n	800a2b4 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a29c:	1c59      	adds	r1, r3, #1
 800a29e:	687a      	ldr	r2, [r7, #4]
 800a2a0:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800a2a4:	687a      	ldr	r2, [r7, #4]
 800a2a6:	33de      	adds	r3, #222	; 0xde
 800a2a8:	6839      	ldr	r1, [r7, #0]
 800a2aa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800a2ae:	2300      	movs	r3, #0
 800a2b0:	73fb      	strb	r3, [r7, #15]
 800a2b2:	e004      	b.n	800a2be <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800a2b4:	2302      	movs	r3, #2
 800a2b6:	73fb      	strb	r3, [r7, #15]
 800a2b8:	e001      	b.n	800a2be <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800a2ba:	2302      	movs	r3, #2
 800a2bc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a2be:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2c0:	4618      	mov	r0, r3
 800a2c2:	3714      	adds	r7, #20
 800a2c4:	46bd      	mov	sp, r7
 800a2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ca:	4770      	bx	lr

0800a2cc <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800a2cc:	b480      	push	{r7}
 800a2ce:	b085      	sub	sp, #20
 800a2d0:	af00      	add	r7, sp, #0
 800a2d2:	6078      	str	r0, [r7, #4]
 800a2d4:	460b      	mov	r3, r1
 800a2d6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800a2d8:	2300      	movs	r3, #0
 800a2da:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800a2e2:	78fa      	ldrb	r2, [r7, #3]
 800a2e4:	429a      	cmp	r2, r3
 800a2e6:	d204      	bcs.n	800a2f2 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	78fa      	ldrb	r2, [r7, #3]
 800a2ec:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800a2f0:	e001      	b.n	800a2f6 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800a2f2:	2302      	movs	r3, #2
 800a2f4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a2f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2f8:	4618      	mov	r0, r3
 800a2fa:	3714      	adds	r7, #20
 800a2fc:	46bd      	mov	sp, r7
 800a2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a302:	4770      	bx	lr

0800a304 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800a304:	b480      	push	{r7}
 800a306:	b087      	sub	sp, #28
 800a308:	af00      	add	r7, sp, #0
 800a30a:	6078      	str	r0, [r7, #4]
 800a30c:	4608      	mov	r0, r1
 800a30e:	4611      	mov	r1, r2
 800a310:	461a      	mov	r2, r3
 800a312:	4603      	mov	r3, r0
 800a314:	70fb      	strb	r3, [r7, #3]
 800a316:	460b      	mov	r3, r1
 800a318:	70bb      	strb	r3, [r7, #2]
 800a31a:	4613      	mov	r3, r2
 800a31c:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800a31e:	2300      	movs	r3, #0
 800a320:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800a322:	2300      	movs	r3, #0
 800a324:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800a32c:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a32e:	e025      	b.n	800a37c <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800a330:	7dfb      	ldrb	r3, [r7, #23]
 800a332:	221a      	movs	r2, #26
 800a334:	fb02 f303 	mul.w	r3, r2, r3
 800a338:	3308      	adds	r3, #8
 800a33a:	68fa      	ldr	r2, [r7, #12]
 800a33c:	4413      	add	r3, r2
 800a33e:	3302      	adds	r3, #2
 800a340:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800a342:	693b      	ldr	r3, [r7, #16]
 800a344:	795b      	ldrb	r3, [r3, #5]
 800a346:	78fa      	ldrb	r2, [r7, #3]
 800a348:	429a      	cmp	r2, r3
 800a34a:	d002      	beq.n	800a352 <USBH_FindInterface+0x4e>
 800a34c:	78fb      	ldrb	r3, [r7, #3]
 800a34e:	2bff      	cmp	r3, #255	; 0xff
 800a350:	d111      	bne.n	800a376 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a352:	693b      	ldr	r3, [r7, #16]
 800a354:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800a356:	78ba      	ldrb	r2, [r7, #2]
 800a358:	429a      	cmp	r2, r3
 800a35a:	d002      	beq.n	800a362 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a35c:	78bb      	ldrb	r3, [r7, #2]
 800a35e:	2bff      	cmp	r3, #255	; 0xff
 800a360:	d109      	bne.n	800a376 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a362:	693b      	ldr	r3, [r7, #16]
 800a364:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a366:	787a      	ldrb	r2, [r7, #1]
 800a368:	429a      	cmp	r2, r3
 800a36a:	d002      	beq.n	800a372 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a36c:	787b      	ldrb	r3, [r7, #1]
 800a36e:	2bff      	cmp	r3, #255	; 0xff
 800a370:	d101      	bne.n	800a376 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800a372:	7dfb      	ldrb	r3, [r7, #23]
 800a374:	e006      	b.n	800a384 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800a376:	7dfb      	ldrb	r3, [r7, #23]
 800a378:	3301      	adds	r3, #1
 800a37a:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a37c:	7dfb      	ldrb	r3, [r7, #23]
 800a37e:	2b01      	cmp	r3, #1
 800a380:	d9d6      	bls.n	800a330 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800a382:	23ff      	movs	r3, #255	; 0xff
}
 800a384:	4618      	mov	r0, r3
 800a386:	371c      	adds	r7, #28
 800a388:	46bd      	mov	sp, r7
 800a38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a38e:	4770      	bx	lr

0800a390 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800a390:	b580      	push	{r7, lr}
 800a392:	b082      	sub	sp, #8
 800a394:	af00      	add	r7, sp, #0
 800a396:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800a398:	6878      	ldr	r0, [r7, #4]
 800a39a:	f001 fb87 	bl	800baac <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800a39e:	2101      	movs	r1, #1
 800a3a0:	6878      	ldr	r0, [r7, #4]
 800a3a2:	f001 fca0 	bl	800bce6 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800a3a6:	2300      	movs	r3, #0
}
 800a3a8:	4618      	mov	r0, r3
 800a3aa:	3708      	adds	r7, #8
 800a3ac:	46bd      	mov	sp, r7
 800a3ae:	bd80      	pop	{r7, pc}

0800a3b0 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800a3b0:	b580      	push	{r7, lr}
 800a3b2:	b088      	sub	sp, #32
 800a3b4:	af04      	add	r7, sp, #16
 800a3b6:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800a3b8:	2302      	movs	r3, #2
 800a3ba:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800a3bc:	2300      	movs	r3, #0
 800a3be:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800a3c6:	b2db      	uxtb	r3, r3
 800a3c8:	2b01      	cmp	r3, #1
 800a3ca:	d102      	bne.n	800a3d2 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	2203      	movs	r2, #3
 800a3d0:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	781b      	ldrb	r3, [r3, #0]
 800a3d6:	b2db      	uxtb	r3, r3
 800a3d8:	2b0b      	cmp	r3, #11
 800a3da:	f200 81b3 	bhi.w	800a744 <USBH_Process+0x394>
 800a3de:	a201      	add	r2, pc, #4	; (adr r2, 800a3e4 <USBH_Process+0x34>)
 800a3e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3e4:	0800a415 	.word	0x0800a415
 800a3e8:	0800a447 	.word	0x0800a447
 800a3ec:	0800a4af 	.word	0x0800a4af
 800a3f0:	0800a6df 	.word	0x0800a6df
 800a3f4:	0800a745 	.word	0x0800a745
 800a3f8:	0800a553 	.word	0x0800a553
 800a3fc:	0800a685 	.word	0x0800a685
 800a400:	0800a589 	.word	0x0800a589
 800a404:	0800a5a9 	.word	0x0800a5a9
 800a408:	0800a5c9 	.word	0x0800a5c9
 800a40c:	0800a5f7 	.word	0x0800a5f7
 800a410:	0800a6c7 	.word	0x0800a6c7
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800a41a:	b2db      	uxtb	r3, r3
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	f000 8193 	beq.w	800a748 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	2201      	movs	r2, #1
 800a426:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800a428:	20c8      	movs	r0, #200	; 0xc8
 800a42a:	f001 fca3 	bl	800bd74 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800a42e:	6878      	ldr	r0, [r7, #4]
 800a430:	f001 fb99 	bl	800bb66 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	2200      	movs	r2, #0
 800a438:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	2200      	movs	r2, #0
 800a440:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800a444:	e180      	b.n	800a748 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800a44c:	2b01      	cmp	r3, #1
 800a44e:	d107      	bne.n	800a460 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	2200      	movs	r2, #0
 800a454:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	2202      	movs	r2, #2
 800a45c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a45e:	e182      	b.n	800a766 <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800a466:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a46a:	d914      	bls.n	800a496 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800a472:	3301      	adds	r3, #1
 800a474:	b2da      	uxtb	r2, r3
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800a482:	2b03      	cmp	r3, #3
 800a484:	d903      	bls.n	800a48e <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	220d      	movs	r2, #13
 800a48a:	701a      	strb	r2, [r3, #0]
      break;
 800a48c:	e16b      	b.n	800a766 <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	2200      	movs	r2, #0
 800a492:	701a      	strb	r2, [r3, #0]
      break;
 800a494:	e167      	b.n	800a766 <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800a49c:	f103 020a 	add.w	r2, r3, #10
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800a4a6:	200a      	movs	r0, #10
 800a4a8:	f001 fc64 	bl	800bd74 <USBH_Delay>
      break;
 800a4ac:	e15b      	b.n	800a766 <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d005      	beq.n	800a4c4 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a4be:	2104      	movs	r1, #4
 800a4c0:	6878      	ldr	r0, [r7, #4]
 800a4c2:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800a4c4:	2064      	movs	r0, #100	; 0x64
 800a4c6:	f001 fc55 	bl	800bd74 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800a4ca:	6878      	ldr	r0, [r7, #4]
 800a4cc:	f001 fb24 	bl	800bb18 <USBH_LL_GetSpeed>
 800a4d0:	4603      	mov	r3, r0
 800a4d2:	461a      	mov	r2, r3
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	2205      	movs	r2, #5
 800a4de:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800a4e0:	2100      	movs	r1, #0
 800a4e2:	6878      	ldr	r0, [r7, #4]
 800a4e4:	f001 f92f 	bl	800b746 <USBH_AllocPipe>
 800a4e8:	4603      	mov	r3, r0
 800a4ea:	461a      	mov	r2, r3
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800a4f0:	2180      	movs	r1, #128	; 0x80
 800a4f2:	6878      	ldr	r0, [r7, #4]
 800a4f4:	f001 f927 	bl	800b746 <USBH_AllocPipe>
 800a4f8:	4603      	mov	r3, r0
 800a4fa:	461a      	mov	r2, r3
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	7919      	ldrb	r1, [r3, #4]
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800a510:	687a      	ldr	r2, [r7, #4]
 800a512:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800a514:	b292      	uxth	r2, r2
 800a516:	9202      	str	r2, [sp, #8]
 800a518:	2200      	movs	r2, #0
 800a51a:	9201      	str	r2, [sp, #4]
 800a51c:	9300      	str	r3, [sp, #0]
 800a51e:	4603      	mov	r3, r0
 800a520:	2280      	movs	r2, #128	; 0x80
 800a522:	6878      	ldr	r0, [r7, #4]
 800a524:	f001 f8e0 	bl	800b6e8 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	7959      	ldrb	r1, [r3, #5]
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800a538:	687a      	ldr	r2, [r7, #4]
 800a53a:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800a53c:	b292      	uxth	r2, r2
 800a53e:	9202      	str	r2, [sp, #8]
 800a540:	2200      	movs	r2, #0
 800a542:	9201      	str	r2, [sp, #4]
 800a544:	9300      	str	r3, [sp, #0]
 800a546:	4603      	mov	r3, r0
 800a548:	2200      	movs	r2, #0
 800a54a:	6878      	ldr	r0, [r7, #4]
 800a54c:	f001 f8cc 	bl	800b6e8 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a550:	e109      	b.n	800a766 <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800a552:	6878      	ldr	r0, [r7, #4]
 800a554:	f000 f90c 	bl	800a770 <USBH_HandleEnum>
 800a558:	4603      	mov	r3, r0
 800a55a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800a55c:	7bbb      	ldrb	r3, [r7, #14]
 800a55e:	b2db      	uxtb	r3, r3
 800a560:	2b00      	cmp	r3, #0
 800a562:	f040 80f3 	bne.w	800a74c <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	2200      	movs	r2, #0
 800a56a:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800a574:	2b01      	cmp	r3, #1
 800a576:	d103      	bne.n	800a580 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	2208      	movs	r2, #8
 800a57c:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800a57e:	e0e5      	b.n	800a74c <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	2207      	movs	r2, #7
 800a584:	701a      	strb	r2, [r3, #0]
      break;
 800a586:	e0e1      	b.n	800a74c <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a58e:	2b00      	cmp	r3, #0
 800a590:	f000 80de 	beq.w	800a750 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a59a:	2101      	movs	r1, #1
 800a59c:	6878      	ldr	r0, [r7, #4]
 800a59e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	2208      	movs	r2, #8
 800a5a4:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800a5a6:	e0d3      	b.n	800a750 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800a5ae:	b29b      	uxth	r3, r3
 800a5b0:	4619      	mov	r1, r3
 800a5b2:	6878      	ldr	r0, [r7, #4]
 800a5b4:	f000 fc20 	bl	800adf8 <USBH_SetCfg>
 800a5b8:	4603      	mov	r3, r0
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	f040 80ca 	bne.w	800a754 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	2209      	movs	r2, #9
 800a5c4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a5c6:	e0c5      	b.n	800a754 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800a5ce:	f003 0320 	and.w	r3, r3, #32
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d00b      	beq.n	800a5ee <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800a5d6:	2101      	movs	r1, #1
 800a5d8:	6878      	ldr	r0, [r7, #4]
 800a5da:	f000 fc30 	bl	800ae3e <USBH_SetFeature>
 800a5de:	4603      	mov	r3, r0
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	f040 80b9 	bne.w	800a758 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	220a      	movs	r2, #10
 800a5ea:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a5ec:	e0b4      	b.n	800a758 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	220a      	movs	r2, #10
 800a5f2:	701a      	strb	r2, [r3, #0]
      break;
 800a5f4:	e0b0      	b.n	800a758 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	f000 80ad 	beq.w	800a75c <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	2200      	movs	r2, #0
 800a606:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a60a:	2300      	movs	r3, #0
 800a60c:	73fb      	strb	r3, [r7, #15]
 800a60e:	e016      	b.n	800a63e <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800a610:	7bfa      	ldrb	r2, [r7, #15]
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	32de      	adds	r2, #222	; 0xde
 800a616:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a61a:	791a      	ldrb	r2, [r3, #4]
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800a622:	429a      	cmp	r2, r3
 800a624:	d108      	bne.n	800a638 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 800a626:	7bfa      	ldrb	r2, [r7, #15]
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	32de      	adds	r2, #222	; 0xde
 800a62c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800a636:	e005      	b.n	800a644 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a638:	7bfb      	ldrb	r3, [r7, #15]
 800a63a:	3301      	adds	r3, #1
 800a63c:	73fb      	strb	r3, [r7, #15]
 800a63e:	7bfb      	ldrb	r3, [r7, #15]
 800a640:	2b00      	cmp	r3, #0
 800a642:	d0e5      	beq.n	800a610 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d016      	beq.n	800a67c <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a654:	689b      	ldr	r3, [r3, #8]
 800a656:	6878      	ldr	r0, [r7, #4]
 800a658:	4798      	blx	r3
 800a65a:	4603      	mov	r3, r0
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d109      	bne.n	800a674 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	2206      	movs	r2, #6
 800a664:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a66c:	2103      	movs	r1, #3
 800a66e:	6878      	ldr	r0, [r7, #4]
 800a670:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a672:	e073      	b.n	800a75c <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	220d      	movs	r2, #13
 800a678:	701a      	strb	r2, [r3, #0]
      break;
 800a67a:	e06f      	b.n	800a75c <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	220d      	movs	r2, #13
 800a680:	701a      	strb	r2, [r3, #0]
      break;
 800a682:	e06b      	b.n	800a75c <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d017      	beq.n	800a6be <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a694:	691b      	ldr	r3, [r3, #16]
 800a696:	6878      	ldr	r0, [r7, #4]
 800a698:	4798      	blx	r3
 800a69a:	4603      	mov	r3, r0
 800a69c:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800a69e:	7bbb      	ldrb	r3, [r7, #14]
 800a6a0:	b2db      	uxtb	r3, r3
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d103      	bne.n	800a6ae <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	220b      	movs	r2, #11
 800a6aa:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a6ac:	e058      	b.n	800a760 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 800a6ae:	7bbb      	ldrb	r3, [r7, #14]
 800a6b0:	b2db      	uxtb	r3, r3
 800a6b2:	2b02      	cmp	r3, #2
 800a6b4:	d154      	bne.n	800a760 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	220d      	movs	r2, #13
 800a6ba:	701a      	strb	r2, [r3, #0]
      break;
 800a6bc:	e050      	b.n	800a760 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	220d      	movs	r2, #13
 800a6c2:	701a      	strb	r2, [r3, #0]
      break;
 800a6c4:	e04c      	b.n	800a760 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d049      	beq.n	800a764 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a6d6:	695b      	ldr	r3, [r3, #20]
 800a6d8:	6878      	ldr	r0, [r7, #4]
 800a6da:	4798      	blx	r3
      }
      break;
 800a6dc:	e042      	b.n	800a764 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	2200      	movs	r2, #0
 800a6e2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800a6e6:	6878      	ldr	r0, [r7, #4]
 800a6e8:	f7ff fd72 	bl	800a1d0 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d009      	beq.n	800a70a <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a6fc:	68db      	ldr	r3, [r3, #12]
 800a6fe:	6878      	ldr	r0, [r7, #4]
 800a700:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	2200      	movs	r2, #0
 800a706:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a710:	2b00      	cmp	r3, #0
 800a712:	d005      	beq.n	800a720 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a71a:	2105      	movs	r1, #5
 800a71c:	6878      	ldr	r0, [r7, #4]
 800a71e:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800a726:	b2db      	uxtb	r3, r3
 800a728:	2b01      	cmp	r3, #1
 800a72a:	d107      	bne.n	800a73c <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	2200      	movs	r2, #0
 800a730:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800a734:	6878      	ldr	r0, [r7, #4]
 800a736:	f7ff fe2b 	bl	800a390 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a73a:	e014      	b.n	800a766 <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 800a73c:	6878      	ldr	r0, [r7, #4]
 800a73e:	f001 f9b5 	bl	800baac <USBH_LL_Start>
      break;
 800a742:	e010      	b.n	800a766 <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 800a744:	bf00      	nop
 800a746:	e00e      	b.n	800a766 <USBH_Process+0x3b6>
      break;
 800a748:	bf00      	nop
 800a74a:	e00c      	b.n	800a766 <USBH_Process+0x3b6>
      break;
 800a74c:	bf00      	nop
 800a74e:	e00a      	b.n	800a766 <USBH_Process+0x3b6>
    break;
 800a750:	bf00      	nop
 800a752:	e008      	b.n	800a766 <USBH_Process+0x3b6>
      break;
 800a754:	bf00      	nop
 800a756:	e006      	b.n	800a766 <USBH_Process+0x3b6>
      break;
 800a758:	bf00      	nop
 800a75a:	e004      	b.n	800a766 <USBH_Process+0x3b6>
      break;
 800a75c:	bf00      	nop
 800a75e:	e002      	b.n	800a766 <USBH_Process+0x3b6>
      break;
 800a760:	bf00      	nop
 800a762:	e000      	b.n	800a766 <USBH_Process+0x3b6>
      break;
 800a764:	bf00      	nop
  }
  return USBH_OK;
 800a766:	2300      	movs	r3, #0
}
 800a768:	4618      	mov	r0, r3
 800a76a:	3710      	adds	r7, #16
 800a76c:	46bd      	mov	sp, r7
 800a76e:	bd80      	pop	{r7, pc}

0800a770 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800a770:	b580      	push	{r7, lr}
 800a772:	b088      	sub	sp, #32
 800a774:	af04      	add	r7, sp, #16
 800a776:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800a778:	2301      	movs	r3, #1
 800a77a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800a77c:	2301      	movs	r3, #1
 800a77e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	785b      	ldrb	r3, [r3, #1]
 800a784:	2b07      	cmp	r3, #7
 800a786:	f200 81c1 	bhi.w	800ab0c <USBH_HandleEnum+0x39c>
 800a78a:	a201      	add	r2, pc, #4	; (adr r2, 800a790 <USBH_HandleEnum+0x20>)
 800a78c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a790:	0800a7b1 	.word	0x0800a7b1
 800a794:	0800a86f 	.word	0x0800a86f
 800a798:	0800a8d9 	.word	0x0800a8d9
 800a79c:	0800a967 	.word	0x0800a967
 800a7a0:	0800a9d1 	.word	0x0800a9d1
 800a7a4:	0800aa41 	.word	0x0800aa41
 800a7a8:	0800aa87 	.word	0x0800aa87
 800a7ac:	0800aacd 	.word	0x0800aacd
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800a7b0:	2108      	movs	r1, #8
 800a7b2:	6878      	ldr	r0, [r7, #4]
 800a7b4:	f000 fa50 	bl	800ac58 <USBH_Get_DevDesc>
 800a7b8:	4603      	mov	r3, r0
 800a7ba:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a7bc:	7bbb      	ldrb	r3, [r7, #14]
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d130      	bne.n	800a824 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	2201      	movs	r2, #1
 800a7d0:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	7919      	ldrb	r1, [r3, #4]
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800a7e2:	687a      	ldr	r2, [r7, #4]
 800a7e4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800a7e6:	b292      	uxth	r2, r2
 800a7e8:	9202      	str	r2, [sp, #8]
 800a7ea:	2200      	movs	r2, #0
 800a7ec:	9201      	str	r2, [sp, #4]
 800a7ee:	9300      	str	r3, [sp, #0]
 800a7f0:	4603      	mov	r3, r0
 800a7f2:	2280      	movs	r2, #128	; 0x80
 800a7f4:	6878      	ldr	r0, [r7, #4]
 800a7f6:	f000 ff77 	bl	800b6e8 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	7959      	ldrb	r1, [r3, #5]
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800a80a:	687a      	ldr	r2, [r7, #4]
 800a80c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a80e:	b292      	uxth	r2, r2
 800a810:	9202      	str	r2, [sp, #8]
 800a812:	2200      	movs	r2, #0
 800a814:	9201      	str	r2, [sp, #4]
 800a816:	9300      	str	r3, [sp, #0]
 800a818:	4603      	mov	r3, r0
 800a81a:	2200      	movs	r2, #0
 800a81c:	6878      	ldr	r0, [r7, #4]
 800a81e:	f000 ff63 	bl	800b6e8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800a822:	e175      	b.n	800ab10 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a824:	7bbb      	ldrb	r3, [r7, #14]
 800a826:	2b03      	cmp	r3, #3
 800a828:	f040 8172 	bne.w	800ab10 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a832:	3301      	adds	r3, #1
 800a834:	b2da      	uxtb	r2, r3
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a842:	2b03      	cmp	r3, #3
 800a844:	d903      	bls.n	800a84e <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	220d      	movs	r2, #13
 800a84a:	701a      	strb	r2, [r3, #0]
      break;
 800a84c:	e160      	b.n	800ab10 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	795b      	ldrb	r3, [r3, #5]
 800a852:	4619      	mov	r1, r3
 800a854:	6878      	ldr	r0, [r7, #4]
 800a856:	f000 ff97 	bl	800b788 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	791b      	ldrb	r3, [r3, #4]
 800a85e:	4619      	mov	r1, r3
 800a860:	6878      	ldr	r0, [r7, #4]
 800a862:	f000 ff91 	bl	800b788 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	2200      	movs	r2, #0
 800a86a:	701a      	strb	r2, [r3, #0]
      break;
 800a86c:	e150      	b.n	800ab10 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800a86e:	2112      	movs	r1, #18
 800a870:	6878      	ldr	r0, [r7, #4]
 800a872:	f000 f9f1 	bl	800ac58 <USBH_Get_DevDesc>
 800a876:	4603      	mov	r3, r0
 800a878:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a87a:	7bbb      	ldrb	r3, [r7, #14]
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d103      	bne.n	800a888 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	2202      	movs	r2, #2
 800a884:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a886:	e145      	b.n	800ab14 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a888:	7bbb      	ldrb	r3, [r7, #14]
 800a88a:	2b03      	cmp	r3, #3
 800a88c:	f040 8142 	bne.w	800ab14 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a896:	3301      	adds	r3, #1
 800a898:	b2da      	uxtb	r2, r3
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a8a6:	2b03      	cmp	r3, #3
 800a8a8:	d903      	bls.n	800a8b2 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	220d      	movs	r2, #13
 800a8ae:	701a      	strb	r2, [r3, #0]
      break;
 800a8b0:	e130      	b.n	800ab14 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	795b      	ldrb	r3, [r3, #5]
 800a8b6:	4619      	mov	r1, r3
 800a8b8:	6878      	ldr	r0, [r7, #4]
 800a8ba:	f000 ff65 	bl	800b788 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	791b      	ldrb	r3, [r3, #4]
 800a8c2:	4619      	mov	r1, r3
 800a8c4:	6878      	ldr	r0, [r7, #4]
 800a8c6:	f000 ff5f 	bl	800b788 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	2200      	movs	r2, #0
 800a8ce:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	2200      	movs	r2, #0
 800a8d4:	701a      	strb	r2, [r3, #0]
      break;
 800a8d6:	e11d      	b.n	800ab14 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800a8d8:	2101      	movs	r1, #1
 800a8da:	6878      	ldr	r0, [r7, #4]
 800a8dc:	f000 fa68 	bl	800adb0 <USBH_SetAddress>
 800a8e0:	4603      	mov	r3, r0
 800a8e2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a8e4:	7bbb      	ldrb	r3, [r7, #14]
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d132      	bne.n	800a950 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800a8ea:	2002      	movs	r0, #2
 800a8ec:	f001 fa42 	bl	800bd74 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	2201      	movs	r2, #1
 800a8f4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	2203      	movs	r2, #3
 800a8fc:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	7919      	ldrb	r1, [r3, #4]
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800a90e:	687a      	ldr	r2, [r7, #4]
 800a910:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800a912:	b292      	uxth	r2, r2
 800a914:	9202      	str	r2, [sp, #8]
 800a916:	2200      	movs	r2, #0
 800a918:	9201      	str	r2, [sp, #4]
 800a91a:	9300      	str	r3, [sp, #0]
 800a91c:	4603      	mov	r3, r0
 800a91e:	2280      	movs	r2, #128	; 0x80
 800a920:	6878      	ldr	r0, [r7, #4]
 800a922:	f000 fee1 	bl	800b6e8 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	7959      	ldrb	r1, [r3, #5]
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800a936:	687a      	ldr	r2, [r7, #4]
 800a938:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a93a:	b292      	uxth	r2, r2
 800a93c:	9202      	str	r2, [sp, #8]
 800a93e:	2200      	movs	r2, #0
 800a940:	9201      	str	r2, [sp, #4]
 800a942:	9300      	str	r3, [sp, #0]
 800a944:	4603      	mov	r3, r0
 800a946:	2200      	movs	r2, #0
 800a948:	6878      	ldr	r0, [r7, #4]
 800a94a:	f000 fecd 	bl	800b6e8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800a94e:	e0e3      	b.n	800ab18 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a950:	7bbb      	ldrb	r3, [r7, #14]
 800a952:	2b03      	cmp	r3, #3
 800a954:	f040 80e0 	bne.w	800ab18 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	220d      	movs	r2, #13
 800a95c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	2200      	movs	r2, #0
 800a962:	705a      	strb	r2, [r3, #1]
      break;
 800a964:	e0d8      	b.n	800ab18 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800a966:	2109      	movs	r1, #9
 800a968:	6878      	ldr	r0, [r7, #4]
 800a96a:	f000 f99d 	bl	800aca8 <USBH_Get_CfgDesc>
 800a96e:	4603      	mov	r3, r0
 800a970:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a972:	7bbb      	ldrb	r3, [r7, #14]
 800a974:	2b00      	cmp	r3, #0
 800a976:	d103      	bne.n	800a980 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	2204      	movs	r2, #4
 800a97c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a97e:	e0cd      	b.n	800ab1c <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a980:	7bbb      	ldrb	r3, [r7, #14]
 800a982:	2b03      	cmp	r3, #3
 800a984:	f040 80ca 	bne.w	800ab1c <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a98e:	3301      	adds	r3, #1
 800a990:	b2da      	uxtb	r2, r3
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a99e:	2b03      	cmp	r3, #3
 800a9a0:	d903      	bls.n	800a9aa <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	220d      	movs	r2, #13
 800a9a6:	701a      	strb	r2, [r3, #0]
      break;
 800a9a8:	e0b8      	b.n	800ab1c <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	795b      	ldrb	r3, [r3, #5]
 800a9ae:	4619      	mov	r1, r3
 800a9b0:	6878      	ldr	r0, [r7, #4]
 800a9b2:	f000 fee9 	bl	800b788 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	791b      	ldrb	r3, [r3, #4]
 800a9ba:	4619      	mov	r1, r3
 800a9bc:	6878      	ldr	r0, [r7, #4]
 800a9be:	f000 fee3 	bl	800b788 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	2200      	movs	r2, #0
 800a9c6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	2200      	movs	r2, #0
 800a9cc:	701a      	strb	r2, [r3, #0]
      break;
 800a9ce:	e0a5      	b.n	800ab1c <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800a9d6:	4619      	mov	r1, r3
 800a9d8:	6878      	ldr	r0, [r7, #4]
 800a9da:	f000 f965 	bl	800aca8 <USBH_Get_CfgDesc>
 800a9de:	4603      	mov	r3, r0
 800a9e0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a9e2:	7bbb      	ldrb	r3, [r7, #14]
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d103      	bne.n	800a9f0 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	2205      	movs	r2, #5
 800a9ec:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a9ee:	e097      	b.n	800ab20 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a9f0:	7bbb      	ldrb	r3, [r7, #14]
 800a9f2:	2b03      	cmp	r3, #3
 800a9f4:	f040 8094 	bne.w	800ab20 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a9fe:	3301      	adds	r3, #1
 800aa00:	b2da      	uxtb	r2, r3
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800aa0e:	2b03      	cmp	r3, #3
 800aa10:	d903      	bls.n	800aa1a <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	220d      	movs	r2, #13
 800aa16:	701a      	strb	r2, [r3, #0]
      break;
 800aa18:	e082      	b.n	800ab20 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	795b      	ldrb	r3, [r3, #5]
 800aa1e:	4619      	mov	r1, r3
 800aa20:	6878      	ldr	r0, [r7, #4]
 800aa22:	f000 feb1 	bl	800b788 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	791b      	ldrb	r3, [r3, #4]
 800aa2a:	4619      	mov	r1, r3
 800aa2c:	6878      	ldr	r0, [r7, #4]
 800aa2e:	f000 feab 	bl	800b788 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	2200      	movs	r2, #0
 800aa36:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	2200      	movs	r2, #0
 800aa3c:	701a      	strb	r2, [r3, #0]
      break;
 800aa3e:	e06f      	b.n	800ab20 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d019      	beq.n	800aa7e <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800aa56:	23ff      	movs	r3, #255	; 0xff
 800aa58:	6878      	ldr	r0, [r7, #4]
 800aa5a:	f000 f949 	bl	800acf0 <USBH_Get_StringDesc>
 800aa5e:	4603      	mov	r3, r0
 800aa60:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800aa62:	7bbb      	ldrb	r3, [r7, #14]
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d103      	bne.n	800aa70 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	2206      	movs	r2, #6
 800aa6c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800aa6e:	e059      	b.n	800ab24 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800aa70:	7bbb      	ldrb	r3, [r7, #14]
 800aa72:	2b03      	cmp	r3, #3
 800aa74:	d156      	bne.n	800ab24 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	2206      	movs	r2, #6
 800aa7a:	705a      	strb	r2, [r3, #1]
      break;
 800aa7c:	e052      	b.n	800ab24 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	2206      	movs	r2, #6
 800aa82:	705a      	strb	r2, [r3, #1]
      break;
 800aa84:	e04e      	b.n	800ab24 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d019      	beq.n	800aac4 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800aa9c:	23ff      	movs	r3, #255	; 0xff
 800aa9e:	6878      	ldr	r0, [r7, #4]
 800aaa0:	f000 f926 	bl	800acf0 <USBH_Get_StringDesc>
 800aaa4:	4603      	mov	r3, r0
 800aaa6:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800aaa8:	7bbb      	ldrb	r3, [r7, #14]
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d103      	bne.n	800aab6 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	2207      	movs	r2, #7
 800aab2:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800aab4:	e038      	b.n	800ab28 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800aab6:	7bbb      	ldrb	r3, [r7, #14]
 800aab8:	2b03      	cmp	r3, #3
 800aaba:	d135      	bne.n	800ab28 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	2207      	movs	r2, #7
 800aac0:	705a      	strb	r2, [r3, #1]
      break;
 800aac2:	e031      	b.n	800ab28 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	2207      	movs	r2, #7
 800aac8:	705a      	strb	r2, [r3, #1]
      break;
 800aaca:	e02d      	b.n	800ab28 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d017      	beq.n	800ab06 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800aae2:	23ff      	movs	r3, #255	; 0xff
 800aae4:	6878      	ldr	r0, [r7, #4]
 800aae6:	f000 f903 	bl	800acf0 <USBH_Get_StringDesc>
 800aaea:	4603      	mov	r3, r0
 800aaec:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800aaee:	7bbb      	ldrb	r3, [r7, #14]
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d102      	bne.n	800aafa <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800aaf4:	2300      	movs	r3, #0
 800aaf6:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800aaf8:	e018      	b.n	800ab2c <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800aafa:	7bbb      	ldrb	r3, [r7, #14]
 800aafc:	2b03      	cmp	r3, #3
 800aafe:	d115      	bne.n	800ab2c <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800ab00:	2300      	movs	r3, #0
 800ab02:	73fb      	strb	r3, [r7, #15]
      break;
 800ab04:	e012      	b.n	800ab2c <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800ab06:	2300      	movs	r3, #0
 800ab08:	73fb      	strb	r3, [r7, #15]
      break;
 800ab0a:	e00f      	b.n	800ab2c <USBH_HandleEnum+0x3bc>

    default:
      break;
 800ab0c:	bf00      	nop
 800ab0e:	e00e      	b.n	800ab2e <USBH_HandleEnum+0x3be>
      break;
 800ab10:	bf00      	nop
 800ab12:	e00c      	b.n	800ab2e <USBH_HandleEnum+0x3be>
      break;
 800ab14:	bf00      	nop
 800ab16:	e00a      	b.n	800ab2e <USBH_HandleEnum+0x3be>
      break;
 800ab18:	bf00      	nop
 800ab1a:	e008      	b.n	800ab2e <USBH_HandleEnum+0x3be>
      break;
 800ab1c:	bf00      	nop
 800ab1e:	e006      	b.n	800ab2e <USBH_HandleEnum+0x3be>
      break;
 800ab20:	bf00      	nop
 800ab22:	e004      	b.n	800ab2e <USBH_HandleEnum+0x3be>
      break;
 800ab24:	bf00      	nop
 800ab26:	e002      	b.n	800ab2e <USBH_HandleEnum+0x3be>
      break;
 800ab28:	bf00      	nop
 800ab2a:	e000      	b.n	800ab2e <USBH_HandleEnum+0x3be>
      break;
 800ab2c:	bf00      	nop
  }
  return Status;
 800ab2e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab30:	4618      	mov	r0, r3
 800ab32:	3710      	adds	r7, #16
 800ab34:	46bd      	mov	sp, r7
 800ab36:	bd80      	pop	{r7, pc}

0800ab38 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800ab38:	b480      	push	{r7}
 800ab3a:	b083      	sub	sp, #12
 800ab3c:	af00      	add	r7, sp, #0
 800ab3e:	6078      	str	r0, [r7, #4]
 800ab40:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	683a      	ldr	r2, [r7, #0]
 800ab46:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800ab4a:	bf00      	nop
 800ab4c:	370c      	adds	r7, #12
 800ab4e:	46bd      	mov	sp, r7
 800ab50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab54:	4770      	bx	lr

0800ab56 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800ab56:	b580      	push	{r7, lr}
 800ab58:	b082      	sub	sp, #8
 800ab5a:	af00      	add	r7, sp, #0
 800ab5c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ab64:	1c5a      	adds	r2, r3, #1
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800ab6c:	6878      	ldr	r0, [r7, #4]
 800ab6e:	f000 f804 	bl	800ab7a <USBH_HandleSof>
}
 800ab72:	bf00      	nop
 800ab74:	3708      	adds	r7, #8
 800ab76:	46bd      	mov	sp, r7
 800ab78:	bd80      	pop	{r7, pc}

0800ab7a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800ab7a:	b580      	push	{r7, lr}
 800ab7c:	b082      	sub	sp, #8
 800ab7e:	af00      	add	r7, sp, #0
 800ab80:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	781b      	ldrb	r3, [r3, #0]
 800ab86:	b2db      	uxtb	r3, r3
 800ab88:	2b0b      	cmp	r3, #11
 800ab8a:	d10a      	bne.n	800aba2 <USBH_HandleSof+0x28>
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d005      	beq.n	800aba2 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ab9c:	699b      	ldr	r3, [r3, #24]
 800ab9e:	6878      	ldr	r0, [r7, #4]
 800aba0:	4798      	blx	r3
  }
}
 800aba2:	bf00      	nop
 800aba4:	3708      	adds	r7, #8
 800aba6:	46bd      	mov	sp, r7
 800aba8:	bd80      	pop	{r7, pc}

0800abaa <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800abaa:	b480      	push	{r7}
 800abac:	b083      	sub	sp, #12
 800abae:	af00      	add	r7, sp, #0
 800abb0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	2201      	movs	r2, #1
 800abb6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800abba:	bf00      	nop
}
 800abbc:	370c      	adds	r7, #12
 800abbe:	46bd      	mov	sp, r7
 800abc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc4:	4770      	bx	lr

0800abc6 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800abc6:	b480      	push	{r7}
 800abc8:	b083      	sub	sp, #12
 800abca:	af00      	add	r7, sp, #0
 800abcc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	2200      	movs	r2, #0
 800abd2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800abd6:	bf00      	nop
}
 800abd8:	370c      	adds	r7, #12
 800abda:	46bd      	mov	sp, r7
 800abdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe0:	4770      	bx	lr

0800abe2 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800abe2:	b480      	push	{r7}
 800abe4:	b083      	sub	sp, #12
 800abe6:	af00      	add	r7, sp, #0
 800abe8:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	2201      	movs	r2, #1
 800abee:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	2200      	movs	r2, #0
 800abf6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	2200      	movs	r2, #0
 800abfe:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800ac02:	2300      	movs	r3, #0
}
 800ac04:	4618      	mov	r0, r3
 800ac06:	370c      	adds	r7, #12
 800ac08:	46bd      	mov	sp, r7
 800ac0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac0e:	4770      	bx	lr

0800ac10 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800ac10:	b580      	push	{r7, lr}
 800ac12:	b082      	sub	sp, #8
 800ac14:	af00      	add	r7, sp, #0
 800ac16:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	2201      	movs	r2, #1
 800ac1c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	2200      	movs	r2, #0
 800ac24:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	2200      	movs	r2, #0
 800ac2c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800ac30:	6878      	ldr	r0, [r7, #4]
 800ac32:	f000 ff56 	bl	800bae2 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	791b      	ldrb	r3, [r3, #4]
 800ac3a:	4619      	mov	r1, r3
 800ac3c:	6878      	ldr	r0, [r7, #4]
 800ac3e:	f000 fda3 	bl	800b788 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	795b      	ldrb	r3, [r3, #5]
 800ac46:	4619      	mov	r1, r3
 800ac48:	6878      	ldr	r0, [r7, #4]
 800ac4a:	f000 fd9d 	bl	800b788 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800ac4e:	2300      	movs	r3, #0
}
 800ac50:	4618      	mov	r0, r3
 800ac52:	3708      	adds	r7, #8
 800ac54:	46bd      	mov	sp, r7
 800ac56:	bd80      	pop	{r7, pc}

0800ac58 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800ac58:	b580      	push	{r7, lr}
 800ac5a:	b086      	sub	sp, #24
 800ac5c:	af02      	add	r7, sp, #8
 800ac5e:	6078      	str	r0, [r7, #4]
 800ac60:	460b      	mov	r3, r1
 800ac62:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800ac6a:	78fb      	ldrb	r3, [r7, #3]
 800ac6c:	b29b      	uxth	r3, r3
 800ac6e:	9300      	str	r3, [sp, #0]
 800ac70:	4613      	mov	r3, r2
 800ac72:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ac76:	2100      	movs	r1, #0
 800ac78:	6878      	ldr	r0, [r7, #4]
 800ac7a:	f000 f864 	bl	800ad46 <USBH_GetDescriptor>
 800ac7e:	4603      	mov	r3, r0
 800ac80:	73fb      	strb	r3, [r7, #15]
 800ac82:	7bfb      	ldrb	r3, [r7, #15]
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d10a      	bne.n	800ac9e <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	f203 3026 	addw	r0, r3, #806	; 0x326
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800ac94:	78fa      	ldrb	r2, [r7, #3]
 800ac96:	b292      	uxth	r2, r2
 800ac98:	4619      	mov	r1, r3
 800ac9a:	f000 f918 	bl	800aece <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800ac9e:	7bfb      	ldrb	r3, [r7, #15]
}
 800aca0:	4618      	mov	r0, r3
 800aca2:	3710      	adds	r7, #16
 800aca4:	46bd      	mov	sp, r7
 800aca6:	bd80      	pop	{r7, pc}

0800aca8 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800aca8:	b580      	push	{r7, lr}
 800acaa:	b086      	sub	sp, #24
 800acac:	af02      	add	r7, sp, #8
 800acae:	6078      	str	r0, [r7, #4]
 800acb0:	460b      	mov	r3, r1
 800acb2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	331c      	adds	r3, #28
 800acb8:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800acba:	887b      	ldrh	r3, [r7, #2]
 800acbc:	9300      	str	r3, [sp, #0]
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800acc4:	2100      	movs	r1, #0
 800acc6:	6878      	ldr	r0, [r7, #4]
 800acc8:	f000 f83d 	bl	800ad46 <USBH_GetDescriptor>
 800accc:	4603      	mov	r3, r0
 800acce:	72fb      	strb	r3, [r7, #11]
 800acd0:	7afb      	ldrb	r3, [r7, #11]
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d107      	bne.n	800ace6 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800acdc:	887a      	ldrh	r2, [r7, #2]
 800acde:	68f9      	ldr	r1, [r7, #12]
 800ace0:	4618      	mov	r0, r3
 800ace2:	f000 f964 	bl	800afae <USBH_ParseCfgDesc>
  }

  return status;
 800ace6:	7afb      	ldrb	r3, [r7, #11]
}
 800ace8:	4618      	mov	r0, r3
 800acea:	3710      	adds	r7, #16
 800acec:	46bd      	mov	sp, r7
 800acee:	bd80      	pop	{r7, pc}

0800acf0 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800acf0:	b580      	push	{r7, lr}
 800acf2:	b088      	sub	sp, #32
 800acf4:	af02      	add	r7, sp, #8
 800acf6:	60f8      	str	r0, [r7, #12]
 800acf8:	607a      	str	r2, [r7, #4]
 800acfa:	461a      	mov	r2, r3
 800acfc:	460b      	mov	r3, r1
 800acfe:	72fb      	strb	r3, [r7, #11]
 800ad00:	4613      	mov	r3, r2
 800ad02:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800ad04:	7afb      	ldrb	r3, [r7, #11]
 800ad06:	b29b      	uxth	r3, r3
 800ad08:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800ad0c:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800ad14:	893b      	ldrh	r3, [r7, #8]
 800ad16:	9300      	str	r3, [sp, #0]
 800ad18:	460b      	mov	r3, r1
 800ad1a:	2100      	movs	r1, #0
 800ad1c:	68f8      	ldr	r0, [r7, #12]
 800ad1e:	f000 f812 	bl	800ad46 <USBH_GetDescriptor>
 800ad22:	4603      	mov	r3, r0
 800ad24:	75fb      	strb	r3, [r7, #23]
 800ad26:	7dfb      	ldrb	r3, [r7, #23]
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d107      	bne.n	800ad3c <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800ad32:	893a      	ldrh	r2, [r7, #8]
 800ad34:	6879      	ldr	r1, [r7, #4]
 800ad36:	4618      	mov	r0, r3
 800ad38:	f000 fa37 	bl	800b1aa <USBH_ParseStringDesc>
  }

  return status;
 800ad3c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad3e:	4618      	mov	r0, r3
 800ad40:	3718      	adds	r7, #24
 800ad42:	46bd      	mov	sp, r7
 800ad44:	bd80      	pop	{r7, pc}

0800ad46 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800ad46:	b580      	push	{r7, lr}
 800ad48:	b084      	sub	sp, #16
 800ad4a:	af00      	add	r7, sp, #0
 800ad4c:	60f8      	str	r0, [r7, #12]
 800ad4e:	607b      	str	r3, [r7, #4]
 800ad50:	460b      	mov	r3, r1
 800ad52:	72fb      	strb	r3, [r7, #11]
 800ad54:	4613      	mov	r3, r2
 800ad56:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	789b      	ldrb	r3, [r3, #2]
 800ad5c:	2b01      	cmp	r3, #1
 800ad5e:	d11c      	bne.n	800ad9a <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800ad60:	7afb      	ldrb	r3, [r7, #11]
 800ad62:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ad66:	b2da      	uxtb	r2, r3
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	2206      	movs	r2, #6
 800ad70:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	893a      	ldrh	r2, [r7, #8]
 800ad76:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800ad78:	893b      	ldrh	r3, [r7, #8]
 800ad7a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800ad7e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ad82:	d104      	bne.n	800ad8e <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	f240 4209 	movw	r2, #1033	; 0x409
 800ad8a:	829a      	strh	r2, [r3, #20]
 800ad8c:	e002      	b.n	800ad94 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	2200      	movs	r2, #0
 800ad92:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	8b3a      	ldrh	r2, [r7, #24]
 800ad98:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800ad9a:	8b3b      	ldrh	r3, [r7, #24]
 800ad9c:	461a      	mov	r2, r3
 800ad9e:	6879      	ldr	r1, [r7, #4]
 800ada0:	68f8      	ldr	r0, [r7, #12]
 800ada2:	f000 fa50 	bl	800b246 <USBH_CtlReq>
 800ada6:	4603      	mov	r3, r0
}
 800ada8:	4618      	mov	r0, r3
 800adaa:	3710      	adds	r7, #16
 800adac:	46bd      	mov	sp, r7
 800adae:	bd80      	pop	{r7, pc}

0800adb0 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800adb0:	b580      	push	{r7, lr}
 800adb2:	b082      	sub	sp, #8
 800adb4:	af00      	add	r7, sp, #0
 800adb6:	6078      	str	r0, [r7, #4]
 800adb8:	460b      	mov	r3, r1
 800adba:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	789b      	ldrb	r3, [r3, #2]
 800adc0:	2b01      	cmp	r3, #1
 800adc2:	d10f      	bne.n	800ade4 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	2200      	movs	r2, #0
 800adc8:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	2205      	movs	r2, #5
 800adce:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800add0:	78fb      	ldrb	r3, [r7, #3]
 800add2:	b29a      	uxth	r2, r3
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	2200      	movs	r2, #0
 800addc:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	2200      	movs	r2, #0
 800ade2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800ade4:	2200      	movs	r2, #0
 800ade6:	2100      	movs	r1, #0
 800ade8:	6878      	ldr	r0, [r7, #4]
 800adea:	f000 fa2c 	bl	800b246 <USBH_CtlReq>
 800adee:	4603      	mov	r3, r0
}
 800adf0:	4618      	mov	r0, r3
 800adf2:	3708      	adds	r7, #8
 800adf4:	46bd      	mov	sp, r7
 800adf6:	bd80      	pop	{r7, pc}

0800adf8 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800adf8:	b580      	push	{r7, lr}
 800adfa:	b082      	sub	sp, #8
 800adfc:	af00      	add	r7, sp, #0
 800adfe:	6078      	str	r0, [r7, #4]
 800ae00:	460b      	mov	r3, r1
 800ae02:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	789b      	ldrb	r3, [r3, #2]
 800ae08:	2b01      	cmp	r3, #1
 800ae0a:	d10e      	bne.n	800ae2a <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	2200      	movs	r2, #0
 800ae10:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	2209      	movs	r2, #9
 800ae16:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	887a      	ldrh	r2, [r7, #2]
 800ae1c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	2200      	movs	r2, #0
 800ae22:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	2200      	movs	r2, #0
 800ae28:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800ae2a:	2200      	movs	r2, #0
 800ae2c:	2100      	movs	r1, #0
 800ae2e:	6878      	ldr	r0, [r7, #4]
 800ae30:	f000 fa09 	bl	800b246 <USBH_CtlReq>
 800ae34:	4603      	mov	r3, r0
}
 800ae36:	4618      	mov	r0, r3
 800ae38:	3708      	adds	r7, #8
 800ae3a:	46bd      	mov	sp, r7
 800ae3c:	bd80      	pop	{r7, pc}

0800ae3e <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800ae3e:	b580      	push	{r7, lr}
 800ae40:	b082      	sub	sp, #8
 800ae42:	af00      	add	r7, sp, #0
 800ae44:	6078      	str	r0, [r7, #4]
 800ae46:	460b      	mov	r3, r1
 800ae48:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	789b      	ldrb	r3, [r3, #2]
 800ae4e:	2b01      	cmp	r3, #1
 800ae50:	d10f      	bne.n	800ae72 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	2200      	movs	r2, #0
 800ae56:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	2203      	movs	r2, #3
 800ae5c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800ae5e:	78fb      	ldrb	r3, [r7, #3]
 800ae60:	b29a      	uxth	r2, r3
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	2200      	movs	r2, #0
 800ae6a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	2200      	movs	r2, #0
 800ae70:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800ae72:	2200      	movs	r2, #0
 800ae74:	2100      	movs	r1, #0
 800ae76:	6878      	ldr	r0, [r7, #4]
 800ae78:	f000 f9e5 	bl	800b246 <USBH_CtlReq>
 800ae7c:	4603      	mov	r3, r0
}
 800ae7e:	4618      	mov	r0, r3
 800ae80:	3708      	adds	r7, #8
 800ae82:	46bd      	mov	sp, r7
 800ae84:	bd80      	pop	{r7, pc}

0800ae86 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800ae86:	b580      	push	{r7, lr}
 800ae88:	b082      	sub	sp, #8
 800ae8a:	af00      	add	r7, sp, #0
 800ae8c:	6078      	str	r0, [r7, #4]
 800ae8e:	460b      	mov	r3, r1
 800ae90:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	789b      	ldrb	r3, [r3, #2]
 800ae96:	2b01      	cmp	r3, #1
 800ae98:	d10f      	bne.n	800aeba <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	2202      	movs	r2, #2
 800ae9e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	2201      	movs	r2, #1
 800aea4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	2200      	movs	r2, #0
 800aeaa:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800aeac:	78fb      	ldrb	r3, [r7, #3]
 800aeae:	b29a      	uxth	r2, r3
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	2200      	movs	r2, #0
 800aeb8:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800aeba:	2200      	movs	r2, #0
 800aebc:	2100      	movs	r1, #0
 800aebe:	6878      	ldr	r0, [r7, #4]
 800aec0:	f000 f9c1 	bl	800b246 <USBH_CtlReq>
 800aec4:	4603      	mov	r3, r0
}
 800aec6:	4618      	mov	r0, r3
 800aec8:	3708      	adds	r7, #8
 800aeca:	46bd      	mov	sp, r7
 800aecc:	bd80      	pop	{r7, pc}

0800aece <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800aece:	b480      	push	{r7}
 800aed0:	b085      	sub	sp, #20
 800aed2:	af00      	add	r7, sp, #0
 800aed4:	60f8      	str	r0, [r7, #12]
 800aed6:	60b9      	str	r1, [r7, #8]
 800aed8:	4613      	mov	r3, r2
 800aeda:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800aedc:	68bb      	ldr	r3, [r7, #8]
 800aede:	781a      	ldrb	r2, [r3, #0]
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800aee4:	68bb      	ldr	r3, [r7, #8]
 800aee6:	785a      	ldrb	r2, [r3, #1]
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800aeec:	68bb      	ldr	r3, [r7, #8]
 800aeee:	3302      	adds	r3, #2
 800aef0:	781b      	ldrb	r3, [r3, #0]
 800aef2:	b29a      	uxth	r2, r3
 800aef4:	68bb      	ldr	r3, [r7, #8]
 800aef6:	3303      	adds	r3, #3
 800aef8:	781b      	ldrb	r3, [r3, #0]
 800aefa:	b29b      	uxth	r3, r3
 800aefc:	021b      	lsls	r3, r3, #8
 800aefe:	b29b      	uxth	r3, r3
 800af00:	4313      	orrs	r3, r2
 800af02:	b29a      	uxth	r2, r3
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800af08:	68bb      	ldr	r3, [r7, #8]
 800af0a:	791a      	ldrb	r2, [r3, #4]
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800af10:	68bb      	ldr	r3, [r7, #8]
 800af12:	795a      	ldrb	r2, [r3, #5]
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800af18:	68bb      	ldr	r3, [r7, #8]
 800af1a:	799a      	ldrb	r2, [r3, #6]
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800af20:	68bb      	ldr	r3, [r7, #8]
 800af22:	79da      	ldrb	r2, [r3, #7]
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800af28:	88fb      	ldrh	r3, [r7, #6]
 800af2a:	2b08      	cmp	r3, #8
 800af2c:	d939      	bls.n	800afa2 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800af2e:	68bb      	ldr	r3, [r7, #8]
 800af30:	3308      	adds	r3, #8
 800af32:	781b      	ldrb	r3, [r3, #0]
 800af34:	b29a      	uxth	r2, r3
 800af36:	68bb      	ldr	r3, [r7, #8]
 800af38:	3309      	adds	r3, #9
 800af3a:	781b      	ldrb	r3, [r3, #0]
 800af3c:	b29b      	uxth	r3, r3
 800af3e:	021b      	lsls	r3, r3, #8
 800af40:	b29b      	uxth	r3, r3
 800af42:	4313      	orrs	r3, r2
 800af44:	b29a      	uxth	r2, r3
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800af4a:	68bb      	ldr	r3, [r7, #8]
 800af4c:	330a      	adds	r3, #10
 800af4e:	781b      	ldrb	r3, [r3, #0]
 800af50:	b29a      	uxth	r2, r3
 800af52:	68bb      	ldr	r3, [r7, #8]
 800af54:	330b      	adds	r3, #11
 800af56:	781b      	ldrb	r3, [r3, #0]
 800af58:	b29b      	uxth	r3, r3
 800af5a:	021b      	lsls	r3, r3, #8
 800af5c:	b29b      	uxth	r3, r3
 800af5e:	4313      	orrs	r3, r2
 800af60:	b29a      	uxth	r2, r3
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800af66:	68bb      	ldr	r3, [r7, #8]
 800af68:	330c      	adds	r3, #12
 800af6a:	781b      	ldrb	r3, [r3, #0]
 800af6c:	b29a      	uxth	r2, r3
 800af6e:	68bb      	ldr	r3, [r7, #8]
 800af70:	330d      	adds	r3, #13
 800af72:	781b      	ldrb	r3, [r3, #0]
 800af74:	b29b      	uxth	r3, r3
 800af76:	021b      	lsls	r3, r3, #8
 800af78:	b29b      	uxth	r3, r3
 800af7a:	4313      	orrs	r3, r2
 800af7c:	b29a      	uxth	r2, r3
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800af82:	68bb      	ldr	r3, [r7, #8]
 800af84:	7b9a      	ldrb	r2, [r3, #14]
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800af8a:	68bb      	ldr	r3, [r7, #8]
 800af8c:	7bda      	ldrb	r2, [r3, #15]
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800af92:	68bb      	ldr	r3, [r7, #8]
 800af94:	7c1a      	ldrb	r2, [r3, #16]
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800af9a:	68bb      	ldr	r3, [r7, #8]
 800af9c:	7c5a      	ldrb	r2, [r3, #17]
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	745a      	strb	r2, [r3, #17]
  }
}
 800afa2:	bf00      	nop
 800afa4:	3714      	adds	r7, #20
 800afa6:	46bd      	mov	sp, r7
 800afa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afac:	4770      	bx	lr

0800afae <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800afae:	b580      	push	{r7, lr}
 800afb0:	b08a      	sub	sp, #40	; 0x28
 800afb2:	af00      	add	r7, sp, #0
 800afb4:	60f8      	str	r0, [r7, #12]
 800afb6:	60b9      	str	r1, [r7, #8]
 800afb8:	4613      	mov	r3, r2
 800afba:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800afbc:	68bb      	ldr	r3, [r7, #8]
 800afbe:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800afc0:	2300      	movs	r3, #0
 800afc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800afc6:	2300      	movs	r3, #0
 800afc8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800afcc:	68bb      	ldr	r3, [r7, #8]
 800afce:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800afd0:	68bb      	ldr	r3, [r7, #8]
 800afd2:	781a      	ldrb	r2, [r3, #0]
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800afd8:	68bb      	ldr	r3, [r7, #8]
 800afda:	785a      	ldrb	r2, [r3, #1]
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800afe0:	68bb      	ldr	r3, [r7, #8]
 800afe2:	3302      	adds	r3, #2
 800afe4:	781b      	ldrb	r3, [r3, #0]
 800afe6:	b29a      	uxth	r2, r3
 800afe8:	68bb      	ldr	r3, [r7, #8]
 800afea:	3303      	adds	r3, #3
 800afec:	781b      	ldrb	r3, [r3, #0]
 800afee:	b29b      	uxth	r3, r3
 800aff0:	021b      	lsls	r3, r3, #8
 800aff2:	b29b      	uxth	r3, r3
 800aff4:	4313      	orrs	r3, r2
 800aff6:	b29a      	uxth	r2, r3
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800affc:	68bb      	ldr	r3, [r7, #8]
 800affe:	791a      	ldrb	r2, [r3, #4]
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800b004:	68bb      	ldr	r3, [r7, #8]
 800b006:	795a      	ldrb	r2, [r3, #5]
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800b00c:	68bb      	ldr	r3, [r7, #8]
 800b00e:	799a      	ldrb	r2, [r3, #6]
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800b014:	68bb      	ldr	r3, [r7, #8]
 800b016:	79da      	ldrb	r2, [r3, #7]
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800b01c:	68bb      	ldr	r3, [r7, #8]
 800b01e:	7a1a      	ldrb	r2, [r3, #8]
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800b024:	88fb      	ldrh	r3, [r7, #6]
 800b026:	2b09      	cmp	r3, #9
 800b028:	d95f      	bls.n	800b0ea <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800b02a:	2309      	movs	r3, #9
 800b02c:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800b02e:	2300      	movs	r3, #0
 800b030:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b032:	e051      	b.n	800b0d8 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800b034:	f107 0316 	add.w	r3, r7, #22
 800b038:	4619      	mov	r1, r3
 800b03a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b03c:	f000 f8e8 	bl	800b210 <USBH_GetNextDesc>
 800b040:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800b042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b044:	785b      	ldrb	r3, [r3, #1]
 800b046:	2b04      	cmp	r3, #4
 800b048:	d146      	bne.n	800b0d8 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800b04a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b04e:	221a      	movs	r2, #26
 800b050:	fb02 f303 	mul.w	r3, r2, r3
 800b054:	3308      	adds	r3, #8
 800b056:	68fa      	ldr	r2, [r7, #12]
 800b058:	4413      	add	r3, r2
 800b05a:	3302      	adds	r3, #2
 800b05c:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800b05e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b060:	69f8      	ldr	r0, [r7, #28]
 800b062:	f000 f846 	bl	800b0f2 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800b066:	2300      	movs	r3, #0
 800b068:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800b06c:	2300      	movs	r3, #0
 800b06e:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b070:	e022      	b.n	800b0b8 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800b072:	f107 0316 	add.w	r3, r7, #22
 800b076:	4619      	mov	r1, r3
 800b078:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b07a:	f000 f8c9 	bl	800b210 <USBH_GetNextDesc>
 800b07e:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800b080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b082:	785b      	ldrb	r3, [r3, #1]
 800b084:	2b05      	cmp	r3, #5
 800b086:	d117      	bne.n	800b0b8 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800b088:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b08c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800b090:	3201      	adds	r2, #1
 800b092:	00d2      	lsls	r2, r2, #3
 800b094:	211a      	movs	r1, #26
 800b096:	fb01 f303 	mul.w	r3, r1, r3
 800b09a:	4413      	add	r3, r2
 800b09c:	3308      	adds	r3, #8
 800b09e:	68fa      	ldr	r2, [r7, #12]
 800b0a0:	4413      	add	r3, r2
 800b0a2:	3304      	adds	r3, #4
 800b0a4:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800b0a6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b0a8:	69b8      	ldr	r0, [r7, #24]
 800b0aa:	f000 f851 	bl	800b150 <USBH_ParseEPDesc>
            ep_ix++;
 800b0ae:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800b0b2:	3301      	adds	r3, #1
 800b0b4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b0b8:	69fb      	ldr	r3, [r7, #28]
 800b0ba:	791b      	ldrb	r3, [r3, #4]
 800b0bc:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800b0c0:	429a      	cmp	r2, r3
 800b0c2:	d204      	bcs.n	800b0ce <USBH_ParseCfgDesc+0x120>
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	885a      	ldrh	r2, [r3, #2]
 800b0c8:	8afb      	ldrh	r3, [r7, #22]
 800b0ca:	429a      	cmp	r2, r3
 800b0cc:	d8d1      	bhi.n	800b072 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800b0ce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b0d2:	3301      	adds	r3, #1
 800b0d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b0d8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b0dc:	2b01      	cmp	r3, #1
 800b0de:	d804      	bhi.n	800b0ea <USBH_ParseCfgDesc+0x13c>
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	885a      	ldrh	r2, [r3, #2]
 800b0e4:	8afb      	ldrh	r3, [r7, #22]
 800b0e6:	429a      	cmp	r2, r3
 800b0e8:	d8a4      	bhi.n	800b034 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800b0ea:	bf00      	nop
 800b0ec:	3728      	adds	r7, #40	; 0x28
 800b0ee:	46bd      	mov	sp, r7
 800b0f0:	bd80      	pop	{r7, pc}

0800b0f2 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800b0f2:	b480      	push	{r7}
 800b0f4:	b083      	sub	sp, #12
 800b0f6:	af00      	add	r7, sp, #0
 800b0f8:	6078      	str	r0, [r7, #4]
 800b0fa:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800b0fc:	683b      	ldr	r3, [r7, #0]
 800b0fe:	781a      	ldrb	r2, [r3, #0]
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800b104:	683b      	ldr	r3, [r7, #0]
 800b106:	785a      	ldrb	r2, [r3, #1]
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800b10c:	683b      	ldr	r3, [r7, #0]
 800b10e:	789a      	ldrb	r2, [r3, #2]
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800b114:	683b      	ldr	r3, [r7, #0]
 800b116:	78da      	ldrb	r2, [r3, #3]
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800b11c:	683b      	ldr	r3, [r7, #0]
 800b11e:	791a      	ldrb	r2, [r3, #4]
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800b124:	683b      	ldr	r3, [r7, #0]
 800b126:	795a      	ldrb	r2, [r3, #5]
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800b12c:	683b      	ldr	r3, [r7, #0]
 800b12e:	799a      	ldrb	r2, [r3, #6]
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800b134:	683b      	ldr	r3, [r7, #0]
 800b136:	79da      	ldrb	r2, [r3, #7]
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800b13c:	683b      	ldr	r3, [r7, #0]
 800b13e:	7a1a      	ldrb	r2, [r3, #8]
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	721a      	strb	r2, [r3, #8]
}
 800b144:	bf00      	nop
 800b146:	370c      	adds	r7, #12
 800b148:	46bd      	mov	sp, r7
 800b14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b14e:	4770      	bx	lr

0800b150 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800b150:	b480      	push	{r7}
 800b152:	b083      	sub	sp, #12
 800b154:	af00      	add	r7, sp, #0
 800b156:	6078      	str	r0, [r7, #4]
 800b158:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800b15a:	683b      	ldr	r3, [r7, #0]
 800b15c:	781a      	ldrb	r2, [r3, #0]
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800b162:	683b      	ldr	r3, [r7, #0]
 800b164:	785a      	ldrb	r2, [r3, #1]
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800b16a:	683b      	ldr	r3, [r7, #0]
 800b16c:	789a      	ldrb	r2, [r3, #2]
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800b172:	683b      	ldr	r3, [r7, #0]
 800b174:	78da      	ldrb	r2, [r3, #3]
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800b17a:	683b      	ldr	r3, [r7, #0]
 800b17c:	3304      	adds	r3, #4
 800b17e:	781b      	ldrb	r3, [r3, #0]
 800b180:	b29a      	uxth	r2, r3
 800b182:	683b      	ldr	r3, [r7, #0]
 800b184:	3305      	adds	r3, #5
 800b186:	781b      	ldrb	r3, [r3, #0]
 800b188:	b29b      	uxth	r3, r3
 800b18a:	021b      	lsls	r3, r3, #8
 800b18c:	b29b      	uxth	r3, r3
 800b18e:	4313      	orrs	r3, r2
 800b190:	b29a      	uxth	r2, r3
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800b196:	683b      	ldr	r3, [r7, #0]
 800b198:	799a      	ldrb	r2, [r3, #6]
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	719a      	strb	r2, [r3, #6]
}
 800b19e:	bf00      	nop
 800b1a0:	370c      	adds	r7, #12
 800b1a2:	46bd      	mov	sp, r7
 800b1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a8:	4770      	bx	lr

0800b1aa <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800b1aa:	b480      	push	{r7}
 800b1ac:	b087      	sub	sp, #28
 800b1ae:	af00      	add	r7, sp, #0
 800b1b0:	60f8      	str	r0, [r7, #12]
 800b1b2:	60b9      	str	r1, [r7, #8]
 800b1b4:	4613      	mov	r3, r2
 800b1b6:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	3301      	adds	r3, #1
 800b1bc:	781b      	ldrb	r3, [r3, #0]
 800b1be:	2b03      	cmp	r3, #3
 800b1c0:	d120      	bne.n	800b204 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	781b      	ldrb	r3, [r3, #0]
 800b1c6:	1e9a      	subs	r2, r3, #2
 800b1c8:	88fb      	ldrh	r3, [r7, #6]
 800b1ca:	4293      	cmp	r3, r2
 800b1cc:	bf28      	it	cs
 800b1ce:	4613      	movcs	r3, r2
 800b1d0:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	3302      	adds	r3, #2
 800b1d6:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800b1d8:	2300      	movs	r3, #0
 800b1da:	82fb      	strh	r3, [r7, #22]
 800b1dc:	e00b      	b.n	800b1f6 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800b1de:	8afb      	ldrh	r3, [r7, #22]
 800b1e0:	68fa      	ldr	r2, [r7, #12]
 800b1e2:	4413      	add	r3, r2
 800b1e4:	781a      	ldrb	r2, [r3, #0]
 800b1e6:	68bb      	ldr	r3, [r7, #8]
 800b1e8:	701a      	strb	r2, [r3, #0]
      pdest++;
 800b1ea:	68bb      	ldr	r3, [r7, #8]
 800b1ec:	3301      	adds	r3, #1
 800b1ee:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800b1f0:	8afb      	ldrh	r3, [r7, #22]
 800b1f2:	3302      	adds	r3, #2
 800b1f4:	82fb      	strh	r3, [r7, #22]
 800b1f6:	8afa      	ldrh	r2, [r7, #22]
 800b1f8:	8abb      	ldrh	r3, [r7, #20]
 800b1fa:	429a      	cmp	r2, r3
 800b1fc:	d3ef      	bcc.n	800b1de <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800b1fe:	68bb      	ldr	r3, [r7, #8]
 800b200:	2200      	movs	r2, #0
 800b202:	701a      	strb	r2, [r3, #0]
  }
}
 800b204:	bf00      	nop
 800b206:	371c      	adds	r7, #28
 800b208:	46bd      	mov	sp, r7
 800b20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b20e:	4770      	bx	lr

0800b210 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800b210:	b480      	push	{r7}
 800b212:	b085      	sub	sp, #20
 800b214:	af00      	add	r7, sp, #0
 800b216:	6078      	str	r0, [r7, #4]
 800b218:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800b21a:	683b      	ldr	r3, [r7, #0]
 800b21c:	881a      	ldrh	r2, [r3, #0]
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	781b      	ldrb	r3, [r3, #0]
 800b222:	b29b      	uxth	r3, r3
 800b224:	4413      	add	r3, r2
 800b226:	b29a      	uxth	r2, r3
 800b228:	683b      	ldr	r3, [r7, #0]
 800b22a:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	781b      	ldrb	r3, [r3, #0]
 800b230:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	4413      	add	r3, r2
 800b236:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b238:	68fb      	ldr	r3, [r7, #12]
}
 800b23a:	4618      	mov	r0, r3
 800b23c:	3714      	adds	r7, #20
 800b23e:	46bd      	mov	sp, r7
 800b240:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b244:	4770      	bx	lr

0800b246 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800b246:	b580      	push	{r7, lr}
 800b248:	b086      	sub	sp, #24
 800b24a:	af00      	add	r7, sp, #0
 800b24c:	60f8      	str	r0, [r7, #12]
 800b24e:	60b9      	str	r1, [r7, #8]
 800b250:	4613      	mov	r3, r2
 800b252:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800b254:	2301      	movs	r3, #1
 800b256:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	789b      	ldrb	r3, [r3, #2]
 800b25c:	2b01      	cmp	r3, #1
 800b25e:	d002      	beq.n	800b266 <USBH_CtlReq+0x20>
 800b260:	2b02      	cmp	r3, #2
 800b262:	d00f      	beq.n	800b284 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800b264:	e027      	b.n	800b2b6 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	68ba      	ldr	r2, [r7, #8]
 800b26a:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	88fa      	ldrh	r2, [r7, #6]
 800b270:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	2201      	movs	r2, #1
 800b276:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	2202      	movs	r2, #2
 800b27c:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800b27e:	2301      	movs	r3, #1
 800b280:	75fb      	strb	r3, [r7, #23]
      break;
 800b282:	e018      	b.n	800b2b6 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800b284:	68f8      	ldr	r0, [r7, #12]
 800b286:	f000 f81b 	bl	800b2c0 <USBH_HandleControl>
 800b28a:	4603      	mov	r3, r0
 800b28c:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800b28e:	7dfb      	ldrb	r3, [r7, #23]
 800b290:	2b00      	cmp	r3, #0
 800b292:	d002      	beq.n	800b29a <USBH_CtlReq+0x54>
 800b294:	7dfb      	ldrb	r3, [r7, #23]
 800b296:	2b03      	cmp	r3, #3
 800b298:	d106      	bne.n	800b2a8 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	2201      	movs	r2, #1
 800b29e:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	2200      	movs	r2, #0
 800b2a4:	761a      	strb	r2, [r3, #24]
      break;
 800b2a6:	e005      	b.n	800b2b4 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800b2a8:	7dfb      	ldrb	r3, [r7, #23]
 800b2aa:	2b02      	cmp	r3, #2
 800b2ac:	d102      	bne.n	800b2b4 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	2201      	movs	r2, #1
 800b2b2:	709a      	strb	r2, [r3, #2]
      break;
 800b2b4:	bf00      	nop
  }
  return status;
 800b2b6:	7dfb      	ldrb	r3, [r7, #23]
}
 800b2b8:	4618      	mov	r0, r3
 800b2ba:	3718      	adds	r7, #24
 800b2bc:	46bd      	mov	sp, r7
 800b2be:	bd80      	pop	{r7, pc}

0800b2c0 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800b2c0:	b580      	push	{r7, lr}
 800b2c2:	b086      	sub	sp, #24
 800b2c4:	af02      	add	r7, sp, #8
 800b2c6:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800b2c8:	2301      	movs	r3, #1
 800b2ca:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800b2cc:	2300      	movs	r3, #0
 800b2ce:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	7e1b      	ldrb	r3, [r3, #24]
 800b2d4:	3b01      	subs	r3, #1
 800b2d6:	2b0a      	cmp	r3, #10
 800b2d8:	f200 8156 	bhi.w	800b588 <USBH_HandleControl+0x2c8>
 800b2dc:	a201      	add	r2, pc, #4	; (adr r2, 800b2e4 <USBH_HandleControl+0x24>)
 800b2de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2e2:	bf00      	nop
 800b2e4:	0800b311 	.word	0x0800b311
 800b2e8:	0800b32b 	.word	0x0800b32b
 800b2ec:	0800b395 	.word	0x0800b395
 800b2f0:	0800b3bb 	.word	0x0800b3bb
 800b2f4:	0800b3f3 	.word	0x0800b3f3
 800b2f8:	0800b41d 	.word	0x0800b41d
 800b2fc:	0800b46f 	.word	0x0800b46f
 800b300:	0800b491 	.word	0x0800b491
 800b304:	0800b4cd 	.word	0x0800b4cd
 800b308:	0800b4f3 	.word	0x0800b4f3
 800b30c:	0800b531 	.word	0x0800b531
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	f103 0110 	add.w	r1, r3, #16
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	795b      	ldrb	r3, [r3, #5]
 800b31a:	461a      	mov	r2, r3
 800b31c:	6878      	ldr	r0, [r7, #4]
 800b31e:	f000 f943 	bl	800b5a8 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	2202      	movs	r2, #2
 800b326:	761a      	strb	r2, [r3, #24]
      break;
 800b328:	e139      	b.n	800b59e <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	795b      	ldrb	r3, [r3, #5]
 800b32e:	4619      	mov	r1, r3
 800b330:	6878      	ldr	r0, [r7, #4]
 800b332:	f000 fcc5 	bl	800bcc0 <USBH_LL_GetURBState>
 800b336:	4603      	mov	r3, r0
 800b338:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800b33a:	7bbb      	ldrb	r3, [r7, #14]
 800b33c:	2b01      	cmp	r3, #1
 800b33e:	d11e      	bne.n	800b37e <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	7c1b      	ldrb	r3, [r3, #16]
 800b344:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b348:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	8adb      	ldrh	r3, [r3, #22]
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d00a      	beq.n	800b368 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800b352:	7b7b      	ldrb	r3, [r7, #13]
 800b354:	2b80      	cmp	r3, #128	; 0x80
 800b356:	d103      	bne.n	800b360 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	2203      	movs	r2, #3
 800b35c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b35e:	e115      	b.n	800b58c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	2205      	movs	r2, #5
 800b364:	761a      	strb	r2, [r3, #24]
      break;
 800b366:	e111      	b.n	800b58c <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800b368:	7b7b      	ldrb	r3, [r7, #13]
 800b36a:	2b80      	cmp	r3, #128	; 0x80
 800b36c:	d103      	bne.n	800b376 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	2209      	movs	r2, #9
 800b372:	761a      	strb	r2, [r3, #24]
      break;
 800b374:	e10a      	b.n	800b58c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	2207      	movs	r2, #7
 800b37a:	761a      	strb	r2, [r3, #24]
      break;
 800b37c:	e106      	b.n	800b58c <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800b37e:	7bbb      	ldrb	r3, [r7, #14]
 800b380:	2b04      	cmp	r3, #4
 800b382:	d003      	beq.n	800b38c <USBH_HandleControl+0xcc>
 800b384:	7bbb      	ldrb	r3, [r7, #14]
 800b386:	2b02      	cmp	r3, #2
 800b388:	f040 8100 	bne.w	800b58c <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	220b      	movs	r2, #11
 800b390:	761a      	strb	r2, [r3, #24]
      break;
 800b392:	e0fb      	b.n	800b58c <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b39a:	b29a      	uxth	r2, r3
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	6899      	ldr	r1, [r3, #8]
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	899a      	ldrh	r2, [r3, #12]
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	791b      	ldrb	r3, [r3, #4]
 800b3ac:	6878      	ldr	r0, [r7, #4]
 800b3ae:	f000 f93a 	bl	800b626 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	2204      	movs	r2, #4
 800b3b6:	761a      	strb	r2, [r3, #24]
      break;
 800b3b8:	e0f1      	b.n	800b59e <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	791b      	ldrb	r3, [r3, #4]
 800b3be:	4619      	mov	r1, r3
 800b3c0:	6878      	ldr	r0, [r7, #4]
 800b3c2:	f000 fc7d 	bl	800bcc0 <USBH_LL_GetURBState>
 800b3c6:	4603      	mov	r3, r0
 800b3c8:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800b3ca:	7bbb      	ldrb	r3, [r7, #14]
 800b3cc:	2b01      	cmp	r3, #1
 800b3ce:	d102      	bne.n	800b3d6 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	2209      	movs	r2, #9
 800b3d4:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800b3d6:	7bbb      	ldrb	r3, [r7, #14]
 800b3d8:	2b05      	cmp	r3, #5
 800b3da:	d102      	bne.n	800b3e2 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800b3dc:	2303      	movs	r3, #3
 800b3de:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b3e0:	e0d6      	b.n	800b590 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800b3e2:	7bbb      	ldrb	r3, [r7, #14]
 800b3e4:	2b04      	cmp	r3, #4
 800b3e6:	f040 80d3 	bne.w	800b590 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	220b      	movs	r2, #11
 800b3ee:	761a      	strb	r2, [r3, #24]
      break;
 800b3f0:	e0ce      	b.n	800b590 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	6899      	ldr	r1, [r3, #8]
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	899a      	ldrh	r2, [r3, #12]
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	795b      	ldrb	r3, [r3, #5]
 800b3fe:	2001      	movs	r0, #1
 800b400:	9000      	str	r0, [sp, #0]
 800b402:	6878      	ldr	r0, [r7, #4]
 800b404:	f000 f8ea 	bl	800b5dc <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b40e:	b29a      	uxth	r2, r3
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	2206      	movs	r2, #6
 800b418:	761a      	strb	r2, [r3, #24]
      break;
 800b41a:	e0c0      	b.n	800b59e <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	795b      	ldrb	r3, [r3, #5]
 800b420:	4619      	mov	r1, r3
 800b422:	6878      	ldr	r0, [r7, #4]
 800b424:	f000 fc4c 	bl	800bcc0 <USBH_LL_GetURBState>
 800b428:	4603      	mov	r3, r0
 800b42a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800b42c:	7bbb      	ldrb	r3, [r7, #14]
 800b42e:	2b01      	cmp	r3, #1
 800b430:	d103      	bne.n	800b43a <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	2207      	movs	r2, #7
 800b436:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b438:	e0ac      	b.n	800b594 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800b43a:	7bbb      	ldrb	r3, [r7, #14]
 800b43c:	2b05      	cmp	r3, #5
 800b43e:	d105      	bne.n	800b44c <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	220c      	movs	r2, #12
 800b444:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800b446:	2303      	movs	r3, #3
 800b448:	73fb      	strb	r3, [r7, #15]
      break;
 800b44a:	e0a3      	b.n	800b594 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b44c:	7bbb      	ldrb	r3, [r7, #14]
 800b44e:	2b02      	cmp	r3, #2
 800b450:	d103      	bne.n	800b45a <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	2205      	movs	r2, #5
 800b456:	761a      	strb	r2, [r3, #24]
      break;
 800b458:	e09c      	b.n	800b594 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800b45a:	7bbb      	ldrb	r3, [r7, #14]
 800b45c:	2b04      	cmp	r3, #4
 800b45e:	f040 8099 	bne.w	800b594 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	220b      	movs	r2, #11
 800b466:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800b468:	2302      	movs	r3, #2
 800b46a:	73fb      	strb	r3, [r7, #15]
      break;
 800b46c:	e092      	b.n	800b594 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	791b      	ldrb	r3, [r3, #4]
 800b472:	2200      	movs	r2, #0
 800b474:	2100      	movs	r1, #0
 800b476:	6878      	ldr	r0, [r7, #4]
 800b478:	f000 f8d5 	bl	800b626 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b482:	b29a      	uxth	r2, r3
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	2208      	movs	r2, #8
 800b48c:	761a      	strb	r2, [r3, #24]

      break;
 800b48e:	e086      	b.n	800b59e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	791b      	ldrb	r3, [r3, #4]
 800b494:	4619      	mov	r1, r3
 800b496:	6878      	ldr	r0, [r7, #4]
 800b498:	f000 fc12 	bl	800bcc0 <USBH_LL_GetURBState>
 800b49c:	4603      	mov	r3, r0
 800b49e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800b4a0:	7bbb      	ldrb	r3, [r7, #14]
 800b4a2:	2b01      	cmp	r3, #1
 800b4a4:	d105      	bne.n	800b4b2 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	220d      	movs	r2, #13
 800b4aa:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800b4ac:	2300      	movs	r3, #0
 800b4ae:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b4b0:	e072      	b.n	800b598 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800b4b2:	7bbb      	ldrb	r3, [r7, #14]
 800b4b4:	2b04      	cmp	r3, #4
 800b4b6:	d103      	bne.n	800b4c0 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	220b      	movs	r2, #11
 800b4bc:	761a      	strb	r2, [r3, #24]
      break;
 800b4be:	e06b      	b.n	800b598 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800b4c0:	7bbb      	ldrb	r3, [r7, #14]
 800b4c2:	2b05      	cmp	r3, #5
 800b4c4:	d168      	bne.n	800b598 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800b4c6:	2303      	movs	r3, #3
 800b4c8:	73fb      	strb	r3, [r7, #15]
      break;
 800b4ca:	e065      	b.n	800b598 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	795b      	ldrb	r3, [r3, #5]
 800b4d0:	2201      	movs	r2, #1
 800b4d2:	9200      	str	r2, [sp, #0]
 800b4d4:	2200      	movs	r2, #0
 800b4d6:	2100      	movs	r1, #0
 800b4d8:	6878      	ldr	r0, [r7, #4]
 800b4da:	f000 f87f 	bl	800b5dc <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b4e4:	b29a      	uxth	r2, r3
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	220a      	movs	r2, #10
 800b4ee:	761a      	strb	r2, [r3, #24]
      break;
 800b4f0:	e055      	b.n	800b59e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	795b      	ldrb	r3, [r3, #5]
 800b4f6:	4619      	mov	r1, r3
 800b4f8:	6878      	ldr	r0, [r7, #4]
 800b4fa:	f000 fbe1 	bl	800bcc0 <USBH_LL_GetURBState>
 800b4fe:	4603      	mov	r3, r0
 800b500:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800b502:	7bbb      	ldrb	r3, [r7, #14]
 800b504:	2b01      	cmp	r3, #1
 800b506:	d105      	bne.n	800b514 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800b508:	2300      	movs	r3, #0
 800b50a:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	220d      	movs	r2, #13
 800b510:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b512:	e043      	b.n	800b59c <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b514:	7bbb      	ldrb	r3, [r7, #14]
 800b516:	2b02      	cmp	r3, #2
 800b518:	d103      	bne.n	800b522 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	2209      	movs	r2, #9
 800b51e:	761a      	strb	r2, [r3, #24]
      break;
 800b520:	e03c      	b.n	800b59c <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800b522:	7bbb      	ldrb	r3, [r7, #14]
 800b524:	2b04      	cmp	r3, #4
 800b526:	d139      	bne.n	800b59c <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	220b      	movs	r2, #11
 800b52c:	761a      	strb	r2, [r3, #24]
      break;
 800b52e:	e035      	b.n	800b59c <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	7e5b      	ldrb	r3, [r3, #25]
 800b534:	3301      	adds	r3, #1
 800b536:	b2da      	uxtb	r2, r3
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	765a      	strb	r2, [r3, #25]
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	7e5b      	ldrb	r3, [r3, #25]
 800b540:	2b02      	cmp	r3, #2
 800b542:	d806      	bhi.n	800b552 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	2201      	movs	r2, #1
 800b548:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	2201      	movs	r2, #1
 800b54e:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800b550:	e025      	b.n	800b59e <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b558:	2106      	movs	r1, #6
 800b55a:	6878      	ldr	r0, [r7, #4]
 800b55c:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	2200      	movs	r2, #0
 800b562:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	795b      	ldrb	r3, [r3, #5]
 800b568:	4619      	mov	r1, r3
 800b56a:	6878      	ldr	r0, [r7, #4]
 800b56c:	f000 f90c 	bl	800b788 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	791b      	ldrb	r3, [r3, #4]
 800b574:	4619      	mov	r1, r3
 800b576:	6878      	ldr	r0, [r7, #4]
 800b578:	f000 f906 	bl	800b788 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	2200      	movs	r2, #0
 800b580:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800b582:	2302      	movs	r3, #2
 800b584:	73fb      	strb	r3, [r7, #15]
      break;
 800b586:	e00a      	b.n	800b59e <USBH_HandleControl+0x2de>

    default:
      break;
 800b588:	bf00      	nop
 800b58a:	e008      	b.n	800b59e <USBH_HandleControl+0x2de>
      break;
 800b58c:	bf00      	nop
 800b58e:	e006      	b.n	800b59e <USBH_HandleControl+0x2de>
      break;
 800b590:	bf00      	nop
 800b592:	e004      	b.n	800b59e <USBH_HandleControl+0x2de>
      break;
 800b594:	bf00      	nop
 800b596:	e002      	b.n	800b59e <USBH_HandleControl+0x2de>
      break;
 800b598:	bf00      	nop
 800b59a:	e000      	b.n	800b59e <USBH_HandleControl+0x2de>
      break;
 800b59c:	bf00      	nop
  }

  return status;
 800b59e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5a0:	4618      	mov	r0, r3
 800b5a2:	3710      	adds	r7, #16
 800b5a4:	46bd      	mov	sp, r7
 800b5a6:	bd80      	pop	{r7, pc}

0800b5a8 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800b5a8:	b580      	push	{r7, lr}
 800b5aa:	b088      	sub	sp, #32
 800b5ac:	af04      	add	r7, sp, #16
 800b5ae:	60f8      	str	r0, [r7, #12]
 800b5b0:	60b9      	str	r1, [r7, #8]
 800b5b2:	4613      	mov	r3, r2
 800b5b4:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b5b6:	79f9      	ldrb	r1, [r7, #7]
 800b5b8:	2300      	movs	r3, #0
 800b5ba:	9303      	str	r3, [sp, #12]
 800b5bc:	2308      	movs	r3, #8
 800b5be:	9302      	str	r3, [sp, #8]
 800b5c0:	68bb      	ldr	r3, [r7, #8]
 800b5c2:	9301      	str	r3, [sp, #4]
 800b5c4:	2300      	movs	r3, #0
 800b5c6:	9300      	str	r3, [sp, #0]
 800b5c8:	2300      	movs	r3, #0
 800b5ca:	2200      	movs	r2, #0
 800b5cc:	68f8      	ldr	r0, [r7, #12]
 800b5ce:	f000 fb46 	bl	800bc5e <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800b5d2:	2300      	movs	r3, #0
}
 800b5d4:	4618      	mov	r0, r3
 800b5d6:	3710      	adds	r7, #16
 800b5d8:	46bd      	mov	sp, r7
 800b5da:	bd80      	pop	{r7, pc}

0800b5dc <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800b5dc:	b580      	push	{r7, lr}
 800b5de:	b088      	sub	sp, #32
 800b5e0:	af04      	add	r7, sp, #16
 800b5e2:	60f8      	str	r0, [r7, #12]
 800b5e4:	60b9      	str	r1, [r7, #8]
 800b5e6:	4611      	mov	r1, r2
 800b5e8:	461a      	mov	r2, r3
 800b5ea:	460b      	mov	r3, r1
 800b5ec:	80fb      	strh	r3, [r7, #6]
 800b5ee:	4613      	mov	r3, r2
 800b5f0:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d001      	beq.n	800b600 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800b5fc:	2300      	movs	r3, #0
 800b5fe:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b600:	7979      	ldrb	r1, [r7, #5]
 800b602:	7e3b      	ldrb	r3, [r7, #24]
 800b604:	9303      	str	r3, [sp, #12]
 800b606:	88fb      	ldrh	r3, [r7, #6]
 800b608:	9302      	str	r3, [sp, #8]
 800b60a:	68bb      	ldr	r3, [r7, #8]
 800b60c:	9301      	str	r3, [sp, #4]
 800b60e:	2301      	movs	r3, #1
 800b610:	9300      	str	r3, [sp, #0]
 800b612:	2300      	movs	r3, #0
 800b614:	2200      	movs	r2, #0
 800b616:	68f8      	ldr	r0, [r7, #12]
 800b618:	f000 fb21 	bl	800bc5e <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800b61c:	2300      	movs	r3, #0
}
 800b61e:	4618      	mov	r0, r3
 800b620:	3710      	adds	r7, #16
 800b622:	46bd      	mov	sp, r7
 800b624:	bd80      	pop	{r7, pc}

0800b626 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800b626:	b580      	push	{r7, lr}
 800b628:	b088      	sub	sp, #32
 800b62a:	af04      	add	r7, sp, #16
 800b62c:	60f8      	str	r0, [r7, #12]
 800b62e:	60b9      	str	r1, [r7, #8]
 800b630:	4611      	mov	r1, r2
 800b632:	461a      	mov	r2, r3
 800b634:	460b      	mov	r3, r1
 800b636:	80fb      	strh	r3, [r7, #6]
 800b638:	4613      	mov	r3, r2
 800b63a:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b63c:	7979      	ldrb	r1, [r7, #5]
 800b63e:	2300      	movs	r3, #0
 800b640:	9303      	str	r3, [sp, #12]
 800b642:	88fb      	ldrh	r3, [r7, #6]
 800b644:	9302      	str	r3, [sp, #8]
 800b646:	68bb      	ldr	r3, [r7, #8]
 800b648:	9301      	str	r3, [sp, #4]
 800b64a:	2301      	movs	r3, #1
 800b64c:	9300      	str	r3, [sp, #0]
 800b64e:	2300      	movs	r3, #0
 800b650:	2201      	movs	r2, #1
 800b652:	68f8      	ldr	r0, [r7, #12]
 800b654:	f000 fb03 	bl	800bc5e <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800b658:	2300      	movs	r3, #0

}
 800b65a:	4618      	mov	r0, r3
 800b65c:	3710      	adds	r7, #16
 800b65e:	46bd      	mov	sp, r7
 800b660:	bd80      	pop	{r7, pc}

0800b662 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800b662:	b580      	push	{r7, lr}
 800b664:	b088      	sub	sp, #32
 800b666:	af04      	add	r7, sp, #16
 800b668:	60f8      	str	r0, [r7, #12]
 800b66a:	60b9      	str	r1, [r7, #8]
 800b66c:	4611      	mov	r1, r2
 800b66e:	461a      	mov	r2, r3
 800b670:	460b      	mov	r3, r1
 800b672:	80fb      	strh	r3, [r7, #6]
 800b674:	4613      	mov	r3, r2
 800b676:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d001      	beq.n	800b686 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800b682:	2300      	movs	r3, #0
 800b684:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b686:	7979      	ldrb	r1, [r7, #5]
 800b688:	7e3b      	ldrb	r3, [r7, #24]
 800b68a:	9303      	str	r3, [sp, #12]
 800b68c:	88fb      	ldrh	r3, [r7, #6]
 800b68e:	9302      	str	r3, [sp, #8]
 800b690:	68bb      	ldr	r3, [r7, #8]
 800b692:	9301      	str	r3, [sp, #4]
 800b694:	2301      	movs	r3, #1
 800b696:	9300      	str	r3, [sp, #0]
 800b698:	2302      	movs	r3, #2
 800b69a:	2200      	movs	r2, #0
 800b69c:	68f8      	ldr	r0, [r7, #12]
 800b69e:	f000 fade 	bl	800bc5e <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800b6a2:	2300      	movs	r3, #0
}
 800b6a4:	4618      	mov	r0, r3
 800b6a6:	3710      	adds	r7, #16
 800b6a8:	46bd      	mov	sp, r7
 800b6aa:	bd80      	pop	{r7, pc}

0800b6ac <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800b6ac:	b580      	push	{r7, lr}
 800b6ae:	b088      	sub	sp, #32
 800b6b0:	af04      	add	r7, sp, #16
 800b6b2:	60f8      	str	r0, [r7, #12]
 800b6b4:	60b9      	str	r1, [r7, #8]
 800b6b6:	4611      	mov	r1, r2
 800b6b8:	461a      	mov	r2, r3
 800b6ba:	460b      	mov	r3, r1
 800b6bc:	80fb      	strh	r3, [r7, #6]
 800b6be:	4613      	mov	r3, r2
 800b6c0:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b6c2:	7979      	ldrb	r1, [r7, #5]
 800b6c4:	2300      	movs	r3, #0
 800b6c6:	9303      	str	r3, [sp, #12]
 800b6c8:	88fb      	ldrh	r3, [r7, #6]
 800b6ca:	9302      	str	r3, [sp, #8]
 800b6cc:	68bb      	ldr	r3, [r7, #8]
 800b6ce:	9301      	str	r3, [sp, #4]
 800b6d0:	2301      	movs	r3, #1
 800b6d2:	9300      	str	r3, [sp, #0]
 800b6d4:	2302      	movs	r3, #2
 800b6d6:	2201      	movs	r2, #1
 800b6d8:	68f8      	ldr	r0, [r7, #12]
 800b6da:	f000 fac0 	bl	800bc5e <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800b6de:	2300      	movs	r3, #0
}
 800b6e0:	4618      	mov	r0, r3
 800b6e2:	3710      	adds	r7, #16
 800b6e4:	46bd      	mov	sp, r7
 800b6e6:	bd80      	pop	{r7, pc}

0800b6e8 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b6e8:	b580      	push	{r7, lr}
 800b6ea:	b086      	sub	sp, #24
 800b6ec:	af04      	add	r7, sp, #16
 800b6ee:	6078      	str	r0, [r7, #4]
 800b6f0:	4608      	mov	r0, r1
 800b6f2:	4611      	mov	r1, r2
 800b6f4:	461a      	mov	r2, r3
 800b6f6:	4603      	mov	r3, r0
 800b6f8:	70fb      	strb	r3, [r7, #3]
 800b6fa:	460b      	mov	r3, r1
 800b6fc:	70bb      	strb	r3, [r7, #2]
 800b6fe:	4613      	mov	r3, r2
 800b700:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800b702:	7878      	ldrb	r0, [r7, #1]
 800b704:	78ba      	ldrb	r2, [r7, #2]
 800b706:	78f9      	ldrb	r1, [r7, #3]
 800b708:	8b3b      	ldrh	r3, [r7, #24]
 800b70a:	9302      	str	r3, [sp, #8]
 800b70c:	7d3b      	ldrb	r3, [r7, #20]
 800b70e:	9301      	str	r3, [sp, #4]
 800b710:	7c3b      	ldrb	r3, [r7, #16]
 800b712:	9300      	str	r3, [sp, #0]
 800b714:	4603      	mov	r3, r0
 800b716:	6878      	ldr	r0, [r7, #4]
 800b718:	f000 fa53 	bl	800bbc2 <USBH_LL_OpenPipe>

  return USBH_OK;
 800b71c:	2300      	movs	r3, #0
}
 800b71e:	4618      	mov	r0, r3
 800b720:	3708      	adds	r7, #8
 800b722:	46bd      	mov	sp, r7
 800b724:	bd80      	pop	{r7, pc}

0800b726 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800b726:	b580      	push	{r7, lr}
 800b728:	b082      	sub	sp, #8
 800b72a:	af00      	add	r7, sp, #0
 800b72c:	6078      	str	r0, [r7, #4]
 800b72e:	460b      	mov	r3, r1
 800b730:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800b732:	78fb      	ldrb	r3, [r7, #3]
 800b734:	4619      	mov	r1, r3
 800b736:	6878      	ldr	r0, [r7, #4]
 800b738:	f000 fa72 	bl	800bc20 <USBH_LL_ClosePipe>

  return USBH_OK;
 800b73c:	2300      	movs	r3, #0
}
 800b73e:	4618      	mov	r0, r3
 800b740:	3708      	adds	r7, #8
 800b742:	46bd      	mov	sp, r7
 800b744:	bd80      	pop	{r7, pc}

0800b746 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800b746:	b580      	push	{r7, lr}
 800b748:	b084      	sub	sp, #16
 800b74a:	af00      	add	r7, sp, #0
 800b74c:	6078      	str	r0, [r7, #4]
 800b74e:	460b      	mov	r3, r1
 800b750:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800b752:	6878      	ldr	r0, [r7, #4]
 800b754:	f000 f836 	bl	800b7c4 <USBH_GetFreePipe>
 800b758:	4603      	mov	r3, r0
 800b75a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800b75c:	89fb      	ldrh	r3, [r7, #14]
 800b75e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b762:	4293      	cmp	r3, r2
 800b764:	d00a      	beq.n	800b77c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800b766:	78fa      	ldrb	r2, [r7, #3]
 800b768:	89fb      	ldrh	r3, [r7, #14]
 800b76a:	f003 030f 	and.w	r3, r3, #15
 800b76e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b772:	6879      	ldr	r1, [r7, #4]
 800b774:	33e0      	adds	r3, #224	; 0xe0
 800b776:	009b      	lsls	r3, r3, #2
 800b778:	440b      	add	r3, r1
 800b77a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800b77c:	89fb      	ldrh	r3, [r7, #14]
 800b77e:	b2db      	uxtb	r3, r3
}
 800b780:	4618      	mov	r0, r3
 800b782:	3710      	adds	r7, #16
 800b784:	46bd      	mov	sp, r7
 800b786:	bd80      	pop	{r7, pc}

0800b788 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800b788:	b480      	push	{r7}
 800b78a:	b083      	sub	sp, #12
 800b78c:	af00      	add	r7, sp, #0
 800b78e:	6078      	str	r0, [r7, #4]
 800b790:	460b      	mov	r3, r1
 800b792:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800b794:	78fb      	ldrb	r3, [r7, #3]
 800b796:	2b0a      	cmp	r3, #10
 800b798:	d80d      	bhi.n	800b7b6 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800b79a:	78fb      	ldrb	r3, [r7, #3]
 800b79c:	687a      	ldr	r2, [r7, #4]
 800b79e:	33e0      	adds	r3, #224	; 0xe0
 800b7a0:	009b      	lsls	r3, r3, #2
 800b7a2:	4413      	add	r3, r2
 800b7a4:	685a      	ldr	r2, [r3, #4]
 800b7a6:	78fb      	ldrb	r3, [r7, #3]
 800b7a8:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800b7ac:	6879      	ldr	r1, [r7, #4]
 800b7ae:	33e0      	adds	r3, #224	; 0xe0
 800b7b0:	009b      	lsls	r3, r3, #2
 800b7b2:	440b      	add	r3, r1
 800b7b4:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800b7b6:	2300      	movs	r3, #0
}
 800b7b8:	4618      	mov	r0, r3
 800b7ba:	370c      	adds	r7, #12
 800b7bc:	46bd      	mov	sp, r7
 800b7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c2:	4770      	bx	lr

0800b7c4 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800b7c4:	b480      	push	{r7}
 800b7c6:	b085      	sub	sp, #20
 800b7c8:	af00      	add	r7, sp, #0
 800b7ca:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800b7cc:	2300      	movs	r3, #0
 800b7ce:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800b7d0:	2300      	movs	r3, #0
 800b7d2:	73fb      	strb	r3, [r7, #15]
 800b7d4:	e00f      	b.n	800b7f6 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800b7d6:	7bfb      	ldrb	r3, [r7, #15]
 800b7d8:	687a      	ldr	r2, [r7, #4]
 800b7da:	33e0      	adds	r3, #224	; 0xe0
 800b7dc:	009b      	lsls	r3, r3, #2
 800b7de:	4413      	add	r3, r2
 800b7e0:	685b      	ldr	r3, [r3, #4]
 800b7e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d102      	bne.n	800b7f0 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800b7ea:	7bfb      	ldrb	r3, [r7, #15]
 800b7ec:	b29b      	uxth	r3, r3
 800b7ee:	e007      	b.n	800b800 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800b7f0:	7bfb      	ldrb	r3, [r7, #15]
 800b7f2:	3301      	adds	r3, #1
 800b7f4:	73fb      	strb	r3, [r7, #15]
 800b7f6:	7bfb      	ldrb	r3, [r7, #15]
 800b7f8:	2b0a      	cmp	r3, #10
 800b7fa:	d9ec      	bls.n	800b7d6 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800b7fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800b800:	4618      	mov	r0, r3
 800b802:	3714      	adds	r7, #20
 800b804:	46bd      	mov	sp, r7
 800b806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b80a:	4770      	bx	lr

0800b80c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800b80c:	b580      	push	{r7, lr}
 800b80e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800b810:	2201      	movs	r2, #1
 800b812:	490e      	ldr	r1, [pc, #56]	; (800b84c <MX_USB_HOST_Init+0x40>)
 800b814:	480e      	ldr	r0, [pc, #56]	; (800b850 <MX_USB_HOST_Init+0x44>)
 800b816:	f7fe fca1 	bl	800a15c <USBH_Init>
 800b81a:	4603      	mov	r3, r0
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d001      	beq.n	800b824 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800b820:	f7f6 f8be 	bl	80019a0 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800b824:	490b      	ldr	r1, [pc, #44]	; (800b854 <MX_USB_HOST_Init+0x48>)
 800b826:	480a      	ldr	r0, [pc, #40]	; (800b850 <MX_USB_HOST_Init+0x44>)
 800b828:	f7fe fd26 	bl	800a278 <USBH_RegisterClass>
 800b82c:	4603      	mov	r3, r0
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d001      	beq.n	800b836 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800b832:	f7f6 f8b5 	bl	80019a0 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800b836:	4806      	ldr	r0, [pc, #24]	; (800b850 <MX_USB_HOST_Init+0x44>)
 800b838:	f7fe fdaa 	bl	800a390 <USBH_Start>
 800b83c:	4603      	mov	r3, r0
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d001      	beq.n	800b846 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800b842:	f7f6 f8ad 	bl	80019a0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800b846:	bf00      	nop
 800b848:	bd80      	pop	{r7, pc}
 800b84a:	bf00      	nop
 800b84c:	0800b86d 	.word	0x0800b86d
 800b850:	20000750 	.word	0x20000750
 800b854:	20000014 	.word	0x20000014

0800b858 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800b858:	b580      	push	{r7, lr}
 800b85a:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800b85c:	4802      	ldr	r0, [pc, #8]	; (800b868 <MX_USB_HOST_Process+0x10>)
 800b85e:	f7fe fda7 	bl	800a3b0 <USBH_Process>
}
 800b862:	bf00      	nop
 800b864:	bd80      	pop	{r7, pc}
 800b866:	bf00      	nop
 800b868:	20000750 	.word	0x20000750

0800b86c <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800b86c:	b480      	push	{r7}
 800b86e:	b083      	sub	sp, #12
 800b870:	af00      	add	r7, sp, #0
 800b872:	6078      	str	r0, [r7, #4]
 800b874:	460b      	mov	r3, r1
 800b876:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800b878:	78fb      	ldrb	r3, [r7, #3]
 800b87a:	3b01      	subs	r3, #1
 800b87c:	2b04      	cmp	r3, #4
 800b87e:	d819      	bhi.n	800b8b4 <USBH_UserProcess+0x48>
 800b880:	a201      	add	r2, pc, #4	; (adr r2, 800b888 <USBH_UserProcess+0x1c>)
 800b882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b886:	bf00      	nop
 800b888:	0800b8b5 	.word	0x0800b8b5
 800b88c:	0800b8a5 	.word	0x0800b8a5
 800b890:	0800b8b5 	.word	0x0800b8b5
 800b894:	0800b8ad 	.word	0x0800b8ad
 800b898:	0800b89d 	.word	0x0800b89d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800b89c:	4b09      	ldr	r3, [pc, #36]	; (800b8c4 <USBH_UserProcess+0x58>)
 800b89e:	2203      	movs	r2, #3
 800b8a0:	701a      	strb	r2, [r3, #0]
  break;
 800b8a2:	e008      	b.n	800b8b6 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800b8a4:	4b07      	ldr	r3, [pc, #28]	; (800b8c4 <USBH_UserProcess+0x58>)
 800b8a6:	2202      	movs	r2, #2
 800b8a8:	701a      	strb	r2, [r3, #0]
  break;
 800b8aa:	e004      	b.n	800b8b6 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800b8ac:	4b05      	ldr	r3, [pc, #20]	; (800b8c4 <USBH_UserProcess+0x58>)
 800b8ae:	2201      	movs	r2, #1
 800b8b0:	701a      	strb	r2, [r3, #0]
  break;
 800b8b2:	e000      	b.n	800b8b6 <USBH_UserProcess+0x4a>

  default:
  break;
 800b8b4:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800b8b6:	bf00      	nop
 800b8b8:	370c      	adds	r7, #12
 800b8ba:	46bd      	mov	sp, r7
 800b8bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c0:	4770      	bx	lr
 800b8c2:	bf00      	nop
 800b8c4:	200000bc 	.word	0x200000bc

0800b8c8 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800b8c8:	b580      	push	{r7, lr}
 800b8ca:	b08a      	sub	sp, #40	; 0x28
 800b8cc:	af00      	add	r7, sp, #0
 800b8ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b8d0:	f107 0314 	add.w	r3, r7, #20
 800b8d4:	2200      	movs	r2, #0
 800b8d6:	601a      	str	r2, [r3, #0]
 800b8d8:	605a      	str	r2, [r3, #4]
 800b8da:	609a      	str	r2, [r3, #8]
 800b8dc:	60da      	str	r2, [r3, #12]
 800b8de:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b8e8:	d147      	bne.n	800b97a <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b8ea:	2300      	movs	r3, #0
 800b8ec:	613b      	str	r3, [r7, #16]
 800b8ee:	4b25      	ldr	r3, [pc, #148]	; (800b984 <HAL_HCD_MspInit+0xbc>)
 800b8f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8f2:	4a24      	ldr	r2, [pc, #144]	; (800b984 <HAL_HCD_MspInit+0xbc>)
 800b8f4:	f043 0301 	orr.w	r3, r3, #1
 800b8f8:	6313      	str	r3, [r2, #48]	; 0x30
 800b8fa:	4b22      	ldr	r3, [pc, #136]	; (800b984 <HAL_HCD_MspInit+0xbc>)
 800b8fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8fe:	f003 0301 	and.w	r3, r3, #1
 800b902:	613b      	str	r3, [r7, #16]
 800b904:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800b906:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b90a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b90c:	2300      	movs	r3, #0
 800b90e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b910:	2300      	movs	r3, #0
 800b912:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800b914:	f107 0314 	add.w	r3, r7, #20
 800b918:	4619      	mov	r1, r3
 800b91a:	481b      	ldr	r0, [pc, #108]	; (800b988 <HAL_HCD_MspInit+0xc0>)
 800b91c:	f7f7 fd26 	bl	800336c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800b920:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800b924:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b926:	2302      	movs	r3, #2
 800b928:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b92a:	2300      	movs	r3, #0
 800b92c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b92e:	2300      	movs	r3, #0
 800b930:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b932:	230a      	movs	r3, #10
 800b934:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b936:	f107 0314 	add.w	r3, r7, #20
 800b93a:	4619      	mov	r1, r3
 800b93c:	4812      	ldr	r0, [pc, #72]	; (800b988 <HAL_HCD_MspInit+0xc0>)
 800b93e:	f7f7 fd15 	bl	800336c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b942:	4b10      	ldr	r3, [pc, #64]	; (800b984 <HAL_HCD_MspInit+0xbc>)
 800b944:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b946:	4a0f      	ldr	r2, [pc, #60]	; (800b984 <HAL_HCD_MspInit+0xbc>)
 800b948:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b94c:	6353      	str	r3, [r2, #52]	; 0x34
 800b94e:	2300      	movs	r3, #0
 800b950:	60fb      	str	r3, [r7, #12]
 800b952:	4b0c      	ldr	r3, [pc, #48]	; (800b984 <HAL_HCD_MspInit+0xbc>)
 800b954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b956:	4a0b      	ldr	r2, [pc, #44]	; (800b984 <HAL_HCD_MspInit+0xbc>)
 800b958:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b95c:	6453      	str	r3, [r2, #68]	; 0x44
 800b95e:	4b09      	ldr	r3, [pc, #36]	; (800b984 <HAL_HCD_MspInit+0xbc>)
 800b960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b962:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b966:	60fb      	str	r3, [r7, #12]
 800b968:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800b96a:	2200      	movs	r2, #0
 800b96c:	2100      	movs	r1, #0
 800b96e:	2043      	movs	r0, #67	; 0x43
 800b970:	f7f7 f8bb 	bl	8002aea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b974:	2043      	movs	r0, #67	; 0x43
 800b976:	f7f7 f8d4 	bl	8002b22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b97a:	bf00      	nop
 800b97c:	3728      	adds	r7, #40	; 0x28
 800b97e:	46bd      	mov	sp, r7
 800b980:	bd80      	pop	{r7, pc}
 800b982:	bf00      	nop
 800b984:	40023800 	.word	0x40023800
 800b988:	40020000 	.word	0x40020000

0800b98c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800b98c:	b580      	push	{r7, lr}
 800b98e:	b082      	sub	sp, #8
 800b990:	af00      	add	r7, sp, #0
 800b992:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b99a:	4618      	mov	r0, r3
 800b99c:	f7ff f8db 	bl	800ab56 <USBH_LL_IncTimer>
}
 800b9a0:	bf00      	nop
 800b9a2:	3708      	adds	r7, #8
 800b9a4:	46bd      	mov	sp, r7
 800b9a6:	bd80      	pop	{r7, pc}

0800b9a8 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b9a8:	b580      	push	{r7, lr}
 800b9aa:	b082      	sub	sp, #8
 800b9ac:	af00      	add	r7, sp, #0
 800b9ae:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b9b6:	4618      	mov	r0, r3
 800b9b8:	f7ff f913 	bl	800abe2 <USBH_LL_Connect>
}
 800b9bc:	bf00      	nop
 800b9be:	3708      	adds	r7, #8
 800b9c0:	46bd      	mov	sp, r7
 800b9c2:	bd80      	pop	{r7, pc}

0800b9c4 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b9c4:	b580      	push	{r7, lr}
 800b9c6:	b082      	sub	sp, #8
 800b9c8:	af00      	add	r7, sp, #0
 800b9ca:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b9d2:	4618      	mov	r0, r3
 800b9d4:	f7ff f91c 	bl	800ac10 <USBH_LL_Disconnect>
}
 800b9d8:	bf00      	nop
 800b9da:	3708      	adds	r7, #8
 800b9dc:	46bd      	mov	sp, r7
 800b9de:	bd80      	pop	{r7, pc}

0800b9e0 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800b9e0:	b480      	push	{r7}
 800b9e2:	b083      	sub	sp, #12
 800b9e4:	af00      	add	r7, sp, #0
 800b9e6:	6078      	str	r0, [r7, #4]
 800b9e8:	460b      	mov	r3, r1
 800b9ea:	70fb      	strb	r3, [r7, #3]
 800b9ec:	4613      	mov	r3, r2
 800b9ee:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800b9f0:	bf00      	nop
 800b9f2:	370c      	adds	r7, #12
 800b9f4:	46bd      	mov	sp, r7
 800b9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9fa:	4770      	bx	lr

0800b9fc <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b9fc:	b580      	push	{r7, lr}
 800b9fe:	b082      	sub	sp, #8
 800ba00:	af00      	add	r7, sp, #0
 800ba02:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800ba0a:	4618      	mov	r0, r3
 800ba0c:	f7ff f8cd 	bl	800abaa <USBH_LL_PortEnabled>
}
 800ba10:	bf00      	nop
 800ba12:	3708      	adds	r7, #8
 800ba14:	46bd      	mov	sp, r7
 800ba16:	bd80      	pop	{r7, pc}

0800ba18 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800ba18:	b580      	push	{r7, lr}
 800ba1a:	b082      	sub	sp, #8
 800ba1c:	af00      	add	r7, sp, #0
 800ba1e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800ba26:	4618      	mov	r0, r3
 800ba28:	f7ff f8cd 	bl	800abc6 <USBH_LL_PortDisabled>
}
 800ba2c:	bf00      	nop
 800ba2e:	3708      	adds	r7, #8
 800ba30:	46bd      	mov	sp, r7
 800ba32:	bd80      	pop	{r7, pc}

0800ba34 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800ba34:	b580      	push	{r7, lr}
 800ba36:	b082      	sub	sp, #8
 800ba38:	af00      	add	r7, sp, #0
 800ba3a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800ba42:	2b01      	cmp	r3, #1
 800ba44:	d12a      	bne.n	800ba9c <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800ba46:	4a18      	ldr	r2, [pc, #96]	; (800baa8 <USBH_LL_Init+0x74>)
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	4a15      	ldr	r2, [pc, #84]	; (800baa8 <USBH_LL_Init+0x74>)
 800ba52:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ba56:	4b14      	ldr	r3, [pc, #80]	; (800baa8 <USBH_LL_Init+0x74>)
 800ba58:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800ba5c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800ba5e:	4b12      	ldr	r3, [pc, #72]	; (800baa8 <USBH_LL_Init+0x74>)
 800ba60:	2208      	movs	r2, #8
 800ba62:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800ba64:	4b10      	ldr	r3, [pc, #64]	; (800baa8 <USBH_LL_Init+0x74>)
 800ba66:	2201      	movs	r2, #1
 800ba68:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800ba6a:	4b0f      	ldr	r3, [pc, #60]	; (800baa8 <USBH_LL_Init+0x74>)
 800ba6c:	2200      	movs	r2, #0
 800ba6e:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800ba70:	4b0d      	ldr	r3, [pc, #52]	; (800baa8 <USBH_LL_Init+0x74>)
 800ba72:	2202      	movs	r2, #2
 800ba74:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800ba76:	4b0c      	ldr	r3, [pc, #48]	; (800baa8 <USBH_LL_Init+0x74>)
 800ba78:	2200      	movs	r2, #0
 800ba7a:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800ba7c:	480a      	ldr	r0, [pc, #40]	; (800baa8 <USBH_LL_Init+0x74>)
 800ba7e:	f7f7 fe2a 	bl	80036d6 <HAL_HCD_Init>
 800ba82:	4603      	mov	r3, r0
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d001      	beq.n	800ba8c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800ba88:	f7f5 ff8a 	bl	80019a0 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800ba8c:	4806      	ldr	r0, [pc, #24]	; (800baa8 <USBH_LL_Init+0x74>)
 800ba8e:	f7f8 fa0e 	bl	8003eae <HAL_HCD_GetCurrentFrame>
 800ba92:	4603      	mov	r3, r0
 800ba94:	4619      	mov	r1, r3
 800ba96:	6878      	ldr	r0, [r7, #4]
 800ba98:	f7ff f84e 	bl	800ab38 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800ba9c:	2300      	movs	r3, #0
}
 800ba9e:	4618      	mov	r0, r3
 800baa0:	3708      	adds	r7, #8
 800baa2:	46bd      	mov	sp, r7
 800baa4:	bd80      	pop	{r7, pc}
 800baa6:	bf00      	nop
 800baa8:	20000b28 	.word	0x20000b28

0800baac <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800baac:	b580      	push	{r7, lr}
 800baae:	b084      	sub	sp, #16
 800bab0:	af00      	add	r7, sp, #0
 800bab2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bab4:	2300      	movs	r3, #0
 800bab6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bab8:	2300      	movs	r3, #0
 800baba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800bac2:	4618      	mov	r0, r3
 800bac4:	f7f8 f97d 	bl	8003dc2 <HAL_HCD_Start>
 800bac8:	4603      	mov	r3, r0
 800baca:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800bacc:	7bfb      	ldrb	r3, [r7, #15]
 800bace:	4618      	mov	r0, r3
 800bad0:	f000 f95c 	bl	800bd8c <USBH_Get_USB_Status>
 800bad4:	4603      	mov	r3, r0
 800bad6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bad8:	7bbb      	ldrb	r3, [r7, #14]
}
 800bada:	4618      	mov	r0, r3
 800badc:	3710      	adds	r7, #16
 800bade:	46bd      	mov	sp, r7
 800bae0:	bd80      	pop	{r7, pc}

0800bae2 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800bae2:	b580      	push	{r7, lr}
 800bae4:	b084      	sub	sp, #16
 800bae6:	af00      	add	r7, sp, #0
 800bae8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800baea:	2300      	movs	r3, #0
 800baec:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800baee:	2300      	movs	r3, #0
 800baf0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800baf8:	4618      	mov	r0, r3
 800bafa:	f7f8 f985 	bl	8003e08 <HAL_HCD_Stop>
 800bafe:	4603      	mov	r3, r0
 800bb00:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800bb02:	7bfb      	ldrb	r3, [r7, #15]
 800bb04:	4618      	mov	r0, r3
 800bb06:	f000 f941 	bl	800bd8c <USBH_Get_USB_Status>
 800bb0a:	4603      	mov	r3, r0
 800bb0c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bb0e:	7bbb      	ldrb	r3, [r7, #14]
}
 800bb10:	4618      	mov	r0, r3
 800bb12:	3710      	adds	r7, #16
 800bb14:	46bd      	mov	sp, r7
 800bb16:	bd80      	pop	{r7, pc}

0800bb18 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800bb18:	b580      	push	{r7, lr}
 800bb1a:	b084      	sub	sp, #16
 800bb1c:	af00      	add	r7, sp, #0
 800bb1e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800bb20:	2301      	movs	r3, #1
 800bb22:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800bb2a:	4618      	mov	r0, r3
 800bb2c:	f7f8 f9cd 	bl	8003eca <HAL_HCD_GetCurrentSpeed>
 800bb30:	4603      	mov	r3, r0
 800bb32:	2b02      	cmp	r3, #2
 800bb34:	d00c      	beq.n	800bb50 <USBH_LL_GetSpeed+0x38>
 800bb36:	2b02      	cmp	r3, #2
 800bb38:	d80d      	bhi.n	800bb56 <USBH_LL_GetSpeed+0x3e>
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d002      	beq.n	800bb44 <USBH_LL_GetSpeed+0x2c>
 800bb3e:	2b01      	cmp	r3, #1
 800bb40:	d003      	beq.n	800bb4a <USBH_LL_GetSpeed+0x32>
 800bb42:	e008      	b.n	800bb56 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800bb44:	2300      	movs	r3, #0
 800bb46:	73fb      	strb	r3, [r7, #15]
    break;
 800bb48:	e008      	b.n	800bb5c <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800bb4a:	2301      	movs	r3, #1
 800bb4c:	73fb      	strb	r3, [r7, #15]
    break;
 800bb4e:	e005      	b.n	800bb5c <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800bb50:	2302      	movs	r3, #2
 800bb52:	73fb      	strb	r3, [r7, #15]
    break;
 800bb54:	e002      	b.n	800bb5c <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800bb56:	2301      	movs	r3, #1
 800bb58:	73fb      	strb	r3, [r7, #15]
    break;
 800bb5a:	bf00      	nop
  }
  return  speed;
 800bb5c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb5e:	4618      	mov	r0, r3
 800bb60:	3710      	adds	r7, #16
 800bb62:	46bd      	mov	sp, r7
 800bb64:	bd80      	pop	{r7, pc}

0800bb66 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800bb66:	b580      	push	{r7, lr}
 800bb68:	b084      	sub	sp, #16
 800bb6a:	af00      	add	r7, sp, #0
 800bb6c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb6e:	2300      	movs	r3, #0
 800bb70:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bb72:	2300      	movs	r3, #0
 800bb74:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800bb7c:	4618      	mov	r0, r3
 800bb7e:	f7f8 f960 	bl	8003e42 <HAL_HCD_ResetPort>
 800bb82:	4603      	mov	r3, r0
 800bb84:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800bb86:	7bfb      	ldrb	r3, [r7, #15]
 800bb88:	4618      	mov	r0, r3
 800bb8a:	f000 f8ff 	bl	800bd8c <USBH_Get_USB_Status>
 800bb8e:	4603      	mov	r3, r0
 800bb90:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bb92:	7bbb      	ldrb	r3, [r7, #14]
}
 800bb94:	4618      	mov	r0, r3
 800bb96:	3710      	adds	r7, #16
 800bb98:	46bd      	mov	sp, r7
 800bb9a:	bd80      	pop	{r7, pc}

0800bb9c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800bb9c:	b580      	push	{r7, lr}
 800bb9e:	b082      	sub	sp, #8
 800bba0:	af00      	add	r7, sp, #0
 800bba2:	6078      	str	r0, [r7, #4]
 800bba4:	460b      	mov	r3, r1
 800bba6:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800bbae:	78fa      	ldrb	r2, [r7, #3]
 800bbb0:	4611      	mov	r1, r2
 800bbb2:	4618      	mov	r0, r3
 800bbb4:	f7f8 f967 	bl	8003e86 <HAL_HCD_HC_GetXferCount>
 800bbb8:	4603      	mov	r3, r0
}
 800bbba:	4618      	mov	r0, r3
 800bbbc:	3708      	adds	r7, #8
 800bbbe:	46bd      	mov	sp, r7
 800bbc0:	bd80      	pop	{r7, pc}

0800bbc2 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800bbc2:	b590      	push	{r4, r7, lr}
 800bbc4:	b089      	sub	sp, #36	; 0x24
 800bbc6:	af04      	add	r7, sp, #16
 800bbc8:	6078      	str	r0, [r7, #4]
 800bbca:	4608      	mov	r0, r1
 800bbcc:	4611      	mov	r1, r2
 800bbce:	461a      	mov	r2, r3
 800bbd0:	4603      	mov	r3, r0
 800bbd2:	70fb      	strb	r3, [r7, #3]
 800bbd4:	460b      	mov	r3, r1
 800bbd6:	70bb      	strb	r3, [r7, #2]
 800bbd8:	4613      	mov	r3, r2
 800bbda:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bbdc:	2300      	movs	r3, #0
 800bbde:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bbe0:	2300      	movs	r3, #0
 800bbe2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800bbea:	787c      	ldrb	r4, [r7, #1]
 800bbec:	78ba      	ldrb	r2, [r7, #2]
 800bbee:	78f9      	ldrb	r1, [r7, #3]
 800bbf0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800bbf2:	9302      	str	r3, [sp, #8]
 800bbf4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800bbf8:	9301      	str	r3, [sp, #4]
 800bbfa:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bbfe:	9300      	str	r3, [sp, #0]
 800bc00:	4623      	mov	r3, r4
 800bc02:	f7f7 fdca 	bl	800379a <HAL_HCD_HC_Init>
 800bc06:	4603      	mov	r3, r0
 800bc08:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800bc0a:	7bfb      	ldrb	r3, [r7, #15]
 800bc0c:	4618      	mov	r0, r3
 800bc0e:	f000 f8bd 	bl	800bd8c <USBH_Get_USB_Status>
 800bc12:	4603      	mov	r3, r0
 800bc14:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bc16:	7bbb      	ldrb	r3, [r7, #14]
}
 800bc18:	4618      	mov	r0, r3
 800bc1a:	3714      	adds	r7, #20
 800bc1c:	46bd      	mov	sp, r7
 800bc1e:	bd90      	pop	{r4, r7, pc}

0800bc20 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800bc20:	b580      	push	{r7, lr}
 800bc22:	b084      	sub	sp, #16
 800bc24:	af00      	add	r7, sp, #0
 800bc26:	6078      	str	r0, [r7, #4]
 800bc28:	460b      	mov	r3, r1
 800bc2a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bc2c:	2300      	movs	r3, #0
 800bc2e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bc30:	2300      	movs	r3, #0
 800bc32:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800bc3a:	78fa      	ldrb	r2, [r7, #3]
 800bc3c:	4611      	mov	r1, r2
 800bc3e:	4618      	mov	r0, r3
 800bc40:	f7f7 fe3a 	bl	80038b8 <HAL_HCD_HC_Halt>
 800bc44:	4603      	mov	r3, r0
 800bc46:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800bc48:	7bfb      	ldrb	r3, [r7, #15]
 800bc4a:	4618      	mov	r0, r3
 800bc4c:	f000 f89e 	bl	800bd8c <USBH_Get_USB_Status>
 800bc50:	4603      	mov	r3, r0
 800bc52:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bc54:	7bbb      	ldrb	r3, [r7, #14]
}
 800bc56:	4618      	mov	r0, r3
 800bc58:	3710      	adds	r7, #16
 800bc5a:	46bd      	mov	sp, r7
 800bc5c:	bd80      	pop	{r7, pc}

0800bc5e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800bc5e:	b590      	push	{r4, r7, lr}
 800bc60:	b089      	sub	sp, #36	; 0x24
 800bc62:	af04      	add	r7, sp, #16
 800bc64:	6078      	str	r0, [r7, #4]
 800bc66:	4608      	mov	r0, r1
 800bc68:	4611      	mov	r1, r2
 800bc6a:	461a      	mov	r2, r3
 800bc6c:	4603      	mov	r3, r0
 800bc6e:	70fb      	strb	r3, [r7, #3]
 800bc70:	460b      	mov	r3, r1
 800bc72:	70bb      	strb	r3, [r7, #2]
 800bc74:	4613      	mov	r3, r2
 800bc76:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bc78:	2300      	movs	r3, #0
 800bc7a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bc7c:	2300      	movs	r3, #0
 800bc7e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800bc86:	787c      	ldrb	r4, [r7, #1]
 800bc88:	78ba      	ldrb	r2, [r7, #2]
 800bc8a:	78f9      	ldrb	r1, [r7, #3]
 800bc8c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800bc90:	9303      	str	r3, [sp, #12]
 800bc92:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800bc94:	9302      	str	r3, [sp, #8]
 800bc96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc98:	9301      	str	r3, [sp, #4]
 800bc9a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bc9e:	9300      	str	r3, [sp, #0]
 800bca0:	4623      	mov	r3, r4
 800bca2:	f7f7 fe2d 	bl	8003900 <HAL_HCD_HC_SubmitRequest>
 800bca6:	4603      	mov	r3, r0
 800bca8:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800bcaa:	7bfb      	ldrb	r3, [r7, #15]
 800bcac:	4618      	mov	r0, r3
 800bcae:	f000 f86d 	bl	800bd8c <USBH_Get_USB_Status>
 800bcb2:	4603      	mov	r3, r0
 800bcb4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bcb6:	7bbb      	ldrb	r3, [r7, #14]
}
 800bcb8:	4618      	mov	r0, r3
 800bcba:	3714      	adds	r7, #20
 800bcbc:	46bd      	mov	sp, r7
 800bcbe:	bd90      	pop	{r4, r7, pc}

0800bcc0 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800bcc0:	b580      	push	{r7, lr}
 800bcc2:	b082      	sub	sp, #8
 800bcc4:	af00      	add	r7, sp, #0
 800bcc6:	6078      	str	r0, [r7, #4]
 800bcc8:	460b      	mov	r3, r1
 800bcca:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800bcd2:	78fa      	ldrb	r2, [r7, #3]
 800bcd4:	4611      	mov	r1, r2
 800bcd6:	4618      	mov	r0, r3
 800bcd8:	f7f8 f8c1 	bl	8003e5e <HAL_HCD_HC_GetURBState>
 800bcdc:	4603      	mov	r3, r0
}
 800bcde:	4618      	mov	r0, r3
 800bce0:	3708      	adds	r7, #8
 800bce2:	46bd      	mov	sp, r7
 800bce4:	bd80      	pop	{r7, pc}

0800bce6 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800bce6:	b580      	push	{r7, lr}
 800bce8:	b082      	sub	sp, #8
 800bcea:	af00      	add	r7, sp, #0
 800bcec:	6078      	str	r0, [r7, #4]
 800bcee:	460b      	mov	r3, r1
 800bcf0:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800bcf8:	2b01      	cmp	r3, #1
 800bcfa:	d103      	bne.n	800bd04 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800bcfc:	78fb      	ldrb	r3, [r7, #3]
 800bcfe:	4618      	mov	r0, r3
 800bd00:	f000 f870 	bl	800bde4 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800bd04:	20c8      	movs	r0, #200	; 0xc8
 800bd06:	f7f6 fdf1 	bl	80028ec <HAL_Delay>
  return USBH_OK;
 800bd0a:	2300      	movs	r3, #0
}
 800bd0c:	4618      	mov	r0, r3
 800bd0e:	3708      	adds	r7, #8
 800bd10:	46bd      	mov	sp, r7
 800bd12:	bd80      	pop	{r7, pc}

0800bd14 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800bd14:	b480      	push	{r7}
 800bd16:	b085      	sub	sp, #20
 800bd18:	af00      	add	r7, sp, #0
 800bd1a:	6078      	str	r0, [r7, #4]
 800bd1c:	460b      	mov	r3, r1
 800bd1e:	70fb      	strb	r3, [r7, #3]
 800bd20:	4613      	mov	r3, r2
 800bd22:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800bd2a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800bd2c:	78fb      	ldrb	r3, [r7, #3]
 800bd2e:	68fa      	ldr	r2, [r7, #12]
 800bd30:	212c      	movs	r1, #44	; 0x2c
 800bd32:	fb01 f303 	mul.w	r3, r1, r3
 800bd36:	4413      	add	r3, r2
 800bd38:	333b      	adds	r3, #59	; 0x3b
 800bd3a:	781b      	ldrb	r3, [r3, #0]
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d009      	beq.n	800bd54 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800bd40:	78fb      	ldrb	r3, [r7, #3]
 800bd42:	68fa      	ldr	r2, [r7, #12]
 800bd44:	212c      	movs	r1, #44	; 0x2c
 800bd46:	fb01 f303 	mul.w	r3, r1, r3
 800bd4a:	4413      	add	r3, r2
 800bd4c:	3354      	adds	r3, #84	; 0x54
 800bd4e:	78ba      	ldrb	r2, [r7, #2]
 800bd50:	701a      	strb	r2, [r3, #0]
 800bd52:	e008      	b.n	800bd66 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800bd54:	78fb      	ldrb	r3, [r7, #3]
 800bd56:	68fa      	ldr	r2, [r7, #12]
 800bd58:	212c      	movs	r1, #44	; 0x2c
 800bd5a:	fb01 f303 	mul.w	r3, r1, r3
 800bd5e:	4413      	add	r3, r2
 800bd60:	3355      	adds	r3, #85	; 0x55
 800bd62:	78ba      	ldrb	r2, [r7, #2]
 800bd64:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800bd66:	2300      	movs	r3, #0
}
 800bd68:	4618      	mov	r0, r3
 800bd6a:	3714      	adds	r7, #20
 800bd6c:	46bd      	mov	sp, r7
 800bd6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd72:	4770      	bx	lr

0800bd74 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800bd74:	b580      	push	{r7, lr}
 800bd76:	b082      	sub	sp, #8
 800bd78:	af00      	add	r7, sp, #0
 800bd7a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800bd7c:	6878      	ldr	r0, [r7, #4]
 800bd7e:	f7f6 fdb5 	bl	80028ec <HAL_Delay>
}
 800bd82:	bf00      	nop
 800bd84:	3708      	adds	r7, #8
 800bd86:	46bd      	mov	sp, r7
 800bd88:	bd80      	pop	{r7, pc}
	...

0800bd8c <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800bd8c:	b480      	push	{r7}
 800bd8e:	b085      	sub	sp, #20
 800bd90:	af00      	add	r7, sp, #0
 800bd92:	4603      	mov	r3, r0
 800bd94:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bd96:	2300      	movs	r3, #0
 800bd98:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800bd9a:	79fb      	ldrb	r3, [r7, #7]
 800bd9c:	2b03      	cmp	r3, #3
 800bd9e:	d817      	bhi.n	800bdd0 <USBH_Get_USB_Status+0x44>
 800bda0:	a201      	add	r2, pc, #4	; (adr r2, 800bda8 <USBH_Get_USB_Status+0x1c>)
 800bda2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bda6:	bf00      	nop
 800bda8:	0800bdb9 	.word	0x0800bdb9
 800bdac:	0800bdbf 	.word	0x0800bdbf
 800bdb0:	0800bdc5 	.word	0x0800bdc5
 800bdb4:	0800bdcb 	.word	0x0800bdcb
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800bdb8:	2300      	movs	r3, #0
 800bdba:	73fb      	strb	r3, [r7, #15]
    break;
 800bdbc:	e00b      	b.n	800bdd6 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800bdbe:	2302      	movs	r3, #2
 800bdc0:	73fb      	strb	r3, [r7, #15]
    break;
 800bdc2:	e008      	b.n	800bdd6 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800bdc4:	2301      	movs	r3, #1
 800bdc6:	73fb      	strb	r3, [r7, #15]
    break;
 800bdc8:	e005      	b.n	800bdd6 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800bdca:	2302      	movs	r3, #2
 800bdcc:	73fb      	strb	r3, [r7, #15]
    break;
 800bdce:	e002      	b.n	800bdd6 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800bdd0:	2302      	movs	r3, #2
 800bdd2:	73fb      	strb	r3, [r7, #15]
    break;
 800bdd4:	bf00      	nop
  }
  return usb_status;
 800bdd6:	7bfb      	ldrb	r3, [r7, #15]
}
 800bdd8:	4618      	mov	r0, r3
 800bdda:	3714      	adds	r7, #20
 800bddc:	46bd      	mov	sp, r7
 800bdde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bde2:	4770      	bx	lr

0800bde4 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800bde4:	b580      	push	{r7, lr}
 800bde6:	b084      	sub	sp, #16
 800bde8:	af00      	add	r7, sp, #0
 800bdea:	4603      	mov	r3, r0
 800bdec:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800bdee:	79fb      	ldrb	r3, [r7, #7]
 800bdf0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800bdf2:	79fb      	ldrb	r3, [r7, #7]
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d102      	bne.n	800bdfe <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800bdf8:	2300      	movs	r3, #0
 800bdfa:	73fb      	strb	r3, [r7, #15]
 800bdfc:	e001      	b.n	800be02 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800bdfe:	2301      	movs	r3, #1
 800be00:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800be02:	7bfb      	ldrb	r3, [r7, #15]
 800be04:	461a      	mov	r2, r3
 800be06:	2101      	movs	r1, #1
 800be08:	4803      	ldr	r0, [pc, #12]	; (800be18 <MX_DriverVbusFS+0x34>)
 800be0a:	f7f7 fc4b 	bl	80036a4 <HAL_GPIO_WritePin>
}
 800be0e:	bf00      	nop
 800be10:	3710      	adds	r7, #16
 800be12:	46bd      	mov	sp, r7
 800be14:	bd80      	pop	{r7, pc}
 800be16:	bf00      	nop
 800be18:	40020800 	.word	0x40020800

0800be1c <__errno>:
 800be1c:	4b01      	ldr	r3, [pc, #4]	; (800be24 <__errno+0x8>)
 800be1e:	6818      	ldr	r0, [r3, #0]
 800be20:	4770      	bx	lr
 800be22:	bf00      	nop
 800be24:	20000034 	.word	0x20000034

0800be28 <__libc_init_array>:
 800be28:	b570      	push	{r4, r5, r6, lr}
 800be2a:	4d0d      	ldr	r5, [pc, #52]	; (800be60 <__libc_init_array+0x38>)
 800be2c:	4c0d      	ldr	r4, [pc, #52]	; (800be64 <__libc_init_array+0x3c>)
 800be2e:	1b64      	subs	r4, r4, r5
 800be30:	10a4      	asrs	r4, r4, #2
 800be32:	2600      	movs	r6, #0
 800be34:	42a6      	cmp	r6, r4
 800be36:	d109      	bne.n	800be4c <__libc_init_array+0x24>
 800be38:	4d0b      	ldr	r5, [pc, #44]	; (800be68 <__libc_init_array+0x40>)
 800be3a:	4c0c      	ldr	r4, [pc, #48]	; (800be6c <__libc_init_array+0x44>)
 800be3c:	f000 fe80 	bl	800cb40 <_init>
 800be40:	1b64      	subs	r4, r4, r5
 800be42:	10a4      	asrs	r4, r4, #2
 800be44:	2600      	movs	r6, #0
 800be46:	42a6      	cmp	r6, r4
 800be48:	d105      	bne.n	800be56 <__libc_init_array+0x2e>
 800be4a:	bd70      	pop	{r4, r5, r6, pc}
 800be4c:	f855 3b04 	ldr.w	r3, [r5], #4
 800be50:	4798      	blx	r3
 800be52:	3601      	adds	r6, #1
 800be54:	e7ee      	b.n	800be34 <__libc_init_array+0xc>
 800be56:	f855 3b04 	ldr.w	r3, [r5], #4
 800be5a:	4798      	blx	r3
 800be5c:	3601      	adds	r6, #1
 800be5e:	e7f2      	b.n	800be46 <__libc_init_array+0x1e>
 800be60:	0800cd38 	.word	0x0800cd38
 800be64:	0800cd38 	.word	0x0800cd38
 800be68:	0800cd38 	.word	0x0800cd38
 800be6c:	0800cd3c 	.word	0x0800cd3c

0800be70 <malloc>:
 800be70:	4b02      	ldr	r3, [pc, #8]	; (800be7c <malloc+0xc>)
 800be72:	4601      	mov	r1, r0
 800be74:	6818      	ldr	r0, [r3, #0]
 800be76:	f000 b863 	b.w	800bf40 <_malloc_r>
 800be7a:	bf00      	nop
 800be7c:	20000034 	.word	0x20000034

0800be80 <free>:
 800be80:	4b02      	ldr	r3, [pc, #8]	; (800be8c <free+0xc>)
 800be82:	4601      	mov	r1, r0
 800be84:	6818      	ldr	r0, [r3, #0]
 800be86:	f000 b80b 	b.w	800bea0 <_free_r>
 800be8a:	bf00      	nop
 800be8c:	20000034 	.word	0x20000034

0800be90 <memset>:
 800be90:	4402      	add	r2, r0
 800be92:	4603      	mov	r3, r0
 800be94:	4293      	cmp	r3, r2
 800be96:	d100      	bne.n	800be9a <memset+0xa>
 800be98:	4770      	bx	lr
 800be9a:	f803 1b01 	strb.w	r1, [r3], #1
 800be9e:	e7f9      	b.n	800be94 <memset+0x4>

0800bea0 <_free_r>:
 800bea0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bea2:	2900      	cmp	r1, #0
 800bea4:	d048      	beq.n	800bf38 <_free_r+0x98>
 800bea6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800beaa:	9001      	str	r0, [sp, #4]
 800beac:	2b00      	cmp	r3, #0
 800beae:	f1a1 0404 	sub.w	r4, r1, #4
 800beb2:	bfb8      	it	lt
 800beb4:	18e4      	addlt	r4, r4, r3
 800beb6:	f000 f8cd 	bl	800c054 <__malloc_lock>
 800beba:	4a20      	ldr	r2, [pc, #128]	; (800bf3c <_free_r+0x9c>)
 800bebc:	9801      	ldr	r0, [sp, #4]
 800bebe:	6813      	ldr	r3, [r2, #0]
 800bec0:	4615      	mov	r5, r2
 800bec2:	b933      	cbnz	r3, 800bed2 <_free_r+0x32>
 800bec4:	6063      	str	r3, [r4, #4]
 800bec6:	6014      	str	r4, [r2, #0]
 800bec8:	b003      	add	sp, #12
 800beca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bece:	f000 b8c7 	b.w	800c060 <__malloc_unlock>
 800bed2:	42a3      	cmp	r3, r4
 800bed4:	d90b      	bls.n	800beee <_free_r+0x4e>
 800bed6:	6821      	ldr	r1, [r4, #0]
 800bed8:	1862      	adds	r2, r4, r1
 800beda:	4293      	cmp	r3, r2
 800bedc:	bf04      	itt	eq
 800bede:	681a      	ldreq	r2, [r3, #0]
 800bee0:	685b      	ldreq	r3, [r3, #4]
 800bee2:	6063      	str	r3, [r4, #4]
 800bee4:	bf04      	itt	eq
 800bee6:	1852      	addeq	r2, r2, r1
 800bee8:	6022      	streq	r2, [r4, #0]
 800beea:	602c      	str	r4, [r5, #0]
 800beec:	e7ec      	b.n	800bec8 <_free_r+0x28>
 800beee:	461a      	mov	r2, r3
 800bef0:	685b      	ldr	r3, [r3, #4]
 800bef2:	b10b      	cbz	r3, 800bef8 <_free_r+0x58>
 800bef4:	42a3      	cmp	r3, r4
 800bef6:	d9fa      	bls.n	800beee <_free_r+0x4e>
 800bef8:	6811      	ldr	r1, [r2, #0]
 800befa:	1855      	adds	r5, r2, r1
 800befc:	42a5      	cmp	r5, r4
 800befe:	d10b      	bne.n	800bf18 <_free_r+0x78>
 800bf00:	6824      	ldr	r4, [r4, #0]
 800bf02:	4421      	add	r1, r4
 800bf04:	1854      	adds	r4, r2, r1
 800bf06:	42a3      	cmp	r3, r4
 800bf08:	6011      	str	r1, [r2, #0]
 800bf0a:	d1dd      	bne.n	800bec8 <_free_r+0x28>
 800bf0c:	681c      	ldr	r4, [r3, #0]
 800bf0e:	685b      	ldr	r3, [r3, #4]
 800bf10:	6053      	str	r3, [r2, #4]
 800bf12:	4421      	add	r1, r4
 800bf14:	6011      	str	r1, [r2, #0]
 800bf16:	e7d7      	b.n	800bec8 <_free_r+0x28>
 800bf18:	d902      	bls.n	800bf20 <_free_r+0x80>
 800bf1a:	230c      	movs	r3, #12
 800bf1c:	6003      	str	r3, [r0, #0]
 800bf1e:	e7d3      	b.n	800bec8 <_free_r+0x28>
 800bf20:	6825      	ldr	r5, [r4, #0]
 800bf22:	1961      	adds	r1, r4, r5
 800bf24:	428b      	cmp	r3, r1
 800bf26:	bf04      	itt	eq
 800bf28:	6819      	ldreq	r1, [r3, #0]
 800bf2a:	685b      	ldreq	r3, [r3, #4]
 800bf2c:	6063      	str	r3, [r4, #4]
 800bf2e:	bf04      	itt	eq
 800bf30:	1949      	addeq	r1, r1, r5
 800bf32:	6021      	streq	r1, [r4, #0]
 800bf34:	6054      	str	r4, [r2, #4]
 800bf36:	e7c7      	b.n	800bec8 <_free_r+0x28>
 800bf38:	b003      	add	sp, #12
 800bf3a:	bd30      	pop	{r4, r5, pc}
 800bf3c:	200000c0 	.word	0x200000c0

0800bf40 <_malloc_r>:
 800bf40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf42:	1ccd      	adds	r5, r1, #3
 800bf44:	f025 0503 	bic.w	r5, r5, #3
 800bf48:	3508      	adds	r5, #8
 800bf4a:	2d0c      	cmp	r5, #12
 800bf4c:	bf38      	it	cc
 800bf4e:	250c      	movcc	r5, #12
 800bf50:	2d00      	cmp	r5, #0
 800bf52:	4606      	mov	r6, r0
 800bf54:	db01      	blt.n	800bf5a <_malloc_r+0x1a>
 800bf56:	42a9      	cmp	r1, r5
 800bf58:	d903      	bls.n	800bf62 <_malloc_r+0x22>
 800bf5a:	230c      	movs	r3, #12
 800bf5c:	6033      	str	r3, [r6, #0]
 800bf5e:	2000      	movs	r0, #0
 800bf60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bf62:	f000 f877 	bl	800c054 <__malloc_lock>
 800bf66:	4921      	ldr	r1, [pc, #132]	; (800bfec <_malloc_r+0xac>)
 800bf68:	680a      	ldr	r2, [r1, #0]
 800bf6a:	4614      	mov	r4, r2
 800bf6c:	b99c      	cbnz	r4, 800bf96 <_malloc_r+0x56>
 800bf6e:	4f20      	ldr	r7, [pc, #128]	; (800bff0 <_malloc_r+0xb0>)
 800bf70:	683b      	ldr	r3, [r7, #0]
 800bf72:	b923      	cbnz	r3, 800bf7e <_malloc_r+0x3e>
 800bf74:	4621      	mov	r1, r4
 800bf76:	4630      	mov	r0, r6
 800bf78:	f000 f83c 	bl	800bff4 <_sbrk_r>
 800bf7c:	6038      	str	r0, [r7, #0]
 800bf7e:	4629      	mov	r1, r5
 800bf80:	4630      	mov	r0, r6
 800bf82:	f000 f837 	bl	800bff4 <_sbrk_r>
 800bf86:	1c43      	adds	r3, r0, #1
 800bf88:	d123      	bne.n	800bfd2 <_malloc_r+0x92>
 800bf8a:	230c      	movs	r3, #12
 800bf8c:	6033      	str	r3, [r6, #0]
 800bf8e:	4630      	mov	r0, r6
 800bf90:	f000 f866 	bl	800c060 <__malloc_unlock>
 800bf94:	e7e3      	b.n	800bf5e <_malloc_r+0x1e>
 800bf96:	6823      	ldr	r3, [r4, #0]
 800bf98:	1b5b      	subs	r3, r3, r5
 800bf9a:	d417      	bmi.n	800bfcc <_malloc_r+0x8c>
 800bf9c:	2b0b      	cmp	r3, #11
 800bf9e:	d903      	bls.n	800bfa8 <_malloc_r+0x68>
 800bfa0:	6023      	str	r3, [r4, #0]
 800bfa2:	441c      	add	r4, r3
 800bfa4:	6025      	str	r5, [r4, #0]
 800bfa6:	e004      	b.n	800bfb2 <_malloc_r+0x72>
 800bfa8:	6863      	ldr	r3, [r4, #4]
 800bfaa:	42a2      	cmp	r2, r4
 800bfac:	bf0c      	ite	eq
 800bfae:	600b      	streq	r3, [r1, #0]
 800bfb0:	6053      	strne	r3, [r2, #4]
 800bfb2:	4630      	mov	r0, r6
 800bfb4:	f000 f854 	bl	800c060 <__malloc_unlock>
 800bfb8:	f104 000b 	add.w	r0, r4, #11
 800bfbc:	1d23      	adds	r3, r4, #4
 800bfbe:	f020 0007 	bic.w	r0, r0, #7
 800bfc2:	1ac2      	subs	r2, r0, r3
 800bfc4:	d0cc      	beq.n	800bf60 <_malloc_r+0x20>
 800bfc6:	1a1b      	subs	r3, r3, r0
 800bfc8:	50a3      	str	r3, [r4, r2]
 800bfca:	e7c9      	b.n	800bf60 <_malloc_r+0x20>
 800bfcc:	4622      	mov	r2, r4
 800bfce:	6864      	ldr	r4, [r4, #4]
 800bfd0:	e7cc      	b.n	800bf6c <_malloc_r+0x2c>
 800bfd2:	1cc4      	adds	r4, r0, #3
 800bfd4:	f024 0403 	bic.w	r4, r4, #3
 800bfd8:	42a0      	cmp	r0, r4
 800bfda:	d0e3      	beq.n	800bfa4 <_malloc_r+0x64>
 800bfdc:	1a21      	subs	r1, r4, r0
 800bfde:	4630      	mov	r0, r6
 800bfe0:	f000 f808 	bl	800bff4 <_sbrk_r>
 800bfe4:	3001      	adds	r0, #1
 800bfe6:	d1dd      	bne.n	800bfa4 <_malloc_r+0x64>
 800bfe8:	e7cf      	b.n	800bf8a <_malloc_r+0x4a>
 800bfea:	bf00      	nop
 800bfec:	200000c0 	.word	0x200000c0
 800bff0:	200000c4 	.word	0x200000c4

0800bff4 <_sbrk_r>:
 800bff4:	b538      	push	{r3, r4, r5, lr}
 800bff6:	4d06      	ldr	r5, [pc, #24]	; (800c010 <_sbrk_r+0x1c>)
 800bff8:	2300      	movs	r3, #0
 800bffa:	4604      	mov	r4, r0
 800bffc:	4608      	mov	r0, r1
 800bffe:	602b      	str	r3, [r5, #0]
 800c000:	f7f5 ff2a 	bl	8001e58 <_sbrk>
 800c004:	1c43      	adds	r3, r0, #1
 800c006:	d102      	bne.n	800c00e <_sbrk_r+0x1a>
 800c008:	682b      	ldr	r3, [r5, #0]
 800c00a:	b103      	cbz	r3, 800c00e <_sbrk_r+0x1a>
 800c00c:	6023      	str	r3, [r4, #0]
 800c00e:	bd38      	pop	{r3, r4, r5, pc}
 800c010:	20000e2c 	.word	0x20000e2c

0800c014 <siprintf>:
 800c014:	b40e      	push	{r1, r2, r3}
 800c016:	b500      	push	{lr}
 800c018:	b09c      	sub	sp, #112	; 0x70
 800c01a:	ab1d      	add	r3, sp, #116	; 0x74
 800c01c:	9002      	str	r0, [sp, #8]
 800c01e:	9006      	str	r0, [sp, #24]
 800c020:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c024:	4809      	ldr	r0, [pc, #36]	; (800c04c <siprintf+0x38>)
 800c026:	9107      	str	r1, [sp, #28]
 800c028:	9104      	str	r1, [sp, #16]
 800c02a:	4909      	ldr	r1, [pc, #36]	; (800c050 <siprintf+0x3c>)
 800c02c:	f853 2b04 	ldr.w	r2, [r3], #4
 800c030:	9105      	str	r1, [sp, #20]
 800c032:	6800      	ldr	r0, [r0, #0]
 800c034:	9301      	str	r3, [sp, #4]
 800c036:	a902      	add	r1, sp, #8
 800c038:	f000 f874 	bl	800c124 <_svfiprintf_r>
 800c03c:	9b02      	ldr	r3, [sp, #8]
 800c03e:	2200      	movs	r2, #0
 800c040:	701a      	strb	r2, [r3, #0]
 800c042:	b01c      	add	sp, #112	; 0x70
 800c044:	f85d eb04 	ldr.w	lr, [sp], #4
 800c048:	b003      	add	sp, #12
 800c04a:	4770      	bx	lr
 800c04c:	20000034 	.word	0x20000034
 800c050:	ffff0208 	.word	0xffff0208

0800c054 <__malloc_lock>:
 800c054:	4801      	ldr	r0, [pc, #4]	; (800c05c <__malloc_lock+0x8>)
 800c056:	f000 baf9 	b.w	800c64c <__retarget_lock_acquire_recursive>
 800c05a:	bf00      	nop
 800c05c:	20000e34 	.word	0x20000e34

0800c060 <__malloc_unlock>:
 800c060:	4801      	ldr	r0, [pc, #4]	; (800c068 <__malloc_unlock+0x8>)
 800c062:	f000 baf4 	b.w	800c64e <__retarget_lock_release_recursive>
 800c066:	bf00      	nop
 800c068:	20000e34 	.word	0x20000e34

0800c06c <__ssputs_r>:
 800c06c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c070:	688e      	ldr	r6, [r1, #8]
 800c072:	429e      	cmp	r6, r3
 800c074:	4682      	mov	sl, r0
 800c076:	460c      	mov	r4, r1
 800c078:	4690      	mov	r8, r2
 800c07a:	461f      	mov	r7, r3
 800c07c:	d838      	bhi.n	800c0f0 <__ssputs_r+0x84>
 800c07e:	898a      	ldrh	r2, [r1, #12]
 800c080:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c084:	d032      	beq.n	800c0ec <__ssputs_r+0x80>
 800c086:	6825      	ldr	r5, [r4, #0]
 800c088:	6909      	ldr	r1, [r1, #16]
 800c08a:	eba5 0901 	sub.w	r9, r5, r1
 800c08e:	6965      	ldr	r5, [r4, #20]
 800c090:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c094:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c098:	3301      	adds	r3, #1
 800c09a:	444b      	add	r3, r9
 800c09c:	106d      	asrs	r5, r5, #1
 800c09e:	429d      	cmp	r5, r3
 800c0a0:	bf38      	it	cc
 800c0a2:	461d      	movcc	r5, r3
 800c0a4:	0553      	lsls	r3, r2, #21
 800c0a6:	d531      	bpl.n	800c10c <__ssputs_r+0xa0>
 800c0a8:	4629      	mov	r1, r5
 800c0aa:	f7ff ff49 	bl	800bf40 <_malloc_r>
 800c0ae:	4606      	mov	r6, r0
 800c0b0:	b950      	cbnz	r0, 800c0c8 <__ssputs_r+0x5c>
 800c0b2:	230c      	movs	r3, #12
 800c0b4:	f8ca 3000 	str.w	r3, [sl]
 800c0b8:	89a3      	ldrh	r3, [r4, #12]
 800c0ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c0be:	81a3      	strh	r3, [r4, #12]
 800c0c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c0c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c0c8:	6921      	ldr	r1, [r4, #16]
 800c0ca:	464a      	mov	r2, r9
 800c0cc:	f000 fac0 	bl	800c650 <memcpy>
 800c0d0:	89a3      	ldrh	r3, [r4, #12]
 800c0d2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c0d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c0da:	81a3      	strh	r3, [r4, #12]
 800c0dc:	6126      	str	r6, [r4, #16]
 800c0de:	6165      	str	r5, [r4, #20]
 800c0e0:	444e      	add	r6, r9
 800c0e2:	eba5 0509 	sub.w	r5, r5, r9
 800c0e6:	6026      	str	r6, [r4, #0]
 800c0e8:	60a5      	str	r5, [r4, #8]
 800c0ea:	463e      	mov	r6, r7
 800c0ec:	42be      	cmp	r6, r7
 800c0ee:	d900      	bls.n	800c0f2 <__ssputs_r+0x86>
 800c0f0:	463e      	mov	r6, r7
 800c0f2:	4632      	mov	r2, r6
 800c0f4:	6820      	ldr	r0, [r4, #0]
 800c0f6:	4641      	mov	r1, r8
 800c0f8:	f000 fab8 	bl	800c66c <memmove>
 800c0fc:	68a3      	ldr	r3, [r4, #8]
 800c0fe:	6822      	ldr	r2, [r4, #0]
 800c100:	1b9b      	subs	r3, r3, r6
 800c102:	4432      	add	r2, r6
 800c104:	60a3      	str	r3, [r4, #8]
 800c106:	6022      	str	r2, [r4, #0]
 800c108:	2000      	movs	r0, #0
 800c10a:	e7db      	b.n	800c0c4 <__ssputs_r+0x58>
 800c10c:	462a      	mov	r2, r5
 800c10e:	f000 fac7 	bl	800c6a0 <_realloc_r>
 800c112:	4606      	mov	r6, r0
 800c114:	2800      	cmp	r0, #0
 800c116:	d1e1      	bne.n	800c0dc <__ssputs_r+0x70>
 800c118:	6921      	ldr	r1, [r4, #16]
 800c11a:	4650      	mov	r0, sl
 800c11c:	f7ff fec0 	bl	800bea0 <_free_r>
 800c120:	e7c7      	b.n	800c0b2 <__ssputs_r+0x46>
	...

0800c124 <_svfiprintf_r>:
 800c124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c128:	4698      	mov	r8, r3
 800c12a:	898b      	ldrh	r3, [r1, #12]
 800c12c:	061b      	lsls	r3, r3, #24
 800c12e:	b09d      	sub	sp, #116	; 0x74
 800c130:	4607      	mov	r7, r0
 800c132:	460d      	mov	r5, r1
 800c134:	4614      	mov	r4, r2
 800c136:	d50e      	bpl.n	800c156 <_svfiprintf_r+0x32>
 800c138:	690b      	ldr	r3, [r1, #16]
 800c13a:	b963      	cbnz	r3, 800c156 <_svfiprintf_r+0x32>
 800c13c:	2140      	movs	r1, #64	; 0x40
 800c13e:	f7ff feff 	bl	800bf40 <_malloc_r>
 800c142:	6028      	str	r0, [r5, #0]
 800c144:	6128      	str	r0, [r5, #16]
 800c146:	b920      	cbnz	r0, 800c152 <_svfiprintf_r+0x2e>
 800c148:	230c      	movs	r3, #12
 800c14a:	603b      	str	r3, [r7, #0]
 800c14c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c150:	e0d1      	b.n	800c2f6 <_svfiprintf_r+0x1d2>
 800c152:	2340      	movs	r3, #64	; 0x40
 800c154:	616b      	str	r3, [r5, #20]
 800c156:	2300      	movs	r3, #0
 800c158:	9309      	str	r3, [sp, #36]	; 0x24
 800c15a:	2320      	movs	r3, #32
 800c15c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c160:	f8cd 800c 	str.w	r8, [sp, #12]
 800c164:	2330      	movs	r3, #48	; 0x30
 800c166:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c310 <_svfiprintf_r+0x1ec>
 800c16a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c16e:	f04f 0901 	mov.w	r9, #1
 800c172:	4623      	mov	r3, r4
 800c174:	469a      	mov	sl, r3
 800c176:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c17a:	b10a      	cbz	r2, 800c180 <_svfiprintf_r+0x5c>
 800c17c:	2a25      	cmp	r2, #37	; 0x25
 800c17e:	d1f9      	bne.n	800c174 <_svfiprintf_r+0x50>
 800c180:	ebba 0b04 	subs.w	fp, sl, r4
 800c184:	d00b      	beq.n	800c19e <_svfiprintf_r+0x7a>
 800c186:	465b      	mov	r3, fp
 800c188:	4622      	mov	r2, r4
 800c18a:	4629      	mov	r1, r5
 800c18c:	4638      	mov	r0, r7
 800c18e:	f7ff ff6d 	bl	800c06c <__ssputs_r>
 800c192:	3001      	adds	r0, #1
 800c194:	f000 80aa 	beq.w	800c2ec <_svfiprintf_r+0x1c8>
 800c198:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c19a:	445a      	add	r2, fp
 800c19c:	9209      	str	r2, [sp, #36]	; 0x24
 800c19e:	f89a 3000 	ldrb.w	r3, [sl]
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	f000 80a2 	beq.w	800c2ec <_svfiprintf_r+0x1c8>
 800c1a8:	2300      	movs	r3, #0
 800c1aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c1ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c1b2:	f10a 0a01 	add.w	sl, sl, #1
 800c1b6:	9304      	str	r3, [sp, #16]
 800c1b8:	9307      	str	r3, [sp, #28]
 800c1ba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c1be:	931a      	str	r3, [sp, #104]	; 0x68
 800c1c0:	4654      	mov	r4, sl
 800c1c2:	2205      	movs	r2, #5
 800c1c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c1c8:	4851      	ldr	r0, [pc, #324]	; (800c310 <_svfiprintf_r+0x1ec>)
 800c1ca:	f7f4 f801 	bl	80001d0 <memchr>
 800c1ce:	9a04      	ldr	r2, [sp, #16]
 800c1d0:	b9d8      	cbnz	r0, 800c20a <_svfiprintf_r+0xe6>
 800c1d2:	06d0      	lsls	r0, r2, #27
 800c1d4:	bf44      	itt	mi
 800c1d6:	2320      	movmi	r3, #32
 800c1d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c1dc:	0711      	lsls	r1, r2, #28
 800c1de:	bf44      	itt	mi
 800c1e0:	232b      	movmi	r3, #43	; 0x2b
 800c1e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c1e6:	f89a 3000 	ldrb.w	r3, [sl]
 800c1ea:	2b2a      	cmp	r3, #42	; 0x2a
 800c1ec:	d015      	beq.n	800c21a <_svfiprintf_r+0xf6>
 800c1ee:	9a07      	ldr	r2, [sp, #28]
 800c1f0:	4654      	mov	r4, sl
 800c1f2:	2000      	movs	r0, #0
 800c1f4:	f04f 0c0a 	mov.w	ip, #10
 800c1f8:	4621      	mov	r1, r4
 800c1fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c1fe:	3b30      	subs	r3, #48	; 0x30
 800c200:	2b09      	cmp	r3, #9
 800c202:	d94e      	bls.n	800c2a2 <_svfiprintf_r+0x17e>
 800c204:	b1b0      	cbz	r0, 800c234 <_svfiprintf_r+0x110>
 800c206:	9207      	str	r2, [sp, #28]
 800c208:	e014      	b.n	800c234 <_svfiprintf_r+0x110>
 800c20a:	eba0 0308 	sub.w	r3, r0, r8
 800c20e:	fa09 f303 	lsl.w	r3, r9, r3
 800c212:	4313      	orrs	r3, r2
 800c214:	9304      	str	r3, [sp, #16]
 800c216:	46a2      	mov	sl, r4
 800c218:	e7d2      	b.n	800c1c0 <_svfiprintf_r+0x9c>
 800c21a:	9b03      	ldr	r3, [sp, #12]
 800c21c:	1d19      	adds	r1, r3, #4
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	9103      	str	r1, [sp, #12]
 800c222:	2b00      	cmp	r3, #0
 800c224:	bfbb      	ittet	lt
 800c226:	425b      	neglt	r3, r3
 800c228:	f042 0202 	orrlt.w	r2, r2, #2
 800c22c:	9307      	strge	r3, [sp, #28]
 800c22e:	9307      	strlt	r3, [sp, #28]
 800c230:	bfb8      	it	lt
 800c232:	9204      	strlt	r2, [sp, #16]
 800c234:	7823      	ldrb	r3, [r4, #0]
 800c236:	2b2e      	cmp	r3, #46	; 0x2e
 800c238:	d10c      	bne.n	800c254 <_svfiprintf_r+0x130>
 800c23a:	7863      	ldrb	r3, [r4, #1]
 800c23c:	2b2a      	cmp	r3, #42	; 0x2a
 800c23e:	d135      	bne.n	800c2ac <_svfiprintf_r+0x188>
 800c240:	9b03      	ldr	r3, [sp, #12]
 800c242:	1d1a      	adds	r2, r3, #4
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	9203      	str	r2, [sp, #12]
 800c248:	2b00      	cmp	r3, #0
 800c24a:	bfb8      	it	lt
 800c24c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c250:	3402      	adds	r4, #2
 800c252:	9305      	str	r3, [sp, #20]
 800c254:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c320 <_svfiprintf_r+0x1fc>
 800c258:	7821      	ldrb	r1, [r4, #0]
 800c25a:	2203      	movs	r2, #3
 800c25c:	4650      	mov	r0, sl
 800c25e:	f7f3 ffb7 	bl	80001d0 <memchr>
 800c262:	b140      	cbz	r0, 800c276 <_svfiprintf_r+0x152>
 800c264:	2340      	movs	r3, #64	; 0x40
 800c266:	eba0 000a 	sub.w	r0, r0, sl
 800c26a:	fa03 f000 	lsl.w	r0, r3, r0
 800c26e:	9b04      	ldr	r3, [sp, #16]
 800c270:	4303      	orrs	r3, r0
 800c272:	3401      	adds	r4, #1
 800c274:	9304      	str	r3, [sp, #16]
 800c276:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c27a:	4826      	ldr	r0, [pc, #152]	; (800c314 <_svfiprintf_r+0x1f0>)
 800c27c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c280:	2206      	movs	r2, #6
 800c282:	f7f3 ffa5 	bl	80001d0 <memchr>
 800c286:	2800      	cmp	r0, #0
 800c288:	d038      	beq.n	800c2fc <_svfiprintf_r+0x1d8>
 800c28a:	4b23      	ldr	r3, [pc, #140]	; (800c318 <_svfiprintf_r+0x1f4>)
 800c28c:	bb1b      	cbnz	r3, 800c2d6 <_svfiprintf_r+0x1b2>
 800c28e:	9b03      	ldr	r3, [sp, #12]
 800c290:	3307      	adds	r3, #7
 800c292:	f023 0307 	bic.w	r3, r3, #7
 800c296:	3308      	adds	r3, #8
 800c298:	9303      	str	r3, [sp, #12]
 800c29a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c29c:	4433      	add	r3, r6
 800c29e:	9309      	str	r3, [sp, #36]	; 0x24
 800c2a0:	e767      	b.n	800c172 <_svfiprintf_r+0x4e>
 800c2a2:	fb0c 3202 	mla	r2, ip, r2, r3
 800c2a6:	460c      	mov	r4, r1
 800c2a8:	2001      	movs	r0, #1
 800c2aa:	e7a5      	b.n	800c1f8 <_svfiprintf_r+0xd4>
 800c2ac:	2300      	movs	r3, #0
 800c2ae:	3401      	adds	r4, #1
 800c2b0:	9305      	str	r3, [sp, #20]
 800c2b2:	4619      	mov	r1, r3
 800c2b4:	f04f 0c0a 	mov.w	ip, #10
 800c2b8:	4620      	mov	r0, r4
 800c2ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c2be:	3a30      	subs	r2, #48	; 0x30
 800c2c0:	2a09      	cmp	r2, #9
 800c2c2:	d903      	bls.n	800c2cc <_svfiprintf_r+0x1a8>
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d0c5      	beq.n	800c254 <_svfiprintf_r+0x130>
 800c2c8:	9105      	str	r1, [sp, #20]
 800c2ca:	e7c3      	b.n	800c254 <_svfiprintf_r+0x130>
 800c2cc:	fb0c 2101 	mla	r1, ip, r1, r2
 800c2d0:	4604      	mov	r4, r0
 800c2d2:	2301      	movs	r3, #1
 800c2d4:	e7f0      	b.n	800c2b8 <_svfiprintf_r+0x194>
 800c2d6:	ab03      	add	r3, sp, #12
 800c2d8:	9300      	str	r3, [sp, #0]
 800c2da:	462a      	mov	r2, r5
 800c2dc:	4b0f      	ldr	r3, [pc, #60]	; (800c31c <_svfiprintf_r+0x1f8>)
 800c2de:	a904      	add	r1, sp, #16
 800c2e0:	4638      	mov	r0, r7
 800c2e2:	f3af 8000 	nop.w
 800c2e6:	1c42      	adds	r2, r0, #1
 800c2e8:	4606      	mov	r6, r0
 800c2ea:	d1d6      	bne.n	800c29a <_svfiprintf_r+0x176>
 800c2ec:	89ab      	ldrh	r3, [r5, #12]
 800c2ee:	065b      	lsls	r3, r3, #25
 800c2f0:	f53f af2c 	bmi.w	800c14c <_svfiprintf_r+0x28>
 800c2f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c2f6:	b01d      	add	sp, #116	; 0x74
 800c2f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2fc:	ab03      	add	r3, sp, #12
 800c2fe:	9300      	str	r3, [sp, #0]
 800c300:	462a      	mov	r2, r5
 800c302:	4b06      	ldr	r3, [pc, #24]	; (800c31c <_svfiprintf_r+0x1f8>)
 800c304:	a904      	add	r1, sp, #16
 800c306:	4638      	mov	r0, r7
 800c308:	f000 f87a 	bl	800c400 <_printf_i>
 800c30c:	e7eb      	b.n	800c2e6 <_svfiprintf_r+0x1c2>
 800c30e:	bf00      	nop
 800c310:	0800cc9c 	.word	0x0800cc9c
 800c314:	0800cca6 	.word	0x0800cca6
 800c318:	00000000 	.word	0x00000000
 800c31c:	0800c06d 	.word	0x0800c06d
 800c320:	0800cca2 	.word	0x0800cca2

0800c324 <_printf_common>:
 800c324:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c328:	4616      	mov	r6, r2
 800c32a:	4699      	mov	r9, r3
 800c32c:	688a      	ldr	r2, [r1, #8]
 800c32e:	690b      	ldr	r3, [r1, #16]
 800c330:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c334:	4293      	cmp	r3, r2
 800c336:	bfb8      	it	lt
 800c338:	4613      	movlt	r3, r2
 800c33a:	6033      	str	r3, [r6, #0]
 800c33c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c340:	4607      	mov	r7, r0
 800c342:	460c      	mov	r4, r1
 800c344:	b10a      	cbz	r2, 800c34a <_printf_common+0x26>
 800c346:	3301      	adds	r3, #1
 800c348:	6033      	str	r3, [r6, #0]
 800c34a:	6823      	ldr	r3, [r4, #0]
 800c34c:	0699      	lsls	r1, r3, #26
 800c34e:	bf42      	ittt	mi
 800c350:	6833      	ldrmi	r3, [r6, #0]
 800c352:	3302      	addmi	r3, #2
 800c354:	6033      	strmi	r3, [r6, #0]
 800c356:	6825      	ldr	r5, [r4, #0]
 800c358:	f015 0506 	ands.w	r5, r5, #6
 800c35c:	d106      	bne.n	800c36c <_printf_common+0x48>
 800c35e:	f104 0a19 	add.w	sl, r4, #25
 800c362:	68e3      	ldr	r3, [r4, #12]
 800c364:	6832      	ldr	r2, [r6, #0]
 800c366:	1a9b      	subs	r3, r3, r2
 800c368:	42ab      	cmp	r3, r5
 800c36a:	dc26      	bgt.n	800c3ba <_printf_common+0x96>
 800c36c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c370:	1e13      	subs	r3, r2, #0
 800c372:	6822      	ldr	r2, [r4, #0]
 800c374:	bf18      	it	ne
 800c376:	2301      	movne	r3, #1
 800c378:	0692      	lsls	r2, r2, #26
 800c37a:	d42b      	bmi.n	800c3d4 <_printf_common+0xb0>
 800c37c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c380:	4649      	mov	r1, r9
 800c382:	4638      	mov	r0, r7
 800c384:	47c0      	blx	r8
 800c386:	3001      	adds	r0, #1
 800c388:	d01e      	beq.n	800c3c8 <_printf_common+0xa4>
 800c38a:	6823      	ldr	r3, [r4, #0]
 800c38c:	68e5      	ldr	r5, [r4, #12]
 800c38e:	6832      	ldr	r2, [r6, #0]
 800c390:	f003 0306 	and.w	r3, r3, #6
 800c394:	2b04      	cmp	r3, #4
 800c396:	bf08      	it	eq
 800c398:	1aad      	subeq	r5, r5, r2
 800c39a:	68a3      	ldr	r3, [r4, #8]
 800c39c:	6922      	ldr	r2, [r4, #16]
 800c39e:	bf0c      	ite	eq
 800c3a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c3a4:	2500      	movne	r5, #0
 800c3a6:	4293      	cmp	r3, r2
 800c3a8:	bfc4      	itt	gt
 800c3aa:	1a9b      	subgt	r3, r3, r2
 800c3ac:	18ed      	addgt	r5, r5, r3
 800c3ae:	2600      	movs	r6, #0
 800c3b0:	341a      	adds	r4, #26
 800c3b2:	42b5      	cmp	r5, r6
 800c3b4:	d11a      	bne.n	800c3ec <_printf_common+0xc8>
 800c3b6:	2000      	movs	r0, #0
 800c3b8:	e008      	b.n	800c3cc <_printf_common+0xa8>
 800c3ba:	2301      	movs	r3, #1
 800c3bc:	4652      	mov	r2, sl
 800c3be:	4649      	mov	r1, r9
 800c3c0:	4638      	mov	r0, r7
 800c3c2:	47c0      	blx	r8
 800c3c4:	3001      	adds	r0, #1
 800c3c6:	d103      	bne.n	800c3d0 <_printf_common+0xac>
 800c3c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c3cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c3d0:	3501      	adds	r5, #1
 800c3d2:	e7c6      	b.n	800c362 <_printf_common+0x3e>
 800c3d4:	18e1      	adds	r1, r4, r3
 800c3d6:	1c5a      	adds	r2, r3, #1
 800c3d8:	2030      	movs	r0, #48	; 0x30
 800c3da:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c3de:	4422      	add	r2, r4
 800c3e0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c3e4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c3e8:	3302      	adds	r3, #2
 800c3ea:	e7c7      	b.n	800c37c <_printf_common+0x58>
 800c3ec:	2301      	movs	r3, #1
 800c3ee:	4622      	mov	r2, r4
 800c3f0:	4649      	mov	r1, r9
 800c3f2:	4638      	mov	r0, r7
 800c3f4:	47c0      	blx	r8
 800c3f6:	3001      	adds	r0, #1
 800c3f8:	d0e6      	beq.n	800c3c8 <_printf_common+0xa4>
 800c3fa:	3601      	adds	r6, #1
 800c3fc:	e7d9      	b.n	800c3b2 <_printf_common+0x8e>
	...

0800c400 <_printf_i>:
 800c400:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c404:	460c      	mov	r4, r1
 800c406:	4691      	mov	r9, r2
 800c408:	7e27      	ldrb	r7, [r4, #24]
 800c40a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c40c:	2f78      	cmp	r7, #120	; 0x78
 800c40e:	4680      	mov	r8, r0
 800c410:	469a      	mov	sl, r3
 800c412:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c416:	d807      	bhi.n	800c428 <_printf_i+0x28>
 800c418:	2f62      	cmp	r7, #98	; 0x62
 800c41a:	d80a      	bhi.n	800c432 <_printf_i+0x32>
 800c41c:	2f00      	cmp	r7, #0
 800c41e:	f000 80d8 	beq.w	800c5d2 <_printf_i+0x1d2>
 800c422:	2f58      	cmp	r7, #88	; 0x58
 800c424:	f000 80a3 	beq.w	800c56e <_printf_i+0x16e>
 800c428:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c42c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c430:	e03a      	b.n	800c4a8 <_printf_i+0xa8>
 800c432:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c436:	2b15      	cmp	r3, #21
 800c438:	d8f6      	bhi.n	800c428 <_printf_i+0x28>
 800c43a:	a001      	add	r0, pc, #4	; (adr r0, 800c440 <_printf_i+0x40>)
 800c43c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800c440:	0800c499 	.word	0x0800c499
 800c444:	0800c4ad 	.word	0x0800c4ad
 800c448:	0800c429 	.word	0x0800c429
 800c44c:	0800c429 	.word	0x0800c429
 800c450:	0800c429 	.word	0x0800c429
 800c454:	0800c429 	.word	0x0800c429
 800c458:	0800c4ad 	.word	0x0800c4ad
 800c45c:	0800c429 	.word	0x0800c429
 800c460:	0800c429 	.word	0x0800c429
 800c464:	0800c429 	.word	0x0800c429
 800c468:	0800c429 	.word	0x0800c429
 800c46c:	0800c5b9 	.word	0x0800c5b9
 800c470:	0800c4dd 	.word	0x0800c4dd
 800c474:	0800c59b 	.word	0x0800c59b
 800c478:	0800c429 	.word	0x0800c429
 800c47c:	0800c429 	.word	0x0800c429
 800c480:	0800c5db 	.word	0x0800c5db
 800c484:	0800c429 	.word	0x0800c429
 800c488:	0800c4dd 	.word	0x0800c4dd
 800c48c:	0800c429 	.word	0x0800c429
 800c490:	0800c429 	.word	0x0800c429
 800c494:	0800c5a3 	.word	0x0800c5a3
 800c498:	680b      	ldr	r3, [r1, #0]
 800c49a:	1d1a      	adds	r2, r3, #4
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	600a      	str	r2, [r1, #0]
 800c4a0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c4a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c4a8:	2301      	movs	r3, #1
 800c4aa:	e0a3      	b.n	800c5f4 <_printf_i+0x1f4>
 800c4ac:	6825      	ldr	r5, [r4, #0]
 800c4ae:	6808      	ldr	r0, [r1, #0]
 800c4b0:	062e      	lsls	r6, r5, #24
 800c4b2:	f100 0304 	add.w	r3, r0, #4
 800c4b6:	d50a      	bpl.n	800c4ce <_printf_i+0xce>
 800c4b8:	6805      	ldr	r5, [r0, #0]
 800c4ba:	600b      	str	r3, [r1, #0]
 800c4bc:	2d00      	cmp	r5, #0
 800c4be:	da03      	bge.n	800c4c8 <_printf_i+0xc8>
 800c4c0:	232d      	movs	r3, #45	; 0x2d
 800c4c2:	426d      	negs	r5, r5
 800c4c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c4c8:	485e      	ldr	r0, [pc, #376]	; (800c644 <_printf_i+0x244>)
 800c4ca:	230a      	movs	r3, #10
 800c4cc:	e019      	b.n	800c502 <_printf_i+0x102>
 800c4ce:	f015 0f40 	tst.w	r5, #64	; 0x40
 800c4d2:	6805      	ldr	r5, [r0, #0]
 800c4d4:	600b      	str	r3, [r1, #0]
 800c4d6:	bf18      	it	ne
 800c4d8:	b22d      	sxthne	r5, r5
 800c4da:	e7ef      	b.n	800c4bc <_printf_i+0xbc>
 800c4dc:	680b      	ldr	r3, [r1, #0]
 800c4de:	6825      	ldr	r5, [r4, #0]
 800c4e0:	1d18      	adds	r0, r3, #4
 800c4e2:	6008      	str	r0, [r1, #0]
 800c4e4:	0628      	lsls	r0, r5, #24
 800c4e6:	d501      	bpl.n	800c4ec <_printf_i+0xec>
 800c4e8:	681d      	ldr	r5, [r3, #0]
 800c4ea:	e002      	b.n	800c4f2 <_printf_i+0xf2>
 800c4ec:	0669      	lsls	r1, r5, #25
 800c4ee:	d5fb      	bpl.n	800c4e8 <_printf_i+0xe8>
 800c4f0:	881d      	ldrh	r5, [r3, #0]
 800c4f2:	4854      	ldr	r0, [pc, #336]	; (800c644 <_printf_i+0x244>)
 800c4f4:	2f6f      	cmp	r7, #111	; 0x6f
 800c4f6:	bf0c      	ite	eq
 800c4f8:	2308      	moveq	r3, #8
 800c4fa:	230a      	movne	r3, #10
 800c4fc:	2100      	movs	r1, #0
 800c4fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c502:	6866      	ldr	r6, [r4, #4]
 800c504:	60a6      	str	r6, [r4, #8]
 800c506:	2e00      	cmp	r6, #0
 800c508:	bfa2      	ittt	ge
 800c50a:	6821      	ldrge	r1, [r4, #0]
 800c50c:	f021 0104 	bicge.w	r1, r1, #4
 800c510:	6021      	strge	r1, [r4, #0]
 800c512:	b90d      	cbnz	r5, 800c518 <_printf_i+0x118>
 800c514:	2e00      	cmp	r6, #0
 800c516:	d04d      	beq.n	800c5b4 <_printf_i+0x1b4>
 800c518:	4616      	mov	r6, r2
 800c51a:	fbb5 f1f3 	udiv	r1, r5, r3
 800c51e:	fb03 5711 	mls	r7, r3, r1, r5
 800c522:	5dc7      	ldrb	r7, [r0, r7]
 800c524:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c528:	462f      	mov	r7, r5
 800c52a:	42bb      	cmp	r3, r7
 800c52c:	460d      	mov	r5, r1
 800c52e:	d9f4      	bls.n	800c51a <_printf_i+0x11a>
 800c530:	2b08      	cmp	r3, #8
 800c532:	d10b      	bne.n	800c54c <_printf_i+0x14c>
 800c534:	6823      	ldr	r3, [r4, #0]
 800c536:	07df      	lsls	r7, r3, #31
 800c538:	d508      	bpl.n	800c54c <_printf_i+0x14c>
 800c53a:	6923      	ldr	r3, [r4, #16]
 800c53c:	6861      	ldr	r1, [r4, #4]
 800c53e:	4299      	cmp	r1, r3
 800c540:	bfde      	ittt	le
 800c542:	2330      	movle	r3, #48	; 0x30
 800c544:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c548:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800c54c:	1b92      	subs	r2, r2, r6
 800c54e:	6122      	str	r2, [r4, #16]
 800c550:	f8cd a000 	str.w	sl, [sp]
 800c554:	464b      	mov	r3, r9
 800c556:	aa03      	add	r2, sp, #12
 800c558:	4621      	mov	r1, r4
 800c55a:	4640      	mov	r0, r8
 800c55c:	f7ff fee2 	bl	800c324 <_printf_common>
 800c560:	3001      	adds	r0, #1
 800c562:	d14c      	bne.n	800c5fe <_printf_i+0x1fe>
 800c564:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c568:	b004      	add	sp, #16
 800c56a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c56e:	4835      	ldr	r0, [pc, #212]	; (800c644 <_printf_i+0x244>)
 800c570:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c574:	6823      	ldr	r3, [r4, #0]
 800c576:	680e      	ldr	r6, [r1, #0]
 800c578:	061f      	lsls	r7, r3, #24
 800c57a:	f856 5b04 	ldr.w	r5, [r6], #4
 800c57e:	600e      	str	r6, [r1, #0]
 800c580:	d514      	bpl.n	800c5ac <_printf_i+0x1ac>
 800c582:	07d9      	lsls	r1, r3, #31
 800c584:	bf44      	itt	mi
 800c586:	f043 0320 	orrmi.w	r3, r3, #32
 800c58a:	6023      	strmi	r3, [r4, #0]
 800c58c:	b91d      	cbnz	r5, 800c596 <_printf_i+0x196>
 800c58e:	6823      	ldr	r3, [r4, #0]
 800c590:	f023 0320 	bic.w	r3, r3, #32
 800c594:	6023      	str	r3, [r4, #0]
 800c596:	2310      	movs	r3, #16
 800c598:	e7b0      	b.n	800c4fc <_printf_i+0xfc>
 800c59a:	6823      	ldr	r3, [r4, #0]
 800c59c:	f043 0320 	orr.w	r3, r3, #32
 800c5a0:	6023      	str	r3, [r4, #0]
 800c5a2:	2378      	movs	r3, #120	; 0x78
 800c5a4:	4828      	ldr	r0, [pc, #160]	; (800c648 <_printf_i+0x248>)
 800c5a6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c5aa:	e7e3      	b.n	800c574 <_printf_i+0x174>
 800c5ac:	065e      	lsls	r6, r3, #25
 800c5ae:	bf48      	it	mi
 800c5b0:	b2ad      	uxthmi	r5, r5
 800c5b2:	e7e6      	b.n	800c582 <_printf_i+0x182>
 800c5b4:	4616      	mov	r6, r2
 800c5b6:	e7bb      	b.n	800c530 <_printf_i+0x130>
 800c5b8:	680b      	ldr	r3, [r1, #0]
 800c5ba:	6826      	ldr	r6, [r4, #0]
 800c5bc:	6960      	ldr	r0, [r4, #20]
 800c5be:	1d1d      	adds	r5, r3, #4
 800c5c0:	600d      	str	r5, [r1, #0]
 800c5c2:	0635      	lsls	r5, r6, #24
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	d501      	bpl.n	800c5cc <_printf_i+0x1cc>
 800c5c8:	6018      	str	r0, [r3, #0]
 800c5ca:	e002      	b.n	800c5d2 <_printf_i+0x1d2>
 800c5cc:	0671      	lsls	r1, r6, #25
 800c5ce:	d5fb      	bpl.n	800c5c8 <_printf_i+0x1c8>
 800c5d0:	8018      	strh	r0, [r3, #0]
 800c5d2:	2300      	movs	r3, #0
 800c5d4:	6123      	str	r3, [r4, #16]
 800c5d6:	4616      	mov	r6, r2
 800c5d8:	e7ba      	b.n	800c550 <_printf_i+0x150>
 800c5da:	680b      	ldr	r3, [r1, #0]
 800c5dc:	1d1a      	adds	r2, r3, #4
 800c5de:	600a      	str	r2, [r1, #0]
 800c5e0:	681e      	ldr	r6, [r3, #0]
 800c5e2:	6862      	ldr	r2, [r4, #4]
 800c5e4:	2100      	movs	r1, #0
 800c5e6:	4630      	mov	r0, r6
 800c5e8:	f7f3 fdf2 	bl	80001d0 <memchr>
 800c5ec:	b108      	cbz	r0, 800c5f2 <_printf_i+0x1f2>
 800c5ee:	1b80      	subs	r0, r0, r6
 800c5f0:	6060      	str	r0, [r4, #4]
 800c5f2:	6863      	ldr	r3, [r4, #4]
 800c5f4:	6123      	str	r3, [r4, #16]
 800c5f6:	2300      	movs	r3, #0
 800c5f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c5fc:	e7a8      	b.n	800c550 <_printf_i+0x150>
 800c5fe:	6923      	ldr	r3, [r4, #16]
 800c600:	4632      	mov	r2, r6
 800c602:	4649      	mov	r1, r9
 800c604:	4640      	mov	r0, r8
 800c606:	47d0      	blx	sl
 800c608:	3001      	adds	r0, #1
 800c60a:	d0ab      	beq.n	800c564 <_printf_i+0x164>
 800c60c:	6823      	ldr	r3, [r4, #0]
 800c60e:	079b      	lsls	r3, r3, #30
 800c610:	d413      	bmi.n	800c63a <_printf_i+0x23a>
 800c612:	68e0      	ldr	r0, [r4, #12]
 800c614:	9b03      	ldr	r3, [sp, #12]
 800c616:	4298      	cmp	r0, r3
 800c618:	bfb8      	it	lt
 800c61a:	4618      	movlt	r0, r3
 800c61c:	e7a4      	b.n	800c568 <_printf_i+0x168>
 800c61e:	2301      	movs	r3, #1
 800c620:	4632      	mov	r2, r6
 800c622:	4649      	mov	r1, r9
 800c624:	4640      	mov	r0, r8
 800c626:	47d0      	blx	sl
 800c628:	3001      	adds	r0, #1
 800c62a:	d09b      	beq.n	800c564 <_printf_i+0x164>
 800c62c:	3501      	adds	r5, #1
 800c62e:	68e3      	ldr	r3, [r4, #12]
 800c630:	9903      	ldr	r1, [sp, #12]
 800c632:	1a5b      	subs	r3, r3, r1
 800c634:	42ab      	cmp	r3, r5
 800c636:	dcf2      	bgt.n	800c61e <_printf_i+0x21e>
 800c638:	e7eb      	b.n	800c612 <_printf_i+0x212>
 800c63a:	2500      	movs	r5, #0
 800c63c:	f104 0619 	add.w	r6, r4, #25
 800c640:	e7f5      	b.n	800c62e <_printf_i+0x22e>
 800c642:	bf00      	nop
 800c644:	0800ccad 	.word	0x0800ccad
 800c648:	0800ccbe 	.word	0x0800ccbe

0800c64c <__retarget_lock_acquire_recursive>:
 800c64c:	4770      	bx	lr

0800c64e <__retarget_lock_release_recursive>:
 800c64e:	4770      	bx	lr

0800c650 <memcpy>:
 800c650:	440a      	add	r2, r1
 800c652:	4291      	cmp	r1, r2
 800c654:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800c658:	d100      	bne.n	800c65c <memcpy+0xc>
 800c65a:	4770      	bx	lr
 800c65c:	b510      	push	{r4, lr}
 800c65e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c662:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c666:	4291      	cmp	r1, r2
 800c668:	d1f9      	bne.n	800c65e <memcpy+0xe>
 800c66a:	bd10      	pop	{r4, pc}

0800c66c <memmove>:
 800c66c:	4288      	cmp	r0, r1
 800c66e:	b510      	push	{r4, lr}
 800c670:	eb01 0402 	add.w	r4, r1, r2
 800c674:	d902      	bls.n	800c67c <memmove+0x10>
 800c676:	4284      	cmp	r4, r0
 800c678:	4623      	mov	r3, r4
 800c67a:	d807      	bhi.n	800c68c <memmove+0x20>
 800c67c:	1e43      	subs	r3, r0, #1
 800c67e:	42a1      	cmp	r1, r4
 800c680:	d008      	beq.n	800c694 <memmove+0x28>
 800c682:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c686:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c68a:	e7f8      	b.n	800c67e <memmove+0x12>
 800c68c:	4402      	add	r2, r0
 800c68e:	4601      	mov	r1, r0
 800c690:	428a      	cmp	r2, r1
 800c692:	d100      	bne.n	800c696 <memmove+0x2a>
 800c694:	bd10      	pop	{r4, pc}
 800c696:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c69a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c69e:	e7f7      	b.n	800c690 <memmove+0x24>

0800c6a0 <_realloc_r>:
 800c6a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6a2:	4607      	mov	r7, r0
 800c6a4:	4614      	mov	r4, r2
 800c6a6:	460e      	mov	r6, r1
 800c6a8:	b921      	cbnz	r1, 800c6b4 <_realloc_r+0x14>
 800c6aa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c6ae:	4611      	mov	r1, r2
 800c6b0:	f7ff bc46 	b.w	800bf40 <_malloc_r>
 800c6b4:	b922      	cbnz	r2, 800c6c0 <_realloc_r+0x20>
 800c6b6:	f7ff fbf3 	bl	800bea0 <_free_r>
 800c6ba:	4625      	mov	r5, r4
 800c6bc:	4628      	mov	r0, r5
 800c6be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c6c0:	f000 f814 	bl	800c6ec <_malloc_usable_size_r>
 800c6c4:	42a0      	cmp	r0, r4
 800c6c6:	d20f      	bcs.n	800c6e8 <_realloc_r+0x48>
 800c6c8:	4621      	mov	r1, r4
 800c6ca:	4638      	mov	r0, r7
 800c6cc:	f7ff fc38 	bl	800bf40 <_malloc_r>
 800c6d0:	4605      	mov	r5, r0
 800c6d2:	2800      	cmp	r0, #0
 800c6d4:	d0f2      	beq.n	800c6bc <_realloc_r+0x1c>
 800c6d6:	4631      	mov	r1, r6
 800c6d8:	4622      	mov	r2, r4
 800c6da:	f7ff ffb9 	bl	800c650 <memcpy>
 800c6de:	4631      	mov	r1, r6
 800c6e0:	4638      	mov	r0, r7
 800c6e2:	f7ff fbdd 	bl	800bea0 <_free_r>
 800c6e6:	e7e9      	b.n	800c6bc <_realloc_r+0x1c>
 800c6e8:	4635      	mov	r5, r6
 800c6ea:	e7e7      	b.n	800c6bc <_realloc_r+0x1c>

0800c6ec <_malloc_usable_size_r>:
 800c6ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c6f0:	1f18      	subs	r0, r3, #4
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	bfbc      	itt	lt
 800c6f6:	580b      	ldrlt	r3, [r1, r0]
 800c6f8:	18c0      	addlt	r0, r0, r3
 800c6fa:	4770      	bx	lr
 800c6fc:	0000      	movs	r0, r0
	...

0800c700 <log2>:
 800c700:	b508      	push	{r3, lr}
 800c702:	f000 f811 	bl	800c728 <log>
 800c706:	a306      	add	r3, pc, #24	; (adr r3, 800c720 <log2+0x20>)
 800c708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c70c:	ec51 0b10 	vmov	r0, r1, d0
 800c710:	f7f4 f894 	bl	800083c <__aeabi_ddiv>
 800c714:	ec41 0b10 	vmov	d0, r0, r1
 800c718:	bd08      	pop	{r3, pc}
 800c71a:	bf00      	nop
 800c71c:	f3af 8000 	nop.w
 800c720:	fefa39ef 	.word	0xfefa39ef
 800c724:	3fe62e42 	.word	0x3fe62e42

0800c728 <log>:
 800c728:	b538      	push	{r3, r4, r5, lr}
 800c72a:	ed2d 8b02 	vpush	{d8}
 800c72e:	ec55 4b10 	vmov	r4, r5, d0
 800c732:	f000 f841 	bl	800c7b8 <__ieee754_log>
 800c736:	4b1e      	ldr	r3, [pc, #120]	; (800c7b0 <log+0x88>)
 800c738:	eeb0 8a40 	vmov.f32	s16, s0
 800c73c:	eef0 8a60 	vmov.f32	s17, s1
 800c740:	f993 3000 	ldrsb.w	r3, [r3]
 800c744:	3301      	adds	r3, #1
 800c746:	d01a      	beq.n	800c77e <log+0x56>
 800c748:	4622      	mov	r2, r4
 800c74a:	462b      	mov	r3, r5
 800c74c:	4620      	mov	r0, r4
 800c74e:	4629      	mov	r1, r5
 800c750:	f7f4 f9e4 	bl	8000b1c <__aeabi_dcmpun>
 800c754:	b998      	cbnz	r0, 800c77e <log+0x56>
 800c756:	2200      	movs	r2, #0
 800c758:	2300      	movs	r3, #0
 800c75a:	4620      	mov	r0, r4
 800c75c:	4629      	mov	r1, r5
 800c75e:	f7f4 f9d3 	bl	8000b08 <__aeabi_dcmpgt>
 800c762:	b960      	cbnz	r0, 800c77e <log+0x56>
 800c764:	2200      	movs	r2, #0
 800c766:	2300      	movs	r3, #0
 800c768:	4620      	mov	r0, r4
 800c76a:	4629      	mov	r1, r5
 800c76c:	f7f4 f9a4 	bl	8000ab8 <__aeabi_dcmpeq>
 800c770:	b160      	cbz	r0, 800c78c <log+0x64>
 800c772:	f7ff fb53 	bl	800be1c <__errno>
 800c776:	ed9f 8b0c 	vldr	d8, [pc, #48]	; 800c7a8 <log+0x80>
 800c77a:	2322      	movs	r3, #34	; 0x22
 800c77c:	6003      	str	r3, [r0, #0]
 800c77e:	eeb0 0a48 	vmov.f32	s0, s16
 800c782:	eef0 0a68 	vmov.f32	s1, s17
 800c786:	ecbd 8b02 	vpop	{d8}
 800c78a:	bd38      	pop	{r3, r4, r5, pc}
 800c78c:	f7ff fb46 	bl	800be1c <__errno>
 800c790:	ecbd 8b02 	vpop	{d8}
 800c794:	2321      	movs	r3, #33	; 0x21
 800c796:	6003      	str	r3, [r0, #0]
 800c798:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c79c:	4805      	ldr	r0, [pc, #20]	; (800c7b4 <log+0x8c>)
 800c79e:	f000 b9c7 	b.w	800cb30 <nan>
 800c7a2:	bf00      	nop
 800c7a4:	f3af 8000 	nop.w
 800c7a8:	00000000 	.word	0x00000000
 800c7ac:	fff00000 	.word	0xfff00000
 800c7b0:	20000098 	.word	0x20000098
 800c7b4:	0800cca1 	.word	0x0800cca1

0800c7b8 <__ieee754_log>:
 800c7b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7bc:	ec51 0b10 	vmov	r0, r1, d0
 800c7c0:	ed2d 8b04 	vpush	{d8-d9}
 800c7c4:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800c7c8:	b083      	sub	sp, #12
 800c7ca:	460d      	mov	r5, r1
 800c7cc:	da29      	bge.n	800c822 <__ieee754_log+0x6a>
 800c7ce:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c7d2:	4303      	orrs	r3, r0
 800c7d4:	ee10 2a10 	vmov	r2, s0
 800c7d8:	d10c      	bne.n	800c7f4 <__ieee754_log+0x3c>
 800c7da:	49cf      	ldr	r1, [pc, #828]	; (800cb18 <__ieee754_log+0x360>)
 800c7dc:	2200      	movs	r2, #0
 800c7de:	2300      	movs	r3, #0
 800c7e0:	2000      	movs	r0, #0
 800c7e2:	f7f4 f82b 	bl	800083c <__aeabi_ddiv>
 800c7e6:	ec41 0b10 	vmov	d0, r0, r1
 800c7ea:	b003      	add	sp, #12
 800c7ec:	ecbd 8b04 	vpop	{d8-d9}
 800c7f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7f4:	2900      	cmp	r1, #0
 800c7f6:	da05      	bge.n	800c804 <__ieee754_log+0x4c>
 800c7f8:	460b      	mov	r3, r1
 800c7fa:	f7f3 fd3d 	bl	8000278 <__aeabi_dsub>
 800c7fe:	2200      	movs	r2, #0
 800c800:	2300      	movs	r3, #0
 800c802:	e7ee      	b.n	800c7e2 <__ieee754_log+0x2a>
 800c804:	4bc5      	ldr	r3, [pc, #788]	; (800cb1c <__ieee754_log+0x364>)
 800c806:	2200      	movs	r2, #0
 800c808:	f7f3 feee 	bl	80005e8 <__aeabi_dmul>
 800c80c:	f06f 0335 	mvn.w	r3, #53	; 0x35
 800c810:	460d      	mov	r5, r1
 800c812:	4ac3      	ldr	r2, [pc, #780]	; (800cb20 <__ieee754_log+0x368>)
 800c814:	4295      	cmp	r5, r2
 800c816:	dd06      	ble.n	800c826 <__ieee754_log+0x6e>
 800c818:	4602      	mov	r2, r0
 800c81a:	460b      	mov	r3, r1
 800c81c:	f7f3 fd2e 	bl	800027c <__adddf3>
 800c820:	e7e1      	b.n	800c7e6 <__ieee754_log+0x2e>
 800c822:	2300      	movs	r3, #0
 800c824:	e7f5      	b.n	800c812 <__ieee754_log+0x5a>
 800c826:	152c      	asrs	r4, r5, #20
 800c828:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800c82c:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800c830:	441c      	add	r4, r3
 800c832:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 800c836:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 800c83a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c83e:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 800c842:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 800c846:	ea42 0105 	orr.w	r1, r2, r5
 800c84a:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800c84e:	2200      	movs	r2, #0
 800c850:	4bb4      	ldr	r3, [pc, #720]	; (800cb24 <__ieee754_log+0x36c>)
 800c852:	f7f3 fd11 	bl	8000278 <__aeabi_dsub>
 800c856:	1cab      	adds	r3, r5, #2
 800c858:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c85c:	2b02      	cmp	r3, #2
 800c85e:	4682      	mov	sl, r0
 800c860:	468b      	mov	fp, r1
 800c862:	f04f 0200 	mov.w	r2, #0
 800c866:	dc53      	bgt.n	800c910 <__ieee754_log+0x158>
 800c868:	2300      	movs	r3, #0
 800c86a:	f7f4 f925 	bl	8000ab8 <__aeabi_dcmpeq>
 800c86e:	b1d0      	cbz	r0, 800c8a6 <__ieee754_log+0xee>
 800c870:	2c00      	cmp	r4, #0
 800c872:	f000 8122 	beq.w	800caba <__ieee754_log+0x302>
 800c876:	4620      	mov	r0, r4
 800c878:	f7f3 fe4c 	bl	8000514 <__aeabi_i2d>
 800c87c:	a390      	add	r3, pc, #576	; (adr r3, 800cac0 <__ieee754_log+0x308>)
 800c87e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c882:	4606      	mov	r6, r0
 800c884:	460f      	mov	r7, r1
 800c886:	f7f3 feaf 	bl	80005e8 <__aeabi_dmul>
 800c88a:	a38f      	add	r3, pc, #572	; (adr r3, 800cac8 <__ieee754_log+0x310>)
 800c88c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c890:	4604      	mov	r4, r0
 800c892:	460d      	mov	r5, r1
 800c894:	4630      	mov	r0, r6
 800c896:	4639      	mov	r1, r7
 800c898:	f7f3 fea6 	bl	80005e8 <__aeabi_dmul>
 800c89c:	4602      	mov	r2, r0
 800c89e:	460b      	mov	r3, r1
 800c8a0:	4620      	mov	r0, r4
 800c8a2:	4629      	mov	r1, r5
 800c8a4:	e7ba      	b.n	800c81c <__ieee754_log+0x64>
 800c8a6:	a38a      	add	r3, pc, #552	; (adr r3, 800cad0 <__ieee754_log+0x318>)
 800c8a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8ac:	4650      	mov	r0, sl
 800c8ae:	4659      	mov	r1, fp
 800c8b0:	f7f3 fe9a 	bl	80005e8 <__aeabi_dmul>
 800c8b4:	4602      	mov	r2, r0
 800c8b6:	460b      	mov	r3, r1
 800c8b8:	2000      	movs	r0, #0
 800c8ba:	499b      	ldr	r1, [pc, #620]	; (800cb28 <__ieee754_log+0x370>)
 800c8bc:	f7f3 fcdc 	bl	8000278 <__aeabi_dsub>
 800c8c0:	4652      	mov	r2, sl
 800c8c2:	4606      	mov	r6, r0
 800c8c4:	460f      	mov	r7, r1
 800c8c6:	465b      	mov	r3, fp
 800c8c8:	4650      	mov	r0, sl
 800c8ca:	4659      	mov	r1, fp
 800c8cc:	f7f3 fe8c 	bl	80005e8 <__aeabi_dmul>
 800c8d0:	4602      	mov	r2, r0
 800c8d2:	460b      	mov	r3, r1
 800c8d4:	4630      	mov	r0, r6
 800c8d6:	4639      	mov	r1, r7
 800c8d8:	f7f3 fe86 	bl	80005e8 <__aeabi_dmul>
 800c8dc:	4606      	mov	r6, r0
 800c8de:	460f      	mov	r7, r1
 800c8e0:	b914      	cbnz	r4, 800c8e8 <__ieee754_log+0x130>
 800c8e2:	4632      	mov	r2, r6
 800c8e4:	463b      	mov	r3, r7
 800c8e6:	e0a2      	b.n	800ca2e <__ieee754_log+0x276>
 800c8e8:	4620      	mov	r0, r4
 800c8ea:	f7f3 fe13 	bl	8000514 <__aeabi_i2d>
 800c8ee:	a374      	add	r3, pc, #464	; (adr r3, 800cac0 <__ieee754_log+0x308>)
 800c8f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8f4:	4680      	mov	r8, r0
 800c8f6:	4689      	mov	r9, r1
 800c8f8:	f7f3 fe76 	bl	80005e8 <__aeabi_dmul>
 800c8fc:	a372      	add	r3, pc, #456	; (adr r3, 800cac8 <__ieee754_log+0x310>)
 800c8fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c902:	4604      	mov	r4, r0
 800c904:	460d      	mov	r5, r1
 800c906:	4640      	mov	r0, r8
 800c908:	4649      	mov	r1, r9
 800c90a:	f7f3 fe6d 	bl	80005e8 <__aeabi_dmul>
 800c90e:	e0a7      	b.n	800ca60 <__ieee754_log+0x2a8>
 800c910:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c914:	f7f3 fcb2 	bl	800027c <__adddf3>
 800c918:	4602      	mov	r2, r0
 800c91a:	460b      	mov	r3, r1
 800c91c:	4650      	mov	r0, sl
 800c91e:	4659      	mov	r1, fp
 800c920:	f7f3 ff8c 	bl	800083c <__aeabi_ddiv>
 800c924:	ec41 0b18 	vmov	d8, r0, r1
 800c928:	4620      	mov	r0, r4
 800c92a:	f7f3 fdf3 	bl	8000514 <__aeabi_i2d>
 800c92e:	ec53 2b18 	vmov	r2, r3, d8
 800c932:	ec41 0b19 	vmov	d9, r0, r1
 800c936:	ec51 0b18 	vmov	r0, r1, d8
 800c93a:	f7f3 fe55 	bl	80005e8 <__aeabi_dmul>
 800c93e:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 800c942:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 800c946:	9301      	str	r3, [sp, #4]
 800c948:	4602      	mov	r2, r0
 800c94a:	460b      	mov	r3, r1
 800c94c:	4680      	mov	r8, r0
 800c94e:	4689      	mov	r9, r1
 800c950:	f7f3 fe4a 	bl	80005e8 <__aeabi_dmul>
 800c954:	a360      	add	r3, pc, #384	; (adr r3, 800cad8 <__ieee754_log+0x320>)
 800c956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c95a:	4606      	mov	r6, r0
 800c95c:	460f      	mov	r7, r1
 800c95e:	f7f3 fe43 	bl	80005e8 <__aeabi_dmul>
 800c962:	a35f      	add	r3, pc, #380	; (adr r3, 800cae0 <__ieee754_log+0x328>)
 800c964:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c968:	f7f3 fc88 	bl	800027c <__adddf3>
 800c96c:	4632      	mov	r2, r6
 800c96e:	463b      	mov	r3, r7
 800c970:	f7f3 fe3a 	bl	80005e8 <__aeabi_dmul>
 800c974:	a35c      	add	r3, pc, #368	; (adr r3, 800cae8 <__ieee754_log+0x330>)
 800c976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c97a:	f7f3 fc7f 	bl	800027c <__adddf3>
 800c97e:	4632      	mov	r2, r6
 800c980:	463b      	mov	r3, r7
 800c982:	f7f3 fe31 	bl	80005e8 <__aeabi_dmul>
 800c986:	a35a      	add	r3, pc, #360	; (adr r3, 800caf0 <__ieee754_log+0x338>)
 800c988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c98c:	f7f3 fc76 	bl	800027c <__adddf3>
 800c990:	4642      	mov	r2, r8
 800c992:	464b      	mov	r3, r9
 800c994:	f7f3 fe28 	bl	80005e8 <__aeabi_dmul>
 800c998:	a357      	add	r3, pc, #348	; (adr r3, 800caf8 <__ieee754_log+0x340>)
 800c99a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c99e:	4680      	mov	r8, r0
 800c9a0:	4689      	mov	r9, r1
 800c9a2:	4630      	mov	r0, r6
 800c9a4:	4639      	mov	r1, r7
 800c9a6:	f7f3 fe1f 	bl	80005e8 <__aeabi_dmul>
 800c9aa:	a355      	add	r3, pc, #340	; (adr r3, 800cb00 <__ieee754_log+0x348>)
 800c9ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9b0:	f7f3 fc64 	bl	800027c <__adddf3>
 800c9b4:	4632      	mov	r2, r6
 800c9b6:	463b      	mov	r3, r7
 800c9b8:	f7f3 fe16 	bl	80005e8 <__aeabi_dmul>
 800c9bc:	a352      	add	r3, pc, #328	; (adr r3, 800cb08 <__ieee754_log+0x350>)
 800c9be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9c2:	f7f3 fc5b 	bl	800027c <__adddf3>
 800c9c6:	4632      	mov	r2, r6
 800c9c8:	463b      	mov	r3, r7
 800c9ca:	f7f3 fe0d 	bl	80005e8 <__aeabi_dmul>
 800c9ce:	460b      	mov	r3, r1
 800c9d0:	4602      	mov	r2, r0
 800c9d2:	4649      	mov	r1, r9
 800c9d4:	4640      	mov	r0, r8
 800c9d6:	f7f3 fc51 	bl	800027c <__adddf3>
 800c9da:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800c9de:	9b01      	ldr	r3, [sp, #4]
 800c9e0:	3551      	adds	r5, #81	; 0x51
 800c9e2:	431d      	orrs	r5, r3
 800c9e4:	2d00      	cmp	r5, #0
 800c9e6:	4680      	mov	r8, r0
 800c9e8:	4689      	mov	r9, r1
 800c9ea:	dd48      	ble.n	800ca7e <__ieee754_log+0x2c6>
 800c9ec:	4b4e      	ldr	r3, [pc, #312]	; (800cb28 <__ieee754_log+0x370>)
 800c9ee:	2200      	movs	r2, #0
 800c9f0:	4650      	mov	r0, sl
 800c9f2:	4659      	mov	r1, fp
 800c9f4:	f7f3 fdf8 	bl	80005e8 <__aeabi_dmul>
 800c9f8:	4652      	mov	r2, sl
 800c9fa:	465b      	mov	r3, fp
 800c9fc:	f7f3 fdf4 	bl	80005e8 <__aeabi_dmul>
 800ca00:	4602      	mov	r2, r0
 800ca02:	460b      	mov	r3, r1
 800ca04:	4606      	mov	r6, r0
 800ca06:	460f      	mov	r7, r1
 800ca08:	4640      	mov	r0, r8
 800ca0a:	4649      	mov	r1, r9
 800ca0c:	f7f3 fc36 	bl	800027c <__adddf3>
 800ca10:	ec53 2b18 	vmov	r2, r3, d8
 800ca14:	f7f3 fde8 	bl	80005e8 <__aeabi_dmul>
 800ca18:	4680      	mov	r8, r0
 800ca1a:	4689      	mov	r9, r1
 800ca1c:	b964      	cbnz	r4, 800ca38 <__ieee754_log+0x280>
 800ca1e:	4602      	mov	r2, r0
 800ca20:	460b      	mov	r3, r1
 800ca22:	4630      	mov	r0, r6
 800ca24:	4639      	mov	r1, r7
 800ca26:	f7f3 fc27 	bl	8000278 <__aeabi_dsub>
 800ca2a:	4602      	mov	r2, r0
 800ca2c:	460b      	mov	r3, r1
 800ca2e:	4650      	mov	r0, sl
 800ca30:	4659      	mov	r1, fp
 800ca32:	f7f3 fc21 	bl	8000278 <__aeabi_dsub>
 800ca36:	e6d6      	b.n	800c7e6 <__ieee754_log+0x2e>
 800ca38:	a321      	add	r3, pc, #132	; (adr r3, 800cac0 <__ieee754_log+0x308>)
 800ca3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca3e:	ec51 0b19 	vmov	r0, r1, d9
 800ca42:	f7f3 fdd1 	bl	80005e8 <__aeabi_dmul>
 800ca46:	a320      	add	r3, pc, #128	; (adr r3, 800cac8 <__ieee754_log+0x310>)
 800ca48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca4c:	4604      	mov	r4, r0
 800ca4e:	460d      	mov	r5, r1
 800ca50:	ec51 0b19 	vmov	r0, r1, d9
 800ca54:	f7f3 fdc8 	bl	80005e8 <__aeabi_dmul>
 800ca58:	4642      	mov	r2, r8
 800ca5a:	464b      	mov	r3, r9
 800ca5c:	f7f3 fc0e 	bl	800027c <__adddf3>
 800ca60:	4602      	mov	r2, r0
 800ca62:	460b      	mov	r3, r1
 800ca64:	4630      	mov	r0, r6
 800ca66:	4639      	mov	r1, r7
 800ca68:	f7f3 fc06 	bl	8000278 <__aeabi_dsub>
 800ca6c:	4652      	mov	r2, sl
 800ca6e:	465b      	mov	r3, fp
 800ca70:	f7f3 fc02 	bl	8000278 <__aeabi_dsub>
 800ca74:	4602      	mov	r2, r0
 800ca76:	460b      	mov	r3, r1
 800ca78:	4620      	mov	r0, r4
 800ca7a:	4629      	mov	r1, r5
 800ca7c:	e7d9      	b.n	800ca32 <__ieee754_log+0x27a>
 800ca7e:	4602      	mov	r2, r0
 800ca80:	460b      	mov	r3, r1
 800ca82:	4650      	mov	r0, sl
 800ca84:	4659      	mov	r1, fp
 800ca86:	f7f3 fbf7 	bl	8000278 <__aeabi_dsub>
 800ca8a:	ec53 2b18 	vmov	r2, r3, d8
 800ca8e:	f7f3 fdab 	bl	80005e8 <__aeabi_dmul>
 800ca92:	4606      	mov	r6, r0
 800ca94:	460f      	mov	r7, r1
 800ca96:	2c00      	cmp	r4, #0
 800ca98:	f43f af23 	beq.w	800c8e2 <__ieee754_log+0x12a>
 800ca9c:	a308      	add	r3, pc, #32	; (adr r3, 800cac0 <__ieee754_log+0x308>)
 800ca9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caa2:	ec51 0b19 	vmov	r0, r1, d9
 800caa6:	f7f3 fd9f 	bl	80005e8 <__aeabi_dmul>
 800caaa:	a307      	add	r3, pc, #28	; (adr r3, 800cac8 <__ieee754_log+0x310>)
 800caac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cab0:	4604      	mov	r4, r0
 800cab2:	460d      	mov	r5, r1
 800cab4:	ec51 0b19 	vmov	r0, r1, d9
 800cab8:	e727      	b.n	800c90a <__ieee754_log+0x152>
 800caba:	ed9f 0b15 	vldr	d0, [pc, #84]	; 800cb10 <__ieee754_log+0x358>
 800cabe:	e694      	b.n	800c7ea <__ieee754_log+0x32>
 800cac0:	fee00000 	.word	0xfee00000
 800cac4:	3fe62e42 	.word	0x3fe62e42
 800cac8:	35793c76 	.word	0x35793c76
 800cacc:	3dea39ef 	.word	0x3dea39ef
 800cad0:	55555555 	.word	0x55555555
 800cad4:	3fd55555 	.word	0x3fd55555
 800cad8:	df3e5244 	.word	0xdf3e5244
 800cadc:	3fc2f112 	.word	0x3fc2f112
 800cae0:	96cb03de 	.word	0x96cb03de
 800cae4:	3fc74664 	.word	0x3fc74664
 800cae8:	94229359 	.word	0x94229359
 800caec:	3fd24924 	.word	0x3fd24924
 800caf0:	55555593 	.word	0x55555593
 800caf4:	3fe55555 	.word	0x3fe55555
 800caf8:	d078c69f 	.word	0xd078c69f
 800cafc:	3fc39a09 	.word	0x3fc39a09
 800cb00:	1d8e78af 	.word	0x1d8e78af
 800cb04:	3fcc71c5 	.word	0x3fcc71c5
 800cb08:	9997fa04 	.word	0x9997fa04
 800cb0c:	3fd99999 	.word	0x3fd99999
	...
 800cb18:	c3500000 	.word	0xc3500000
 800cb1c:	43500000 	.word	0x43500000
 800cb20:	7fefffff 	.word	0x7fefffff
 800cb24:	3ff00000 	.word	0x3ff00000
 800cb28:	3fe00000 	.word	0x3fe00000
 800cb2c:	00000000 	.word	0x00000000

0800cb30 <nan>:
 800cb30:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800cb38 <nan+0x8>
 800cb34:	4770      	bx	lr
 800cb36:	bf00      	nop
 800cb38:	00000000 	.word	0x00000000
 800cb3c:	7ff80000 	.word	0x7ff80000

0800cb40 <_init>:
 800cb40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb42:	bf00      	nop
 800cb44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cb46:	bc08      	pop	{r3}
 800cb48:	469e      	mov	lr, r3
 800cb4a:	4770      	bx	lr

0800cb4c <_fini>:
 800cb4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb4e:	bf00      	nop
 800cb50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cb52:	bc08      	pop	{r3}
 800cb54:	469e      	mov	lr, r3
 800cb56:	4770      	bx	lr
